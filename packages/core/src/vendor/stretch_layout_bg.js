import { __wbindgen_object_drop_ref } from './stretch_layout.js';
import { __wbindgen_string_new } from './stretch_layout.js';
import { __wbindgen_object_clone_ref } from './stretch_layout.js';
import { __wbindgen_number_new } from './stretch_layout.js';
import { __wbg_call_d86117a976521458 } from './stretch_layout.js';
import { __wbg_get_003e1b80a63de7c5 } from './stretch_layout.js';
import { __wbg_has_4c6784338d6c97e4 } from './stretch_layout.js';
import { __wbindgen_number_get } from './stretch_layout.js';
import { __wbindgen_string_get } from './stretch_layout.js';
import { __wbindgen_throw } from './stretch_layout.js';


  var scratchBuffer = new ArrayBuffer(8);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function legalimport$wasm2js_scratch_store_i64(low, high) {
    i32ScratchView[0] = low;
    i32ScratchView[1] = high;
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[0];
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[0] = value;
  }
      
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
function asmFunc(global, env, buffer) {
 var HEAP8 = new global.Int8Array(buffer);
 var HEAP16 = new global.Int16Array(buffer);
 var HEAP32 = new global.Int32Array(buffer);
 var HEAPU8 = new global.Uint8Array(buffer);
 var HEAPU16 = new global.Uint16Array(buffer);
 var HEAPU32 = new global.Uint32Array(buffer);
 var HEAPF32 = new global.Float32Array(buffer);
 var HEAPF64 = new global.Float64Array(buffer);
 var Math_imul = global.Math.imul;
 var Math_fround = global.Math.fround;
 var Math_abs = global.Math.abs;
 var Math_clz32 = global.Math.clz32;
 var Math_min = global.Math.min;
 var Math_max = global.Math.max;
 var Math_floor = global.Math.floor;
 var Math_ceil = global.Math.ceil;
 var Math_sqrt = global.Math.sqrt;
 var abort = env.abort;
 var nan = global.NaN;
 var infinity = global.Infinity;
 var __wbindgen_object_drop_ref = env.__wbindgen_object_drop_ref;
 var __wbindgen_string_new = env.__wbindgen_string_new;
 var __wbindgen_object_clone_ref = env.__wbindgen_object_clone_ref;
 var __wbindgen_number_new = env.__wbindgen_number_new;
 var __wbg_call_d86117a976521458 = env.__wbg_call_d86117a976521458;
 var __wbg_get_003e1b80a63de7c5 = env.__wbg_get_003e1b80a63de7c5;
 var __wbg_has_4c6784338d6c97e4 = env.__wbg_has_4c6784338d6c97e4;
 var __wbindgen_number_get = env.__wbindgen_number_get;
 var __wbindgen_string_get = env.__wbindgen_string_get;
 var __wbindgen_throw = env.__wbindgen_throw;
 var global$0 = 1048576;
 var i64toi32_i32$HIGH_BITS = 0;
 function stretch__algo___impl_20stretch__forest__Forest___compute_internal__h1faccff9b0af78e6($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $8 = 0, $119 = Math_fround(0), $13 = 0, $12 = 0, $121 = Math_fround(0), $120 = Math_fround(0), $11 = 0, $10 = 0, $123 = Math_fround(0), $40 = 0, $9 = 0, $136 = Math_fround(0), $37 = 0, $76 = 0, $122 = Math_fround(0), $132 = Math_fround(0), $125 = Math_fround(0), $75 = 0, $14 = 0, $24 = 0, $72 = 0, $48 = 0, $49 = 0, $82 = 0, $19 = 0, $104 = 0, $22 = 0, $26 = 0, $43 = 0, $84 = 0, $64 = 0, $127 = Math_fround(0), $129 = Math_fround(0), $130 = Math_fround(0), $124 = Math_fround(0), $95 = 0, $133 = Math_fround(0), $134 = Math_fround(0), $25 = 0, $39 = 0, $131 = Math_fround(0), $29 = 0, $96 = 0, $106 = 0, $38 = 0, $69 = 0, $126 = Math_fround(0), $118 = 0, $97 = 0, $135 = Math_fround(0), $27 = 0, $15 = 0, $23 = 0, $128 = Math_fround(0), $34 = 0, $51 = 0, $70 = 0, $81 = 0, $101 = 0, $16 = 0, $17 = 0, $215 = 0, $216 = 0, $18 = 0, $21 = 0, $28 = 0, $41 = 0, $42 = 0, $45 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $58 = 0, $65 = 0, $71 = 0, $73 = 0, $77 = 0, $85 = 0, $86 = 0, $87 = 0, $92 = 0, $93 = 0, $98 = 0, $100 = 0, $117 = 0, $105 = 0, $110 = 0, $107 = 0, $115 = 0, $217 = 0, $218 = 0, $137 = Math_fround(0), $138 = Math_fround(0), $219 = 0, $220 = 0, $231 = 0, $312 = 0, $344 = 0, $350 = 0, $356 = 0, $359 = 0, $382 = 0, $386 = 0, $390 = 0, $393 = 0, $418 = 0, $423 = 0, $428 = 0, $431 = 0, $750 = 0, $753 = 0, $762 = 0, $765 = 0, $913 = 0, $919 = 0, $922 = 0, $925 = 0, $942 = 0, $946 = 0, $951 = 0, $957 = 0, $20 = 0, $1085 = 0, $1089 = 0, $1093 = 0, $1096 = 0, $1114 = 0, $1120 = 0, $1126 = 0, $1129 = 0, $1140 = 0, $1146 = 0, $1152 = 0, $1155 = 0, $1207 = 0, $1210 = 0, $1230 = 0, $1238 = 0, $1261 = 0, $1267 = 0, $1273 = 0, $1276 = 0, $1310 = 0, $1313 = 0, $1317 = 0, $1321 = 0, $1375 = 0, $1378 = 0, $1401 = 0, $1405 = 0, $1415 = 0, $1427 = 0, $1445 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $44 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $66 = 0, $67 = 0, $68 = 0, $74 = 0, $78 = 0, $79 = 0, $80 = 0, $83 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $99 = 0, $102 = 0, $103 = 0, $109 = 0, $112 = 0, $111 = 0, $114 = 0, $113 = 0, $116 = 0, $108 = 0, $94 = 0, $3131 = 0, $3137 = 0, $3140 = 0, $3143 = 0, $3160 = 0, $3164 = 0, $3169 = 0, $3173 = 0, $4361 = 0, $4367 = 0, $4370 = 0, $4373 = 0, $4386 = 0, $4390 = 0, $4395 = 0, $4399 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f32$1 = Math_fround(0), wasm2js_i32$0 = 0;
  $6 = global$0 - 992 | 0;
  global$0 = $6;
  HEAP32[($6 + 264 | 0) >> 2] = $2;
  HEAP32[($6 + 260 | 0) >> 2] = $1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $7 = HEAP32[($1 + 8 | 0) >> 2] | 0;
      if ($7 >>> 0 <= $2 >>> 0) {
       break label$4
      }
      HEAP8[(((HEAP32[$1 >> 2] | 0) + Math_imul($2, 288) | 0) + 284 | 0) >> 0] = 0;
      $2 = HEAP32[($6 + 260 | 0) >> 2] | 0;
      $7 = HEAP32[($2 + 8 | 0) >> 2] | 0;
      $1 = HEAP32[($6 + 264 | 0) >> 2] | 0;
      if ($7 >>> 0 <= $1 >>> 0) {
       break label$3
      }
      $2 = HEAP32[$2 >> 2] | 0;
      $7 = HEAP32[(($2 + Math_imul($1, 288) | 0) + 240 | 0) >> 2] | 0;
      if (($7 | 0) == (2 | 0)) {
       break label$2
      }
      label$5 : {
       if (HEAPU8[(($2 + Math_imul($1, 288) | 0) + 280 | 0) >> 0] | 0) {
        break label$5
       }
       if ($5) {
        break label$2
       }
      }
      label$6 : {
       label$7 : {
        $9 = HEAP32[$3 >> 2] | 0;
        if (!$9) {
         break label$7
        }
        $8 = ($7 | 0) != (0 | 0);
        break label$6;
       }
       $8 = Math_fround(Math_abs(Math_fround(Math_fround(HEAPF32[($3 + 4 | 0) >> 2]) - Math_fround(HEAPF32[(($2 + Math_imul($1, 288) | 0) + 272 | 0) >> 2])))) < Math_fround(1.1920928955078125e-07);
      }
      label$8 : {
       label$9 : {
        $14 = HEAP32[($3 + 8 | 0) >> 2] | 0;
        if (!$14) {
         break label$9
        }
        $10 = (HEAP32[(($2 + Math_imul($1, 288) | 0) + 248 | 0) >> 2] | 0 | 0) != (0 | 0);
        break label$8;
       }
       $10 = Math_fround(Math_abs(Math_fround(Math_fround(HEAPF32[($3 + 12 | 0) >> 2]) - Math_fround(HEAPF32[(($2 + Math_imul($1, 288) | 0) + 276 | 0) >> 2])))) < Math_fround(1.1920928955078125e-07);
      }
      label$10 : {
       if (!($8 & $10 | 0)) {
        break label$10
       }
       i64toi32_i32$2 = ($2 + Math_imul($1, 288) | 0) + 272 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $231 = i64toi32_i32$0;
       i64toi32_i32$0 = $0;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = $231;
       HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[i64toi32_i32$0 >> 2] = 0;
       break label$1;
      }
      if (($7 | 0) != ($9 | 0)) {
       break label$2
      }
      label$11 : {
       if ($7) {
        break label$11
       }
       if (Math_fround(HEAPF32[(($2 + Math_imul($1, 288) | 0) + 244 | 0) >> 2]) != Math_fround(HEAPF32[($3 + 4 | 0) >> 2])) {
        break label$2
       }
      }
      if ((HEAP32[(($2 + Math_imul($1, 288) | 0) + 248 | 0) >> 2] | 0 | 0) != ($14 | 0)) {
       break label$2
      }
      label$12 : {
       if ($14) {
        break label$12
       }
       if (Math_fround(HEAPF32[(($2 + Math_imul($1, 288) | 0) + 252 | 0) >> 2]) != Math_fround(HEAPF32[($3 + 12 | 0) >> 2])) {
        break label$2
       }
      }
      $7 = HEAP32[(($2 + Math_imul($1, 288) | 0) + 256 | 0) >> 2] | 0;
      if (($7 | 0) != (HEAP32[$4 >> 2] | 0 | 0)) {
       break label$2
      }
      label$13 : {
       if ($7) {
        break label$13
       }
       if (Math_fround(HEAPF32[(($2 + Math_imul($1, 288) | 0) + 260 | 0) >> 2]) != Math_fround(HEAPF32[($4 + 4 | 0) >> 2])) {
        break label$2
       }
      }
      $7 = HEAP32[(($2 + Math_imul($1, 288) | 0) + 264 | 0) >> 2] | 0;
      if (($7 | 0) != (HEAP32[($4 + 8 | 0) >> 2] | 0 | 0)) {
       break label$2
      }
      label$14 : {
       if ($7) {
        break label$14
       }
       if (Math_fround(HEAPF32[(($2 + Math_imul($1, 288) | 0) + 268 | 0) >> 2]) != Math_fround(HEAPF32[($4 + 12 | 0) >> 2])) {
        break label$2
       }
      }
      i64toi32_i32$2 = ($2 + Math_imul($1, 288) | 0) + 272 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $312 = i64toi32_i32$1;
      i64toi32_i32$1 = $0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $312;
      HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      break label$1;
     }
     core__panicking__panic_bounds_check__h0537ade040df571e(1051112 | 0, $2 | 0, $7 | 0);
     abort();
    }
    core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $1 | 0, $7 | 0);
    abort();
   }
   $1 = $2 + Math_imul($1, 288) | 0;
   $2 = HEAPU8[($1 + 203 | 0) >> 0] | 0;
   HEAP8[($6 + 268 | 0) >> 0] = $2;
   $2 = ($2 | 2 | 0) & 255 | 0;
   HEAP8[($6 + 269 | 0) >> 0] = ($2 | 0) == (2 | 0);
   HEAP8[($6 + 270 | 0) >> 0] = ($2 | 0) == (3 | 0);
   HEAP8[($6 + 271 | 0) >> 0] = (HEAPU8[($1 + 204 | 0) >> 0] | 0 | 0) == (2 | 0);
   $2 = $6 + 872 | 0;
   i64toi32_i32$2 = $1 + 56 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $344 = i64toi32_i32$0;
   i64toi32_i32$0 = $2;
   HEAP32[i64toi32_i32$0 >> 2] = $344;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $7 = $6 + 864 | 0;
   i64toi32_i32$2 = $1 + 48 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $350 = i64toi32_i32$1;
   i64toi32_i32$1 = $7;
   HEAP32[i64toi32_i32$1 >> 2] = $350;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $8 = $6 + 856 | 0;
   i64toi32_i32$2 = $1 + 40 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $356 = i64toi32_i32$0;
   i64toi32_i32$0 = $8;
   HEAP32[i64toi32_i32$0 >> 2] = $356;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1;
   i64toi32_i32$1 = HEAP32[($1 + 32 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1 + 36 | 0) >> 2] | 0;
   $359 = i64toi32_i32$1;
   i64toi32_i32$1 = $6;
   HEAP32[($6 + 848 | 0) >> 2] = $359;
   HEAP32[($6 + 852 | 0) >> 2] = i64toi32_i32$0;
   stretch__geometry__Rect_T___map__h4e1d5c4c643a6680($6 + 272 | 0 | 0, $6 + 848 | 0 | 0, $4 | 0);
   label$15 : {
    label$16 : {
     label$17 : {
      label$18 : {
       label$19 : {
        label$20 : {
         label$21 : {
          label$22 : {
           $1 = HEAP32[($6 + 260 | 0) >> 2] | 0;
           $9 = HEAP32[($1 + 8 | 0) >> 2] | 0;
           $10 = HEAP32[($6 + 264 | 0) >> 2] | 0;
           if ($9 >>> 0 <= $10 >>> 0) {
            break label$22
           }
           $1 = (HEAP32[$1 >> 2] | 0) + Math_imul($10, 288) | 0;
           i64toi32_i32$2 = $1 + 72 | 0;
           i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
           $382 = i64toi32_i32$0;
           i64toi32_i32$0 = $8;
           HEAP32[i64toi32_i32$0 >> 2] = $382;
           HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
           i64toi32_i32$2 = $1 + 80 | 0;
           i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
           i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
           $386 = i64toi32_i32$1;
           i64toi32_i32$1 = $7;
           HEAP32[i64toi32_i32$1 >> 2] = $386;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$2 = $1 + 88 | 0;
           i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
           $390 = i64toi32_i32$0;
           i64toi32_i32$0 = $2;
           HEAP32[i64toi32_i32$0 >> 2] = $390;
           HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
           i64toi32_i32$2 = $1;
           i64toi32_i32$1 = HEAP32[($1 + 64 | 0) >> 2] | 0;
           i64toi32_i32$0 = HEAP32[($1 + 68 | 0) >> 2] | 0;
           $393 = i64toi32_i32$1;
           i64toi32_i32$1 = $6;
           HEAP32[($6 + 848 | 0) >> 2] = $393;
           HEAP32[($6 + 852 | 0) >> 2] = i64toi32_i32$0;
           stretch__geometry__Rect_T___map__h6b5345e2e524cf6c($6 + 288 | 0 | 0, $6 + 848 | 0 | 0, $4 | 0);
           label$23 : {
            $1 = HEAP32[($6 + 260 | 0) >> 2] | 0;
            $7 = HEAP32[($1 + 8 | 0) >> 2] | 0;
            $2 = HEAP32[($6 + 264 | 0) >> 2] | 0;
            if ($7 >>> 0 <= $2 >>> 0) {
             break label$23
            }
            $1 = (HEAP32[$1 >> 2] | 0) + Math_imul($2, 288) | 0;
            i64toi32_i32$2 = $1 + 104 | 0;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            $418 = i64toi32_i32$0;
            i64toi32_i32$0 = ($6 + 848 | 0) + 8 | 0;
            HEAP32[i64toi32_i32$0 >> 2] = $418;
            HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
            i64toi32_i32$2 = $1 + 112 | 0;
            i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            $423 = i64toi32_i32$1;
            i64toi32_i32$1 = $6 + 864 | 0;
            HEAP32[i64toi32_i32$1 >> 2] = $423;
            HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
            i64toi32_i32$2 = $1 + 120 | 0;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            $428 = i64toi32_i32$0;
            i64toi32_i32$0 = $6 + 872 | 0;
            HEAP32[i64toi32_i32$0 >> 2] = $428;
            HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
            i64toi32_i32$2 = $1;
            i64toi32_i32$1 = HEAP32[($1 + 96 | 0) >> 2] | 0;
            i64toi32_i32$0 = HEAP32[($1 + 100 | 0) >> 2] | 0;
            $431 = i64toi32_i32$1;
            i64toi32_i32$1 = $6;
            HEAP32[($6 + 848 | 0) >> 2] = $431;
            HEAP32[($6 + 852 | 0) >> 2] = i64toi32_i32$0;
            stretch__geometry__Rect_T___map__hd80eeaf84de33a80($6 + 304 | 0 | 0, $6 + 848 | 0 | 0, $4 | 0);
            $119 = Math_fround(Math_fround(HEAPF32[($6 + 296 | 0) >> 2]) + Math_fround(HEAPF32[($6 + 312 | 0) >> 2]));
            HEAPF32[($6 + 328 | 0) >> 2] = $119;
            $120 = Math_fround(Math_fround(HEAPF32[($6 + 300 | 0) >> 2]) + Math_fround(HEAPF32[($6 + 316 | 0) >> 2]));
            HEAPF32[($6 + 332 | 0) >> 2] = $120;
            $121 = Math_fround(Math_fround(HEAPF32[($6 + 292 | 0) >> 2]) + Math_fround(HEAPF32[($6 + 308 | 0) >> 2]));
            HEAPF32[($6 + 324 | 0) >> 2] = $121;
            $122 = Math_fround(Math_fround(HEAPF32[($6 + 288 | 0) >> 2]) + Math_fround(HEAPF32[($6 + 304 | 0) >> 2]));
            HEAPF32[($6 + 320 | 0) >> 2] = $122;
            $123 = Math_fround(HEAPF32[($3 + 12 | 0) >> 2]);
            $120 = Math_fround($119 + $120);
            HEAPF32[(($6 + 336 | 0) + 12 | 0) >> 2] = Math_fround($123 - $120);
            $8 = HEAP32[($3 + 8 | 0) >> 2] | 0;
            HEAP32[($6 + 344 | 0) >> 2] = $8;
            $10 = HEAP32[$3 >> 2] | 0;
            HEAP32[($6 + 336 | 0) >> 2] = $10;
            $119 = Math_fround(HEAPF32[($3 + 4 | 0) >> 2]);
            $121 = Math_fround($122 + $121);
            HEAPF32[($6 + 340 | 0) >> 2] = Math_fround($119 - $121);
            i64toi32_i32$1 = $6;
            i64toi32_i32$0 = 0;
            HEAP32[($6 + 352 | 0) >> 2] = 0;
            HEAP32[($6 + 356 | 0) >> 2] = i64toi32_i32$0;
            label$24 : {
             $1 = HEAP32[($6 + 260 | 0) >> 2] | 0;
             $2 = HEAP32[($1 + 20 | 0) >> 2] | 0;
             $7 = HEAP32[($6 + 264 | 0) >> 2] | 0;
             if ($2 >>> 0 <= $7 >>> 0) {
              break label$24
             }
             label$25 : {
              label$26 : {
               label$27 : {
                label$28 : {
                 label$29 : {
                  label$30 : {
                   label$31 : {
                    label$32 : {
                     label$33 : {
                      label$34 : {
                       label$35 : {
                        label$36 : {
                         label$37 : {
                          label$38 : {
                           label$39 : {
                            label$40 : {
                             if (!(HEAP32[(((HEAP32[($1 + 12 | 0) >> 2] | 0) + Math_imul($7, 12) | 0) + 8 | 0) >> 2] | 0)) {
                              break label$40
                             }
                             HEAPF32[(($6 + 360 | 0) + 12 | 0) >> 2] = Math_fround((wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[($4 + 12 | 0) >> 2]) - Math_fround(Math_fround(HEAPF32[($6 + 280 | 0) >> 2]) + Math_fround(HEAPF32[($6 + 284 | 0) >> 2]))), wasm2js_f32$1 = $123, wasm2js_i32$0 = $8, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1) - $120);
                             $2 = 0;
                             HEAP32[($6 + 368 | 0) >> 2] = (HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & ($8 | 0) != (0 | 0) | 0;
                             HEAP32[($6 + 360 | 0) >> 2] = (HEAP32[$4 >> 2] | 0 | 0) != (0 | 0) & ($10 | 0) != (0 | 0) | 0;
                             HEAPF32[($6 + 364 | 0) >> 2] = Math_fround((wasm2js_f32$0 = Math_fround(Math_fround(HEAPF32[($4 + 4 | 0) >> 2]) - Math_fround(Math_fround(HEAPF32[($6 + 272 | 0) >> 2]) + Math_fround(HEAPF32[($6 + 276 | 0) >> 2]))), wasm2js_f32$1 = $119, wasm2js_i32$0 = $10, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1) - $121);
                             $1 = (HEAP32[($1 + 12 | 0) >> 2] | 0) + Math_imul($7, 12) | 0;
                             $7 = HEAP32[($1 + 8 | 0) >> 2] | 0;
                             $1 = HEAP32[$1 >> 2] | 0;
                             HEAP32[($6 + 848 | 0) >> 2] = $1;
                             HEAP32[($6 + 852 | 0) >> 2] = $1 + ($7 << 2 | 0) | 0;
                             HEAP32[($6 + 860 | 0) >> 2] = $6 + 336 | 0;
                             HEAP32[($6 + 856 | 0) >> 2] = $6 + 260 | 0;
                             $alloc__vec__Vec_T__20as_20alloc__vec__SpecExtend_T_2cI____from_iter__h07c3f21f9acaec5e($6 + 376 | 0 | 0, $6 + 848 | 0 | 0);
                             $11 = HEAP32[($6 + 384 | 0) >> 2] | 0;
                             $12 = Math_imul($11, 192);
                             $13 = HEAP32[($6 + 376 | 0) >> 2] | 0;
                             label$41 : {
                              if (!$11) {
                               break label$41
                              }
                              $2 = 0;
                              $10 = HEAP32[($6 + 264 | 0) >> 2] | 0;
                              $14 = HEAP32[($6 + 260 | 0) >> 2] | 0;
                              $15 = $14 + 8 | 0;
                              $7 = $12;
                              $1 = $13;
                              label$42 : while (1) {
                               $8 = $2 & 1 | 0;
                               $2 = 1;
                               label$43 : {
                                if ($8) {
                                 break label$43
                                }
                                $2 = HEAP32[$15 >> 2] | 0;
                                $8 = HEAP32[$1 >> 2] | 0;
                                if ($2 >>> 0 <= $8 >>> 0) {
                                 break label$20
                                }
                                if ($2 >>> 0 <= $10 >>> 0) {
                                 break label$21
                                }
                                label$44 : {
                                 $9 = HEAP32[$14 >> 2] | 0;
                                 $2 = HEAPU8[(($9 + Math_imul($8, 288) | 0) + 207 | 0) >> 0] | 0;
                                 if ($2) {
                                  break label$44
                                 }
                                 $2 = (HEAPU8[(($9 + Math_imul($10, 288) | 0) + 206 | 0) >> 0] | 0) + 1 | 0;
                                }
                                $2 = ($2 & 255 | 0 | 0) == (4 | 0);
                               }
                               $1 = $1 + 192 | 0;
                               $7 = $7 + -192 | 0;
                               if ($7) {
                                continue label$42
                               }
                               break label$42;
                              };
                             }
                             $9 = ($6 + 320 | 0) + 12 | 0;
                             $10 = ($6 + 320 | 0) + 8 | 0;
                             $14 = $6 + 320 | 0 | 4 | 0;
                             $16 = ($6 + 304 | 0) + 12 | 0;
                             $15 = ($6 + 304 | 0) + 8 | 0;
                             $17 = $6 + 304 | 0 | 4 | 0;
                             $8 = $13 + $12 | 0;
                             HEAP32[($6 + 860 | 0) >> 2] = $3;
                             HEAP32[($6 + 876 | 0) >> 2] = $6 + 269 | 0;
                             HEAP32[($6 + 872 | 0) >> 2] = $6 + 360 | 0;
                             HEAP32[($6 + 868 | 0) >> 2] = $6 + 270 | 0;
                             HEAP32[($6 + 864 | 0) >> 2] = $6 + 264 | 0;
                             HEAP32[($6 + 856 | 0) >> 2] = $6 + 268 | 0;
                             HEAP32[($6 + 852 | 0) >> 2] = $6 + 336 | 0;
                             HEAP32[($6 + 848 | 0) >> 2] = $6 + 260 | 0;
                             $1 = $13;
                             label$45 : while (1) {
                              if (($8 - $1 | 0) >>> 0 <= 576 >>> 0) {
                               break label$39
                              }
                              stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__h02902cd429c6e7a9($6 + 32 | 0 | 0, $6 + 848 | 0 | 0, $1 | 0);
                              $7 = HEAP32[($6 + 32 | 0) >> 2] | 0;
                              if ($7) {
                               break label$38
                              }
                              stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__h02902cd429c6e7a9($6 + 24 | 0 | 0, $6 + 848 | 0 | 0, $1 + 192 | 0 | 0);
                              $7 = HEAP32[($6 + 24 | 0) >> 2] | 0;
                              if ($7) {
                               break label$37
                              }
                              stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__h02902cd429c6e7a9($6 + 16 | 0 | 0, $6 + 848 | 0 | 0, $1 + 384 | 0 | 0);
                              $7 = HEAP32[($6 + 16 | 0) >> 2] | 0;
                              if ($7) {
                               break label$36
                              }
                              stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__h02902cd429c6e7a9($6 + 8 | 0 | 0, $6 + 848 | 0 | 0, $1 + 576 | 0 | 0);
                              $1 = $1 + 768 | 0;
                              $7 = HEAP32[($6 + 8 | 0) >> 2] | 0;
                              if (!$7) {
                               continue label$45
                              }
                              break label$45;
                             };
                             $1 = HEAP32[($6 + 12 | 0) >> 2] | 0;
                             break label$15;
                            }
                            label$46 : {
                             if (!($8 | $10 | 0)) {
                              break label$46
                             }
                             $2 = HEAP32[($1 + 8 | 0) >> 2] | 0;
                             if ($2 >>> 0 <= $7 >>> 0) {
                              break label$25
                             }
                             $1 = (HEAP32[$1 >> 2] | 0) + Math_imul($7, 288) | 0;
                             $2 = HEAP32[($1 + 212 | 0) >> 2] | 0;
                             if (!$2) {
                              break label$35
                             }
                             $7 = ($6 + 672 | 0) + 8 | 0;
                             $8 = $3 + 8 | 0;
                             i64toi32_i32$2 = $8;
                             i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                             i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                             $750 = i64toi32_i32$0;
                             i64toi32_i32$0 = $7;
                             HEAP32[i64toi32_i32$0 >> 2] = $750;
                             HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                             i64toi32_i32$2 = $3;
                             i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                             i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                             $753 = i64toi32_i32$1;
                             i64toi32_i32$1 = $6;
                             HEAP32[($6 + 672 | 0) >> 2] = $753;
                             HEAP32[($6 + 676 | 0) >> 2] = i64toi32_i32$0;
                             $1 = HEAP32[($1 + 216 | 0) >> 2] | 0;
                             $10 = ($6 + 848 | 0) + 8 | 0;
                             i64toi32_i32$2 = $7;
                             i64toi32_i32$0 = HEAP32[$7 >> 2] | 0;
                             i64toi32_i32$1 = HEAP32[($7 + 4 | 0) >> 2] | 0;
                             $762 = i64toi32_i32$0;
                             i64toi32_i32$0 = $10;
                             HEAP32[i64toi32_i32$0 >> 2] = $762;
                             HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                             i64toi32_i32$2 = $6;
                             i64toi32_i32$1 = HEAP32[($6 + 672 | 0) >> 2] | 0;
                             i64toi32_i32$0 = HEAP32[($6 + 676 | 0) >> 2] | 0;
                             $765 = i64toi32_i32$1;
                             i64toi32_i32$1 = $6;
                             HEAP32[($6 + 848 | 0) >> 2] = $765;
                             HEAP32[($6 + 852 | 0) >> 2] = i64toi32_i32$0;
                             FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0]($6 + 496 | 0, $2, $6 + 848 | 0);
                             $2 = HEAP32[(($6 + 496 | 0) + 8 | 0) >> 2] | 0;
                             $7 = HEAP32[($6 + 500 | 0) >> 2] | 0;
                             $1 = HEAP32[($6 + 496 | 0) >> 2] | 0;
                             if (!$1) {
                              break label$32
                             }
                             if (($1 | 0) != (1 | 0)) {
                              break label$33
                             }
                             HEAP32[($0 + 4 | 0) >> 2] = $7;
                             HEAP32[$0 >> 2] = 1;
                             HEAP32[($0 + 8 | 0) >> 2] = $2;
                             break label$1;
                            }
                            HEAPF32[($0 + 4 | 0) >> 2] = $119;
                            HEAP32[$0 >> 2] = 0;
                            HEAPF32[($0 + 8 | 0) >> 2] = $123;
                            break label$1;
                           }
                           $8 = $13 + Math_imul($11, 192) | 0;
                           label$47 : while (1) {
                            if (($8 | 0) == ($1 | 0)) {
                             break label$34
                            }
                            stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__h02902cd429c6e7a9($6 + 248 | 0 | 0, $6 + 848 | 0 | 0, $1 | 0);
                            $1 = $1 + 192 | 0;
                            $7 = HEAP32[($6 + 248 | 0) >> 2] | 0;
                            if (!$7) {
                             continue label$47
                            }
                            break label$47;
                           };
                           $1 = HEAP32[($6 + 252 | 0) >> 2] | 0;
                           break label$15;
                          }
                          $1 = HEAP32[($6 + 36 | 0) >> 2] | 0;
                          break label$15;
                         }
                         $1 = HEAP32[($6 + 28 | 0) >> 2] | 0;
                         break label$15;
                        }
                        $1 = HEAP32[($6 + 20 | 0) >> 2] | 0;
                        break label$15;
                       }
                       HEAP32[$0 >> 2] = 0;
                       HEAPF32[($0 + 8 | 0) >> 2] = Math_fround($120 + ($8 ? Math_fround(0.0) : $123));
                       HEAPF32[($0 + 4 | 0) >> 2] = Math_fround($121 + ($10 ? Math_fround(0.0) : $119));
                       break label$1;
                      }
                      $13 = HEAP32[($6 + 376 | 0) >> 2] | 0;
                      $12 = HEAP32[($6 + 384 | 0) >> 2] | 0;
                      $8 = $13 + Math_imul($12, 192) | 0;
                      HEAP32[($6 + 856 | 0) >> 2] = $6 + 360 | 0;
                      HEAP32[($6 + 852 | 0) >> 2] = $6 + 260 | 0;
                      HEAP32[($6 + 848 | 0) >> 2] = $6 + 268 | 0;
                      $1 = $13;
                      label$48 : while (1) {
                       if (($8 - $1 | 0) >>> 0 <= 576 >>> 0) {
                        break label$31
                       }
                       stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__h3df4c467acea4e11($6 + 64 | 0 | 0, $6 + 848 | 0 | 0, $1 | 0);
                       $7 = HEAP32[($6 + 64 | 0) >> 2] | 0;
                       if ($7) {
                        break label$30
                       }
                       stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__h3df4c467acea4e11($6 + 56 | 0 | 0, $6 + 848 | 0 | 0, $1 + 192 | 0 | 0);
                       $7 = HEAP32[($6 + 56 | 0) >> 2] | 0;
                       if ($7) {
                        break label$29
                       }
                       stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__h3df4c467acea4e11($6 + 48 | 0 | 0, $6 + 848 | 0 | 0, $1 + 384 | 0 | 0);
                       $7 = HEAP32[($6 + 48 | 0) >> 2] | 0;
                       if ($7) {
                        break label$28
                       }
                       stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__h3df4c467acea4e11($6 + 40 | 0 | 0, $6 + 848 | 0 | 0, $1 + 576 | 0 | 0);
                       $1 = $1 + 768 | 0;
                       $7 = HEAP32[($6 + 40 | 0) >> 2] | 0;
                       if (!$7) {
                        continue label$48
                       }
                       break label$48;
                      };
                      $1 = HEAP32[($6 + 44 | 0) >> 2] | 0;
                      break label$15;
                     }
                     FUNCTION_TABLE[HEAP32[$2 >> 2] | 0]($7);
                     $1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
                     if (!$1) {
                      break label$32
                     }
                     __rust_dealloc($7 | 0, $1 | 0, HEAP32[($2 + 8 | 0) >> 2] | 0 | 0);
                    }
                    i64toi32_i32$2 = $8;
                    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                    $913 = i64toi32_i32$0;
                    i64toi32_i32$0 = $10;
                    HEAP32[i64toi32_i32$0 >> 2] = $913;
                    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                    $8 = $6 + 872 | 0;
                    i64toi32_i32$2 = $4 + 8 | 0;
                    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                    $919 = i64toi32_i32$1;
                    i64toi32_i32$1 = $8;
                    HEAP32[i64toi32_i32$1 >> 2] = $919;
                    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                    i64toi32_i32$2 = $3;
                    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                    $922 = i64toi32_i32$0;
                    i64toi32_i32$0 = $6;
                    HEAP32[($6 + 848 | 0) >> 2] = $922;
                    HEAP32[($6 + 852 | 0) >> 2] = i64toi32_i32$1;
                    i64toi32_i32$2 = $4;
                    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                    $925 = i64toi32_i32$1;
                    i64toi32_i32$1 = $6;
                    HEAP32[($6 + 864 | 0) >> 2] = $925;
                    HEAP32[($6 + 868 | 0) >> 2] = i64toi32_i32$0;
                    $1 = HEAP32[($6 + 260 | 0) >> 2] | 0;
                    $9 = HEAP32[($1 + 8 | 0) >> 2] | 0;
                    $10 = HEAP32[($6 + 264 | 0) >> 2] | 0;
                    if ($9 >>> 0 <= $10 >>> 0) {
                     break label$26
                    }
                    $1 = (HEAP32[$1 >> 2] | 0) + Math_imul($10, 288) | 0;
                    i64toi32_i32$2 = $6;
                    i64toi32_i32$0 = HEAP32[($6 + 848 | 0) >> 2] | 0;
                    i64toi32_i32$1 = HEAP32[($6 + 852 | 0) >> 2] | 0;
                    $942 = i64toi32_i32$0;
                    i64toi32_i32$0 = $1;
                    HEAP32[($1 + 240 | 0) >> 2] = $942;
                    HEAP32[($1 + 244 | 0) >> 2] = i64toi32_i32$1;
                    i64toi32_i32$2 = $8;
                    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                    $946 = i64toi32_i32$1;
                    i64toi32_i32$1 = $1 + 264 | 0;
                    HEAP32[i64toi32_i32$1 >> 2] = $946;
                    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                    i64toi32_i32$2 = $6 + 864 | 0;
                    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                    $951 = i64toi32_i32$0;
                    i64toi32_i32$0 = $1 + 256 | 0;
                    HEAP32[i64toi32_i32$0 >> 2] = $951;
                    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                    i64toi32_i32$2 = ($6 + 848 | 0) + 8 | 0;
                    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                    $957 = i64toi32_i32$1;
                    i64toi32_i32$1 = $1 + 248 | 0;
                    HEAP32[i64toi32_i32$1 >> 2] = $957;
                    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                    HEAP8[($1 + 280 | 0) >> 0] = $5;
                    HEAP32[($1 + 276 | 0) >> 2] = $2;
                    HEAP32[($1 + 272 | 0) >> 2] = $7;
                    $215 = $1 + 281 | 0;
                    $216 = HEAPU8[($6 + 672 | 0) >> 0] | 0 | ((HEAPU8[($6 + 673 | 0) >> 0] | 0) << 8 | 0) | 0;
                    HEAP8[$215 >> 0] = $216;
                    HEAP8[($215 + 1 | 0) >> 0] = $216 >>> 8 | 0;
                    HEAP8[($1 + 283 | 0) >> 0] = HEAPU8[($6 + 674 | 0) >> 0] | 0;
                    HEAP32[($0 + 8 | 0) >> 2] = $2;
                    HEAP32[($0 + 4 | 0) >> 2] = $7;
                    HEAP32[$0 >> 2] = 0;
                    break label$1;
                   }
                   $8 = $13 + Math_imul($12, 192) | 0;
                   label$49 : while (1) {
                    if (($8 | 0) == ($1 | 0)) {
                     break label$27
                    }
                    stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__h3df4c467acea4e11($6 + 240 | 0 | 0, $6 + 848 | 0 | 0, $1 | 0);
                    $1 = $1 + 192 | 0;
                    $7 = HEAP32[($6 + 240 | 0) >> 2] | 0;
                    if (!$7) {
                     continue label$49
                    }
                    break label$49;
                   };
                   $1 = HEAP32[($6 + 244 | 0) >> 2] | 0;
                   break label$15;
                  }
                  $1 = HEAP32[($6 + 68 | 0) >> 2] | 0;
                  break label$15;
                 }
                 $1 = HEAP32[($6 + 60 | 0) >> 2] | 0;
                 break label$15;
                }
                $1 = HEAP32[($6 + 52 | 0) >> 2] | 0;
                break label$15;
               }
               HEAP32[($6 + 416 | 0) >> 2] = 0;
               i64toi32_i32$1 = $6;
               i64toi32_i32$0 = 0;
               HEAP32[($6 + 408 | 0) >> 2] = 4;
               HEAP32[($6 + 412 | 0) >> 2] = i64toi32_i32$0;
               label$50 : {
                $1 = HEAP32[($6 + 260 | 0) >> 2] | 0;
                $8 = HEAP32[($1 + 8 | 0) >> 2] | 0;
                $7 = HEAP32[($6 + 264 | 0) >> 2] | 0;
                if ($8 >>> 0 <= $7 >>> 0) {
                 break label$50
                }
                if (!(HEAPU8[(((HEAP32[$1 >> 2] | 0) + Math_imul($7, 288) | 0) + 204 | 0) >> 0] | 0)) {
                 break label$17
                }
                i64toi32_i32$1 = ($6 + 424 | 0) + 12 | 0;
                i64toi32_i32$0 = 0;
                HEAP32[i64toi32_i32$1 >> 2] = 0;
                HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                i64toi32_i32$1 = $6;
                i64toi32_i32$0 = 0;
                HEAP32[($6 + 428 | 0) >> 2] = 0;
                HEAP32[($6 + 432 | 0) >> 2] = i64toi32_i32$0;
                $12 = 4;
                HEAP32[($6 + 424 | 0) >> 2] = 4;
                $7 = HEAP32[(($6 + 376 | 0) + 8 | 0) >> 2] | 0;
                $8 = HEAP32[($6 + 380 | 0) >> 2] | 0;
                $1 = HEAP32[($6 + 376 | 0) >> 2] | 0;
                HEAP32[($6 + 456 | 0) >> 2] = $1;
                HEAP32[($6 + 452 | 0) >> 2] = $8;
                HEAP32[($6 + 448 | 0) >> 2] = $1;
                HEAP32[($6 + 460 | 0) >> 2] = $1 + Math_imul($7, 192) | 0;
                if (!$7) {
                 break label$19
                }
                $18 = $6 + 424 | 0 | 4 | 0;
                $119 = Math_fround(0.0);
                $13 = 0;
                $11 = ($6 + 672 | 0) + 16 | 0;
                $19 = ($6 + 672 | 0) + 24 | 0;
                $20 = ($6 + 360 | 0) + 12 | 0;
                $21 = 4;
                $7 = 0;
                label$51 : {
                 label$52 : while (1) {
                  $22 = ($6 + 448 | 0) + 8 | 0;
                  HEAP32[$22 >> 2] = $1 + 192 | 0;
                  $23 = HEAP32[$1 >> 2] | 0;
                  $8 = HEAP32[($1 + 4 | 0) >> 2] | 0;
                  memcpy($6 + 848 | 0 | 0, $1 + 8 | 0 | 0, 144 | 0) | 0;
                  $24 = ($6 + 672 | 0) + 8 | 0;
                  i64toi32_i32$2 = $1 + 168 | 0;
                  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                  $1085 = i64toi32_i32$0;
                  i64toi32_i32$0 = $24;
                  HEAP32[i64toi32_i32$0 >> 2] = $1085;
                  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                  i64toi32_i32$2 = $1 + 176 | 0;
                  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                  $1089 = i64toi32_i32$1;
                  i64toi32_i32$1 = $11;
                  HEAP32[i64toi32_i32$1 >> 2] = $1089;
                  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                  i64toi32_i32$2 = $1 + 184 | 0;
                  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                  $1093 = i64toi32_i32$0;
                  i64toi32_i32$0 = $19;
                  HEAP32[i64toi32_i32$0 >> 2] = $1093;
                  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                  i64toi32_i32$2 = $1;
                  i64toi32_i32$1 = HEAP32[($1 + 160 | 0) >> 2] | 0;
                  i64toi32_i32$0 = HEAP32[($1 + 164 | 0) >> 2] | 0;
                  $1096 = i64toi32_i32$1;
                  i64toi32_i32$1 = $6;
                  HEAP32[($6 + 672 | 0) >> 2] = $1096;
                  HEAP32[($6 + 676 | 0) >> 2] = i64toi32_i32$0;
                  if (($8 | 0) == (2 | 0)) {
                   break label$51
                  }
                  $120 = Math_fround(HEAPF32[($1 + 156 | 0) >> 2]);
                  $121 = Math_fround(HEAPF32[($1 + 152 | 0) >> 2]);
                  memcpy($6 + 496 | 0 | 0, $6 + 848 | 0 | 0, 144 | 0) | 0;
                  $1 = ($6 + 464 | 0) + 24 | 0;
                  i64toi32_i32$2 = $19;
                  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                  $1114 = i64toi32_i32$0;
                  i64toi32_i32$0 = $1;
                  HEAP32[$1 >> 2] = $1114;
                  HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$1;
                  $25 = ($6 + 464 | 0) + 16 | 0;
                  i64toi32_i32$2 = $11;
                  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                  $1120 = i64toi32_i32$1;
                  i64toi32_i32$1 = $25;
                  HEAP32[i64toi32_i32$1 >> 2] = $1120;
                  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                  $26 = ($6 + 464 | 0) + 8 | 0;
                  i64toi32_i32$2 = $24;
                  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                  $1126 = i64toi32_i32$0;
                  i64toi32_i32$0 = $26;
                  HEAP32[i64toi32_i32$0 >> 2] = $1126;
                  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                  i64toi32_i32$2 = $6;
                  i64toi32_i32$1 = HEAP32[($6 + 672 | 0) >> 2] | 0;
                  i64toi32_i32$0 = HEAP32[($6 + 676 | 0) >> 2] | 0;
                  $1129 = i64toi32_i32$1;
                  i64toi32_i32$1 = $6;
                  HEAP32[($6 + 464 | 0) >> 2] = $1129;
                  HEAP32[($6 + 468 | 0) >> 2] = i64toi32_i32$0;
                  memcpy($6 + 672 | 0 | 0, $6 + 496 | 0 | 0, 144 | 0) | 0;
                  $24 = ($6 + 640 | 0) + 24 | 0;
                  i64toi32_i32$2 = $1;
                  i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
                  $1140 = i64toi32_i32$0;
                  i64toi32_i32$0 = $24;
                  HEAP32[i64toi32_i32$0 >> 2] = $1140;
                  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                  $27 = ($6 + 640 | 0) + 16 | 0;
                  i64toi32_i32$2 = $25;
                  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                  $1146 = i64toi32_i32$1;
                  i64toi32_i32$1 = $27;
                  HEAP32[i64toi32_i32$1 >> 2] = $1146;
                  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                  $25 = ($6 + 640 | 0) + 8 | 0;
                  i64toi32_i32$2 = $26;
                  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                  $1152 = i64toi32_i32$0;
                  i64toi32_i32$0 = $25;
                  HEAP32[i64toi32_i32$0 >> 2] = $1152;
                  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                  i64toi32_i32$2 = $6;
                  i64toi32_i32$1 = HEAP32[($6 + 464 | 0) >> 2] | 0;
                  i64toi32_i32$0 = HEAP32[($6 + 468 | 0) >> 2] | 0;
                  $1155 = i64toi32_i32$1;
                  i64toi32_i32$1 = $6;
                  HEAP32[($6 + 640 | 0) >> 2] = $1155;
                  HEAP32[($6 + 644 | 0) >> 2] = i64toi32_i32$0;
                  $122 = $121;
                  label$53 : {
                   $1 = HEAPU8[($6 + 268 | 0) >> 0] | 0 | 2 | 0;
                   if (($1 | 0) != (3 | 0)) {
                    break label$53
                   }
                   $122 = $120;
                  }
                  label$54 : {
                   label$55 : {
                    $26 = ($1 & 3 | 0 | 0) == (3 | 0);
                    if (!$26) {
                     break label$55
                    }
                    $1 = HEAP32[(($6 + 360 | 0) + 8 | 0) >> 2] | 0;
                    $123 = Math_fround(HEAPF32[$20 >> 2]);
                    break label$54;
                   }
                   $123 = Math_fround(HEAPF32[($6 + 364 | 0) >> 2]);
                   $1 = HEAP32[($6 + 360 | 0) >> 2] | 0;
                  }
                  $119 = Math_fround($119 + $122);
                  label$56 : {
                   label$57 : {
                    if ($1) {
                     break label$57
                    }
                    if ($119 > $123 ^ 1 | 0) {
                     break label$57
                    }
                    if (!$7) {
                     break label$57
                    }
                    $119 = $121;
                    label$58 : {
                     if (!$26) {
                      break label$58
                     }
                     $119 = $120;
                    }
                    $7 = ($6 + 848 | 0) + 16 | 0;
                    HEAP32[$7 >> 2] = HEAP32[(($6 + 424 | 0) + 16 | 0) >> 2] | 0;
                    $12 = ($6 + 848 | 0) + 8 | 0;
                    i64toi32_i32$2 = ($6 + 424 | 0) + 8 | 0;
                    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                    $1207 = i64toi32_i32$0;
                    i64toi32_i32$0 = $12;
                    HEAP32[i64toi32_i32$0 >> 2] = $1207;
                    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                    i64toi32_i32$2 = $6;
                    i64toi32_i32$1 = HEAP32[($6 + 424 | 0) >> 2] | 0;
                    i64toi32_i32$0 = HEAP32[($6 + 428 | 0) >> 2] | 0;
                    $1210 = i64toi32_i32$1;
                    i64toi32_i32$1 = $6;
                    HEAP32[($6 + 848 | 0) >> 2] = $1210;
                    HEAP32[($6 + 852 | 0) >> 2] = i64toi32_i32$0;
                    label$59 : {
                     if (($13 | 0) != (HEAP32[($6 + 412 | 0) >> 2] | 0 | 0)) {
                      break label$59
                     }
                     alloc__raw_vec__RawVec_T_2cA___reserve__h73864728c23965ff($6 + 408 | 0 | 0, $13 | 0, 1 | 0);
                     $13 = HEAP32[(($6 + 408 | 0) + 8 | 0) >> 2] | 0;
                     $21 = HEAP32[($6 + 408 | 0) >> 2] | 0;
                    }
                    $1 = $21 + Math_imul($13, 20) | 0;
                    i64toi32_i32$2 = $6;
                    i64toi32_i32$0 = HEAP32[($6 + 848 | 0) >> 2] | 0;
                    i64toi32_i32$1 = HEAP32[($6 + 852 | 0) >> 2] | 0;
                    $1230 = i64toi32_i32$0;
                    i64toi32_i32$0 = $1;
                    HEAP32[$1 >> 2] = $1230;
                    HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$1;
                    HEAP32[($1 + 16 | 0) >> 2] = HEAP32[$7 >> 2] | 0;
                    i64toi32_i32$2 = $12;
                    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                    $1238 = i64toi32_i32$1;
                    i64toi32_i32$1 = $1 + 8 | 0;
                    HEAP32[i64toi32_i32$1 >> 2] = $1238;
                    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                    $13 = $13 + 1 | 0;
                    HEAP32[(($6 + 408 | 0) + 8 | 0) >> 2] = $13;
                    i64toi32_i32$1 = $18 + 8 | 0;
                    i64toi32_i32$0 = 0;
                    HEAP32[i64toi32_i32$1 >> 2] = 0;
                    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                    i64toi32_i32$1 = $18;
                    i64toi32_i32$0 = 0;
                    HEAP32[i64toi32_i32$1 >> 2] = 0;
                    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                    $12 = 4;
                    HEAP32[($6 + 424 | 0) >> 2] = 4;
                    $1 = 0;
                    $7 = 0;
                    break label$56;
                   }
                   $1 = HEAP32[($6 + 428 | 0) >> 2] | 0;
                  }
                  memcpy($6 + 848 | 0 | 0, $6 + 672 | 0 | 0, 144 | 0) | 0;
                  $26 = ($6 + 816 | 0) + 24 | 0;
                  i64toi32_i32$2 = $24;
                  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                  $1261 = i64toi32_i32$0;
                  i64toi32_i32$0 = $26;
                  HEAP32[i64toi32_i32$0 >> 2] = $1261;
                  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                  $24 = ($6 + 816 | 0) + 16 | 0;
                  i64toi32_i32$2 = $27;
                  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                  $1267 = i64toi32_i32$1;
                  i64toi32_i32$1 = $24;
                  HEAP32[i64toi32_i32$1 >> 2] = $1267;
                  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                  $27 = ($6 + 816 | 0) + 8 | 0;
                  i64toi32_i32$2 = $25;
                  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                  $1273 = i64toi32_i32$0;
                  i64toi32_i32$0 = $27;
                  HEAP32[i64toi32_i32$0 >> 2] = $1273;
                  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                  i64toi32_i32$2 = $6;
                  i64toi32_i32$1 = HEAP32[($6 + 640 | 0) >> 2] | 0;
                  i64toi32_i32$0 = HEAP32[($6 + 644 | 0) >> 2] | 0;
                  $1276 = i64toi32_i32$1;
                  i64toi32_i32$1 = $6;
                  HEAP32[($6 + 816 | 0) >> 2] = $1276;
                  HEAP32[($6 + 820 | 0) >> 2] = i64toi32_i32$0;
                  label$60 : {
                   if (($7 | 0) != ($1 | 0)) {
                    break label$60
                   }
                   alloc__raw_vec__RawVec_T_2cA___reserve__h47fecbc084037479($6 + 424 | 0 | 0, $1 | 0, 1 | 0);
                   $7 = HEAP32[(($6 + 424 | 0) + 8 | 0) >> 2] | 0;
                   $12 = HEAP32[($6 + 424 | 0) >> 2] | 0;
                  }
                  $1 = $12 + Math_imul($7, 192) | 0;
                  HEAP32[($1 + 4 | 0) >> 2] = $8;
                  HEAP32[$1 >> 2] = $23;
                  memcpy($1 + 8 | 0 | 0, $6 + 848 | 0 | 0, 144 | 0) | 0;
                  HEAPF32[($1 + 156 | 0) >> 2] = $120;
                  HEAPF32[($1 + 152 | 0) >> 2] = $121;
                  i64toi32_i32$2 = $27;
                  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                  $1310 = i64toi32_i32$0;
                  i64toi32_i32$0 = $1 + 168 | 0;
                  HEAP32[i64toi32_i32$0 >> 2] = $1310;
                  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                  i64toi32_i32$2 = $6;
                  i64toi32_i32$1 = HEAP32[($6 + 816 | 0) >> 2] | 0;
                  i64toi32_i32$0 = HEAP32[($6 + 820 | 0) >> 2] | 0;
                  $1313 = i64toi32_i32$1;
                  i64toi32_i32$1 = $1;
                  HEAP32[($1 + 160 | 0) >> 2] = $1313;
                  HEAP32[($1 + 164 | 0) >> 2] = i64toi32_i32$0;
                  i64toi32_i32$2 = $26;
                  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                  $1317 = i64toi32_i32$0;
                  i64toi32_i32$0 = $1 + 184 | 0;
                  HEAP32[i64toi32_i32$0 >> 2] = $1317;
                  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                  i64toi32_i32$2 = $24;
                  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                  $1321 = i64toi32_i32$1;
                  i64toi32_i32$1 = $1 + 176 | 0;
                  HEAP32[i64toi32_i32$1 >> 2] = $1321;
                  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                  $7 = $7 + 1 | 0;
                  HEAP32[(($6 + 424 | 0) + 8 | 0) >> 2] = $7;
                  $1 = HEAP32[$22 >> 2] | 0;
                  if (($1 | 0) != (HEAP32[(($6 + 448 | 0) + 12 | 0) >> 2] | 0 | 0)) {
                   continue label$52
                  }
                  break label$52;
                 };
                }
                $1 = HEAP32[($6 + 412 | 0) >> 2] | 0;
                $12 = $6 + 408 | 0;
                break label$18;
               }
               core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $7 | 0, $8 | 0);
               abort();
              }
              core__panicking__panic_bounds_check__h0537ade040df571e(1051112 | 0, $10 | 0, $9 | 0);
              abort();
             }
             core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $7 | 0, $2 | 0);
             abort();
            }
            core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $7 | 0, $2 | 0);
            abort();
           }
           core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $2 | 0, $7 | 0);
           abort();
          }
          core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $10 | 0, $9 | 0);
          abort();
         }
         core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $10 | 0, $2 | 0);
         abort();
        }
        core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $8 | 0, $2 | 0);
        abort();
       }
       $1 = 0;
       $12 = $6 + 408 | 0;
       $13 = 0;
      }
      $alloc__vec__IntoIter_T__20as_20core__ops__drop__Drop___drop__h9f6fdc6542cf8633($6 + 448 | 0 | 0);
      $7 = ($6 + 848 | 0) + 16 | 0;
      HEAP32[$7 >> 2] = HEAP32[(($6 + 424 | 0) + 16 | 0) >> 2] | 0;
      $8 = ($6 + 848 | 0) + 8 | 0;
      i64toi32_i32$2 = ($6 + 424 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $1375 = i64toi32_i32$0;
      i64toi32_i32$0 = $8;
      HEAP32[i64toi32_i32$0 >> 2] = $1375;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $6;
      i64toi32_i32$1 = HEAP32[($6 + 424 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($6 + 428 | 0) >> 2] | 0;
      $1378 = i64toi32_i32$1;
      i64toi32_i32$1 = $6;
      HEAP32[($6 + 848 | 0) >> 2] = $1378;
      HEAP32[($6 + 852 | 0) >> 2] = i64toi32_i32$0;
      label$61 : {
       if (($13 | 0) != ($1 | 0)) {
        break label$61
       }
       alloc__raw_vec__RawVec_T_2cA___reserve__h73864728c23965ff($6 + 408 | 0 | 0, $1 | 0, 1 | 0);
       $13 = HEAP32[(($6 + 408 | 0) + 8 | 0) >> 2] | 0;
      }
      HEAP32[(($6 + 408 | 0) + 8 | 0) >> 2] = $13 + 1 | 0;
      $1 = (HEAP32[$12 >> 2] | 0) + Math_imul($13, 20) | 0;
      i64toi32_i32$2 = $6;
      i64toi32_i32$0 = HEAP32[($6 + 848 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($6 + 852 | 0) >> 2] | 0;
      $1401 = i64toi32_i32$0;
      i64toi32_i32$0 = $1;
      HEAP32[$1 >> 2] = $1401;
      HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $8;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $1405 = i64toi32_i32$1;
      i64toi32_i32$1 = $1 + 8 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $1405;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($1 + 16 | 0) >> 2] = HEAP32[$7 >> 2] | 0;
      break label$16;
     }
     alloc__raw_vec__RawVec_T_2cA___reserve__h73864728c23965ff($6 + 408 | 0 | 0, 0 | 0, 1 | 0);
     $1 = ($6 + 408 | 0) + 8 | 0;
     $1415 = $1;
     $1 = HEAP32[$1 >> 2] | 0;
     HEAP32[$1415 >> 2] = $1 + 1 | 0;
     $1 = (HEAP32[($6 + 408 | 0) >> 2] | 0) + Math_imul($1, 20) | 0;
     i64toi32_i32$2 = $6;
     i64toi32_i32$0 = HEAP32[($6 + 376 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($6 + 380 | 0) >> 2] | 0;
     $1427 = i64toi32_i32$0;
     i64toi32_i32$0 = $1;
     HEAP32[$1 >> 2] = $1427;
     HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$0 = $1;
     i64toi32_i32$1 = 0;
     HEAP32[($1 + 12 | 0) >> 2] = 0;
     HEAP32[($1 + 16 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[($1 + 8 | 0) >> 2] = HEAP32[(($6 + 376 | 0) + 8 | 0) >> 2] | 0;
    }
    $1 = ($6 + 392 | 0) + 8 | 0;
    HEAP32[$1 >> 2] = HEAP32[(($6 + 408 | 0) + 8 | 0) >> 2] | 0;
    i64toi32_i32$2 = $6;
    i64toi32_i32$1 = HEAP32[($6 + 408 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($6 + 412 | 0) >> 2] | 0;
    $1445 = i64toi32_i32$1;
    i64toi32_i32$1 = $6;
    HEAP32[($6 + 392 | 0) >> 2] = $1445;
    HEAP32[($6 + 396 | 0) >> 2] = i64toi32_i32$0;
    $13 = HEAP32[($6 + 392 | 0) >> 2] | 0;
    $12 = HEAP32[$1 >> 2] | 0;
    $8 = $13 + Math_imul($12, 20) | 0;
    HEAP32[($6 + 864 | 0) >> 2] = $6 + 360 | 0;
    HEAP32[($6 + 860 | 0) >> 2] = $6 + 260 | 0;
    HEAP32[($6 + 856 | 0) >> 2] = $6 + 269 | 0;
    HEAP32[($6 + 852 | 0) >> 2] = $6 + 336 | 0;
    HEAP32[($6 + 848 | 0) >> 2] = $6 + 268 | 0;
    $1 = $13;
    label$62 : {
     label$63 : {
      label$64 : {
       label$65 : {
        label$66 : {
         label$67 : {
          label$68 : {
           label$69 : while (1) {
            if (($8 - $1 | 0) >>> 0 <= 60 >>> 0) {
             break label$68
            }
            stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__hbe2f8245534ccb36($6 + 96 | 0 | 0, $6 + 848 | 0 | 0, $1 | 0);
            $7 = HEAP32[($6 + 96 | 0) >> 2] | 0;
            if ($7) {
             break label$67
            }
            stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__hbe2f8245534ccb36($6 + 88 | 0 | 0, $6 + 848 | 0 | 0, $1 + 20 | 0 | 0);
            $7 = HEAP32[($6 + 88 | 0) >> 2] | 0;
            if ($7) {
             break label$66
            }
            stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__hbe2f8245534ccb36($6 + 80 | 0 | 0, $6 + 848 | 0 | 0, $1 + 40 | 0 | 0);
            $7 = HEAP32[($6 + 80 | 0) >> 2] | 0;
            if ($7) {
             break label$65
            }
            stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__hbe2f8245534ccb36($6 + 72 | 0 | 0, $6 + 848 | 0 | 0, $1 + 60 | 0 | 0);
            $1 = $1 + 80 | 0;
            $7 = HEAP32[($6 + 72 | 0) >> 2] | 0;
            if (!$7) {
             continue label$69
            }
            break label$69;
           };
           $1 = HEAP32[($6 + 76 | 0) >> 2] | 0;
           break label$64;
          }
          $8 = $13 + Math_imul($12, 20) | 0;
          label$70 : while (1) {
           if (($8 | 0) == ($1 | 0)) {
            break label$63
           }
           stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__hbe2f8245534ccb36($6 + 232 | 0 | 0, $6 + 848 | 0 | 0, $1 | 0);
           $1 = $1 + 20 | 0;
           $7 = HEAP32[($6 + 232 | 0) >> 2] | 0;
           if (!$7) {
            continue label$70
           }
           break label$70;
          };
          $1 = HEAP32[($6 + 236 | 0) >> 2] | 0;
          break label$64;
         }
         $1 = HEAP32[($6 + 100 | 0) >> 2] | 0;
         break label$64;
        }
        $1 = HEAP32[($6 + 92 | 0) >> 2] | 0;
        break label$64;
       }
       $1 = HEAP32[($6 + 84 | 0) >> 2] | 0;
      }
      HEAP32[($0 + 4 | 0) >> 2] = $7;
      HEAP32[$0 >> 2] = 1;
      HEAP32[($0 + 8 | 0) >> 2] = $1;
      break label$62;
     }
     label$71 : {
      label$72 : {
       $12 = HEAPU8[($6 + 268 | 0) >> 0] | 0;
       if (($12 | 2 | 0 | 0) != (3 | 0)) {
        break label$72
       }
       $11 = HEAP32[($3 + 8 | 0) >> 2] | 0;
       $120 = Math_fround(HEAPF32[($3 + 12 | 0) >> 2]);
       break label$71;
      }
      $120 = Math_fround(HEAPF32[($3 + 4 | 0) >> 2]);
      $11 = HEAP32[$3 >> 2] | 0;
     }
     label$73 : {
      label$74 : {
       $7 = HEAP32[(($6 + 392 | 0) + 8 | 0) >> 2] | 0;
       if (!$7) {
        break label$74
       }
       $1 = HEAP32[($6 + 392 | 0) >> 2] | 0;
       $13 = $1 + Math_imul($7, 20) | 0;
       $119 = Math_fround(-3402823466385288598117041.0e14);
       label$75 : while (1) {
        $8 = HEAP32[($1 + 8 | 0) >> 2] | 0;
        $7 = HEAP32[$1 >> 2] | 0;
        HEAP32[(($6 + 848 | 0) + 8 | 0) >> 2] = $6 + 268 | 0;
        HEAP32[($6 + 848 | 0) >> 2] = $7;
        HEAP32[($6 + 852 | 0) >> 2] = $7 + Math_imul($8, 192) | 0;
        $119 = Math_fround(fmaxf(Math_fround($119), Math_fround(Math_fround($core__iter__adapters__Map_I_2cF__20as_20core__iter__traits__iterator__Iterator___fold__h7964a558a506f099($6 + 848 | 0 | 0, Math_fround(Math_fround(0.0)))))));
        $1 = $1 + 20 | 0;
        if (($1 | 0) != ($13 | 0)) {
         continue label$75
        }
        break label$75;
       };
       $1 = HEAPU8[($6 + 268 | 0) >> 0] | 0;
       break label$73;
      }
      $119 = Math_fround(-3402823466385288598117041.0e14);
      $1 = $12;
     }
     label$76 : {
      label$77 : {
       $7 = (($1 | 2 | 0) & 3 | 0 | 0) == (3 | 0);
       if (!$7) {
        break label$77
       }
       $8 = $10;
       $13 = $9;
       break label$76;
      }
      $8 = $6 + 320 | 0;
      $13 = $14;
     }
     $121 = Math_fround(Math_fround(HEAPF32[$8 >> 2]) + Math_fround(HEAPF32[$13 >> 2]));
     label$78 : {
      label$79 : {
       if (!$7) {
        break label$79
       }
       $7 = HEAP32[($6 + 368 | 0) >> 2] | 0;
       $122 = Math_fround(HEAPF32[($6 + 372 | 0) >> 2]);
       break label$78;
      }
      $122 = Math_fround(HEAPF32[($6 + 364 | 0) >> 2]);
      $7 = HEAP32[($6 + 360 | 0) >> 2] | 0;
     }
     $119 = Math_fround($119 + $121);
     label$80 : {
      if ($7) {
       break label$80
      }
      $119 = (wasm2js_f32$0 = (HEAP32[($6 + 400 | 0) >> 2] | 0) >>> 0 > 1 >>> 0 ? $122 : $119, wasm2js_f32$1 = $119, wasm2js_i32$0 = $119 < $122, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
     }
     $119 = $11 ? $119 : $120;
     label$81 : {
      label$82 : {
       if ((($12 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
        break label$82
       }
       HEAPF32[($6 + 356 | 0) >> 2] = $119;
       $119 = Math_fround(HEAPF32[($6 + 352 | 0) >> 2]);
       break label$81;
      }
      HEAPF32[($6 + 352 | 0) >> 2] = $119;
     }
     label$83 : {
      $7 = (($1 | 2 | 0) & 3 | 0 | 0) == (3 | 0);
      if (!$7) {
       break label$83
      }
      $119 = Math_fround(HEAPF32[($6 + 356 | 0) >> 2]);
     }
     label$84 : {
      label$85 : {
       if (!$7) {
        break label$85
       }
       $7 = $10;
       $8 = $9;
       break label$84;
      }
      $7 = $6 + 320 | 0;
      $8 = $14;
     }
     $120 = Math_fround($119 - Math_fround(Math_fround(HEAPF32[$7 >> 2]) + Math_fround(HEAPF32[$8 >> 2])));
     label$86 : {
      label$87 : {
       if ((($1 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
        break label$87
       }
       $122 = $120;
       $120 = Math_fround(0.0);
       break label$86;
      }
      $122 = Math_fround(0.0);
     }
     $13 = HEAP32[($6 + 392 | 0) >> 2] | 0;
     $12 = HEAP32[($6 + 400 | 0) >> 2] | 0;
     $8 = $13 + Math_imul($12, 20) | 0;
     HEAP32[($6 + 864 | 0) >> 2] = $6 + 360 | 0;
     HEAP32[($6 + 860 | 0) >> 2] = $6 + 352 | 0;
     HEAP32[($6 + 856 | 0) >> 2] = $6 + 269 | 0;
     HEAP32[($6 + 852 | 0) >> 2] = $6 + 260 | 0;
     HEAP32[($6 + 848 | 0) >> 2] = $6 + 268 | 0;
     $1 = $13;
     label$88 : {
      label$89 : {
       label$90 : {
        label$91 : {
         label$92 : {
          label$93 : {
           label$94 : while (1) {
            if (($8 - $1 | 0) >>> 0 <= 60 >>> 0) {
             break label$93
            }
            stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__hb58137c1aa969abc($6 + 128 | 0 | 0, $6 + 848 | 0 | 0, $1 | 0);
            $7 = HEAP32[($6 + 128 | 0) >> 2] | 0;
            if ($7) {
             break label$92
            }
            stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__hb58137c1aa969abc($6 + 120 | 0 | 0, $6 + 848 | 0 | 0, $1 + 20 | 0 | 0);
            $7 = HEAP32[($6 + 120 | 0) >> 2] | 0;
            if ($7) {
             break label$91
            }
            stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__hb58137c1aa969abc($6 + 112 | 0 | 0, $6 + 848 | 0 | 0, $1 + 40 | 0 | 0);
            $7 = HEAP32[($6 + 112 | 0) >> 2] | 0;
            if ($7) {
             break label$90
            }
            stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__hb58137c1aa969abc($6 + 104 | 0 | 0, $6 + 848 | 0 | 0, $1 + 60 | 0 | 0);
            $1 = $1 + 80 | 0;
            $7 = HEAP32[($6 + 104 | 0) >> 2] | 0;
            if (!$7) {
             continue label$94
            }
            break label$94;
           };
           $1 = HEAP32[($6 + 108 | 0) >> 2] | 0;
           break label$89;
          }
          $8 = $13 + Math_imul($12, 20) | 0;
          label$95 : while (1) {
           if (($8 | 0) == ($1 | 0)) {
            break label$88
           }
           stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__hb58137c1aa969abc($6 + 224 | 0 | 0, $6 + 848 | 0 | 0, $1 | 0);
           $1 = $1 + 20 | 0;
           $7 = HEAP32[($6 + 224 | 0) >> 2] | 0;
           if (!$7) {
            continue label$95
           }
           break label$95;
          };
          $1 = HEAP32[($6 + 228 | 0) >> 2] | 0;
          break label$89;
         }
         $1 = HEAP32[($6 + 132 | 0) >> 2] | 0;
         break label$89;
        }
        $1 = HEAP32[($6 + 124 | 0) >> 2] | 0;
        break label$89;
       }
       $1 = HEAP32[($6 + 116 | 0) >> 2] | 0;
      }
      HEAP32[($0 + 4 | 0) >> 2] = $7;
      HEAP32[$0 >> 2] = 1;
      HEAP32[($0 + 8 | 0) >> 2] = $1;
      break label$62;
     }
     label$96 : {
      label$97 : {
       label$98 : {
        label$99 : {
         label$100 : {
          label$101 : {
           label$102 : {
            label$103 : {
             label$104 : {
              label$105 : {
               if (!$2) {
                break label$105
               }
               $13 = HEAP32[($6 + 400 | 0) >> 2] | 0;
               $8 = HEAP32[($6 + 392 | 0) >> 2] | 0;
               HEAP32[($6 + 860 | 0) >> 2] = $3;
               $7 = $8 + Math_imul($13, 20) | 0;
               HEAP32[($6 + 864 | 0) >> 2] = $6 + 264 | 0;
               HEAP32[($6 + 856 | 0) >> 2] = $6 + 352 | 0;
               HEAP32[($6 + 852 | 0) >> 2] = $6 + 269 | 0;
               HEAP32[($6 + 848 | 0) >> 2] = $6 + 260 | 0;
               $1 = $8;
               label$106 : {
                label$107 : while (1) {
                 if (($7 - $1 | 0) >>> 0 <= 60 >>> 0) {
                  break label$106
                 }
                 stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__h26cc7e6a0697da95($6 + 160 | 0 | 0, $6 + 848 | 0 | 0, $1 | 0);
                 $2 = HEAP32[($6 + 160 | 0) >> 2] | 0;
                 if ($2) {
                  break label$104
                 }
                 stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__h26cc7e6a0697da95($6 + 152 | 0 | 0, $6 + 848 | 0 | 0, $1 + 20 | 0 | 0);
                 $2 = HEAP32[($6 + 152 | 0) >> 2] | 0;
                 if ($2) {
                  break label$103
                 }
                 stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__h26cc7e6a0697da95($6 + 144 | 0 | 0, $6 + 848 | 0 | 0, $1 + 40 | 0 | 0);
                 $2 = HEAP32[($6 + 144 | 0) >> 2] | 0;
                 if ($2) {
                  break label$102
                 }
                 stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__h26cc7e6a0697da95($6 + 136 | 0 | 0, $6 + 848 | 0 | 0, $1 + 60 | 0 | 0);
                 $1 = $1 + 80 | 0;
                 $2 = HEAP32[($6 + 136 | 0) >> 2] | 0;
                 if (!$2) {
                  continue label$107
                 }
                 break label$107;
                };
                $1 = HEAP32[($6 + 140 | 0) >> 2] | 0;
                break label$101;
               }
               $7 = $8 + Math_imul($13, 20) | 0;
               label$108 : while (1) {
                if (($7 | 0) == ($1 | 0)) {
                 break label$105
                }
                stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__h26cc7e6a0697da95($6 + 216 | 0 | 0, $6 + 848 | 0 | 0, $1 | 0);
                $1 = $1 + 20 | 0;
                $2 = HEAP32[($6 + 216 | 0) >> 2] | 0;
                if (!$2) {
                 continue label$108
                }
                break label$108;
               };
               $1 = HEAP32[($6 + 220 | 0) >> 2] | 0;
               break label$101;
              }
              $1 = HEAP32[($6 + 400 | 0) >> 2] | 0;
              if (!$1) {
               break label$99
              }
              label$109 : {
               if (($1 | 0) != (1 | 0)) {
                break label$109
               }
               $119 = Math_fround(HEAPF32[($3 + 12 | 0) >> 2]);
               $121 = Math_fround(HEAPF32[($3 + 4 | 0) >> 2]);
               $7 = HEAP32[$3 >> 2] | 0;
               $8 = HEAP32[($3 + 8 | 0) >> 2] | 0;
               $2 = $8;
               label$110 : {
                $13 = HEAPU8[($6 + 268 | 0) >> 0] | 0;
                if (($13 | 2 | 0 | 0) != (3 | 0)) {
                 break label$110
                }
                $2 = $7;
               }
               if (!$2) {
                break label$100
               }
              }
              $28 = 20;
              $29 = HEAP32[($6 + 392 | 0) >> 2] | 0;
              $30 = $29 + Math_imul($1, 20) | 0;
              $31 = $6 + 864 | 0;
              $32 = $6 + 860 | 0;
              $33 = $6 + 856 | 0;
              $34 = 192;
              $124 = Math_fround(0.0);
              $35 = 176;
              $36 = -192;
              $37 = 0;
              break label$97;
             }
             $1 = HEAP32[($6 + 164 | 0) >> 2] | 0;
             break label$101;
            }
            $1 = HEAP32[($6 + 156 | 0) >> 2] | 0;
            break label$101;
           }
           $1 = HEAP32[($6 + 148 | 0) >> 2] | 0;
          }
          HEAP32[($0 + 4 | 0) >> 2] = $2;
          HEAP32[$0 >> 2] = 1;
          HEAP32[($0 + 8 | 0) >> 2] = $1;
          break label$62;
         }
         label$111 : {
          $13 = (($13 | 2 | 0) & 3 | 0 | 0) == (3 | 0);
          if (!$13) {
           break label$111
          }
          $119 = $121;
          $8 = $7;
         }
         $1 = $10;
         $2 = $9;
         label$112 : {
          if (!$13) {
           break label$112
          }
          $1 = $6 + 320 | 0;
          $2 = $14;
         }
         HEAPF32[((HEAP32[($6 + 392 | 0) >> 2] | 0) + 12 | 0) >> 2] = (wasm2js_f32$0 = Math_fround(0.0), wasm2js_f32$1 = Math_fround($119 - Math_fround(Math_fround(HEAPF32[$1 >> 2]) + Math_fround(HEAPF32[$2 >> 2]))), wasm2js_i32$0 = $8, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
         break label$98;
        }
        $1 = 0;
        break label$96;
       }
       $1 = 0;
       break label$96;
      }
      $1 = 1;
     }
     label$113 : {
      label$114 : while (1) {
       label$115 : {
        label$116 : {
         label$117 : {
          label$118 : {
           label$119 : {
            label$120 : {
             label$121 : {
              label$122 : {
               label$123 : {
                label$124 : {
                 label$125 : {
                  label$126 : {
                   label$127 : {
                    label$128 : {
                     label$129 : {
                      switch ($1 | 0) {
                      case 0:
                       label$131 : {
                        $38 = HEAP32[($6 + 260 | 0) >> 2] | 0;
                        $1 = HEAP32[($38 + 8 | 0) >> 2] | 0;
                        $39 = HEAP32[($6 + 264 | 0) >> 2] | 0;
                        if ($1 >>> 0 <= $39 >>> 0) {
                         break label$131
                        }
                        label$132 : {
                         if ((HEAPU8[(((HEAP32[$38 >> 2] | 0) + Math_imul($39, 288) | 0) + 208 | 0) >> 0] | 0 | 0) != (3 | 0)) {
                          break label$132
                         }
                         $121 = Math_fround(HEAPF32[($3 + 12 | 0) >> 2]);
                         $123 = Math_fround(HEAPF32[($3 + 4 | 0) >> 2]);
                         $7 = HEAP32[$3 >> 2] | 0;
                         $8 = HEAP32[($3 + 8 | 0) >> 2] | 0;
                         $1 = $8;
                         label$133 : {
                          $13 = HEAPU8[($6 + 268 | 0) >> 0] | 0;
                          if (($13 | 2 | 0 | 0) != (3 | 0)) {
                           break label$133
                          }
                          $1 = $7;
                         }
                         if ($1) {
                          break label$132
                         }
                         $11 = HEAP32[($6 + 392 | 0) >> 2] | 0;
                         label$134 : {
                          label$135 : {
                           $12 = HEAP32[($6 + 400 | 0) >> 2] | 0;
                           if (!$12) {
                            break label$135
                           }
                           $2 = Math_imul($12, 20);
                           $1 = $11 + 12 | 0;
                           $119 = Math_fround(0.0);
                           label$136 : while (1) {
                            $119 = Math_fround($119 + Math_fround(HEAPF32[$1 >> 2]));
                            $1 = $1 + 20 | 0;
                            $2 = $2 + -20 | 0;
                            if ($2) {
                             continue label$136
                            }
                            break label$134;
                           };
                          }
                          $119 = Math_fround(0.0);
                         }
                         label$137 : {
                          $13 = (($13 | 2 | 0) & 3 | 0 | 0) == (3 | 0);
                          if (!$13) {
                           break label$137
                          }
                          $121 = $123;
                          $8 = $7;
                         }
                         $1 = $10;
                         $2 = $9;
                         label$138 : {
                          if (!$13) {
                           break label$138
                          }
                          $1 = $6 + 320 | 0;
                          $2 = $14;
                         }
                         $121 = (wasm2js_f32$0 = Math_fround(0.0), wasm2js_f32$1 = Math_fround($121 - Math_fround(Math_fround(HEAPF32[$1 >> 2]) + Math_fround(HEAPF32[$2 >> 2]))), wasm2js_i32$0 = $8, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
                         if ($119 < $121 ^ 1 | 0) {
                          break label$132
                         }
                         if (!$12) {
                          break label$132
                         }
                         $119 = Math_fround(Math_fround($121 - $119) / Math_fround($12 >>> 0));
                         $2 = Math_imul($12, 20);
                         $1 = $11 + 12 | 0;
                         label$139 : while (1) {
                          HEAPF32[$1 >> 2] = Math_fround($119 + Math_fround(HEAPF32[$1 >> 2]));
                          $1 = $1 + 20 | 0;
                          $2 = $2 + -20 | 0;
                          if ($2) {
                           continue label$139
                          }
                          break label$139;
                         };
                        }
                        $40 = HEAP32[($6 + 392 | 0) >> 2] | 0;
                        label$140 : {
                         $1 = HEAP32[(($6 + 392 | 0) + 8 | 0) >> 2] | 0;
                         if (!$1) {
                          break label$140
                         }
                         $41 = 20;
                         $42 = $40 + Math_imul($1, 20) | 0;
                         $43 = 192;
                         $44 = $38 + 8 | 0;
                         $45 = 288;
                         $46 = 7;
                         $47 = 5;
                         $48 = 2;
                         $49 = 3;
                         $50 = 32;
                         $51 = 1;
                         $52 = 40;
                         $53 = 144;
                         $54 = 1051144;
                         $55 = 1051128;
                         $56 = 28;
                         $57 = 24;
                         $58 = 48;
                         $59 = 44;
                         $60 = 36;
                         $61 = 152;
                         $62 = 56;
                         $63 = 148;
                         $64 = 160;
                         $65 = 164;
                         $66 = 168;
                         $67 = 172;
                         $68 = 4;
                         $69 = $40;
                         $37 = 1;
                         break label$128;
                        }
                        $96 = 0;
                        $95 = $40;
                        break label$119;
                       }
                       core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $39 | 0, $1 | 0);
                       abort();
                      default:
                       break label$129;
                      };
                     }
                     label$141 : {
                      label$142 : {
                       switch ($37 | 0) {
                       case 0:
                        $7 = $29 + $28 | 0;
                        $119 = Math_fround(0.0);
                        label$145 : {
                         $8 = HEAP32[($29 + 8 | 0) >> 2] | 0;
                         if (!$8) {
                          break label$145
                         }
                         $2 = Math_imul($8, $34);
                         $1 = (HEAP32[$29 >> 2] | 0) + $35 | 0;
                         $119 = Math_fround(0.0);
                         label$146 : while (1) {
                          $119 = Math_fround(fmaxf(Math_fround($119), Math_fround(Math_fround(HEAPF32[$1 >> 2]))));
                          $1 = $1 + $34 | 0;
                          $2 = $2 + $36 | 0;
                          if ($2) {
                           continue label$146
                          }
                          break label$146;
                         };
                        }
                        HEAPF32[($6 + 672 | 0) >> 2] = $119;
                        HEAP32[(($6 + 848 | 0) + $28 | 0) >> 2] = $6 + 672 | 0;
                        HEAP32[$31 >> 2] = $6 + 268 | 0;
                        HEAP32[$32 >> 2] = $6 + 264 | 0;
                        HEAP32[$33 >> 2] = $6 + 260 | 0;
                        $1 = HEAP32[$29 >> 2] | 0;
                        HEAP32[($6 + 848 | 0) >> 2] = $1;
                        HEAP32[($6 + 852 | 0) >> 2] = $1 + Math_imul($8, $34) | 0;
                        (wasm2js_i32$0 = $29, wasm2js_f32$0 = Math_fround($core__iter__adapters__Map_I_2cF__20as_20core__iter__traits__iterator__Iterator___fold__h910bc72f9b4fd482($6 + 848 | 0 | 0, Math_fround($124)))), HEAPF32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_f32$0;
                        $29 = $7;
                        if (($7 | 0) != ($30 | 0)) {
                         break label$126
                        }
                        $1 = 0;
                        continue label$114;
                       case 1:
                        label$147 : {
                         $1 = HEAP32[($69 + 8 | 0) >> 2] | 0;
                         if (!$1) {
                          break label$147
                         }
                         $123 = Math_fround(HEAPF32[($69 + 12 | 0) >> 2]);
                         $19 = Math_imul($1, $43);
                         $2 = 0;
                         $8 = HEAP32[$69 >> 2] | 0;
                         $13 = $8;
                         label$148 : while (1) {
                          $7 = HEAP32[$44 >> 2] | 0;
                          $1 = $8 + $2 | 0;
                          $12 = HEAP32[$1 >> 2] | 0;
                          if ($7 >>> 0 <= $12 >>> 0) {
                           break label$123
                          }
                          if ($7 >>> 0 <= $39 >>> 0) {
                           break label$124
                          }
                          $7 = HEAPU8[($6 + 268 | 0) >> 0] | 0;
                          label$149 : {
                           label$150 : {
                            label$151 : {
                             $37 = HEAP32[$38 >> 2] | 0;
                             $12 = $37 + Math_imul($12, $45) | 0;
                             $11 = HEAPU8[($12 + 207 | 0) >> 0] | 0;
                             if (($11 & $46 | 0 | 0) == ($47 | 0)) {
                              break label$151
                             }
                             if ($11) {
                              break label$150
                             }
                             if ((HEAPU8[(($37 + Math_imul($39, $45) | 0) + 206 | 0) >> 0] | 0) >>> 0 < $68 >>> 0) {
                              break label$150
                             }
                            }
                            label$152 : {
                             label$153 : {
                              $11 = (($7 | $48 | 0) & $49 | 0 | 0) == ($49 | 0);
                              if ($11) {
                               break label$153
                              }
                              $37 = $12 + $58 | 0;
                              break label$152;
                             }
                             $37 = $12 + $50 | 0;
                            }
                            if ((HEAP32[$37 >> 2] | 0 | 0) == ($51 | 0)) {
                             break label$150
                            }
                            label$154 : {
                             label$155 : {
                              if ($11) {
                               break label$155
                              }
                              $37 = $12 + $62 | 0;
                              break label$154;
                             }
                             $37 = $12 + $52 | 0;
                            }
                            if ((HEAP32[$37 >> 2] | 0 | 0) == ($51 | 0)) {
                             break label$150
                            }
                            label$156 : {
                             label$157 : {
                              if ($11) {
                               break label$157
                              }
                              $12 = $12 + $61 | 0;
                              break label$156;
                             }
                             $12 = $12 + $53 | 0;
                            }
                            if ((HEAP32[$12 >> 2] | 0 | 0) != ($51 | 0)) {
                             break label$150
                            }
                            $12 = (($7 ^ $48 | 0) & $49 | 0) << $48 | 0;
                            $119 = Math_fround($123 - Math_fround(Math_fround(HEAPF32[($8 + ($2 + ((HEAP32[($12 + $55 | 0) >> 2] | 0) << $48 | 0) | 0) | 0) >> 2]) + Math_fround(HEAPF32[($8 + ($2 + ((HEAP32[($12 + $54 | 0) >> 2] | 0) << $48 | 0) | 0) | 0) >> 2])));
                            label$158 : {
                             label$159 : {
                              if ($11) {
                               break label$159
                              }
                              $121 = Math_fround(HEAPF32[($1 + $50 | 0) >> 2]);
                              $12 = HEAP32[($1 + $56 | 0) >> 2] | 0;
                              break label$158;
                             }
                             $12 = HEAP32[($1 + $41 | 0) >> 2] | 0;
                             $121 = Math_fround(HEAPF32[($1 + $57 | 0) >> 2]);
                            }
                            $119 = (wasm2js_f32$0 = $119, wasm2js_f32$1 = Math_fround(fmaxf(Math_fround($119), Math_fround($121))), wasm2js_i32$0 = $12, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
                            label$160 : {
                             label$161 : {
                              if ($11) {
                               break label$161
                              }
                              $121 = Math_fround(HEAPF32[($1 + $58 | 0) >> 2]);
                              $12 = HEAP32[($1 + $59 | 0) >> 2] | 0;
                              break label$160;
                             }
                             $12 = HEAP32[($1 + $60 | 0) >> 2] | 0;
                             $121 = Math_fround(HEAPF32[($1 + $52 | 0) >> 2]);
                            }
                            $119 = (wasm2js_f32$0 = $119, wasm2js_f32$1 = Math_fround(fminf(Math_fround($119), Math_fround($121))), wasm2js_i32$0 = $12, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
                            break label$149;
                           }
                           label$162 : {
                            if ((($7 | $48 | 0) & $49 | 0 | 0) == ($49 | 0)) {
                             break label$162
                            }
                            $119 = Math_fround(HEAPF32[($1 + $63 | 0) >> 2]);
                            break label$149;
                           }
                           $119 = Math_fround(HEAPF32[($1 + $53 | 0) >> 2]);
                          }
                          label$163 : {
                           label$164 : {
                            label$165 : {
                             $12 = (($7 | $48 | 0) & $49 | 0 | 0) == ($49 | 0);
                             if ($12) {
                              break label$165
                             }
                             HEAPF32[($1 + $65 | 0) >> 2] = $119;
                             if ($12) {
                              break label$164
                             }
                             break label$163;
                            }
                            HEAPF32[($1 + $64 | 0) >> 2] = $119;
                            $119 = Math_fround(HEAPF32[($1 + $65 | 0) >> 2]);
                            if (!$12) {
                             break label$163
                            }
                           }
                           $119 = Math_fround(HEAPF32[($1 + $64 | 0) >> 2]);
                          }
                          $7 = (($7 ^ $48 | 0) & $49 | 0) << $48 | 0;
                          $119 = Math_fround($119 + Math_fround(Math_fround(HEAPF32[($8 + ($2 + ((HEAP32[($7 + $55 | 0) >> 2] | 0) << $48 | 0) | 0) | 0) >> 2]) + Math_fround(HEAPF32[($8 + ($2 + ((HEAP32[($7 + $54 | 0) >> 2] | 0) << $48 | 0) | 0) | 0) >> 2])));
                          label$166 : {
                           label$167 : {
                            if ($12) {
                             break label$167
                            }
                            $1 = $1 + $67 | 0;
                            break label$166;
                           }
                           $1 = $13 + $66 | 0;
                          }
                          $13 = $13 + $43 | 0;
                          HEAPF32[$1 >> 2] = $119;
                          $2 = $2 + $43 | 0;
                          if (($19 | 0) != ($2 | 0)) {
                           continue label$148
                          }
                          break label$148;
                         };
                        }
                        $69 = $69 + $41 | 0;
                        if (($69 | 0) != ($42 | 0)) {
                         break label$127
                        }
                        $70 = 8;
                        $71 = ($6 + 848 | 0) + 8 | 0;
                        $72 = 192;
                        $73 = 20;
                        $125 = Math_fround(0.0);
                        $74 = 2;
                        $75 = 3;
                        $76 = 1;
                        $77 = 0;
                        $78 = $6 + 864 | 0;
                        $79 = $6 + 860 | 0;
                        $80 = 180;
                        $126 = Math_fround(.5);
                        $81 = -1;
                        $82 = 288;
                        $83 = 4;
                        $84 = -192;
                        $85 = 48;
                        $86 = 56;
                        $87 = 255;
                        $88 = 92;
                        $89 = 84;
                        $90 = 96;
                        $91 = 88;
                        $92 = 40;
                        $93 = 32;
                        $37 = 2;
                        break label$141;
                       case 2:
                        break label$142;
                       default:
                        break label$122;
                       };
                      }
                      $2 = HEAP32[($40 + 8 | 0) >> 2] | 0;
                      $1 = HEAP32[$40 >> 2] | 0;
                      HEAP32[$71 >> 2] = $6 + 268 | 0;
                      HEAP32[($6 + 848 | 0) >> 2] = $1;
                      HEAP32[($6 + 852 | 0) >> 2] = $1 + Math_imul($2, $72) | 0;
                      $121 = Math_fround($core__iter__adapters__Map_I_2cF__20as_20core__iter__traits__iterator__Iterator___fold__h932db59420cb06b6($6 + 848 | 0 | 0, Math_fround($125)));
                      $119 = $120;
                      label$168 : {
                       $25 = HEAPU8[($6 + 268 | 0) >> 0] | 0;
                       $23 = $25 | $74 | 0;
                       if (($23 | 0) != ($75 | 0)) {
                        break label$168
                       }
                       $119 = $122;
                      }
                      $123 = Math_fround($119 - $121);
                      HEAPF32[($6 + 496 | 0) >> 2] = $123;
                      $24 = HEAP32[($40 + $70 | 0) >> 2] | 0;
                      if (!$24) {
                       break label$121
                      }
                      $11 = HEAP32[($6 + 260 | 0) >> 2] | 0;
                      $19 = HEAP32[($11 + 8 | 0) >> 2] | 0;
                      $13 = 0;
                      $26 = Math_imul($24, $72);
                      $12 = $26;
                      $22 = HEAP32[$40 >> 2] | 0;
                      $1 = $22;
                      label$169 : while (1) {
                       $7 = HEAP32[$1 >> 2] | 0;
                       if ($19 >>> 0 <= $7 >>> 0) {
                        break label$125
                       }
                       $8 = HEAP32[$11 >> 2] | 0;
                       label$170 : {
                        label$171 : {
                         $2 = ($23 & $75 | 0 | 0) == ($75 | 0);
                         if ($2) {
                          break label$171
                         }
                         $37 = ($8 + Math_imul($7, $82) | 0) + $93 | 0;
                         break label$170;
                        }
                        $37 = ($8 + Math_imul($7, $82) | 0) + $85 | 0;
                       }
                       $13 = $13 + ((HEAP32[$37 >> 2] | 0 | 0) == ($76 | 0)) | 0;
                       label$172 : {
                        label$173 : {
                         if ($2) {
                          break label$173
                         }
                         $7 = ($8 + Math_imul($7, $82) | 0) + $92 | 0;
                         break label$172;
                        }
                        $7 = ($8 + Math_imul($7, $82) | 0) + $86 | 0;
                       }
                       $1 = $1 + $72 | 0;
                       $13 = $13 + ((HEAP32[$7 >> 2] | 0 | 0) == ($76 | 0)) | 0;
                       $12 = $12 + $84 | 0;
                       if ($12) {
                        continue label$169
                       }
                       break label$169;
                      };
                      if ($123 > $125 ^ $76 | 0) {
                       break label$121
                      }
                      if (($13 | 0) <= ($77 | 0)) {
                       break label$121
                      }
                      label$174 : {
                       $1 = HEAP32[$22 >> 2] | 0;
                       if ($19 >>> 0 <= $1 >>> 0) {
                        break label$174
                       }
                       $119 = Math_fround($123 / Math_fround($13 | 0));
                       $12 = HEAPU8[($6 + 269 | 0) >> 0] | 0;
                       $8 = $26 + $84 | 0;
                       label$175 : while (1) {
                        $7 = HEAP32[$11 >> 2] | 0;
                        label$176 : {
                         label$177 : {
                          if (!$2) {
                           break label$177
                          }
                          $13 = ($7 + Math_imul($1, $82) | 0) + $85 | 0;
                          break label$176;
                         }
                         $13 = ($7 + Math_imul($1, $82) | 0) + $93 | 0;
                        }
                        label$178 : {
                         if ((HEAP32[$13 >> 2] | 0 | 0) != ($76 | 0)) {
                          break label$178
                         }
                         HEAPF32[($22 + ($12 & $87 | 0 ? $89 : $88) | 0) >> 2] = $119;
                        }
                        label$179 : {
                         label$180 : {
                          if (!$2) {
                           break label$180
                          }
                          $1 = ($7 + Math_imul($1, $82) | 0) + $86 | 0;
                          break label$179;
                         }
                         $1 = ($7 + Math_imul($1, $82) | 0) + $92 | 0;
                        }
                        label$181 : {
                         if ((HEAP32[$1 >> 2] | 0 | 0) != ($76 | 0)) {
                          break label$181
                         }
                         HEAPF32[($22 + ($12 & $87 | 0 ? $91 : $90) | 0) >> 2] = $119;
                        }
                        if (!$8) {
                         break label$120
                        }
                        $8 = $8 + $84 | 0;
                        $19 = HEAP32[($11 + $70 | 0) >> 2] | 0;
                        $22 = $22 + $72 | 0;
                        $1 = HEAP32[$22 >> 2] | 0;
                        if ($19 >>> 0 > $1 >>> 0) {
                         continue label$175
                        }
                        break label$175;
                       };
                      }
                      core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $1 | 0, $19 | 0);
                      abort();
                     }
                     $1 = 1;
                     continue label$114;
                    }
                    $1 = 1;
                    continue label$114;
                   }
                   $37 = 1;
                   $1 = 1;
                   continue label$114;
                  }
                  $37 = 0;
                  $1 = 1;
                  continue label$114;
                 }
                 core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $7 | 0, $19 | 0);
                 abort();
                }
                core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $39 | 0, $7 | 0);
                abort();
               }
               core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $12 | 0, $7 | 0);
               abort();
              }
              label$182 : {
               label$183 : {
                label$184 : {
                 label$185 : {
                  $7 = HEAP32[($118 + 8 | 0) >> 2] | 0;
                  if (!$7) {
                   break label$185
                  }
                  $123 = Math_fround(HEAPF32[($118 + 12 | 0) >> 2]);
                  $12 = HEAP32[$118 >> 2] | 0;
                  $1 = $12 + $98 | 0;
                  $119 = Math_fround(0.0);
                  $19 = Math_imul($7, $97);
                  $2 = $19;
                  label$186 : while (1) {
                   $119 = Math_fround(fmaxf(Math_fround($119), Math_fround(Math_fround(HEAPF32[$1 >> 2]))));
                   $1 = $1 + $97 | 0;
                   $2 = $2 + $99 | 0;
                   if ($2) {
                    continue label$186
                   }
                   break label$186;
                  };
                  if (!$7) {
                   break label$185
                  }
                  $1 = 0;
                  $22 = HEAPU8[($6 + 268 | 0) >> 0] | 0;
                  label$187 : while (1) {
                   $13 = $12 + $1 | 0;
                   label$188 : {
                    label$189 : {
                     $8 = (($22 | $100 | 0) & $101 | 0 | 0) == ($101 | 0);
                     if ($8) {
                      break label$189
                     }
                     $121 = Math_fround(HEAPF32[($13 + $102 | 0) >> 2]);
                     break label$188;
                    }
                    $121 = Math_fround(HEAPF32[($13 + $103 | 0) >> 2]);
                   }
                   $2 = HEAP32[($6 + 260 | 0) >> 2] | 0;
                   $37 = HEAP32[($2 + 8 | 0) >> 2] | 0;
                   $7 = HEAP32[$13 >> 2] | 0;
                   if ($37 >>> 0 <= $7 >>> 0) {
                    break label$184
                   }
                   $2 = HEAP32[$2 >> 2] | 0;
                   label$190 : {
                    label$191 : {
                     if ($8) {
                      break label$191
                     }
                     $11 = ($2 + Math_imul($7, $104) | 0) + $117 | 0;
                     break label$190;
                    }
                    $11 = ($2 + Math_imul($7, $104) | 0) + $105 | 0;
                   }
                   $121 = Math_fround($123 - $121);
                   label$192 : {
                    label$193 : {
                     label$194 : {
                      label$195 : {
                       label$196 : {
                        label$197 : {
                         label$198 : {
                          label$199 : {
                           label$200 : {
                            label$201 : {
                             label$202 : {
                              label$203 : {
                               if ((HEAP32[$11 >> 2] | 0 | 0) != ($106 | 0)) {
                                break label$203
                               }
                               label$204 : {
                                label$205 : {
                                 if ($8) {
                                  break label$205
                                 }
                                 $11 = ($2 + Math_imul($7, $104) | 0) + $110 | 0;
                                 break label$204;
                                }
                                $11 = ($2 + Math_imul($7, $104) | 0) + $107 | 0;
                               }
                               if ((HEAP32[$11 >> 2] | 0 | 0) != ($106 | 0)) {
                                break label$203
                               }
                               if (!(HEAPU8[($6 + 269 | 0) >> 0] | 0)) {
                                break label$202
                               }
                               $121 = Math_fround($121 * $131);
                               HEAPF32[($13 + $109 | 0) >> 2] = $121;
                               $2 = 24;
                               break label$192;
                              }
                              label$206 : {
                               label$207 : {
                                if ($8) {
                                 break label$207
                                }
                                $11 = ($2 + Math_imul($7, $104) | 0) + $117 | 0;
                                break label$206;
                               }
                               $11 = ($2 + Math_imul($7, $104) | 0) + $105 | 0;
                              }
                              label$208 : {
                               if ((HEAP32[$11 >> 2] | 0 | 0) != ($106 | 0)) {
                                break label$208
                               }
                               $2 = HEAPU8[($6 + 269 | 0) >> 0] | 0 ? $112 : $111;
                               break label$192;
                              }
                              label$209 : {
                               label$210 : {
                                if ($8) {
                                 break label$210
                                }
                                $8 = ($2 + Math_imul($7, $104) | 0) + $110 | 0;
                                break label$209;
                               }
                               $8 = ($2 + Math_imul($7, $104) | 0) + $107 | 0;
                              }
                              label$211 : {
                               if ((HEAP32[$8 >> 2] | 0 | 0) != ($106 | 0)) {
                                break label$211
                               }
                               $2 = HEAPU8[($6 + 269 | 0) >> 0] | 0 ? $114 : $113;
                               break label$192;
                              }
                              $8 = HEAP32[($6 + 264 | 0) >> 2] | 0;
                              if ($37 >>> 0 <= $8 >>> 0) {
                               break label$183
                              }
                              $7 = HEAPU8[(($2 + Math_imul($7, $104) | 0) + 207 | 0) >> 0] | 0;
                              if (!$7) {
                               break label$201
                              }
                              $2 = $7 + $115 | 0;
                              if ($2 >>> 0 > $116 >>> 0) {
                               break label$195
                              }
                              switch ($2 | 0) {
                              case 2:
                               break label$196;
                              case 3:
                               break label$197;
                              case 4:
                               break label$199;
                              case 1:
                               break label$200;
                              default:
                               break label$198;
                              };
                             }
                             $121 = Math_fround($121 * $131);
                             HEAPF32[($13 + $108 | 0) >> 2] = $121;
                             $2 = 22;
                             break label$192;
                            }
                            $2 = (HEAPU8[(($2 + Math_imul($8, $104) | 0) + 206 | 0) >> 0] | 0) + $115 | 0;
                            if ($2 >>> 0 > $101 >>> 0) {
                             break label$198
                            }
                            switch ($2 | 0) {
                            case 1:
                             break label$196;
                            case 2:
                             break label$197;
                            case 3:
                             break label$199;
                            default:
                             break label$200;
                            };
                           }
                           $121 = HEAPU8[($6 + 271 | 0) >> 0] | 0 ? $132 : $121;
                           break label$193;
                          }
                          $121 = HEAPU8[($6 + 271 | 0) >> 0] | 0 ? $121 : $132;
                          break label$193;
                         }
                         $121 = HEAPU8[($6 + 271 | 0) >> 0] | 0 ? $121 : $132;
                         break label$193;
                        }
                        if (!(HEAPU8[($6 + 269 | 0) >> 0] | 0)) {
                         break label$194
                        }
                        $121 = Math_fround($119 - Math_fround(HEAPF32[($13 + $98 | 0) >> 2]));
                        break label$193;
                       }
                       $121 = Math_fround($121 * $131);
                       break label$193;
                      }
                      $121 = Math_fround(0.0);
                      break label$193;
                     }
                     $121 = HEAPU8[($6 + 271 | 0) >> 0] | 0 ? $121 : $132;
                    }
                    $2 = 46;
                   }
                   HEAPF32[($12 + ($1 + ($2 << $100 | 0) | 0) | 0) >> 2] = $121;
                   $1 = $1 + $97 | 0;
                   if (($19 | 0) != ($1 | 0)) {
                    continue label$187
                   }
                   break label$187;
                  };
                 }
                 $118 = $118 + $94 | 0;
                 if (($118 | 0) != ($40 | 0)) {
                  break label$182
                 }
                 break label$119;
                }
                core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $7 | 0, $37 | 0);
                abort();
               }
               core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $8 | 0, $37 | 0);
               abort();
              }
              $37 = 3;
              $1 = 1;
              continue label$114;
             }
             HEAP32[($6 + 672 | 0) >> 2] = $24;
             $2 = ($25 | $76 | 0 | 0) == ($75 | 0);
             HEAP8[($6 + 816 | 0) >> 0] = $2;
             $7 = Math_imul($24, $72);
             $1 = HEAP32[$40 >> 2] | 0;
             label$212 : {
              if (!$2) {
               break label$212
              }
              HEAP32[(($6 + 848 | 0) + $73 | 0) >> 2] = $77;
              HEAP32[$78 >> 2] = $6 + 672 | 0;
              HEAP32[$79 >> 2] = $6 + 496 | 0;
              HEAP32[$71 >> 2] = $6 + 816 | 0;
              HEAP32[($6 + 852 | 0) >> 2] = $6 + 264 | 0;
              HEAP32[($6 + 848 | 0) >> 2] = $6 + 260 | 0;
              $core__iter__adapters__Rev_I__20as_20core__iter__traits__iterator__Iterator___fold__h254b68e93beaeb79($1 | 0, $1 + $7 | 0 | 0, $6 + 848 | 0 | 0);
              break label$120;
             }
             if (!$24) {
              break label$120
             }
             $1 = $1 + $80 | 0;
             $127 = Math_fround($123 * $126);
             $128 = Math_fround($123 / Math_fround(($24 + $81 | 0) >>> 0));
             $129 = Math_fround($123 / Math_fround($24 >>> 0));
             $130 = Math_fround($129 * $126);
             $121 = Math_fround($123 / Math_fround(($24 + $76 | 0) >>> 0));
             $2 = 0;
             $8 = HEAP32[($6 + 260 | 0) >> 2] | 0;
             label$213 : while (1) {
              $12 = HEAP32[($8 + $70 | 0) >> 2] | 0;
              $13 = HEAP32[($6 + 264 | 0) >> 2] | 0;
              if ($12 >>> 0 <= $13 >>> 0) {
               break label$118
              }
              label$214 : {
               label$215 : {
                $13 = (HEAPU8[(((HEAP32[$8 >> 2] | 0) + Math_imul($13, $82) | 0) + 209 | 0) >> 0] | 0) + $81 | 0;
                if ($13 >>> 0 > $83 >>> 0) {
                 break label$215
                }
                $119 = $121;
                label$216 : {
                 switch ($13 | 0) {
                 default:
                  $119 = $2 ? $125 : $123;
                  break label$214;
                 case 3:
                  $119 = $2 ? $129 : $130;
                  break label$214;
                 case 1:
                  $119 = $2 ? $125 : $127;
                  break label$214;
                 case 4:
                  break label$214;
                 case 2:
                  break label$216;
                 };
                }
                $119 = $2 ? $128 : $125;
                break label$214;
               }
               $119 = Math_fround(0.0);
              }
              HEAPF32[$1 >> 2] = $119;
              $1 = $1 + $72 | 0;
              $2 = $2 + $81 | 0;
              $7 = $7 + $84 | 0;
              if ($7) {
               continue label$213
              }
              break label$213;
             };
            }
            $40 = $40 + $73 | 0;
            if (($40 | 0) != ($42 | 0)) {
             break label$116
            }
            $94 = 20;
            $95 = HEAP32[($6 + 392 | 0) >> 2] | 0;
            $96 = HEAP32[($6 + 400 | 0) >> 2] | 0;
            $40 = $95 + Math_imul($96, 20) | 0;
            label$220 : {
             if (!$96) {
              break label$220
             }
             $97 = 192;
             $98 = 176;
             $99 = -192;
             $100 = 2;
             $101 = 3;
             $102 = 172;
             $103 = 168;
             $104 = 288;
             $105 = 32;
             $106 = 1;
             $107 = 40;
             $131 = Math_fround(.5);
             $108 = 84;
             $109 = 92;
             $110 = 56;
             $111 = 21;
             $112 = 23;
             $113 = 22;
             $114 = 24;
             $115 = -1;
             $132 = Math_fround(0.0);
             $116 = 4;
             $117 = 48;
             $118 = $95;
             $37 = 3;
             break label$115;
            }
            $96 = 0;
           }
           $119 = Math_fround(0.0);
           label$221 : {
            $12 = ($95 | 0) == ($40 | 0);
            if ($12) {
             break label$221
            }
            $1 = $95;
            label$222 : while (1) {
             $119 = Math_fround($119 + Math_fround(HEAPF32[($1 + 12 | 0) >> 2]));
             $1 = $1 + 20 | 0;
             if (($40 | 0) != ($1 | 0)) {
              continue label$222
             }
             break label$222;
            };
           }
           $8 = HEAPU8[($6 + 268 | 0) >> 0] | 0;
           $7 = $8 | 2 | 0;
           if (($7 | 0) != (3 | 0)) {
            break label$117
           }
           $121 = Math_fround(HEAPF32[($3 + 4 | 0) >> 2]);
           $13 = HEAP32[$3 >> 2] | 0;
           break label$113;
          }
          core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $13 | 0, $12 | 0);
          abort();
         }
         $121 = Math_fround(HEAPF32[($3 + 12 | 0) >> 2]);
         $13 = HEAP32[($3 + 8 | 0) >> 2] | 0;
         break label$113;
        }
        $37 = 2;
        $1 = 1;
        continue label$114;
       }
       $1 = 1;
       continue label$114;
      };
     }
     $1 = $10;
     $2 = $9;
     label$223 : {
      if (($7 & 3 | 0 | 0) != (3 | 0)) {
       break label$223
      }
      $1 = $6 + 320 | 0;
      $2 = $14;
     }
     $121 = (wasm2js_f32$0 = Math_fround($119 + Math_fround(Math_fround(HEAPF32[$1 >> 2]) + Math_fround(HEAPF32[$2 >> 2]))), wasm2js_f32$1 = $121, wasm2js_i32$0 = $13, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
     label$224 : {
      label$225 : {
       if ((($8 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
        break label$225
       }
       HEAPF32[($6 + 352 | 0) >> 2] = $121;
       $121 = Math_fround(HEAPF32[($6 + 356 | 0) >> 2]);
       break label$224;
      }
      HEAPF32[($6 + 356 | 0) >> 2] = $121;
     }
     $123 = $121;
     label$226 : {
      $7 = (($8 | 2 | 0) & 3 | 0 | 0) == (3 | 0);
      if (!$7) {
       break label$226
      }
      $123 = Math_fround(HEAPF32[($6 + 352 | 0) >> 2]);
     }
     $1 = $10;
     $2 = $9;
     label$227 : {
      if (!$7) {
       break label$227
      }
      $1 = $6 + 320 | 0;
      $2 = $14;
     }
     $123 = Math_fround($123 - Math_fround(Math_fround(HEAPF32[$1 >> 2]) + Math_fround(HEAPF32[$2 >> 2])));
     label$228 : {
      label$229 : {
       label$230 : {
        if ((($8 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
         break label$230
        }
        if (!$5) {
         break label$229
        }
        break label$228;
       }
       $122 = $123;
       $123 = $120;
       if ($5) {
        break label$228
       }
      }
      $2 = HEAP32[($6 + 352 | 0) >> 2] | 0;
      $7 = ($6 + 848 | 0) + 8 | 0;
      i64toi32_i32$2 = $3 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $3131 = i64toi32_i32$0;
      i64toi32_i32$0 = $7;
      HEAP32[i64toi32_i32$0 >> 2] = $3131;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $8 = $6 + 872 | 0;
      i64toi32_i32$2 = $4 + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $3137 = i64toi32_i32$1;
      i64toi32_i32$1 = $8;
      HEAP32[i64toi32_i32$1 >> 2] = $3137;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $3;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $3140 = i64toi32_i32$0;
      i64toi32_i32$0 = $6;
      HEAP32[($6 + 848 | 0) >> 2] = $3140;
      HEAP32[($6 + 852 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $4;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $3143 = i64toi32_i32$1;
      i64toi32_i32$1 = $6;
      HEAP32[($6 + 864 | 0) >> 2] = $3143;
      HEAP32[($6 + 868 | 0) >> 2] = i64toi32_i32$0;
      label$231 : {
       $1 = HEAP32[($6 + 260 | 0) >> 2] | 0;
       $9 = HEAP32[($1 + 8 | 0) >> 2] | 0;
       $10 = HEAP32[($6 + 264 | 0) >> 2] | 0;
       if ($9 >>> 0 <= $10 >>> 0) {
        break label$231
       }
       $1 = (HEAP32[$1 >> 2] | 0) + Math_imul($10, 288) | 0;
       i64toi32_i32$2 = $6;
       i64toi32_i32$0 = HEAP32[($6 + 848 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($6 + 852 | 0) >> 2] | 0;
       $3160 = i64toi32_i32$0;
       i64toi32_i32$0 = $1;
       HEAP32[($1 + 240 | 0) >> 2] = $3160;
       HEAP32[($1 + 244 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $8;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $3164 = i64toi32_i32$1;
       i64toi32_i32$1 = $1 + 264 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $3164;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = $6 + 864 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $3169 = i64toi32_i32$0;
       i64toi32_i32$0 = $1 + 256 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $3169;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $7;
       i64toi32_i32$1 = HEAP32[$7 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($7 + 4 | 0) >> 2] | 0;
       $3173 = i64toi32_i32$1;
       i64toi32_i32$1 = $1 + 248 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $3173;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP8[($1 + 280 | 0) >> 0] = 0;
       HEAPF32[($1 + 276 | 0) >> 2] = $121;
       HEAP32[($1 + 272 | 0) >> 2] = $2;
       $217 = $1 + 281 | 0;
       $218 = HEAPU8[($6 + 672 | 0) >> 0] | 0 | ((HEAPU8[($6 + 673 | 0) >> 0] | 0) << 8 | 0) | 0;
       HEAP8[$217 >> 0] = $218;
       HEAP8[($217 + 1 | 0) >> 0] = $218 >>> 8 | 0;
       HEAP8[($1 + 283 | 0) >> 0] = HEAPU8[($6 + 674 | 0) >> 0] | 0;
       HEAPF32[($0 + 8 | 0) >> 2] = $121;
       HEAP32[($0 + 4 | 0) >> 2] = $2;
       HEAP32[$0 >> 2] = 0;
       break label$62;
      }
      core__panicking__panic_bounds_check__h0537ade040df571e(1051112 | 0, $10 | 0, $9 | 0);
      abort();
     }
     label$232 : {
      if ((($8 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
       break label$232
      }
      $122 = $123;
     }
     $120 = Math_fround($122 - $119);
     HEAPF32[($6 + 424 | 0) >> 2] = $120;
     HEAP32[($6 + 464 | 0) >> 2] = $96;
     label$233 : {
      label$234 : {
       label$235 : {
        label$236 : {
         label$237 : {
          label$238 : {
           label$239 : {
            label$240 : {
             if (!(HEAPU8[($6 + 271 | 0) >> 0] | 0)) {
              break label$240
             }
             HEAP32[($6 + 868 | 0) >> 2] = 0;
             HEAP32[($6 + 864 | 0) >> 2] = $6 + 464 | 0;
             HEAP32[($6 + 860 | 0) >> 2] = $6 + 424 | 0;
             HEAP32[($6 + 856 | 0) >> 2] = $6 + 271 | 0;
             HEAP32[($6 + 852 | 0) >> 2] = $6 + 264 | 0;
             HEAP32[($6 + 848 | 0) >> 2] = $6 + 260 | 0;
             $core__iter__adapters__Rev_I__20as_20core__iter__traits__iterator__Iterator___fold__h86579460e92560cc($95 | 0, $40 | 0, $6 + 848 | 0 | 0);
             $8 = HEAPU8[($6 + 268 | 0) >> 0] | 0;
             break label$239;
            }
            if ($12) {
             break label$239
            }
            $121 = Math_fround($120 * Math_fround(.5));
            $122 = Math_fround($120 / Math_fround(($96 + -1 | 0) >>> 0));
            $123 = Math_fround($120 / Math_fround($96 >>> 0));
            $125 = Math_fround($123 * Math_fround(.5));
            $2 = 0;
            $13 = HEAP32[($6 + 260 | 0) >> 2] | 0;
            $5 = $13 + 8 | 0;
            label$241 : while (1) {
             $1 = $95;
             $12 = HEAP32[$5 >> 2] | 0;
             $7 = HEAP32[($6 + 264 | 0) >> 2] | 0;
             if ($12 >>> 0 <= $7 >>> 0) {
              break label$238
             }
             $95 = $1 + 20 | 0;
             $119 = Math_fround(0.0);
             label$242 : {
              $7 = (HEAPU8[(((HEAP32[$13 >> 2] | 0) + Math_imul($7, 288) | 0) + 208 | 0) >> 0] | 0) + -1 | 0;
              if ($7 >>> 0 > 4 >>> 0) {
               break label$242
              }
              label$243 : {
               switch ($7 | 0) {
               default:
                $119 = $2 ? Math_fround(0.0) : $120;
                break label$242;
               case 4:
                $119 = $2 ? $123 : $125;
                break label$242;
               case 1:
                $119 = $2 ? Math_fround(0.0) : $121;
                break label$242;
               case 2:
                break label$242;
               case 3:
                break label$243;
               };
              }
              $119 = $2 ? $122 : Math_fround(0.0);
             }
             HEAPF32[($1 + 16 | 0) >> 2] = $119;
             $2 = $2 + -1 | 0;
             if (($40 | 0) != ($95 | 0)) {
              continue label$241
             }
             break label$241;
            };
           }
           HEAP32[($6 + 680 | 0) >> 2] = 0;
           i64toi32_i32$1 = $6;
           i64toi32_i32$0 = 0;
           HEAP32[($6 + 672 | 0) >> 2] = 4;
           HEAP32[($6 + 676 | 0) >> 2] = i64toi32_i32$0;
           $1 = $10;
           label$247 : {
            if ((($8 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
             break label$247
            }
            $1 = $6 + 320 | 0;
           }
           HEAP32[($6 + 816 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
           label$248 : {
            label$249 : {
             if (!(HEAPU8[($6 + 271 | 0) >> 0] | 0)) {
              break label$249
             }
             $1 = HEAP32[($6 + 392 | 0) >> 2] | 0;
             HEAP32[($6 + 496 | 0) >> 2] = $1;
             HEAP32[($6 + 500 | 0) >> 2] = $1 + Math_imul(HEAP32[(($6 + 392 | 0) + 8 | 0) >> 2] | 0, 20) | 0;
             HEAP32[($6 + 880 | 0) >> 2] = $6 + 672 | 0;
             HEAP32[($6 + 876 | 0) >> 2] = $6 + 270 | 0;
             HEAP32[($6 + 872 | 0) >> 2] = $6 + 269 | 0;
             HEAP32[($6 + 868 | 0) >> 2] = $6 + 264 | 0;
             HEAP32[($6 + 864 | 0) >> 2] = $6 + 816 | 0;
             HEAP32[($6 + 860 | 0) >> 2] = $6 + 352 | 0;
             HEAP32[($6 + 856 | 0) >> 2] = $6 + 260 | 0;
             HEAP32[($6 + 852 | 0) >> 2] = $6 + 268 | 0;
             HEAP32[($6 + 848 | 0) >> 2] = $6 + 320 | 0;
             $core__iter__adapters__Rev_I__20as_20core__iter__traits__iterator__Iterator___try_fold__h7ee2ccd872470a9d($6 + 208 | 0 | 0, $6 + 496 | 0 | 0, $6 + 848 | 0 | 0);
             $1 = HEAP32[($6 + 208 | 0) >> 2] | 0;
             if (!$1) {
              break label$248
             }
             $2 = HEAP32[($6 + 212 | 0) >> 2] | 0;
             HEAP32[($0 + 4 | 0) >> 2] = $1;
             HEAP32[$0 >> 2] = 1;
             HEAP32[($0 + 8 | 0) >> 2] = $2;
             break label$233;
            }
            $8 = HEAP32[($6 + 392 | 0) >> 2] | 0;
            $13 = HEAP32[($6 + 400 | 0) >> 2] | 0;
            $7 = $8 + Math_imul($13, 20) | 0;
            HEAP32[($6 + 880 | 0) >> 2] = $6 + 672 | 0;
            HEAP32[($6 + 876 | 0) >> 2] = $6 + 270 | 0;
            HEAP32[($6 + 872 | 0) >> 2] = $6 + 269 | 0;
            HEAP32[($6 + 868 | 0) >> 2] = $6 + 264 | 0;
            HEAP32[($6 + 864 | 0) >> 2] = $6 + 816 | 0;
            HEAP32[($6 + 860 | 0) >> 2] = $6 + 352 | 0;
            HEAP32[($6 + 856 | 0) >> 2] = $6 + 260 | 0;
            HEAP32[($6 + 852 | 0) >> 2] = $6 + 268 | 0;
            HEAP32[($6 + 848 | 0) >> 2] = $6 + 320 | 0;
            $1 = $8;
            label$250 : {
             label$251 : while (1) {
              if (($7 - $1 | 0) >>> 0 <= 60 >>> 0) {
               break label$250
              }
              stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__hec820052c5c968bc($6 + 192 | 0 | 0, $6 + 848 | 0 | 0, $1 | 0);
              $2 = HEAP32[($6 + 192 | 0) >> 2] | 0;
              if ($2) {
               break label$235
              }
              stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__hec820052c5c968bc($6 + 184 | 0 | 0, $6 + 848 | 0 | 0, $1 + 20 | 0 | 0);
              $2 = HEAP32[($6 + 184 | 0) >> 2] | 0;
              if ($2) {
               break label$236
              }
              stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__hec820052c5c968bc($6 + 176 | 0 | 0, $6 + 848 | 0 | 0, $1 + 40 | 0 | 0);
              $2 = HEAP32[($6 + 176 | 0) >> 2] | 0;
              if ($2) {
               break label$237
              }
              stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__hec820052c5c968bc($6 + 168 | 0 | 0, $6 + 848 | 0 | 0, $1 + 60 | 0 | 0);
              $1 = $1 + 80 | 0;
              $2 = HEAP32[($6 + 168 | 0) >> 2] | 0;
              if (!$2) {
               continue label$251
              }
              break label$251;
             };
             $1 = HEAP32[($6 + 172 | 0) >> 2] | 0;
             break label$234;
            }
            $7 = $8 + Math_imul($13, 20) | 0;
            label$252 : while (1) {
             if (($7 | 0) == ($1 | 0)) {
              break label$248
             }
             stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__hec820052c5c968bc($6 + 200 | 0 | 0, $6 + 848 | 0 | 0, $1 | 0);
             $1 = $1 + 20 | 0;
             $2 = HEAP32[($6 + 200 | 0) >> 2] | 0;
             if (!$2) {
              continue label$252
             }
             break label$252;
            };
            $1 = HEAP32[($6 + 204 | 0) >> 2] | 0;
            break label$234;
           }
           $alloc__vec__Vec_T__20as_20core__ops__drop__Drop___drop__hd05bdc8a9ab96be2($6 + 672 | 0 | 0);
           label$253 : {
            $1 = HEAP32[($6 + 676 | 0) >> 2] | 0;
            if (!$1) {
             break label$253
            }
            __rust_dealloc(HEAP32[($6 + 672 | 0) >> 2] | 0 | 0, Math_imul($1, 12) | 0, 4 | 0);
           }
           label$254 : {
            $1 = HEAP32[($6 + 260 | 0) >> 2] | 0;
            $7 = HEAP32[($1 + 20 | 0) >> 2] | 0;
            $2 = HEAP32[($6 + 264 | 0) >> 2] | 0;
            if ($7 >>> 0 <= $2 >>> 0) {
             break label$254
            }
            $1 = (HEAP32[($1 + 12 | 0) >> 2] | 0) + Math_imul($2, 12) | 0;
            $2 = HEAP32[($1 + 8 | 0) >> 2] | 0;
            $1 = HEAP32[$1 >> 2] | 0;
            HEAP32[($6 + 856 | 0) >> 2] = 0;
            HEAP32[($6 + 848 | 0) >> 2] = $1;
            HEAP32[($6 + 852 | 0) >> 2] = $1 + ($2 << 2 | 0) | 0;
            HEAP32[($6 + 860 | 0) >> 2] = $6 + 260 | 0;
            $alloc__vec__Vec_T__20as_20alloc__vec__SpecExtend_T_2cI____from_iter__h8df714fc2f7ae2d5($6 + 640 | 0 | 0, $6 + 848 | 0 | 0);
            $2 = HEAP32[($6 + 648 | 0) >> 2] | 0;
            $7 = HEAP32[($6 + 644 | 0) >> 2] | 0;
            $1 = HEAP32[($6 + 640 | 0) >> 2] | 0;
            HEAP32[($6 + 504 | 0) >> 2] = $1;
            HEAP32[($6 + 500 | 0) >> 2] = $7;
            HEAP32[($6 + 496 | 0) >> 2] = $1;
            HEAP32[($6 + 508 | 0) >> 2] = $1 + ($2 << 3 | 0) | 0;
            label$255 : {
             label$256 : {
              label$257 : {
               label$258 : {
                if (!$2) {
                 break label$258
                }
                label$259 : while (1) {
                 $104 = ($6 + 496 | 0) + 8 | 0;
                 HEAP32[$104 >> 2] = $1 + 8 | 0;
                 label$260 : {
                  label$261 : {
                   label$262 : {
                    label$263 : {
                     label$264 : {
                      $13 = HEAP32[($6 + 260 | 0) >> 2] | 0;
                      $2 = HEAP32[($13 + 8 | 0) >> 2] | 0;
                      $82 = HEAP32[($1 + 4 | 0) >> 2] | 0;
                      if ($2 >>> 0 <= $82 >>> 0) {
                       break label$264
                      }
                      $39 = HEAP32[$1 >> 2] | 0;
                      $119 = Math_fround(HEAPF32[($6 + 356 | 0) >> 2]);
                      $120 = Math_fround(HEAPF32[($6 + 352 | 0) >> 2]);
                      $97 = Math_imul($82, 288);
                      $1 = (HEAP32[$13 >> 2] | 0) + $97 | 0;
                      $38 = HEAPU8[($1 + 207 | 0) >> 0] | 0;
                      $5 = HEAP32[($1 + 176 | 0) >> 2] | 0;
                      $12 = HEAP32[($1 + 160 | 0) >> 2] | 0;
                      $11 = HEAP32[($1 + 144 | 0) >> 2] | 0;
                      $8 = HEAP32[($1 + 32 | 0) >> 2] | 0;
                      $76 = HEAP32[($1 + 24 | 0) >> 2] | 0;
                      $49 = HEAP32[($1 + 16 | 0) >> 2] | 0;
                      $40 = HEAP32[($1 + 8 | 0) >> 2] | 0;
                      $121 = Math_fround(HEAPF32[($1 + 4 | 0) >> 2]);
                      $122 = Math_fround(HEAPF32[($1 + 188 | 0) >> 2]);
                      $2 = HEAP32[($1 + 184 | 0) >> 2] | 0;
                      $131 = Math_fround(HEAPF32[($1 + 180 | 0) >> 2]);
                      $123 = Math_fround(HEAPF32[($1 + 172 | 0) >> 2]);
                      $7 = HEAP32[($1 + 168 | 0) >> 2] | 0;
                      $124 = Math_fround(HEAPF32[($1 + 164 | 0) >> 2]);
                      $125 = Math_fround(HEAPF32[($1 + 156 | 0) >> 2]);
                      $75 = HEAP32[($1 + 152 | 0) >> 2] | 0;
                      $132 = Math_fround(HEAPF32[($1 + 148 | 0) >> 2]);
                      $133 = Math_fround(HEAPF32[($1 + 60 | 0) >> 2]);
                      $64 = HEAP32[($1 + 56 | 0) >> 2] | 0;
                      $134 = Math_fround(HEAPF32[($1 + 52 | 0) >> 2]);
                      $72 = HEAP32[($1 + 48 | 0) >> 2] | 0;
                      $135 = Math_fround(HEAPF32[($1 + 44 | 0) >> 2]);
                      $43 = HEAP32[($1 + 40 | 0) >> 2] | 0;
                      $129 = Math_fround(HEAPF32[($1 + 36 | 0) >> 2]);
                      $136 = Math_fround(HEAPF32[($1 + 28 | 0) >> 2]);
                      $130 = Math_fround(HEAPF32[($1 + 20 | 0) >> 2]);
                      $127 = Math_fround(HEAPF32[($1 + 12 | 0) >> 2]);
                      label$265 : {
                       label$266 : {
                        label$267 : {
                         $1 = HEAP32[$1 >> 2] | 0;
                         if (($1 | 0) == (3 | 0)) {
                          break label$267
                         }
                         $84 = 1;
                         if (($1 | 0) == (2 | 0)) {
                          break label$266
                         }
                         break label$265;
                        }
                        $121 = Math_fround($120 * $121);
                       }
                       $84 = 0;
                      }
                      label$268 : {
                       label$269 : {
                        label$270 : {
                         if (($8 | 0) == (3 | 0)) {
                          break label$270
                         }
                         $106 = 1;
                         if (($8 | 0) == (2 | 0)) {
                          break label$269
                         }
                         break label$268;
                        }
                        $129 = Math_fround($120 * $129);
                       }
                       $106 = 0;
                      }
                      $1 = 1;
                      $48 = 1;
                      label$271 : {
                       if ($84) {
                        break label$271
                       }
                       $126 = $106 ? $121 : Math_fround($121 + $129);
                       $48 = 0;
                      }
                      label$272 : {
                       label$273 : {
                        label$274 : {
                         if (($40 | 0) == (3 | 0)) {
                          break label$274
                         }
                         if (($40 | 0) == (2 | 0)) {
                          break label$273
                         }
                         break label$272;
                        }
                        $127 = Math_fround($120 * $127);
                       }
                       $1 = 0;
                      }
                      label$275 : {
                       label$276 : {
                        label$277 : {
                         if (($43 | 0) == (3 | 0)) {
                          break label$277
                         }
                         $40 = 1;
                         if (($43 | 0) == (2 | 0)) {
                          break label$276
                         }
                         break label$275;
                        }
                        $135 = Math_fround($120 * $135);
                       }
                       $40 = 0;
                      }
                      $8 = 1;
                      $43 = 1;
                      label$278 : {
                       if ($1) {
                        break label$278
                       }
                       $129 = $40 ? $127 : Math_fround($127 + $135);
                       $43 = 0;
                      }
                      label$279 : {
                       label$280 : {
                        label$281 : {
                         if (($49 | 0) == (3 | 0)) {
                          break label$281
                         }
                         if (($49 | 0) == (2 | 0)) {
                          break label$280
                         }
                         break label$279;
                        }
                        $130 = Math_fround($119 * $130);
                       }
                       $8 = 0;
                      }
                      label$282 : {
                       label$283 : {
                        label$284 : {
                         if (($72 | 0) == (3 | 0)) {
                          break label$284
                         }
                         $40 = 1;
                         if (($72 | 0) == (2 | 0)) {
                          break label$283
                         }
                         break label$282;
                        }
                        $134 = Math_fround($119 * $134);
                       }
                       $40 = 0;
                      }
                      $1 = 1;
                      $49 = 1;
                      label$285 : {
                       if ($8) {
                        break label$285
                       }
                       $127 = $40 ? $130 : Math_fround($130 + $134);
                       $49 = 0;
                      }
                      label$286 : {
                       label$287 : {
                        label$288 : {
                         if (($76 | 0) == (3 | 0)) {
                          break label$288
                         }
                         if (($76 | 0) == (2 | 0)) {
                          break label$287
                         }
                         break label$286;
                        }
                        $136 = Math_fround($119 * $136);
                       }
                       $1 = 0;
                      }
                      label$289 : {
                       label$290 : {
                        label$291 : {
                         if (($64 | 0) == (3 | 0)) {
                          break label$291
                         }
                         $8 = 1;
                         if (($64 | 0) == (2 | 0)) {
                          break label$290
                         }
                         break label$289;
                        }
                        $133 = Math_fround($119 * $133);
                       }
                       $8 = 0;
                      }
                      $76 = 1;
                      $64 = 1;
                      label$292 : {
                       if ($1) {
                        break label$292
                       }
                       $130 = $8 ? $136 : Math_fround($136 + $133);
                       $64 = 0;
                      }
                      $8 = HEAPU8[($6 + 269 | 0) >> 0] | 0;
                      label$293 : {
                       label$294 : {
                        label$295 : {
                         if (($11 | 0) == (3 | 0)) {
                          break label$295
                         }
                         if (($11 | 0) == (2 | 0)) {
                          break label$294
                         }
                         break label$293;
                        }
                        $132 = Math_fround($120 * $132);
                       }
                       $76 = 0;
                      }
                      label$296 : {
                       label$297 : {
                        if (($12 | 0) == (3 | 0)) {
                         break label$297
                        }
                        $1 = 1;
                        if (($12 | 0) != (2 | 0)) {
                         break label$296
                        }
                        $1 = 0;
                        $121 = $124;
                        break label$296;
                       }
                       $121 = Math_fround($120 * $124);
                       $1 = 0;
                      }
                      $40 = 1;
                      $11 = 1;
                      label$298 : {
                       if ($76) {
                        break label$298
                       }
                       $136 = (wasm2js_f32$0 = $132, wasm2js_f32$1 = Math_fround(fmaxf(Math_fround($132), Math_fround($121))), wasm2js_i32$0 = $1, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
                       $11 = 0;
                      }
                      label$299 : {
                       label$300 : {
                        if (($5 | 0) == (3 | 0)) {
                         break label$300
                        }
                        if (($5 | 0) != (2 | 0)) {
                         break label$299
                        }
                        $40 = 0;
                        $132 = $131;
                        break label$299;
                       }
                       $132 = Math_fround($120 * $131);
                       $40 = 0;
                      }
                      $1 = 0;
                      label$301 : {
                       if ($11) {
                        break label$301
                       }
                       $121 = (wasm2js_f32$0 = $136, wasm2js_f32$1 = Math_fround(fminf(Math_fround($136), Math_fround($132))), wasm2js_i32$0 = $40, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
                       $1 = 1;
                      }
                      label$302 : {
                       label$303 : {
                        label$304 : {
                         if (($75 | 0) == (3 | 0)) {
                          break label$304
                         }
                         $40 = 1;
                         if (($75 | 0) == (2 | 0)) {
                          break label$303
                         }
                         break label$302;
                        }
                        $125 = Math_fround($119 * $125);
                       }
                       $40 = 0;
                      }
                      $11 = $43 | $48 | 0;
                      $132 = Math_fround($120 - $126);
                      label$305 : {
                       label$306 : {
                        if (($7 | 0) == (3 | 0)) {
                         break label$306
                        }
                        $84 = 1;
                        if (($7 | 0) != (2 | 0)) {
                         break label$305
                        }
                        $84 = 0;
                        $133 = $123;
                        break label$305;
                       }
                       $133 = Math_fround($119 * $123);
                       $84 = 0;
                      }
                      $136 = Math_fround($132 - $129);
                      $72 = !$11;
                      $75 = 1;
                      $76 = 1;
                      label$307 : {
                       if ($40) {
                        break label$307
                       }
                       $132 = (wasm2js_f32$0 = $125, wasm2js_f32$1 = Math_fround(fmaxf(Math_fround($125), Math_fround($133))), wasm2js_i32$0 = $84, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
                       $76 = 0;
                      }
                      $128 = $11 ? $128 : $136;
                      $11 = $1 | $72 | 0;
                      label$308 : {
                       label$309 : {
                        if (($2 | 0) == (3 | 0)) {
                         break label$309
                        }
                        if (($2 | 0) != (2 | 0)) {
                         break label$308
                        }
                        $75 = 0;
                        $136 = $122;
                        break label$308;
                       }
                       $136 = Math_fround($119 * $122);
                       $75 = 0;
                      }
                      $125 = $1 ? $121 : $128;
                      $11 = $11 ^ 1 | 0;
                      $1 = 0;
                      label$310 : {
                       if ($76) {
                        break label$310
                       }
                       $121 = (wasm2js_f32$0 = $132, wasm2js_f32$1 = Math_fround(fminf(Math_fround($132), Math_fround($136))), wasm2js_i32$0 = $75, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
                       $1 = 1;
                      }
                      $76 = $64 | $49 | 0;
                      $137 = $76 ? $137 : Math_fround(Math_fround($119 - $127) - $130);
                      HEAPF32[(($6 + 672 | 0) + 12 | 0) >> 2] = $1 ? $121 : $137;
                      HEAP32[(($6 + 672 | 0) + 8 | 0) >> 2] = ($1 | !$76 | 0) ^ 1 | 0;
                      HEAPF32[($6 + 676 | 0) >> 2] = $125;
                      HEAP32[($6 + 672 | 0) >> 2] = $11;
                      HEAPF32[(($6 + 848 | 0) + 12 | 0) >> 2] = $119;
                      HEAP32[(($6 + 848 | 0) + 8 | 0) >> 2] = 0;
                      HEAPF32[($6 + 852 | 0) >> 2] = $120;
                      HEAP32[($6 + 848 | 0) >> 2] = 0;
                      stretch__algo___impl_20stretch__forest__Forest___compute_internal__h1faccff9b0af78e6($6 + 816 | 0 | 0, $13 | 0, $82 | 0, $6 + 672 | 0 | 0, $6 + 848 | 0 | 0, 1 | 0);
                      $11 = HEAP32[(($6 + 816 | 0) + 8 | 0) >> 2] | 0;
                      $76 = HEAP32[($6 + 820 | 0) >> 2] | 0;
                      label$311 : {
                       $1 = HEAP32[($6 + 816 | 0) >> 2] | 0;
                       if (($1 | 0) == (1 | 0)) {
                        break label$311
                       }
                       label$312 : {
                        if (!$1) {
                         break label$312
                        }
                        FUNCTION_TABLE[HEAP32[$11 >> 2] | 0]($76);
                        $1 = HEAP32[($11 + 4 | 0) >> 2] | 0;
                        if (!$1) {
                         break label$312
                        }
                        __rust_dealloc($76 | 0, $1 | 0, HEAP32[($11 + 8 | 0) >> 2] | 0 | 0);
                       }
                       $132 = Math_fround(HEAPF32[($6 + 356 | 0) >> 2]);
                       $135 = Math_fround(HEAPF32[($6 + 352 | 0) >> 2]);
                       $133 = $135;
                       label$313 : {
                        $1 = HEAPU8[($6 + 268 | 0) >> 0] | 0 | 2 | 0;
                        if (($1 | 0) != (3 | 0)) {
                         break label$313
                        }
                        $133 = $132;
                       }
                       $119 = (wasm2js_scratch_store_i32(0, $11), wasm2js_scratch_load_f32());
                       $138 = (wasm2js_scratch_store_i32(0, $76), wasm2js_scratch_load_f32());
                       $121 = $138;
                       label$314 : {
                        $1 = ($1 & 3 | 0 | 0) == (3 | 0);
                        if (!$1) {
                         break label$314
                        }
                        $121 = $119;
                       }
                       $75 = $12;
                       $136 = $124;
                       label$315 : {
                        if (!$1) {
                         break label$315
                        }
                        $75 = $7;
                        $136 = $123;
                       }
                       $120 = Math_fround(HEAPF32[(($6 + 336 | 0) + 12 | 0) >> 2]);
                       $13 = HEAP32[(($6 + 336 | 0) + 8 | 0) >> 2] | 0;
                       $125 = Math_fround(HEAPF32[($6 + 340 | 0) >> 2]);
                       $134 = $125;
                       $40 = HEAP32[($6 + 336 | 0) >> 2] | 0;
                       $72 = $40;
                       label$316 : {
                        if (!$1) {
                         break label$316
                        }
                        $134 = $120;
                        $72 = $13;
                       }
                       label$317 : {
                        label$318 : {
                         label$319 : {
                          if (($75 | 0) == (3 | 0)) {
                           break label$319
                          }
                          if (($75 | 0) != (2 | 0)) {
                           break label$317
                          }
                          $136 = Math_fround(fmaxf(Math_fround($121), Math_fround($136)));
                          break label$318;
                         }
                         $136 = Math_fround(fmaxf(Math_fround($121), Math_fround(Math_fround($136 * $134))));
                         if ($72) {
                          break label$317
                         }
                        }
                        $121 = $136;
                       }
                       $75 = $5;
                       $136 = $131;
                       label$320 : {
                        if (!$1) {
                         break label$320
                        }
                        $75 = $2;
                        $136 = $122;
                       }
                       $134 = $125;
                       $72 = $40;
                       label$321 : {
                        if (!$1) {
                         break label$321
                        }
                        $134 = $120;
                        $72 = $13;
                       }
                       label$322 : {
                        label$323 : {
                         label$324 : {
                          if (($75 | 0) == (3 | 0)) {
                           break label$324
                          }
                          if (($75 | 0) != (2 | 0)) {
                           break label$322
                          }
                          $136 = Math_fround(fminf(Math_fround($121), Math_fround($136)));
                          break label$323;
                         }
                         $136 = Math_fround(fminf(Math_fround($121), Math_fround(Math_fround($136 * $134))));
                         if ($72) {
                          break label$322
                         }
                        }
                        $121 = $136;
                       }
                       label$325 : {
                        if (!$1) {
                         break label$325
                        }
                        $132 = $135;
                       }
                       label$326 : {
                        if (!$1) {
                         break label$326
                        }
                        $119 = $138;
                       }
                       label$327 : {
                        if (!$1) {
                         break label$327
                        }
                        $7 = $12;
                        $123 = $124;
                       }
                       $124 = $120;
                       $12 = $13;
                       label$328 : {
                        if (!$1) {
                         break label$328
                        }
                        $124 = $125;
                        $12 = $40;
                       }
                       label$329 : {
                        label$330 : {
                         label$331 : {
                          if (($7 | 0) == (3 | 0)) {
                           break label$331
                          }
                          if (($7 | 0) != (2 | 0)) {
                           break label$329
                          }
                          $123 = Math_fround(fmaxf(Math_fround($119), Math_fround($123)));
                          break label$330;
                         }
                         $123 = Math_fround(fmaxf(Math_fround($119), Math_fround(Math_fround($123 * $124))));
                         if ($12) {
                          break label$329
                         }
                        }
                        $119 = $123;
                       }
                       label$332 : {
                        if (!$1) {
                         break label$332
                        }
                        $2 = $5;
                        $122 = $131;
                       }
                       label$333 : {
                        if (!$1) {
                         break label$333
                        }
                        $120 = $125;
                        $13 = $40;
                       }
                       $7 = $8 ? $48 : $49;
                       label$334 : {
                        label$335 : {
                         label$336 : {
                          if (($2 | 0) == (3 | 0)) {
                           break label$336
                          }
                          if (($2 | 0) != (2 | 0)) {
                           break label$334
                          }
                          $120 = Math_fround(fminf(Math_fround($119), Math_fround($122)));
                          break label$335;
                         }
                         $120 = Math_fround(fminf(Math_fround($119), Math_fround(Math_fround($122 * $120))));
                         if ($13) {
                          break label$334
                         }
                        }
                        $119 = $120;
                       }
                       label$337 : {
                        label$338 : {
                         label$339 : {
                          label$340 : {
                           label$341 : {
                            label$342 : {
                             if (!$7) {
                              break label$342
                             }
                             $120 = Math_fround($133 - $121);
                             if (!($8 ? $43 : $64)) {
                              break label$341
                             }
                             $2 = HEAP32[($6 + 260 | 0) >> 2] | 0;
                             $13 = HEAP32[($2 + 8 | 0) >> 2] | 0;
                             $7 = HEAP32[($6 + 264 | 0) >> 2] | 0;
                             if ($13 >>> 0 <= $7 >>> 0) {
                              break label$263
                             }
                             $2 = HEAPU8[(((HEAP32[$2 >> 2] | 0) + Math_imul($7, 288) | 0) + 209 | 0) >> 0] | 0;
                             if (!$2) {
                              break label$340
                             }
                             if (($2 | 0) == (1 | 0)) {
                              break label$339
                             }
                             if (($2 | 0) == (3 | 0)) {
                              break label$340
                             }
                             $120 = Math_fround($120 * Math_fround(.5));
                             break label$260;
                            }
                            $120 = $8 ? $126 : $127;
                            if (!$1) {
                             break label$338
                            }
                            $2 = $15;
                            break label$261;
                           }
                           $120 = Math_fround($120 - ($8 ? $129 : $130));
                           $2 = $17;
                           label$343 : {
                            if (!$1) {
                             break label$343
                            }
                            $2 = $16;
                           }
                           $120 = Math_fround($120 - Math_fround(HEAPF32[$2 >> 2]));
                           break label$260;
                          }
                          if (!$1) {
                           break label$337
                          }
                          $2 = $10;
                          break label$262;
                         }
                         $2 = $14;
                         label$344 : {
                          if (!$1) {
                           break label$344
                          }
                          $2 = $9;
                         }
                         $120 = Math_fround($120 - Math_fround(HEAPF32[$2 >> 2]));
                         break label$260;
                        }
                        $2 = $6 + 304 | 0;
                        break label$261;
                       }
                       $2 = $6 + 320 | 0;
                       break label$262;
                      }
                      HEAP32[($0 + 4 | 0) >> 2] = $76;
                      HEAP32[$0 >> 2] = 1;
                      HEAP32[($0 + 8 | 0) >> 2] = $11;
                      $alloc__vec__IntoIter_T__20as_20core__ops__drop__Drop___drop__h89603df875d9228b($6 + 496 | 0 | 0);
                      break label$62;
                     }
                     core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $82 | 0, $2 | 0);
                     abort();
                    }
                    core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $7 | 0, $13 | 0);
                    abort();
                   }
                   $120 = Math_fround(HEAPF32[$2 >> 2]);
                   break label$260;
                  }
                  $120 = Math_fround($120 + Math_fround(HEAPF32[$2 >> 2]));
                 }
                 label$345 : {
                  label$346 : {
                   label$347 : {
                    label$348 : {
                     label$349 : {
                      label$350 : {
                       label$351 : {
                        label$352 : {
                         label$353 : {
                          label$354 : {
                           label$355 : {
                            label$356 : {
                             if (!($8 ? $49 : $48)) {
                              break label$356
                             }
                             $119 = Math_fround($132 - $119);
                             if (!($8 ? $64 : $43)) {
                              break label$355
                             }
                             $7 = HEAP32[($6 + 260 | 0) >> 2] | 0;
                             $2 = HEAP32[($7 + 8 | 0) >> 2] | 0;
                             $8 = HEAP32[($6 + 264 | 0) >> 2] | 0;
                             if ($2 >>> 0 <= $8 >>> 0) {
                              break label$347
                             }
                             $2 = $38 + -1 | 0;
                             if ($2 >>> 0 > 4 >>> 0) {
                              break label$354
                             }
                             switch ($2 | 0) {
                             case 2:
                             case 3:
                              break label$346;
                             case 4:
                              break label$352;
                             case 1:
                              break label$353;
                             default:
                              break label$351;
                             };
                            }
                            $119 = $8 ? $127 : $126;
                            $2 = $15;
                            label$357 : {
                             if (!$1) {
                              break label$357
                             }
                             $2 = $6 + 304 | 0;
                            }
                            $119 = Math_fround($119 + Math_fround(HEAPF32[$2 >> 2]));
                            break label$345;
                           }
                           $119 = Math_fround($119 - ($8 ? $130 : $129));
                           $2 = $16;
                           label$358 : {
                            if (!$1) {
                             break label$358
                            }
                            $2 = $17;
                           }
                           $119 = Math_fround($119 - Math_fround(HEAPF32[$2 >> 2]));
                           break label$345;
                          }
                          $2 = (HEAPU8[(((HEAP32[$7 >> 2] | 0) + Math_imul($8, 288) | 0) + 206 | 0) >> 0] | 0) + -1 | 0;
                          if ($2 >>> 0 > 3 >>> 0) {
                           break label$351
                          }
                          switch ($2 | 0) {
                          case 1:
                          case 2:
                           break label$346;
                          case 3:
                           break label$352;
                          default:
                           break label$353;
                          };
                         }
                         if (!(HEAPU8[($6 + 271 | 0) >> 0] | 0)) {
                          break label$348
                         }
                         $2 = $10;
                         label$359 : {
                          if (!$1) {
                           break label$359
                          }
                          $2 = $6 + 320 | 0;
                         }
                         $119 = Math_fround(HEAPF32[$2 >> 2]);
                         break label$345;
                        }
                        if (!(HEAPU8[($6 + 271 | 0) >> 0] | 0)) {
                         break label$350
                        }
                        $2 = $9;
                        label$360 : {
                         if (!$1) {
                          break label$360
                         }
                         $2 = $14;
                        }
                        $119 = Math_fround($119 - Math_fround(HEAPF32[$2 >> 2]));
                        break label$345;
                       }
                       if (!(HEAPU8[($6 + 271 | 0) >> 0] | 0)) {
                        break label$349
                       }
                       $2 = $9;
                       label$361 : {
                        if (!$1) {
                         break label$361
                        }
                        $2 = $14;
                       }
                       $119 = Math_fround($119 - Math_fround(HEAPF32[$2 >> 2]));
                       break label$345;
                      }
                      $2 = $10;
                      label$362 : {
                       if (!$1) {
                        break label$362
                       }
                       $2 = $6 + 320 | 0;
                      }
                      $119 = Math_fround(HEAPF32[$2 >> 2]);
                      break label$345;
                     }
                     $2 = $10;
                     label$363 : {
                      if (!$1) {
                       break label$363
                      }
                      $2 = $6 + 320 | 0;
                     }
                     $119 = Math_fround(HEAPF32[$2 >> 2]);
                     break label$345;
                    }
                    $2 = $9;
                    label$364 : {
                     if (!$1) {
                      break label$364
                     }
                     $2 = $14;
                    }
                    $119 = Math_fround($119 - Math_fround(HEAPF32[$2 >> 2]));
                    break label$345;
                   }
                   core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $8 | 0, $2 | 0);
                   abort();
                  }
                  $119 = Math_fround($119 * Math_fround(.5));
                 }
                 $1 = HEAP32[($6 + 260 | 0) >> 2] | 0;
                 $2 = HEAP32[($1 + 8 | 0) >> 2] | 0;
                 if ($2 >>> 0 <= $82 >>> 0) {
                  break label$257
                 }
                 $1 = (HEAP32[$1 >> 2] | 0) + $97 | 0;
                 HEAP32[($1 + 220 | 0) >> 2] = $39;
                 HEAPF32[($1 + 236 | 0) >> 2] = HEAPU8[($6 + 270 | 0) >> 0] | 0 ? $120 : $119;
                 HEAPF32[($1 + 232 | 0) >> 2] = HEAPU8[($6 + 269 | 0) >> 0] | 0 ? $120 : $119;
                 HEAP32[($1 + 228 | 0) >> 2] = $11;
                 HEAP32[($1 + 224 | 0) >> 2] = $76;
                 $1 = HEAP32[$104 >> 2] | 0;
                 if (($1 | 0) != (HEAP32[(($6 + 496 | 0) + 12 | 0) >> 2] | 0 | 0)) {
                  continue label$259
                 }
                 break label$259;
                };
               }
               $alloc__vec__IntoIter_T__20as_20core__ops__drop__Drop___drop__h89603df875d9228b($6 + 496 | 0 | 0);
               $1 = HEAP32[($6 + 260 | 0) >> 2] | 0;
               $7 = HEAP32[($1 + 20 | 0) >> 2] | 0;
               $2 = HEAP32[($6 + 264 | 0) >> 2] | 0;
               if ($7 >>> 0 <= $2 >>> 0) {
                break label$256
               }
               label$365 : {
                $7 = (HEAP32[($1 + 12 | 0) >> 2] | 0) + Math_imul($2, 12) | 0;
                $10 = HEAP32[($7 + 8 | 0) >> 2] | 0;
                if (!$10) {
                 break label$365
                }
                label$366 : {
                 label$367 : {
                  $9 = HEAP32[($1 + 8 | 0) >> 2] | 0;
                  $7 = HEAP32[$7 >> 2] | 0;
                  $2 = HEAP32[$7 >> 2] | 0;
                  if ($9 >>> 0 <= $2 >>> 0) {
                   break label$367
                  }
                  $8 = $7 + 4 | 0;
                  $7 = ($10 << 2 | 0) + -4 | 0;
                  $10 = 0;
                  label$368 : while (1) {
                   label$369 : {
                    if ((HEAPU8[(((HEAP32[$1 >> 2] | 0) + Math_imul($2, 288) | 0) + 200 | 0) >> 0] | 0 | 0) != (1 | 0)) {
                     break label$369
                    }
                    stretch__algo___impl_20stretch__forest__Forest___compute_internal__hidden_layout__hb1f8e0b46cf43938($1 | 0, $1 + 12 | 0 | 0, $2 | 0, $10 | 0);
                   }
                   $1 = HEAP32[($6 + 260 | 0) >> 2] | 0;
                   if (!$7) {
                    break label$366
                   }
                   $7 = $7 + -4 | 0;
                   $10 = $10 + 1 | 0;
                   $2 = HEAP32[$8 >> 2] | 0;
                   $8 = $8 + 4 | 0;
                   $9 = HEAP32[($1 + 8 | 0) >> 2] | 0;
                   if ($9 >>> 0 > $2 >>> 0) {
                    continue label$368
                   }
                   break label$368;
                  };
                 }
                 core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $2 | 0, $9 | 0);
                 abort();
                }
                $2 = HEAP32[($6 + 264 | 0) >> 2] | 0;
               }
               $7 = HEAP32[($6 + 356 | 0) >> 2] | 0;
               $8 = HEAP32[($6 + 352 | 0) >> 2] | 0;
               $10 = ($6 + 848 | 0) + 8 | 0;
               i64toi32_i32$2 = $3 + 8 | 0;
               i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
               i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
               $4361 = i64toi32_i32$0;
               i64toi32_i32$0 = $10;
               HEAP32[i64toi32_i32$0 >> 2] = $4361;
               HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
               $9 = $6 + 872 | 0;
               i64toi32_i32$2 = $4 + 8 | 0;
               i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
               i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
               $4367 = i64toi32_i32$1;
               i64toi32_i32$1 = $9;
               HEAP32[i64toi32_i32$1 >> 2] = $4367;
               HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
               i64toi32_i32$2 = $3;
               i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
               i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
               $4370 = i64toi32_i32$0;
               i64toi32_i32$0 = $6;
               HEAP32[($6 + 848 | 0) >> 2] = $4370;
               HEAP32[($6 + 852 | 0) >> 2] = i64toi32_i32$1;
               i64toi32_i32$2 = $4;
               i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
               i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
               $4373 = i64toi32_i32$1;
               i64toi32_i32$1 = $6;
               HEAP32[($6 + 864 | 0) >> 2] = $4373;
               HEAP32[($6 + 868 | 0) >> 2] = i64toi32_i32$0;
               $3 = HEAP32[($1 + 8 | 0) >> 2] | 0;
               if ($3 >>> 0 <= $2 >>> 0) {
                break label$255
               }
               $1 = (HEAP32[$1 >> 2] | 0) + Math_imul($2, 288) | 0;
               i64toi32_i32$2 = $6;
               i64toi32_i32$0 = HEAP32[($6 + 848 | 0) >> 2] | 0;
               i64toi32_i32$1 = HEAP32[($6 + 852 | 0) >> 2] | 0;
               $4386 = i64toi32_i32$0;
               i64toi32_i32$0 = $1;
               HEAP32[($1 + 240 | 0) >> 2] = $4386;
               HEAP32[($1 + 244 | 0) >> 2] = i64toi32_i32$1;
               i64toi32_i32$2 = $9;
               i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
               i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
               $4390 = i64toi32_i32$1;
               i64toi32_i32$1 = $1 + 264 | 0;
               HEAP32[i64toi32_i32$1 >> 2] = $4390;
               HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
               i64toi32_i32$2 = $6 + 864 | 0;
               i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
               i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
               $4395 = i64toi32_i32$0;
               i64toi32_i32$0 = $1 + 256 | 0;
               HEAP32[i64toi32_i32$0 >> 2] = $4395;
               HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
               i64toi32_i32$2 = $10;
               i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
               i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
               $4399 = i64toi32_i32$1;
               i64toi32_i32$1 = $1 + 248 | 0;
               HEAP32[i64toi32_i32$1 >> 2] = $4399;
               HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
               HEAP8[($1 + 280 | 0) >> 0] = 1;
               HEAP32[($1 + 276 | 0) >> 2] = $7;
               HEAP32[($1 + 272 | 0) >> 2] = $8;
               $219 = $1 + 281 | 0;
               $220 = HEAPU8[($6 + 672 | 0) >> 0] | 0 | ((HEAPU8[($6 + 673 | 0) >> 0] | 0) << 8 | 0) | 0;
               HEAP8[$219 >> 0] = $220;
               HEAP8[($219 + 1 | 0) >> 0] = $220 >>> 8 | 0;
               HEAP8[($1 + 283 | 0) >> 0] = HEAPU8[($6 + 674 | 0) >> 0] | 0;
               HEAP32[($0 + 8 | 0) >> 2] = $7;
               HEAP32[($0 + 4 | 0) >> 2] = $8;
               HEAP32[$0 >> 2] = 0;
               $alloc__vec__Vec_T__20as_20core__ops__drop__Drop___drop__h07df8a77f3830807($6 + 392 | 0 | 0);
               $1 = HEAP32[($6 + 396 | 0) >> 2] | 0;
               if (!$1) {
                break label$1
               }
               __rust_dealloc(HEAP32[($6 + 392 | 0) >> 2] | 0 | 0, Math_imul($1, 20) | 0, 4 | 0);
               break label$1;
              }
              core__panicking__panic_bounds_check__h0537ade040df571e(1051112 | 0, $82 | 0, $2 | 0);
              abort();
             }
             core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $2 | 0, $7 | 0);
             abort();
            }
            core__panicking__panic_bounds_check__h0537ade040df571e(1051112 | 0, $2 | 0, $3 | 0);
            abort();
           }
           core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $2 | 0, $7 | 0);
           abort();
          }
          core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $7 | 0, $12 | 0);
          abort();
         }
         $1 = HEAP32[($6 + 180 | 0) >> 2] | 0;
         break label$234;
        }
        $1 = HEAP32[($6 + 188 | 0) >> 2] | 0;
        break label$234;
       }
       $1 = HEAP32[($6 + 196 | 0) >> 2] | 0;
      }
      HEAP32[($0 + 4 | 0) >> 2] = $2;
      HEAP32[$0 >> 2] = 1;
      HEAP32[($0 + 8 | 0) >> 2] = $1;
     }
     $alloc__vec__Vec_T__20as_20core__ops__drop__Drop___drop__hd05bdc8a9ab96be2($6 + 672 | 0 | 0);
     $1 = HEAP32[($6 + 676 | 0) >> 2] | 0;
     if (!$1) {
      break label$62
     }
     __rust_dealloc(HEAP32[($6 + 672 | 0) >> 2] | 0 | 0, Math_imul($1, 12) | 0, 4 | 0);
    }
    $alloc__vec__Vec_T__20as_20core__ops__drop__Drop___drop__h07df8a77f3830807($6 + 392 | 0 | 0);
    $1 = HEAP32[($6 + 396 | 0) >> 2] | 0;
    if (!$1) {
     break label$1
    }
    __rust_dealloc(HEAP32[($6 + 392 | 0) >> 2] | 0 | 0, Math_imul($1, 20) | 0, 4 | 0);
    break label$1;
   }
   HEAP32[($0 + 4 | 0) >> 2] = $7;
   HEAP32[$0 >> 2] = 1;
   HEAP32[($0 + 8 | 0) >> 2] = $1;
   $1 = HEAP32[($6 + 380 | 0) >> 2] | 0;
   if (!$1) {
    break label$1
   }
   __rust_dealloc(HEAP32[($6 + 376 | 0) >> 2] | 0 | 0, Math_imul($1, 192) | 0, 4 | 0);
  }
  global$0 = $6 + 992 | 0;
 }
 
 function dlmalloc__dlmalloc__Dlmalloc__malloc__haa66310b00a7bd6b($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $3 = 0, $6 = 0, $2 = 0, $9 = 0, $8 = 0, $7 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $154 = 0, $602 = 0, $613 = 0, $653 = 0, $10 = 0, $10$hi = 0, $818 = 0, $954 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              label$13 : {
               label$14 : {
                label$15 : {
                 label$16 : {
                  label$17 : {
                   label$18 : {
                    label$19 : {
                     label$20 : {
                      label$21 : {
                       label$22 : {
                        label$23 : {
                         label$24 : {
                          label$25 : {
                           label$26 : {
                            label$27 : {
                             label$28 : {
                              label$29 : {
                               label$30 : {
                                label$31 : {
                                 label$32 : {
                                  label$33 : {
                                   label$34 : {
                                    label$35 : {
                                     label$36 : {
                                      label$37 : {
                                       if ($1 >>> 0 >= 245 >>> 0) {
                                        break label$37
                                       }
                                       $2 = HEAP32[$0 >> 2] | 0;
                                       $3 = $1 >>> 0 < 11 >>> 0 ? 16 : ($1 + 11 | 0) & -8 | 0;
                                       $4 = $3 >>> 3 | 0;
                                       $5 = $4 & 31 | 0;
                                       $1 = $2 >>> $5 | 0;
                                       if (!($1 & 3 | 0)) {
                                        break label$36
                                       }
                                       $3 = (($1 ^ -1 | 0) & 1 | 0) + $4 | 0;
                                       $6 = $0 + ($3 << 3 | 0) | 0;
                                       $1 = HEAP32[($6 + 16 | 0) >> 2] | 0;
                                       $4 = $1 + 8 | 0;
                                       $5 = HEAP32[($1 + 8 | 0) >> 2] | 0;
                                       $6 = $6 + 8 | 0;
                                       if (($5 | 0) == ($6 | 0)) {
                                        break label$35
                                       }
                                       HEAP32[($5 + 12 | 0) >> 2] = $6;
                                       HEAP32[($6 + 8 | 0) >> 2] = $5;
                                       break label$34;
                                      }
                                      $4 = 0;
                                      if ($1 >>> 0 >= -65587 >>> 0) {
                                       break label$1
                                      }
                                      $1 = $1 + 11 | 0;
                                      $3 = $1 & -8 | 0;
                                      $7 = HEAP32[($0 + 4 | 0) >> 2] | 0;
                                      if (!$7) {
                                       break label$27
                                      }
                                      $8 = 0;
                                      label$38 : {
                                       $1 = $1 >>> 8 | 0;
                                       if (!$1) {
                                        break label$38
                                       }
                                       $8 = 31;
                                       if ($3 >>> 0 > 16777215 >>> 0) {
                                        break label$38
                                       }
                                       $1 = Math_clz32($1);
                                       $8 = ($3 >>> ((38 - $1 | 0) & 31 | 0) | 0) & 1 | 0 | ((31 - $1 | 0) << 1 | 0) | 0;
                                      }
                                      $4 = 0 - $3 | 0;
                                      $1 = HEAP32[(($0 + ($8 << 2 | 0) | 0) + 272 | 0) >> 2] | 0;
                                      if (!$1) {
                                       break label$30
                                      }
                                      $5 = 0;
                                      $6 = $3 << (($8 | 0) == (31 | 0) ? 0 : (25 - ($8 >>> 1 | 0) | 0) & 31 | 0) | 0;
                                      $2 = 0;
                                      label$39 : while (1) {
                                       label$40 : {
                                        $9 = (HEAP32[($1 + 4 | 0) >> 2] | 0) & -8 | 0;
                                        if ($9 >>> 0 < $3 >>> 0) {
                                         break label$40
                                        }
                                        $9 = $9 - $3 | 0;
                                        if ($9 >>> 0 >= $4 >>> 0) {
                                         break label$40
                                        }
                                        $4 = $9;
                                        $2 = $1;
                                        if (!$4) {
                                         break label$32
                                        }
                                       }
                                       $9 = HEAP32[($1 + 20 | 0) >> 2] | 0;
                                       $1 = HEAP32[(($1 + (($6 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
                                       $5 = $9 ? (($9 | 0) != ($1 | 0) ? $9 : $5) : $5;
                                       $6 = $6 << 1 | 0;
                                       if ($1) {
                                        continue label$39
                                       }
                                       break label$39;
                                      };
                                      if (!$5) {
                                       break label$31
                                      }
                                      $1 = $5;
                                      break label$29;
                                     }
                                     if ($3 >>> 0 <= (HEAP32[($0 + 400 | 0) >> 2] | 0) >>> 0) {
                                      break label$27
                                     }
                                     if (!$1) {
                                      break label$33
                                     }
                                     $154 = $1 << $5 | 0;
                                     $1 = 2 << $5 | 0;
                                     $1 = $154 & ($1 | (0 - $1 | 0) | 0) | 0;
                                     $4 = __wasm_ctz_i32($1 & (0 - $1 | 0) | 0 | 0) | 0;
                                     $6 = $0 + ($4 << 3 | 0) | 0;
                                     $1 = HEAP32[($6 + 16 | 0) >> 2] | 0;
                                     $5 = HEAP32[($1 + 8 | 0) >> 2] | 0;
                                     $6 = $6 + 8 | 0;
                                     if (($5 | 0) == ($6 | 0)) {
                                      break label$25
                                     }
                                     HEAP32[($5 + 12 | 0) >> 2] = $6;
                                     HEAP32[($6 + 8 | 0) >> 2] = $5;
                                     break label$24;
                                    }
                                    (wasm2js_i32$0 = $0, wasm2js_i32$1 = $2 & (__wasm_rotl_i32(-2 | 0, $3 | 0) | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
                                   }
                                   $3 = $3 << 3 | 0;
                                   HEAP32[($1 + 4 | 0) >> 2] = $3 | 3 | 0;
                                   $1 = $1 + $3 | 0;
                                   HEAP32[($1 + 4 | 0) >> 2] = HEAP32[($1 + 4 | 0) >> 2] | 0 | 1 | 0;
                                   break label$1;
                                  }
                                  $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
                                  if (!$1) {
                                   break label$27
                                  }
                                  $2 = HEAP32[(($0 + ((__wasm_ctz_i32($1 & (0 - $1 | 0) | 0 | 0) | 0) << 2 | 0) | 0) + 272 | 0) >> 2] | 0;
                                  $5 = ((HEAP32[($2 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
                                  $6 = $2;
                                  $1 = HEAP32[($6 + 16 | 0) >> 2] | 0;
                                  if (!$1) {
                                   break label$12
                                  }
                                  $4 = 1;
                                  break label$11;
                                 }
                                 $4 = 0;
                                 $2 = $1;
                                 break label$29;
                                }
                                if ($2) {
                                 break label$28
                                }
                               }
                               $2 = 0;
                               $1 = 2 << ($8 & 31 | 0) | 0;
                               $1 = ($1 | (0 - $1 | 0) | 0) & $7 | 0;
                               if (!$1) {
                                break label$27
                               }
                               $1 = HEAP32[(($0 + ((__wasm_ctz_i32($1 & (0 - $1 | 0) | 0 | 0) | 0) << 2 | 0) | 0) + 272 | 0) >> 2] | 0;
                               if (!$1) {
                                break label$27
                               }
                              }
                              label$41 : while (1) {
                               $5 = (HEAP32[($1 + 4 | 0) >> 2] | 0) & -8 | 0;
                               $9 = $5 - $3 | 0;
                               $6 = $5 >>> 0 >= $3 >>> 0 & $9 >>> 0 < $4 >>> 0 | 0;
                               label$42 : {
                                $5 = HEAP32[($1 + 16 | 0) >> 2] | 0;
                                if ($5) {
                                 break label$42
                                }
                                $5 = HEAP32[($1 + 20 | 0) >> 2] | 0;
                               }
                               $2 = $6 ? $1 : $2;
                               $4 = $6 ? $9 : $4;
                               $1 = $5;
                               if ($1) {
                                continue label$41
                               }
                               break label$41;
                              };
                              if (!$2) {
                               break label$27
                              }
                             }
                             $1 = HEAP32[($0 + 400 | 0) >> 2] | 0;
                             if ($1 >>> 0 < $3 >>> 0) {
                              break label$26
                             }
                             if ($4 >>> 0 < ($1 - $3 | 0) >>> 0) {
                              break label$26
                             }
                            }
                            label$43 : {
                             label$44 : {
                              label$45 : {
                               label$46 : {
                                $4 = HEAP32[($0 + 400 | 0) >> 2] | 0;
                                if ($4 >>> 0 >= $3 >>> 0) {
                                 break label$46
                                }
                                $1 = HEAP32[($0 + 404 | 0) >> 2] | 0;
                                if ($1 >>> 0 <= $3 >>> 0) {
                                 break label$45
                                }
                                $4 = $1 - $3 | 0;
                                HEAP32[($0 + 404 | 0) >> 2] = $4;
                                $1 = HEAP32[($0 + 412 | 0) >> 2] | 0;
                                $5 = $1 + $3 | 0;
                                HEAP32[($0 + 412 | 0) >> 2] = $5;
                                HEAP32[($5 + 4 | 0) >> 2] = $4 | 1 | 0;
                                HEAP32[($1 + 4 | 0) >> 2] = $3 | 3 | 0;
                                return $1 + 8 | 0 | 0;
                               }
                               $1 = HEAP32[($0 + 408 | 0) >> 2] | 0;
                               $5 = $4 - $3 | 0;
                               if ($5 >>> 0 > 15 >>> 0) {
                                break label$44
                               }
                               HEAP32[($0 + 408 | 0) >> 2] = 0;
                               HEAP32[($0 + 400 | 0) >> 2] = 0;
                               HEAP32[($1 + 4 | 0) >> 2] = $4 | 3 | 0;
                               $4 = $1 + $4 | 0;
                               $3 = $4 + 4 | 0;
                               $4 = HEAP32[($4 + 4 | 0) >> 2] | 0 | 1 | 0;
                               break label$43;
                              }
                              $4 = 0;
                              $5 = $3 + 65583 | 0;
                              $1 = __wasm_memory_grow($5 >>> 16 | 0 | 0);
                              if (($1 | 0) == (-1 | 0)) {
                               break label$1
                              }
                              $2 = $1 << 16 | 0;
                              if (!$2) {
                               break label$1
                              }
                              $8 = $5 & -65536 | 0;
                              $1 = (HEAP32[($0 + 416 | 0) >> 2] | 0) + $8 | 0;
                              HEAP32[($0 + 416 | 0) >> 2] = $1;
                              $5 = HEAP32[($0 + 420 | 0) >> 2] | 0;
                              HEAP32[($0 + 420 | 0) >> 2] = $1 >>> 0 < $5 >>> 0 ? $5 : $1;
                              $5 = HEAP32[($0 + 412 | 0) >> 2] | 0;
                              if (!$5) {
                               break label$19
                              }
                              $7 = $0 + 424 | 0;
                              $1 = $7;
                              label$47 : while (1) {
                               $6 = HEAP32[$1 >> 2] | 0;
                               $9 = HEAP32[($1 + 4 | 0) >> 2] | 0;
                               if (($6 + $9 | 0 | 0) == ($2 | 0)) {
                                break label$18
                               }
                               $1 = HEAP32[($1 + 8 | 0) >> 2] | 0;
                               if ($1) {
                                continue label$47
                               }
                               break label$10;
                              };
                             }
                             HEAP32[($0 + 400 | 0) >> 2] = $5;
                             $6 = $1 + $3 | 0;
                             HEAP32[($0 + 408 | 0) >> 2] = $6;
                             HEAP32[($6 + 4 | 0) >> 2] = $5 | 1 | 0;
                             HEAP32[($1 + $4 | 0) >> 2] = $5;
                             $4 = $3 | 3 | 0;
                             $3 = $1 + 4 | 0;
                            }
                            HEAP32[$3 >> 2] = $4;
                            return $1 + 8 | 0 | 0;
                           }
                           dlmalloc__dlmalloc__Dlmalloc__unlink_large_chunk__h173f6e2d56218081($0 | 0, $2 | 0);
                           if ($4 >>> 0 >= 16 >>> 0) {
                            break label$23
                           }
                           $1 = $4 + $3 | 0;
                           HEAP32[($2 + 4 | 0) >> 2] = $1 | 3 | 0;
                           $1 = $2 + $1 | 0;
                           HEAP32[($1 + 4 | 0) >> 2] = HEAP32[($1 + 4 | 0) >> 2] | 0 | 1 | 0;
                           break label$13;
                          }
                          (wasm2js_i32$0 = $0, wasm2js_i32$1 = $2 & (__wasm_rotl_i32(-2 | 0, $4 | 0) | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
                         }
                         $5 = $1 + 8 | 0;
                         HEAP32[($1 + 4 | 0) >> 2] = $3 | 3 | 0;
                         $6 = $1 + $3 | 0;
                         $4 = $4 << 3 | 0;
                         $3 = $4 - $3 | 0;
                         HEAP32[($6 + 4 | 0) >> 2] = $3 | 1 | 0;
                         HEAP32[($1 + $4 | 0) >> 2] = $3;
                         $2 = $0 + 400 | 0;
                         $1 = HEAP32[$2 >> 2] | 0;
                         if (!$1) {
                          break label$20
                         }
                         $9 = $1 >>> 3 | 0;
                         $4 = ($0 + ($9 << 3 | 0) | 0) + 8 | 0;
                         $1 = HEAP32[($0 + 408 | 0) >> 2] | 0;
                         $8 = HEAP32[$0 >> 2] | 0;
                         $9 = 1 << ($9 & 31 | 0) | 0;
                         if (!($8 & $9 | 0)) {
                          break label$22
                         }
                         $9 = HEAP32[($4 + 8 | 0) >> 2] | 0;
                         break label$21;
                        }
                        HEAP32[($2 + 4 | 0) >> 2] = $3 | 3 | 0;
                        $1 = $2 + $3 | 0;
                        HEAP32[($1 + 4 | 0) >> 2] = $4 | 1 | 0;
                        HEAP32[($1 + $4 | 0) >> 2] = $4;
                        if ($4 >>> 0 >= 256 >>> 0) {
                         break label$17
                        }
                        $4 = $4 >>> 3 | 0;
                        $3 = ($0 + ($4 << 3 | 0) | 0) + 8 | 0;
                        $5 = HEAP32[$0 >> 2] | 0;
                        $4 = 1 << ($4 & 31 | 0) | 0;
                        if (!($5 & $4 | 0)) {
                         break label$15
                        }
                        $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
                        break label$14;
                       }
                       HEAP32[$0 >> 2] = $8 | $9 | 0;
                       $9 = $4;
                      }
                      HEAP32[($4 + 8 | 0) >> 2] = $1;
                      HEAP32[($9 + 12 | 0) >> 2] = $1;
                      HEAP32[($1 + 12 | 0) >> 2] = $4;
                      HEAP32[($1 + 8 | 0) >> 2] = $9;
                     }
                     HEAP32[($0 + 408 | 0) >> 2] = $6;
                     HEAP32[$2 >> 2] = $3;
                     return $5 | 0;
                    }
                    label$48 : {
                     label$49 : {
                      $1 = HEAP32[($0 + 444 | 0) >> 2] | 0;
                      if (!$1) {
                       break label$49
                      }
                      if ($1 >>> 0 <= $2 >>> 0) {
                       break label$48
                      }
                     }
                     HEAP32[($0 + 444 | 0) >> 2] = $2;
                    }
                    HEAP32[($0 + 448 | 0) >> 2] = 4095;
                    HEAP32[($0 + 424 | 0) >> 2] = $2;
                    $1 = 0;
                    HEAP32[($0 + 436 | 0) >> 2] = 0;
                    HEAP32[($0 + 428 | 0) >> 2] = $8;
                    label$50 : while (1) {
                     $5 = $0 + $1 | 0;
                     $6 = $5 + 8 | 0;
                     HEAP32[($5 + 16 | 0) >> 2] = $6;
                     HEAP32[($5 + 20 | 0) >> 2] = $6;
                     $1 = $1 + 8 | 0;
                     if (($1 | 0) != (256 | 0)) {
                      continue label$50
                     }
                     break label$50;
                    };
                    $1 = $8 + -40 | 0;
                    HEAP32[($0 + 404 | 0) >> 2] = $1;
                    HEAP32[($0 + 412 | 0) >> 2] = $2;
                    HEAP32[($2 + 4 | 0) >> 2] = $1 | 1 | 0;
                    HEAP32[(($2 + $1 | 0) + 4 | 0) >> 2] = 40;
                    HEAP32[($0 + 440 | 0) >> 2] = 2097152;
                    break label$9;
                   }
                   if (!(HEAP32[($1 + 12 | 0) >> 2] | 0)) {
                    break label$16
                   }
                   break label$10;
                  }
                  dlmalloc__dlmalloc__Dlmalloc__insert_large_chunk__h2b5800089452f7a4($0 | 0, $1 | 0, $4 | 0);
                  break label$13;
                 }
                 if ($2 >>> 0 <= $5 >>> 0) {
                  break label$10
                 }
                 if ($6 >>> 0 > $5 >>> 0) {
                  break label$10
                 }
                 HEAP32[($1 + 4 | 0) >> 2] = $9 + $8 | 0;
                 $1 = $0 + 412 | 0;
                 $602 = $1;
                 $1 = HEAP32[$1 >> 2] | 0;
                 $5 = ($1 + 15 | 0) & -8 | 0;
                 $6 = $5 + -8 | 0;
                 HEAP32[$602 >> 2] = $6;
                 $2 = $0 + 404 | 0;
                 $613 = $2;
                 $2 = (HEAP32[$2 >> 2] | 0) + $8 | 0;
                 $5 = $2 + (($1 + 8 | 0) - $5 | 0) | 0;
                 HEAP32[$613 >> 2] = $5;
                 HEAP32[($6 + 4 | 0) >> 2] = $5 | 1 | 0;
                 HEAP32[(($1 + $2 | 0) + 4 | 0) >> 2] = 40;
                 HEAP32[($0 + 440 | 0) >> 2] = 2097152;
                 break label$9;
                }
                HEAP32[$0 >> 2] = $5 | $4 | 0;
                $4 = $3;
               }
               HEAP32[($3 + 8 | 0) >> 2] = $1;
               HEAP32[($4 + 12 | 0) >> 2] = $1;
               HEAP32[($1 + 12 | 0) >> 2] = $3;
               HEAP32[($1 + 8 | 0) >> 2] = $4;
              }
              return $2 + 8 | 0 | 0;
             }
             $4 = 0;
            }
            label$51 : while (1) {
             label$52 : {
              label$53 : {
               label$54 : {
                switch ($4 | 0) {
                default:
                 $4 = ((HEAP32[($1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
                 $653 = $4;
                 $4 = $4 >>> 0 < $5 >>> 0;
                 $5 = $4 ? $653 : $5;
                 $6 = $4 ? $1 : $6;
                 $2 = $1;
                 $1 = HEAP32[($1 + 16 | 0) >> 2] | 0;
                 if ($1) {
                  break label$53
                 }
                 $4 = 0;
                 continue label$51;
                case 0:
                 break label$54;
                };
               }
               $1 = HEAP32[($2 + 20 | 0) >> 2] | 0;
               if ($1) {
                break label$52
               }
               dlmalloc__dlmalloc__Dlmalloc__unlink_large_chunk__h173f6e2d56218081($0 | 0, $6 | 0);
               label$56 : {
                label$57 : {
                 if ($5 >>> 0 >= 16 >>> 0) {
                  break label$57
                 }
                 $1 = $5 + $3 | 0;
                 HEAP32[($6 + 4 | 0) >> 2] = $1 | 3 | 0;
                 $1 = $6 + $1 | 0;
                 HEAP32[($1 + 4 | 0) >> 2] = HEAP32[($1 + 4 | 0) >> 2] | 0 | 1 | 0;
                 break label$56;
                }
                HEAP32[($6 + 4 | 0) >> 2] = $3 | 3 | 0;
                $3 = $6 + $3 | 0;
                HEAP32[($3 + 4 | 0) >> 2] = $5 | 1 | 0;
                HEAP32[($3 + $5 | 0) >> 2] = $5;
                label$58 : {
                 $2 = $0 + 400 | 0;
                 $1 = HEAP32[$2 >> 2] | 0;
                 if (!$1) {
                  break label$58
                 }
                 $9 = $1 >>> 3 | 0;
                 $4 = ($0 + ($9 << 3 | 0) | 0) + 8 | 0;
                 $1 = HEAP32[($0 + 408 | 0) >> 2] | 0;
                 label$59 : {
                  label$60 : {
                   $8 = HEAP32[$0 >> 2] | 0;
                   $9 = 1 << ($9 & 31 | 0) | 0;
                   if (!($8 & $9 | 0)) {
                    break label$60
                   }
                   $9 = HEAP32[($4 + 8 | 0) >> 2] | 0;
                   break label$59;
                  }
                  HEAP32[$0 >> 2] = $8 | $9 | 0;
                  $9 = $4;
                 }
                 HEAP32[($4 + 8 | 0) >> 2] = $1;
                 HEAP32[($9 + 12 | 0) >> 2] = $1;
                 HEAP32[($1 + 12 | 0) >> 2] = $4;
                 HEAP32[($1 + 8 | 0) >> 2] = $9;
                }
                HEAP32[($0 + 408 | 0) >> 2] = $3;
                HEAP32[$2 >> 2] = $5;
               }
               return $6 + 8 | 0 | 0;
              }
              $4 = 1;
              continue label$51;
             }
             $4 = 1;
             continue label$51;
            };
           }
           $1 = HEAP32[($0 + 444 | 0) >> 2] | 0;
           HEAP32[($0 + 444 | 0) >> 2] = $1 >>> 0 < $2 >>> 0 ? $1 : $2;
           $6 = $2 + $8 | 0;
           $1 = $7;
           label$61 : {
            label$62 : {
             label$63 : {
              label$64 : {
               label$65 : {
                label$66 : while (1) {
                 if ((HEAP32[$1 >> 2] | 0 | 0) == ($6 | 0)) {
                  break label$65
                 }
                 $1 = HEAP32[($1 + 8 | 0) >> 2] | 0;
                 if ($1) {
                  continue label$66
                 }
                 break label$64;
                };
               }
               if (!(HEAP32[($1 + 12 | 0) >> 2] | 0)) {
                break label$63
               }
              }
              $1 = $7;
              label$67 : {
               label$68 : while (1) {
                label$69 : {
                 $6 = HEAP32[$1 >> 2] | 0;
                 if ($6 >>> 0 > $5 >>> 0) {
                  break label$69
                 }
                 $6 = $6 + (HEAP32[($1 + 4 | 0) >> 2] | 0) | 0;
                 if ($6 >>> 0 > $5 >>> 0) {
                  break label$67
                 }
                }
                $1 = HEAP32[($1 + 8 | 0) >> 2] | 0;
                continue label$68;
               };
              }
              $1 = $8 + -40 | 0;
              HEAP32[($0 + 404 | 0) >> 2] = $1;
              HEAP32[($0 + 412 | 0) >> 2] = $2;
              HEAP32[($2 + 4 | 0) >> 2] = $1 | 1 | 0;
              HEAP32[(($2 + $1 | 0) + 4 | 0) >> 2] = 40;
              HEAP32[($0 + 440 | 0) >> 2] = 2097152;
              $1 = (($6 + -32 | 0) & -8 | 0) + -8 | 0;
              $9 = $1 >>> 0 < ($5 + 16 | 0) >>> 0 ? $5 : $1;
              HEAP32[($9 + 4 | 0) >> 2] = 27;
              i64toi32_i32$2 = $7;
              i64toi32_i32$0 = HEAP32[$7 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[($7 + 4 | 0) >> 2] | 0;
              $10 = i64toi32_i32$0;
              $10$hi = i64toi32_i32$1;
              i64toi32_i32$2 = $7 + 8 | 0;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $818 = i64toi32_i32$1;
              i64toi32_i32$1 = $9 + 16 | 0;
              HEAP32[i64toi32_i32$1 >> 2] = $818;
              HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$0 = $10$hi;
              i64toi32_i32$1 = $9;
              HEAP32[($9 + 8 | 0) >> 2] = $10;
              HEAP32[($9 + 12 | 0) >> 2] = i64toi32_i32$0;
              HEAP32[($0 + 436 | 0) >> 2] = 0;
              HEAP32[($0 + 428 | 0) >> 2] = $8;
              HEAP32[($0 + 424 | 0) >> 2] = $2;
              HEAP32[($0 + 432 | 0) >> 2] = $9 + 8 | 0;
              $1 = $9 + 28 | 0;
              label$70 : while (1) {
               HEAP32[$1 >> 2] = 7;
               $1 = $1 + 4 | 0;
               if ($6 >>> 0 > $1 >>> 0) {
                continue label$70
               }
               break label$70;
              };
              if (($9 | 0) == ($5 | 0)) {
               break label$9
              }
              HEAP32[($9 + 4 | 0) >> 2] = (HEAP32[($9 + 4 | 0) >> 2] | 0) & -2 | 0;
              $1 = $9 - $5 | 0;
              HEAP32[($5 + 4 | 0) >> 2] = $1 | 1 | 0;
              HEAP32[$9 >> 2] = $1;
              label$71 : {
               if ($1 >>> 0 >= 256 >>> 0) {
                break label$71
               }
               $6 = $1 >>> 3 | 0;
               $1 = ($0 + ($6 << 3 | 0) | 0) + 8 | 0;
               $2 = HEAP32[$0 >> 2] | 0;
               $6 = 1 << ($6 & 31 | 0) | 0;
               if (!($2 & $6 | 0)) {
                break label$62
               }
               $6 = HEAP32[($1 + 8 | 0) >> 2] | 0;
               break label$61;
              }
              dlmalloc__dlmalloc__Dlmalloc__insert_large_chunk__h2b5800089452f7a4($0 | 0, $5 | 0, $1 | 0);
              break label$9;
             }
             HEAP32[$1 >> 2] = $2;
             HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + $8 | 0;
             HEAP32[($2 + 4 | 0) >> 2] = $3 | 3 | 0;
             $1 = $2 + $3 | 0;
             $3 = ($6 - $2 | 0) - $3 | 0;
             $4 = $0 + 412 | 0;
             if ((HEAP32[$4 >> 2] | 0 | 0) == ($6 | 0)) {
              break label$8
             }
             if ((HEAP32[($0 + 408 | 0) >> 2] | 0 | 0) == ($6 | 0)) {
              break label$7
             }
             $4 = HEAP32[($6 + 4 | 0) >> 2] | 0;
             if (($4 & 3 | 0 | 0) != (1 | 0)) {
              break label$3
             }
             $5 = $4 & -8 | 0;
             if ($5 >>> 0 >= 256 >>> 0) {
              break label$6
             }
             $9 = HEAP32[($6 + 12 | 0) >> 2] | 0;
             $8 = HEAP32[($6 + 8 | 0) >> 2] | 0;
             if (($9 | 0) == ($8 | 0)) {
              break label$5
             }
             HEAP32[($8 + 12 | 0) >> 2] = $9;
             HEAP32[($9 + 8 | 0) >> 2] = $8;
             break label$4;
            }
            HEAP32[$0 >> 2] = $2 | $6 | 0;
            $6 = $1;
           }
           HEAP32[($1 + 8 | 0) >> 2] = $5;
           HEAP32[($6 + 12 | 0) >> 2] = $5;
           HEAP32[($5 + 12 | 0) >> 2] = $1;
           HEAP32[($5 + 8 | 0) >> 2] = $6;
          }
          $1 = $0 + 404 | 0;
          $5 = HEAP32[$1 >> 2] | 0;
          if ($5 >>> 0 <= $3 >>> 0) {
           break label$1
          }
          $4 = $5 - $3 | 0;
          HEAP32[$1 >> 2] = $4;
          $1 = $0 + 412 | 0;
          $954 = $1;
          $1 = HEAP32[$1 >> 2] | 0;
          $5 = $1 + $3 | 0;
          HEAP32[$954 >> 2] = $5;
          HEAP32[($5 + 4 | 0) >> 2] = $4 | 1 | 0;
          HEAP32[($1 + 4 | 0) >> 2] = $3 | 3 | 0;
          return $1 + 8 | 0 | 0;
         }
         HEAP32[$4 >> 2] = $1;
         $4 = $0 + 404 | 0;
         $3 = (HEAP32[$4 >> 2] | 0) + $3 | 0;
         HEAP32[$4 >> 2] = $3;
         HEAP32[($1 + 4 | 0) >> 2] = $3 | 1 | 0;
         break label$2;
        }
        HEAP32[($0 + 408 | 0) >> 2] = $1;
        $4 = $0 + 400 | 0;
        $3 = (HEAP32[$4 >> 2] | 0) + $3 | 0;
        HEAP32[$4 >> 2] = $3;
        HEAP32[($1 + 4 | 0) >> 2] = $3 | 1 | 0;
        HEAP32[($1 + $3 | 0) >> 2] = $3;
        break label$2;
       }
       dlmalloc__dlmalloc__Dlmalloc__unlink_large_chunk__h173f6e2d56218081($0 | 0, $6 | 0);
       break label$4;
      }
      (wasm2js_i32$0 = $0, wasm2js_i32$1 = (HEAP32[$0 >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4 >>> 3 | 0 | 0) | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     }
     $3 = $5 + $3 | 0;
     $6 = $6 + $5 | 0;
    }
    HEAP32[($6 + 4 | 0) >> 2] = (HEAP32[($6 + 4 | 0) >> 2] | 0) & -2 | 0;
    HEAP32[($1 + 4 | 0) >> 2] = $3 | 1 | 0;
    HEAP32[($1 + $3 | 0) >> 2] = $3;
    label$72 : {
     label$73 : {
      label$74 : {
       if ($3 >>> 0 >= 256 >>> 0) {
        break label$74
       }
       $4 = $3 >>> 3 | 0;
       $3 = ($0 + ($4 << 3 | 0) | 0) + 8 | 0;
       $5 = HEAP32[$0 >> 2] | 0;
       $4 = 1 << ($4 & 31 | 0) | 0;
       if (!($5 & $4 | 0)) {
        break label$73
       }
       $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
       break label$72;
      }
      dlmalloc__dlmalloc__Dlmalloc__insert_large_chunk__h2b5800089452f7a4($0 | 0, $1 | 0, $3 | 0);
      break label$2;
     }
     HEAP32[$0 >> 2] = $5 | $4 | 0;
     $4 = $3;
    }
    HEAP32[($3 + 8 | 0) >> 2] = $1;
    HEAP32[($4 + 12 | 0) >> 2] = $1;
    HEAP32[($1 + 12 | 0) >> 2] = $3;
    HEAP32[($1 + 8 | 0) >> 2] = $4;
   }
   return $2 + 8 | 0 | 0;
  }
  return $4 | 0;
 }
 
 function stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__hbe2f8245534ccb36($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $3 = 0, $4 = 0, $6 = 0, $8 = 0, $21 = Math_fround(0), $17 = 0, $9 = 0, $22 = Math_fround(0), $10 = 0, $16 = 0, $7 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $24 = Math_fround(0), $18 = 0, $25 = Math_fround(0), $26 = Math_fround(0), $19 = 0, i64toi32_i32$2 = 0, $11 = 0, $14 = 0, $15 = 0, $23 = Math_fround(0), $13 = 0, $84 = 0, $12 = 0, $586 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f32$1 = Math_fround(0), wasm2js_i32$0 = 0;
  $3 = global$0 - 128 | 0;
  global$0 = $3;
  $4 = HEAP32[($2 + 8 | 0) >> 2] | 0;
  $5 = HEAP32[$2 >> 2] | 0;
  HEAP32[($3 + 104 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[($3 + 96 | 0) >> 2] = $5;
  HEAP32[($3 + 100 | 0) >> 2] = $5 + Math_imul($4, 192) | 0;
  $21 = Math_fround($core__iter__adapters__Map_I_2cF__20as_20core__iter__traits__iterator__Iterator___fold__hac64a6a2d6e7e01a($3 + 96 | 0 | 0, Math_fround(Math_fround(0.0))));
  $5 = HEAP32[($1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $4 = HEAP32[$1 >> 2] | 0;
    if ((HEAPU8[$4 >> 0] | 0 | 2 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    $6 = HEAP32[($5 + 8 | 0) >> 2] | 0;
    $22 = Math_fround(HEAPF32[($5 + 12 | 0) >> 2]);
    break label$1;
   }
   $22 = Math_fround(HEAPF32[($5 + 4 | 0) >> 2]);
   $6 = HEAP32[$5 >> 2] | 0;
  }
  $6 = $21 < ($6 ? Math_fround(0.0) : $22);
  HEAP8[($3 + 46 | 0) >> 0] = $6;
  HEAP8[($3 + 47 | 0) >> 0] = $6 ^ 1 | 0;
  $7 = HEAP32[($2 + 8 | 0) >> 2] | 0;
  $8 = HEAP32[$2 >> 2] | 0;
  i64toi32_i32$2 = $1;
  i64toi32_i32$0 = HEAP32[($1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1 + 12 | 0) >> 2] | 0;
  HEAP32[($3 + 112 | 0) >> 2] = HEAP32[($1 + 16 | 0) >> 2] | 0;
  $84 = i64toi32_i32$0;
  i64toi32_i32$0 = $3;
  HEAP32[($3 + 104 | 0) >> 2] = $84;
  HEAP32[($3 + 108 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($3 + 100 | 0) >> 2] = $4;
  HEAP32[($3 + 96 | 0) >> 2] = $5;
  $6 = $8 + Math_imul($7, 192) | 0;
  HEAP32[($3 + 120 | 0) >> 2] = $3 + 47 | 0;
  HEAP32[($3 + 116 | 0) >> 2] = $3 + 46 | 0;
  $5 = $8;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : while (1) {
         if (($6 - $5 | 0) >>> 0 <= 576 >>> 0) {
          break label$8
         }
         stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h8bf46266788d9673($3 + 24 | 0 | 0, $3 + 96 | 0 | 0, $5 | 0);
         $4 = HEAP32[($3 + 24 | 0) >> 2] | 0;
         if ($4) {
          break label$7
         }
         stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h8bf46266788d9673($3 + 16 | 0 | 0, $3 + 96 | 0 | 0, $5 + 192 | 0 | 0);
         $4 = HEAP32[($3 + 16 | 0) >> 2] | 0;
         if ($4) {
          break label$6
         }
         stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h8bf46266788d9673($3 + 8 | 0 | 0, $3 + 96 | 0 | 0, $5 + 384 | 0 | 0);
         $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
         if ($4) {
          break label$5
         }
         stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h8bf46266788d9673($3 | 0, $3 + 96 | 0 | 0, $5 + 576 | 0 | 0);
         $5 = $5 + 768 | 0;
         $4 = HEAP32[$3 >> 2] | 0;
         if (!$4) {
          continue label$9
         }
         break label$9;
        };
        $5 = HEAP32[($3 + 4 | 0) >> 2] | 0;
        break label$3;
       }
       $6 = $8 + Math_imul($7, 192) | 0;
       label$10 : while (1) {
        if (($6 | 0) == ($5 | 0)) {
         break label$4
        }
        stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h8bf46266788d9673($3 + 32 | 0 | 0, $3 + 96 | 0 | 0, $5 | 0);
        $5 = $5 + 192 | 0;
        $4 = HEAP32[($3 + 32 | 0) >> 2] | 0;
        if (!$4) {
         continue label$10
        }
        break label$10;
       };
       $5 = HEAP32[($3 + 36 | 0) >> 2] | 0;
       break label$3;
      }
      $5 = HEAP32[($3 + 28 | 0) >> 2] | 0;
      break label$3;
     }
     $5 = HEAP32[($3 + 20 | 0) >> 2] | 0;
     break label$3;
    }
    $5 = HEAP32[($3 + 12 | 0) >> 2] | 0;
    break label$3;
   }
   $4 = $2 + 8 | 0;
   $6 = HEAP32[$4 >> 2] | 0;
   $5 = HEAP32[$2 >> 2] | 0;
   HEAP32[($3 + 104 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
   HEAP32[($3 + 96 | 0) >> 2] = $5;
   HEAP32[($3 + 100 | 0) >> 2] = $5 + Math_imul($6, 192) | 0;
   $21 = Math_fround($core__iter__adapters__Map_I_2cF__20as_20core__iter__traits__iterator__Iterator___fold__h3f5df867cad0eca2($3 + 96 | 0 | 0, Math_fround(Math_fround(0.0))));
   $9 = 4;
   $5 = HEAP32[($1 + 4 | 0) >> 2] | 0;
   label$11 : {
    label$12 : {
     if ((HEAPU8[(HEAP32[$1 >> 2] | 0) >> 0] | 0 | 2 | 0 | 0) != (3 | 0)) {
      break label$12
     }
     $6 = HEAP32[($5 + 8 | 0) >> 2] | 0;
     $22 = Math_fround(HEAPF32[($5 + 12 | 0) >> 2]);
     break label$11;
    }
    $22 = Math_fround(HEAPF32[($5 + 4 | 0) >> 2]);
    $6 = HEAP32[$5 >> 2] | 0;
   }
   HEAP32[($3 + 56 | 0) >> 2] = 0;
   i64toi32_i32$0 = $3;
   i64toi32_i32$1 = 0;
   HEAP32[($3 + 48 | 0) >> 2] = 4;
   HEAP32[($3 + 52 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($3 + 72 | 0) >> 2] = 0;
   i64toi32_i32$0 = $3;
   i64toi32_i32$1 = 0;
   HEAP32[($3 + 64 | 0) >> 2] = 4;
   HEAP32[($3 + 68 | 0) >> 2] = i64toi32_i32$1;
   $7 = 4;
   label$13 : {
    $4 = HEAP32[$4 >> 2] | 0;
    if (!$4) {
     break label$13
    }
    $23 = $6 ? Math_fround(0.0) : Math_fround($22 - $21);
    $5 = HEAP32[$2 >> 2] | 0;
    $10 = $5 + Math_imul($4, 192) | 0;
    $11 = ($3 + 64 | 0) + 8 | 0;
    $12 = ($3 + 96 | 0) + 16 | 0;
    $13 = ($3 + 96 | 0) + 12 | 0;
    $14 = $1 + 4 | 0;
    label$14 : {
     label$15 : while (1) {
      $8 = 0;
      $7 = 4;
      $9 = 4;
      $4 = 0;
      label$16 : while (1) {
       $6 = $5 + 192 | 0;
       label$17 : {
        label$18 : {
         if (!(HEAPU8[($5 + 188 | 0) >> 0] | 0)) {
          break label$18
         }
         label$19 : {
          if (($4 | 0) != (HEAP32[($3 + 52 | 0) >> 2] | 0 | 0)) {
           break label$19
          }
          alloc__raw_vec__RawVec_T_2cA___reserve__h42db747f50019838($3 + 48 | 0 | 0, $4 | 0, 1 | 0);
          $4 = HEAP32[(($3 + 48 | 0) + 8 | 0) >> 2] | 0;
          $7 = HEAP32[($3 + 48 | 0) >> 2] | 0;
         }
         HEAP32[($7 + ($4 << 2 | 0) | 0) >> 2] = $5;
         $4 = $4 + 1 | 0;
         HEAP32[(($3 + 48 | 0) + 8 | 0) >> 2] = $4;
         break label$17;
        }
        label$20 : {
         if (($8 | 0) != (HEAP32[($3 + 68 | 0) >> 2] | 0 | 0)) {
          break label$20
         }
         alloc__raw_vec__RawVec_T_2cA___reserve__h42db747f50019838($3 + 64 | 0 | 0, $8 | 0, 1 | 0);
         $8 = HEAP32[$11 >> 2] | 0;
         $9 = HEAP32[($3 + 64 | 0) >> 2] | 0;
        }
        HEAP32[($9 + ($8 << 2 | 0) | 0) >> 2] = $5;
        $8 = $8 + 1 | 0;
        HEAP32[$11 >> 2] = $8;
       }
       $5 = $6;
       if (($10 | 0) != ($5 | 0)) {
        continue label$16
       }
       break label$16;
      };
      if (!$8) {
       break label$13
      }
      $5 = HEAP32[$1 >> 2] | 0;
      HEAP8[$12 >> 0] = 0;
      $6 = $8 << 2 | 0;
      HEAP32[$13 >> 2] = $9 + $6 | 0;
      $15 = ($3 + 96 | 0) + 8 | 0;
      HEAP32[$15 >> 2] = $9;
      HEAP32[($3 + 96 | 0) >> 2] = $7;
      HEAP32[($3 + 100 | 0) >> 2] = $7 + ($4 << 2 | 0) | 0;
      $22 = Math_fround(0.0);
      $24 = Math_fround($core__iter__adapters__chain__Chain_A_2cB__20as_20core__iter__traits__iterator__Iterator___fold__h71012b14e40f3bd5($3 + 96 | 0 | 0, Math_fround(Math_fround(0.0)), $5 | 0));
      $21 = Math_fround(0.0);
      label$21 : {
       label$22 : {
        label$23 : {
         label$24 : {
          label$25 : {
           label$26 : {
            if (!$6) {
             break label$26
            }
            $5 = HEAP32[(HEAP32[($1 + 12 | 0) >> 2] | 0) >> 2] | 0;
            $10 = HEAP32[($5 + 8 | 0) >> 2] | 0;
            $16 = HEAP32[$5 >> 2] | 0;
            $21 = Math_fround(0.0);
            $22 = Math_fround(0.0);
            $5 = $9;
            label$27 : while (1) {
             $4 = HEAP32[(HEAP32[$5 >> 2] | 0) >> 2] | 0;
             if ($10 >>> 0 <= $4 >>> 0) {
              break label$25
             }
             $5 = $5 + 4 | 0;
             $4 = $16 + Math_imul($4, 288) | 0;
             $22 = Math_fround($22 + Math_fround(HEAPF32[($4 + 132 | 0) >> 2]));
             $21 = Math_fround($21 + Math_fround(HEAPF32[($4 + 128 | 0) >> 2]));
             $6 = $6 + -4 | 0;
             if ($6) {
              continue label$27
             }
             break label$27;
            };
           }
           label$28 : {
            label$29 : {
             label$30 : {
              label$31 : {
               if ($21 < Math_fround(1.0) ^ 1 | 0) {
                break label$31
               }
               if (!((HEAPU8[($3 + 46 | 0) >> 0] | 0) & 255 | 0)) {
                break label$31
               }
               $25 = Math_fround($23 * $21);
               $5 = HEAP32[$14 >> 2] | 0;
               if ((HEAPU8[(HEAP32[$1 >> 2] | 0) >> 0] | 0 | 2 | 0 | 0) != (3 | 0)) {
                break label$30
               }
               $4 = HEAP32[($5 + 8 | 0) >> 2] | 0;
               $26 = Math_fround(HEAPF32[($5 + 12 | 0) >> 2]);
               break label$22;
              }
              label$32 : {
               if ($22 < Math_fround(1.0) ^ 1 | 0) {
                break label$32
               }
               if (!((HEAPU8[($3 + 47 | 0) >> 0] | 0) & 255 | 0)) {
                break label$32
               }
               $25 = Math_fround($23 * $22);
               $5 = HEAP32[$14 >> 2] | 0;
               if ((HEAPU8[(HEAP32[$1 >> 2] | 0) >> 0] | 0 | 2 | 0 | 0) != (3 | 0)) {
                break label$28
               }
               $4 = HEAP32[($5 + 8 | 0) >> 2] | 0;
               $26 = Math_fround(HEAPF32[($5 + 12 | 0) >> 2]);
               break label$23;
              }
              $5 = HEAP32[$14 >> 2] | 0;
              if ((HEAPU8[(HEAP32[$1 >> 2] | 0) >> 0] | 0 | 2 | 0 | 0) != (3 | 0)) {
               break label$29
              }
              $4 = HEAP32[($5 + 8 | 0) >> 2] | 0;
              $25 = Math_fround(HEAPF32[($5 + 12 | 0) >> 2]);
              break label$24;
             }
             $26 = Math_fround(HEAPF32[($5 + 4 | 0) >> 2]);
             $4 = HEAP32[$5 >> 2] | 0;
             break label$22;
            }
            $25 = Math_fround(HEAPF32[($5 + 4 | 0) >> 2]);
            $4 = HEAP32[$5 >> 2] | 0;
            break label$24;
           }
           $26 = Math_fround(HEAPF32[($5 + 4 | 0) >> 2]);
           $4 = HEAP32[$5 >> 2] | 0;
           break label$23;
          }
          core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $4 | 0, $10 | 0);
          abort();
         }
         $24 = $4 ? Math_fround(0.0) : Math_fround($25 - $24);
         break label$21;
        }
        $24 = (wasm2js_f32$0 = $25, wasm2js_f32$1 = Math_fround(fmaxf(Math_fround($25), Math_fround(Math_fround($26 - $24)))), wasm2js_i32$0 = $4, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
        break label$21;
       }
       $24 = (wasm2js_f32$0 = $25, wasm2js_f32$1 = Math_fround(fminf(Math_fround($25), Math_fround(Math_fround($26 - $24)))), wasm2js_i32$0 = $4, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
      }
      label$33 : {
       if (((core__f32___impl_20f32___classify__h2cc2893972a149fc(Math_fround($24)) | 0) & 255 | 0 | 0) != (4 | 0)) {
        break label$33
       }
       label$34 : {
        label$35 : {
         label$36 : {
          label$37 : {
           label$38 : {
            if ($21 > Math_fround(0.0) ^ 1 | 0) {
             break label$38
            }
            if (!((HEAPU8[($3 + 46 | 0) >> 0] | 0) & 255 | 0)) {
             break label$38
            }
            $6 = $8 << 2 | 0;
            if (!$6) {
             break label$33
            }
            $17 = HEAP32[($1 + 12 | 0) >> 2] | 0;
            $18 = HEAP32[$1 >> 2] | 0;
            $5 = $9;
            break label$37;
           }
           if ($22 > Math_fround(0.0) ^ 1 | 0) {
            break label$33
           }
           if (!((HEAPU8[($3 + 47 | 0) >> 0] | 0) & 255 | 0)) {
            break label$33
           }
           $5 = $1 + 12 | 0;
           HEAP32[$15 >> 2] = HEAP32[$5 >> 2] | 0;
           HEAP32[($3 + 96 | 0) >> 2] = $9;
           $6 = $8 << 2 | 0;
           HEAP32[($3 + 100 | 0) >> 2] = $9 + $6 | 0;
           $22 = Math_fround($core__iter__adapters__Map_I_2cF__20as_20core__iter__traits__iterator__Iterator___fold__h6cf64a9f38892400($3 + 96 | 0 | 0, Math_fround(Math_fround(0.0))));
           if ($22 > Math_fround(0.0) ^ 1 | 0) {
            break label$33
           }
           if (!$6) {
            break label$33
           }
           $17 = HEAP32[$5 >> 2] | 0;
           $18 = HEAP32[$1 >> 2] | 0;
           $4 = $9;
           break label$36;
          }
          label$39 : while (1) {
           $10 = HEAP32[$17 >> 2] | 0;
           $19 = HEAP32[($10 + 8 | 0) >> 2] | 0;
           $4 = HEAP32[$5 >> 2] | 0;
           $16 = HEAP32[$4 >> 2] | 0;
           if ($19 >>> 0 <= $16 >>> 0) {
            break label$35
           }
           $22 = Math_fround(Math_fround(HEAPF32[($4 + 132 | 0) >> 2]) + Math_fround($24 * Math_fround(Math_fround(HEAPF32[(((HEAP32[$10 >> 2] | 0) + Math_imul($16, 288) | 0) + 128 | 0) >> 2]) / $21)));
           label$40 : {
            label$41 : {
             if ((HEAPU8[$18 >> 0] | 0 | 2 | 0 | 0) == (3 | 0)) {
              break label$41
             }
             $4 = $4 + 160 | 0;
             break label$40;
            }
            $4 = $4 + 164 | 0;
           }
           $5 = $5 + 4 | 0;
           HEAPF32[$4 >> 2] = $22;
           $6 = $6 + -4 | 0;
           if ($6) {
            continue label$39
           }
           break label$33;
          };
         }
         label$42 : while (1) {
          $10 = HEAP32[$17 >> 2] | 0;
          $19 = HEAP32[($10 + 8 | 0) >> 2] | 0;
          $5 = HEAP32[$4 >> 2] | 0;
          $16 = HEAP32[$5 >> 2] | 0;
          if ($19 >>> 0 <= $16 >>> 0) {
           break label$34
          }
          $21 = Math_fround(Math_fround(HEAPF32[($5 + 132 | 0) >> 2]) + Math_fround($24 * Math_fround(Math_fround(Math_fround(HEAPF32[($5 + 136 | 0) >> 2]) * Math_fround(HEAPF32[(((HEAP32[$10 >> 2] | 0) + Math_imul($16, 288) | 0) + 132 | 0) >> 2])) / $22)));
          label$43 : {
           label$44 : {
            if ((HEAPU8[$18 >> 0] | 0 | 2 | 0 | 0) == (3 | 0)) {
             break label$44
            }
            $5 = $5 + 160 | 0;
            break label$43;
           }
           $5 = $5 + 164 | 0;
          }
          $4 = $4 + 4 | 0;
          HEAPF32[$5 >> 2] = $21;
          $6 = $6 + -4 | 0;
          if ($6) {
           continue label$42
          }
          break label$33;
         };
        }
        core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $16 | 0, $19 | 0);
        abort();
       }
       core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $16 | 0, $19 | 0);
       abort();
      }
      HEAP32[$13 >> 2] = HEAP32[$1 >> 2] | 0;
      HEAP32[$15 >> 2] = HEAP32[($1 + 16 | 0) >> 2] | 0;
      i64toi32_i32$2 = $1 + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $586 = i64toi32_i32$1;
      i64toi32_i32$1 = $3;
      HEAP32[($3 + 96 | 0) >> 2] = $586;
      HEAP32[($3 + 100 | 0) >> 2] = i64toi32_i32$0;
      $10 = $8 << 2 | 0;
      $16 = $9 + $10 | 0;
      $21 = Math_fround(0.0);
      label$45 : {
       label$46 : {
        label$47 : {
         if ($8 >>> 0 < 4 >>> 0) {
          break label$47
         }
         $6 = $9;
         label$48 : while (1) {
          stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h80aa08f016ee8e10($3 + 80 | 0 | 0, $3 + 96 | 0 | 0, Math_fround($21), $6 | 0);
          $8 = ($3 + 80 | 0) + 8 | 0;
          $5 = HEAP32[$8 >> 2] | 0;
          $4 = HEAP32[($3 + 84 | 0) >> 2] | 0;
          $17 = HEAP32[($3 + 80 | 0) >> 2] | 0;
          if (($17 | 0) == (1 | 0)) {
           break label$45
          }
          $18 = $6 + 4 | 0;
          $21 = (wasm2js_scratch_store_i32(0, $4), wasm2js_scratch_load_f32());
          label$49 : {
           if (!$17) {
            break label$49
           }
           FUNCTION_TABLE[HEAP32[$5 >> 2] | 0]($4);
           $17 = HEAP32[($5 + 4 | 0) >> 2] | 0;
           if (!$17) {
            break label$49
           }
           __rust_dealloc($4 | 0, $17 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0);
          }
          stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h80aa08f016ee8e10($3 + 80 | 0 | 0, $3 + 96 | 0 | 0, Math_fround($21), $18 | 0);
          $5 = HEAP32[$8 >> 2] | 0;
          $4 = HEAP32[($3 + 84 | 0) >> 2] | 0;
          $17 = HEAP32[($3 + 80 | 0) >> 2] | 0;
          if (($17 | 0) == (1 | 0)) {
           break label$45
          }
          $18 = $6 + 8 | 0;
          $21 = (wasm2js_scratch_store_i32(0, $4), wasm2js_scratch_load_f32());
          label$50 : {
           if (!$17) {
            break label$50
           }
           FUNCTION_TABLE[HEAP32[$5 >> 2] | 0]($4);
           $17 = HEAP32[($5 + 4 | 0) >> 2] | 0;
           if (!$17) {
            break label$50
           }
           __rust_dealloc($4 | 0, $17 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0);
          }
          stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h80aa08f016ee8e10($3 + 80 | 0 | 0, $3 + 96 | 0 | 0, Math_fround($21), $18 | 0);
          $5 = HEAP32[$8 >> 2] | 0;
          $4 = HEAP32[($3 + 84 | 0) >> 2] | 0;
          $17 = HEAP32[($3 + 80 | 0) >> 2] | 0;
          if (($17 | 0) == (1 | 0)) {
           break label$45
          }
          $18 = $6 + 12 | 0;
          $21 = (wasm2js_scratch_store_i32(0, $4), wasm2js_scratch_load_f32());
          label$51 : {
           if (!$17) {
            break label$51
           }
           FUNCTION_TABLE[HEAP32[$5 >> 2] | 0]($4);
           $17 = HEAP32[($5 + 4 | 0) >> 2] | 0;
           if (!$17) {
            break label$51
           }
           __rust_dealloc($4 | 0, $17 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0);
          }
          stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h80aa08f016ee8e10($3 + 80 | 0 | 0, $3 + 96 | 0 | 0, Math_fround($21), $18 | 0);
          $5 = HEAP32[$8 >> 2] | 0;
          $4 = HEAP32[($3 + 84 | 0) >> 2] | 0;
          $8 = HEAP32[($3 + 80 | 0) >> 2] | 0;
          if (($8 | 0) == (1 | 0)) {
           break label$45
          }
          $6 = $6 + 16 | 0;
          label$52 : {
           if (!$8) {
            break label$52
           }
           FUNCTION_TABLE[HEAP32[$5 >> 2] | 0]($4);
           $8 = HEAP32[($5 + 4 | 0) >> 2] | 0;
           if (!$8) {
            break label$52
           }
           __rust_dealloc($4 | 0, $8 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0);
          }
          $21 = (wasm2js_scratch_store_i32(0, $4), wasm2js_scratch_load_f32());
          if (($16 - $6 | 0) >>> 0 > 12 >>> 0) {
           continue label$48
          }
          break label$46;
         };
        }
        $4 = 0;
        $6 = $9;
       }
       label$53 : {
        if (($6 | 0) == ($16 | 0)) {
         break label$53
        }
        label$54 : while (1) {
         stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h80aa08f016ee8e10($3 + 80 | 0 | 0, $3 + 96 | 0 | 0, Math_fround($21), $6 | 0);
         $5 = HEAP32[(($3 + 80 | 0) + 8 | 0) >> 2] | 0;
         $4 = HEAP32[($3 + 84 | 0) >> 2] | 0;
         $8 = HEAP32[($3 + 80 | 0) >> 2] | 0;
         if (($8 | 0) == (1 | 0)) {
          break label$45
         }
         $6 = $6 + 4 | 0;
         label$55 : {
          if (!$8) {
           break label$55
          }
          FUNCTION_TABLE[HEAP32[$5 >> 2] | 0]($4);
          $8 = HEAP32[($5 + 4 | 0) >> 2] | 0;
          if (!$8) {
           break label$55
          }
          __rust_dealloc($4 | 0, $8 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0);
         }
         $21 = (wasm2js_scratch_store_i32(0, $4), wasm2js_scratch_load_f32());
         if (($16 | 0) != ($6 | 0)) {
          continue label$54
         }
         break label$54;
        };
       }
       label$56 : {
        if (!$10) {
         break label$56
        }
        $21 = (wasm2js_scratch_store_i32(0, $4), wasm2js_scratch_load_f32());
        $5 = $9;
        label$57 : while (1) {
         $4 = HEAP32[$5 >> 2] | 0;
         label$58 : {
          label$59 : {
           if ($21 > Math_fround(0.0) ^ 1 | 0) {
            break label$59
           }
           HEAP8[($4 + 188 | 0) >> 0] = Math_fround(HEAPF32[($4 + 140 | 0) >> 2]) > Math_fround(0.0);
           break label$58;
          }
          label$60 : {
           if ($21 < Math_fround(0.0) ^ 1 | 0) {
            break label$60
           }
           HEAP8[($4 + 188 | 0) >> 0] = Math_fround(HEAPF32[($4 + 140 | 0) >> 2]) < Math_fround(0.0);
           break label$58;
          }
          HEAP8[($4 + 188 | 0) >> 0] = 1;
         }
         $5 = $5 + 4 | 0;
         $10 = $10 + -4 | 0;
         if ($10) {
          continue label$57
         }
         break label$57;
        };
       }
       label$61 : {
        $5 = HEAP32[($3 + 68 | 0) >> 2] | 0;
        if (!$5) {
         break label$61
        }
        __rust_dealloc($9 | 0, $5 << 2 | 0 | 0, 4 | 0);
       }
       label$62 : {
        $5 = HEAP32[($3 + 52 | 0) >> 2] | 0;
        if (!$5) {
         break label$62
        }
        __rust_dealloc($7 | 0, $5 << 2 | 0 | 0, 4 | 0);
       }
       HEAP32[(($3 + 48 | 0) + 8 | 0) >> 2] = 0;
       i64toi32_i32$1 = $3;
       i64toi32_i32$0 = 0;
       HEAP32[($3 + 48 | 0) >> 2] = 4;
       HEAP32[($3 + 52 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[$11 >> 2] = 0;
       i64toi32_i32$1 = $3;
       i64toi32_i32$0 = 0;
       HEAP32[($3 + 64 | 0) >> 2] = 4;
       HEAP32[($3 + 68 | 0) >> 2] = i64toi32_i32$0;
       $5 = HEAP32[$2 >> 2] | 0;
       $4 = HEAP32[($2 + 8 | 0) >> 2] | 0;
       $10 = $5 + Math_imul($4, 192) | 0;
       if ($4) {
        continue label$15
       }
       break label$14;
      }
      break label$15;
     };
     label$63 : {
      $6 = HEAP32[($3 + 68 | 0) >> 2] | 0;
      if (!$6) {
       break label$63
      }
      __rust_dealloc($9 | 0, $6 << 2 | 0 | 0, 4 | 0);
     }
     $6 = HEAP32[($3 + 52 | 0) >> 2] | 0;
     if (!$6) {
      break label$3
     }
     __rust_dealloc($7 | 0, $6 << 2 | 0 | 0, 4 | 0);
     break label$3;
    }
    $9 = 4;
    $7 = 4;
   }
   label$64 : {
    $5 = HEAP32[($3 + 68 | 0) >> 2] | 0;
    if (!$5) {
     break label$64
    }
    __rust_dealloc($9 | 0, $5 << 2 | 0 | 0, 4 | 0);
   }
   label$65 : {
    $5 = HEAP32[($3 + 52 | 0) >> 2] | 0;
    if (!$5) {
     break label$65
    }
    __rust_dealloc($7 | 0, $5 << 2 | 0 | 0, 4 | 0);
   }
   $4 = 0;
  }
  HEAP32[($0 + 4 | 0) >> 2] = $5;
  HEAP32[$0 >> 2] = $4;
  global$0 = $3 + 128 | 0;
 }
 
 function stretch_layout__parse_style__h91b82fac5ad97f80($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $6 = 0, $9 = 0, $8 = 0, $11 = 0, $5 = 0, $13 = 0, $7 = 0, $3 = 0, $4 = 0, $10 = 0, $12 = 0, $38 = Math_fround(0), $14 = 0, $39 = Math_fround(0), $15 = 0, $40 = Math_fround(0), $16 = 0, $41 = Math_fround(0), $17 = 0, $42 = Math_fround(0), $18 = 0, $43 = Math_fround(0), $19 = 0, $44 = Math_fround(0), $20 = 0, $45 = Math_fround(0), $21 = 0, $46 = Math_fround(0), $22 = 0, $47 = Math_fround(0), $23 = 0, $48 = Math_fround(0), $24 = 0, $49 = Math_fround(0), $25 = 0, $50 = Math_fround(0), $26 = 0, $51 = Math_fround(0), $27 = 0, $52 = Math_fround(0), $28 = 0, $53 = Math_fround(0), $54 = Math_fround(0), $29 = 0, $55 = Math_fround(0), $30 = 0, $31 = 0, $56 = Math_fround(0), $32 = 0, $57 = Math_fround(0), $33 = 0, $58 = Math_fround(0), $34 = 0, $59 = Math_fround(0), $35 = 0, $60 = Math_fround(0), $36 = 0, $61 = Math_fround(0), $37 = 0, $62 = Math_fround(0), $63 = Math_fround(0);
  $2 = global$0 - 288 | 0;
  global$0 = $2;
  stretch_layout__get_i32__h4e130a2f15705d8c($2 + 280 | 0 | 0, $1 | 0, 1048756 | 0, 7 | 0);
  label$1 : {
   label$2 : {
    if (!(HEAP32[($2 + 280 | 0) >> 2] | 0)) {
     break label$2
    }
    $3 = (HEAP32[($2 + 284 | 0) >> 2] | 0 | 0) == (1 | 0);
    break label$1;
   }
   $3 = $stretch__style__Display_20as_20core__default__Default___default__h7bdc528855d7621f() | 0;
  }
  stretch_layout__get_i32__h4e130a2f15705d8c($2 + 272 | 0 | 0, $1 | 0, 1048763 | 0, 12 | 0);
  label$3 : {
   label$4 : {
    if (!(HEAP32[($2 + 272 | 0) >> 2] | 0)) {
     break label$4
    }
    $4 = (HEAP32[($2 + 276 | 0) >> 2] | 0 | 0) == (1 | 0);
    break label$3;
   }
   $4 = $stretch__style__PositionType_20as_20core__default__Default___default__h9964112a2b906cf4() | 0;
  }
  stretch_layout__get_i32__h4e130a2f15705d8c($2 + 264 | 0 | 0, $1 | 0, 1048775 | 0, 9 | 0);
  label$5 : {
   label$6 : {
    label$7 : {
     if (!(HEAP32[($2 + 264 | 0) >> 2] | 0)) {
      break label$7
     }
     $5 = 2;
     $6 = HEAP32[($2 + 268 | 0) >> 2] | 0;
     $6 = ($6 | 0) == (2 | 0) ? 2 : ($6 | 0) == (1 | 0);
     if (($6 | 0) == (1 | 0)) {
      break label$6
     }
     if (($6 | 0) == (2 | 0)) {
      break label$5
     }
     $5 = 0;
     break label$5;
    }
    $5 = ($stretch__style__Direction_20as_20core__default__Default___default__he78f21adc995056d() | 0) & 255 | 0;
    break label$5;
   }
   $5 = 1;
  }
  stretch_layout__get_i32__h4e130a2f15705d8c($2 + 256 | 0 | 0, $1 | 0, 1048784 | 0, 13 | 0);
  label$8 : {
   label$9 : {
    if (!(HEAP32[($2 + 256 | 0) >> 2] | 0)) {
     break label$9
    }
    $7 = 0;
    $6 = (HEAP32[($2 + 260 | 0) >> 2] | 0) + -1 | 0;
    if ($6 >>> 0 >= 3 >>> 0) {
     break label$8
    }
    $7 = $6 + 1 | 0;
    break label$8;
   }
   $7 = ($stretch__style__FlexDirection_20as_20core__default__Default___default__ha5d1535c14035cc7() | 0) & 255 | 0;
  }
  stretch_layout__get_i32__h4e130a2f15705d8c($2 + 248 | 0 | 0, $1 | 0, 1048797 | 0, 8 | 0);
  label$10 : {
   label$11 : {
    label$12 : {
     if (!(HEAP32[($2 + 248 | 0) >> 2] | 0)) {
      break label$12
     }
     $6 = 2;
     $8 = HEAP32[($2 + 252 | 0) >> 2] | 0;
     $8 = ($8 | 0) == (2 | 0) ? 2 : ($8 | 0) == (1 | 0);
     if (($8 | 0) == (1 | 0)) {
      break label$11
     }
     if (($8 | 0) == (2 | 0)) {
      break label$10
     }
     $6 = 0;
     break label$10;
    }
    $6 = ($stretch__style__FlexWrap_20as_20core__default__Default___default__h838c357d89358ee1() | 0) & 255 | 0;
    break label$10;
   }
   $6 = 1;
  }
  stretch_layout__get_i32__h4e130a2f15705d8c($2 + 240 | 0 | 0, $1 | 0, 1048805 | 0, 8 | 0);
  label$13 : {
   label$14 : {
    label$15 : {
     if (!(HEAP32[($2 + 240 | 0) >> 2] | 0)) {
      break label$15
     }
     $8 = 2;
     $9 = HEAP32[($2 + 244 | 0) >> 2] | 0;
     $9 = ($9 | 0) == (2 | 0) ? 2 : ($9 | 0) == (1 | 0);
     if (($9 | 0) == (1 | 0)) {
      break label$14
     }
     if (($9 | 0) == (2 | 0)) {
      break label$13
     }
     $8 = 0;
     break label$13;
    }
    $8 = ($stretch__style__Overflow_20as_20core__default__Default___default__h96b82101d867228f() | 0) & 255 | 0;
    break label$13;
   }
   $8 = 1;
  }
  stretch_layout__get_i32__h4e130a2f15705d8c($2 + 232 | 0 | 0, $1 | 0, 1048813 | 0, 10 | 0);
  label$16 : {
   label$17 : {
    if (!(HEAP32[($2 + 232 | 0) >> 2] | 0)) {
     break label$17
    }
    $9 = HEAP32[($2 + 236 | 0) >> 2] | 0;
    $10 = $9 >>> 0 < 4 >>> 0 ? $9 : 4;
    break label$16;
   }
   $10 = ($stretch__style__AlignItems_20as_20core__default__Default___default__he2f0bc159b19a283() | 0) & 255 | 0;
  }
  stretch_layout__get_i32__h4e130a2f15705d8c($2 + 224 | 0 | 0, $1 | 0, 1048823 | 0, 9 | 0);
  label$18 : {
   label$19 : {
    if (!(HEAP32[($2 + 224 | 0) >> 2] | 0)) {
     break label$19
    }
    $9 = 0;
    $11 = (HEAP32[($2 + 228 | 0) >> 2] | 0) + -1 | 0;
    if ($11 >>> 0 >= 5 >>> 0) {
     break label$18
    }
    $9 = $11 + 1 | 0;
    break label$18;
   }
   $9 = ($stretch__style__AlignSelf_20as_20core__default__Default___default__h4896f43e9af3044e() | 0) & 255 | 0;
  }
  stretch_layout__get_i32__h4e130a2f15705d8c($2 + 216 | 0 | 0, $1 | 0, 1048832 | 0, 12 | 0);
  label$20 : {
   label$21 : {
    if (!(HEAP32[($2 + 216 | 0) >> 2] | 0)) {
     break label$21
    }
    $11 = HEAP32[($2 + 220 | 0) >> 2] | 0;
    $12 = $11 >>> 0 < 6 >>> 0 ? $11 : 3;
    break label$20;
   }
   $12 = ($stretch__style__AlignContent_20as_20core__default__Default___default__h4732b9843d132f16() | 0) & 255 | 0;
  }
  stretch_layout__get_i32__h4e130a2f15705d8c($2 + 208 | 0 | 0, $1 | 0, 1048844 | 0, 14 | 0);
  label$22 : {
   label$23 : {
    if (!(HEAP32[($2 + 208 | 0) >> 2] | 0)) {
     break label$23
    }
    $11 = 0;
    $13 = (HEAP32[($2 + 212 | 0) >> 2] | 0) + -1 | 0;
    if ($13 >>> 0 >= 5 >>> 0) {
     break label$22
    }
    $11 = $13 + 1 | 0;
    break label$22;
   }
   $11 = ($stretch__style__JustifyContent_20as_20core__default__Default___default__h5dd5a7fdab33739e() | 0) & 255 | 0;
  }
  stretch_layout__get_dimension__h7be8d74246d20fbc($2 + 200 | 0 | 0, $1 | 0, 1048858 | 0, 5 | 0);
  $13 = HEAP32[($2 + 200 | 0) >> 2] | 0;
  $38 = Math_fround(HEAPF32[($2 + 204 | 0) >> 2]);
  stretch_layout__get_dimension__h7be8d74246d20fbc($2 + 192 | 0 | 0, $1 | 0, 1048863 | 0, 3 | 0);
  $14 = HEAP32[($2 + 192 | 0) >> 2] | 0;
  $39 = Math_fround(HEAPF32[($2 + 196 | 0) >> 2]);
  stretch_layout__get_dimension__h7be8d74246d20fbc($2 + 184 | 0 | 0, $1 | 0, 1048866 | 0, 3 | 0);
  $15 = HEAP32[($2 + 184 | 0) >> 2] | 0;
  $40 = Math_fround(HEAPF32[($2 + 188 | 0) >> 2]);
  stretch_layout__get_dimension__h7be8d74246d20fbc($2 + 176 | 0 | 0, $1 | 0, 1048869 | 0, 6 | 0);
  $16 = HEAP32[($2 + 176 | 0) >> 2] | 0;
  $41 = Math_fround(HEAPF32[($2 + 180 | 0) >> 2]);
  stretch_layout__get_dimension__h7be8d74246d20fbc($2 + 168 | 0 | 0, $1 | 0, 1048875 | 0, 11 | 0);
  $17 = HEAP32[($2 + 168 | 0) >> 2] | 0;
  $42 = Math_fround(HEAPF32[($2 + 172 | 0) >> 2]);
  stretch_layout__get_dimension__h7be8d74246d20fbc($2 + 160 | 0 | 0, $1 | 0, 1048886 | 0, 9 | 0);
  $18 = HEAP32[($2 + 160 | 0) >> 2] | 0;
  $43 = Math_fround(HEAPF32[($2 + 164 | 0) >> 2]);
  stretch_layout__get_dimension__h7be8d74246d20fbc($2 + 152 | 0 | 0, $1 | 0, 1048895 | 0, 9 | 0);
  $19 = HEAP32[($2 + 152 | 0) >> 2] | 0;
  $44 = Math_fround(HEAPF32[($2 + 156 | 0) >> 2]);
  stretch_layout__get_dimension__h7be8d74246d20fbc($2 + 144 | 0 | 0, $1 | 0, 1048904 | 0, 12 | 0);
  $20 = HEAP32[($2 + 144 | 0) >> 2] | 0;
  $45 = Math_fround(HEAPF32[($2 + 148 | 0) >> 2]);
  stretch_layout__get_dimension__h7be8d74246d20fbc($2 + 136 | 0 | 0, $1 | 0, 1048916 | 0, 12 | 0);
  $21 = HEAP32[($2 + 136 | 0) >> 2] | 0;
  $46 = Math_fround(HEAPF32[($2 + 140 | 0) >> 2]);
  stretch_layout__get_dimension__h7be8d74246d20fbc($2 + 128 | 0 | 0, $1 | 0, 1048928 | 0, 10 | 0);
  $22 = HEAP32[($2 + 128 | 0) >> 2] | 0;
  $47 = Math_fround(HEAPF32[($2 + 132 | 0) >> 2]);
  stretch_layout__get_dimension__h7be8d74246d20fbc($2 + 120 | 0 | 0, $1 | 0, 1048938 | 0, 10 | 0);
  $23 = HEAP32[($2 + 120 | 0) >> 2] | 0;
  $48 = Math_fround(HEAPF32[($2 + 124 | 0) >> 2]);
  stretch_layout__get_dimension__h7be8d74246d20fbc($2 + 112 | 0 | 0, $1 | 0, 1048948 | 0, 13 | 0);
  $24 = HEAP32[($2 + 112 | 0) >> 2] | 0;
  $49 = Math_fround(HEAPF32[($2 + 116 | 0) >> 2]);
  stretch_layout__get_dimension__h7be8d74246d20fbc($2 + 104 | 0 | 0, $1 | 0, 1048961 | 0, 11 | 0);
  $25 = HEAP32[($2 + 104 | 0) >> 2] | 0;
  $50 = Math_fround(HEAPF32[($2 + 108 | 0) >> 2]);
  stretch_layout__get_dimension__h7be8d74246d20fbc($2 + 96 | 0 | 0, $1 | 0, 1048972 | 0, 9 | 0);
  $26 = HEAP32[($2 + 96 | 0) >> 2] | 0;
  $51 = Math_fround(HEAPF32[($2 + 100 | 0) >> 2]);
  stretch_layout__get_dimension__h7be8d74246d20fbc($2 + 88 | 0 | 0, $1 | 0, 1048981 | 0, 9 | 0);
  $27 = HEAP32[($2 + 88 | 0) >> 2] | 0;
  $52 = Math_fround(HEAPF32[($2 + 92 | 0) >> 2]);
  stretch_layout__get_dimension__h7be8d74246d20fbc($2 + 80 | 0 | 0, $1 | 0, 1048990 | 0, 12 | 0);
  $28 = HEAP32[($2 + 80 | 0) >> 2] | 0;
  $53 = Math_fround(HEAPF32[($2 + 84 | 0) >> 2]);
  stretch_layout__get_f32__h0d76de51d01f671a($2 + 72 | 0 | 0, $1 | 0, 1049002 | 0, 8 | 0);
  $54 = Math_fround(HEAPF32[($2 + 76 | 0) >> 2]);
  $29 = HEAP32[($2 + 72 | 0) >> 2] | 0;
  stretch_layout__get_f32__h0d76de51d01f671a($2 + 64 | 0 | 0, $1 | 0, 1049010 | 0, 10 | 0);
  $55 = Math_fround(HEAPF32[($2 + 68 | 0) >> 2]);
  $30 = HEAP32[($2 + 64 | 0) >> 2] | 0;
  stretch_layout__get_dimension__h7be8d74246d20fbc($2 + 56 | 0 | 0, $1 | 0, 1049020 | 0, 9 | 0);
  $31 = HEAP32[($2 + 56 | 0) >> 2] | 0;
  $56 = Math_fround(HEAPF32[($2 + 60 | 0) >> 2]);
  stretch_layout__get_dimension__h7be8d74246d20fbc($2 + 48 | 0 | 0, $1 | 0, 1049029 | 0, 5 | 0);
  $32 = HEAP32[($2 + 48 | 0) >> 2] | 0;
  $57 = Math_fround(HEAPF32[($2 + 52 | 0) >> 2]);
  stretch_layout__get_dimension__h7be8d74246d20fbc($2 + 40 | 0 | 0, $1 | 0, 1049034 | 0, 6 | 0);
  $33 = HEAP32[($2 + 40 | 0) >> 2] | 0;
  $58 = Math_fround(HEAPF32[($2 + 44 | 0) >> 2]);
  stretch_layout__get_dimension__h7be8d74246d20fbc($2 + 32 | 0 | 0, $1 | 0, 1049040 | 0, 8 | 0);
  $34 = HEAP32[($2 + 32 | 0) >> 2] | 0;
  $59 = Math_fround(HEAPF32[($2 + 36 | 0) >> 2]);
  stretch_layout__get_dimension__h7be8d74246d20fbc($2 + 24 | 0 | 0, $1 | 0, 1049048 | 0, 9 | 0);
  $35 = HEAP32[($2 + 24 | 0) >> 2] | 0;
  $60 = Math_fround(HEAPF32[($2 + 28 | 0) >> 2]);
  stretch_layout__get_dimension__h7be8d74246d20fbc($2 + 16 | 0 | 0, $1 | 0, 1049057 | 0, 8 | 0);
  $36 = HEAP32[($2 + 16 | 0) >> 2] | 0;
  $61 = Math_fround(HEAPF32[($2 + 20 | 0) >> 2]);
  stretch_layout__get_dimension__h7be8d74246d20fbc($2 + 8 | 0 | 0, $1 | 0, 1049065 | 0, 9 | 0);
  $37 = HEAP32[($2 + 8 | 0) >> 2] | 0;
  $62 = Math_fround(HEAPF32[($2 + 12 | 0) >> 2]);
  stretch_layout__get_f32__h0d76de51d01f671a($2 | 0, $1 | 0, 1049074 | 0, 11 | 0);
  $1 = HEAP32[$2 >> 2] | 0;
  $63 = Math_fround(HEAPF32[($2 + 4 | 0) >> 2]);
  HEAP8[($0 + 209 | 0) >> 0] = $11;
  HEAP8[($0 + 208 | 0) >> 0] = $12;
  HEAP8[($0 + 207 | 0) >> 0] = $9;
  HEAP8[($0 + 206 | 0) >> 0] = $10;
  HEAP8[($0 + 205 | 0) >> 0] = $8;
  HEAP8[($0 + 204 | 0) >> 0] = $6;
  HEAP8[($0 + 203 | 0) >> 0] = $7;
  HEAP8[($0 + 202 | 0) >> 0] = $5;
  HEAP8[($0 + 201 | 0) >> 0] = $4;
  HEAP8[($0 + 200 | 0) >> 0] = $3;
  HEAPF32[($0 + 196 | 0) >> 2] = $63;
  HEAPF32[($0 + 188 | 0) >> 2] = $62;
  HEAP32[($0 + 184 | 0) >> 2] = $37;
  HEAPF32[($0 + 180 | 0) >> 2] = $61;
  HEAP32[($0 + 176 | 0) >> 2] = $36;
  HEAPF32[($0 + 172 | 0) >> 2] = $60;
  HEAP32[($0 + 168 | 0) >> 2] = $35;
  HEAPF32[($0 + 164 | 0) >> 2] = $59;
  HEAP32[($0 + 160 | 0) >> 2] = $34;
  HEAPF32[($0 + 156 | 0) >> 2] = $58;
  HEAP32[($0 + 152 | 0) >> 2] = $33;
  HEAPF32[($0 + 148 | 0) >> 2] = $57;
  HEAP32[($0 + 144 | 0) >> 2] = $32;
  HEAPF32[($0 + 140 | 0) >> 2] = $56;
  HEAP32[($0 + 136 | 0) >> 2] = $31;
  HEAPF32[($0 + 132 | 0) >> 2] = $30 ? $55 : Math_fround(1.0);
  HEAPF32[($0 + 128 | 0) >> 2] = $29 ? $54 : Math_fround(0.0);
  HEAPF32[($0 + 124 | 0) >> 2] = $53;
  HEAP32[($0 + 120 | 0) >> 2] = $28;
  HEAPF32[($0 + 116 | 0) >> 2] = $52;
  HEAP32[($0 + 112 | 0) >> 2] = $27;
  HEAPF32[($0 + 108 | 0) >> 2] = $51;
  HEAP32[($0 + 104 | 0) >> 2] = $26;
  HEAPF32[($0 + 100 | 0) >> 2] = $50;
  HEAP32[($0 + 96 | 0) >> 2] = $25;
  HEAPF32[($0 + 92 | 0) >> 2] = $49;
  HEAP32[($0 + 88 | 0) >> 2] = $24;
  HEAPF32[($0 + 84 | 0) >> 2] = $48;
  HEAP32[($0 + 80 | 0) >> 2] = $23;
  HEAPF32[($0 + 76 | 0) >> 2] = $47;
  HEAP32[($0 + 72 | 0) >> 2] = $22;
  HEAPF32[($0 + 68 | 0) >> 2] = $46;
  HEAP32[($0 + 64 | 0) >> 2] = $21;
  HEAPF32[($0 + 60 | 0) >> 2] = $45;
  HEAP32[($0 + 56 | 0) >> 2] = $20;
  HEAPF32[($0 + 52 | 0) >> 2] = $44;
  HEAP32[($0 + 48 | 0) >> 2] = $19;
  HEAPF32[($0 + 44 | 0) >> 2] = $43;
  HEAP32[($0 + 40 | 0) >> 2] = $18;
  HEAPF32[($0 + 36 | 0) >> 2] = $42;
  HEAP32[($0 + 32 | 0) >> 2] = $17;
  HEAPF32[($0 + 28 | 0) >> 2] = $41;
  HEAP32[($0 + 24 | 0) >> 2] = $16;
  HEAPF32[($0 + 20 | 0) >> 2] = $40;
  HEAP32[($0 + 16 | 0) >> 2] = $15;
  HEAPF32[($0 + 12 | 0) >> 2] = $39;
  HEAP32[($0 + 8 | 0) >> 2] = $14;
  HEAPF32[($0 + 4 | 0) >> 2] = $38;
  HEAP32[$0 >> 2] = $13;
  HEAP32[($0 + 192 | 0) >> 2] = !$1;
  global$0 = $2 + 288 | 0;
 }
 
 function stretch__forest__Forest__compute_layout__h7867d865900c3088($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $20 = Math_fround(0), $6 = 0, $19 = Math_fround(0), $11 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $7 = 0, $15 = Math_fround(0), $16 = Math_fround(0), $8 = 0, $9 = 0, $10 = 0, $12 = 0, $17 = Math_fround(0), $18 = Math_fround(0), i64toi32_i32$1 = 0;
  $4 = global$0 - 48 | 0;
  global$0 = $4;
  label$1 : {
   label$2 : {
    $5 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    if ($5 >>> 0 <= $2 >>> 0) {
     break label$2
    }
    $13 = Math_fround(HEAPF32[($3 + 12 | 0) >> 2]);
    $6 = HEAP32[($3 + 8 | 0) >> 2] | 0;
    $14 = Math_fround(HEAPF32[($3 + 4 | 0) >> 2]);
    $7 = HEAP32[$3 >> 2] | 0;
    $3 = (HEAP32[$1 >> 2] | 0) + Math_imul($2, 288) | 0;
    $8 = HEAP32[($3 + 168 | 0) >> 2] | 0;
    $9 = HEAP32[($3 + 176 | 0) >> 2] | 0;
    $5 = HEAP32[($3 + 144 | 0) >> 2] | 0;
    $15 = Math_fround(HEAPF32[($3 + 188 | 0) >> 2]);
    $10 = HEAP32[($3 + 184 | 0) >> 2] | 0;
    $16 = Math_fround(HEAPF32[($3 + 180 | 0) >> 2]);
    $17 = Math_fround(HEAPF32[($3 + 172 | 0) >> 2]);
    $18 = Math_fround(HEAPF32[($3 + 164 | 0) >> 2]);
    $19 = Math_fround(HEAPF32[($3 + 156 | 0) >> 2]);
    $11 = HEAP32[($3 + 152 | 0) >> 2] | 0;
    $20 = Math_fround(HEAPF32[($3 + 148 | 0) >> 2]);
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             $12 = HEAP32[($3 + 160 | 0) >> 2] | 0;
             if (($12 & -2 | 0 | 0) == (2 | 0)) {
              break label$11
             }
             if (($8 & -2 | 0 | 0) == (2 | 0)) {
              break label$11
             }
             if (($9 & -2 | 0 | 0) == (2 | 0)) {
              break label$11
             }
             if (($10 & -2 | 0 | 0) == (2 | 0)) {
              break label$11
             }
             if (($5 | 0) == (3 | 0)) {
              break label$10
             }
             if (($5 | 0) != (2 | 0)) {
              break label$9
             }
             $3 = 0;
             break label$8;
            }
            label$12 : {
             label$13 : {
              label$14 : {
               if (($5 | 0) == (3 | 0)) {
                break label$14
               }
               if (($5 | 0) != (2 | 0)) {
                break label$13
               }
               $3 = 0;
               break label$12;
              }
              $3 = ($7 | 0) != (0 | 0);
              $20 = Math_fround($14 * $20);
              break label$12;
             }
             $3 = 1;
            }
            label$15 : {
             label$16 : {
              label$17 : {
               if (($11 | 0) == (3 | 0)) {
                break label$17
               }
               if (($11 | 0) != (2 | 0)) {
                break label$16
               }
               $5 = 0;
               break label$15;
              }
              $5 = ($6 | 0) != (0 | 0);
              $19 = Math_fround($13 * $19);
              break label$15;
             }
             $5 = 1;
            }
            HEAPF32[(($4 + 16 | 0) + 12 | 0) >> 2] = $19;
            HEAP32[($4 + 24 | 0) >> 2] = $5;
            HEAPF32[($4 + 20 | 0) >> 2] = $20;
            HEAP32[($4 + 16 | 0) >> 2] = $3;
            HEAPF32[(($4 + 32 | 0) + 12 | 0) >> 2] = $13;
            HEAP32[($4 + 40 | 0) >> 2] = $6;
            HEAPF32[($4 + 36 | 0) >> 2] = $14;
            HEAP32[($4 + 32 | 0) >> 2] = $7;
            stretch__algo___impl_20stretch__forest__Forest___compute_internal__h1faccff9b0af78e6($4 | 0, $1 | 0, $2 | 0, $4 + 16 | 0 | 0, $4 + 32 | 0 | 0, 0 | 0);
            $5 = HEAP32[($4 + 8 | 0) >> 2] | 0;
            $3 = HEAP32[($4 + 4 | 0) >> 2] | 0;
            $11 = HEAP32[$4 >> 2] | 0;
            if (($11 | 0) == (1 | 0)) {
             break label$7
            }
            label$18 : {
             if (!$11) {
              break label$18
             }
             FUNCTION_TABLE[HEAP32[$5 >> 2] | 0]($3);
             $11 = HEAP32[($5 + 4 | 0) >> 2] | 0;
             if (!$11) {
              break label$18
             }
             __rust_dealloc($3 | 0, $11 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0);
            }
            $19 = (wasm2js_scratch_store_i32(0, $3), wasm2js_scratch_load_f32());
            label$19 : {
             label$20 : {
              label$21 : {
               if (($12 | 0) == (3 | 0)) {
                break label$21
               }
               if (($12 | 0) != (2 | 0)) {
                break label$19
               }
               $20 = Math_fround(fmaxf(Math_fround($19), Math_fround($18)));
               break label$20;
              }
              $20 = Math_fround(fmaxf(Math_fround($19), Math_fround(Math_fround($14 * $18))));
              if ($7) {
               break label$19
              }
             }
             $19 = $20;
            }
            label$22 : {
             label$23 : {
              label$24 : {
               if (($9 | 0) == (3 | 0)) {
                break label$24
               }
               if (($9 | 0) != (2 | 0)) {
                break label$22
               }
               $20 = Math_fround(fminf(Math_fround($19), Math_fround($16)));
               break label$23;
              }
              $20 = Math_fround(fminf(Math_fround($19), Math_fround(Math_fround($14 * $16))));
              if ($7) {
               break label$22
              }
             }
             $19 = $20;
            }
            $20 = (wasm2js_scratch_store_i32(0, $5), wasm2js_scratch_load_f32());
            label$25 : {
             label$26 : {
              label$27 : {
               if (($8 | 0) == (3 | 0)) {
                break label$27
               }
               if (($8 | 0) != (2 | 0)) {
                break label$25
               }
               $16 = Math_fround(fmaxf(Math_fround($20), Math_fround($17)));
               break label$26;
              }
              $16 = Math_fround(fmaxf(Math_fround($20), Math_fround(Math_fround($13 * $17))));
              if ($6) {
               break label$25
              }
             }
             $20 = $16;
            }
            label$28 : {
             label$29 : {
              label$30 : {
               if (($10 | 0) == (3 | 0)) {
                break label$30
               }
               if (($10 | 0) != (2 | 0)) {
                break label$28
               }
               $15 = Math_fround(fminf(Math_fround($20), Math_fround($15)));
               break label$29;
              }
              $15 = Math_fround(fminf(Math_fround($20), Math_fround(Math_fround($13 * $15))));
              if ($6) {
               break label$28
              }
             }
             $20 = $15;
            }
            HEAPF32[(($4 + 16 | 0) + 12 | 0) >> 2] = $20;
            HEAP32[($4 + 24 | 0) >> 2] = 0;
            HEAPF32[($4 + 20 | 0) >> 2] = $19;
            HEAP32[($4 + 16 | 0) >> 2] = 0;
            HEAPF32[(($4 + 32 | 0) + 12 | 0) >> 2] = $13;
            HEAP32[($4 + 40 | 0) >> 2] = $6;
            HEAPF32[($4 + 36 | 0) >> 2] = $14;
            HEAP32[($4 + 32 | 0) >> 2] = $7;
            stretch__algo___impl_20stretch__forest__Forest___compute_internal__h1faccff9b0af78e6($4 | 0, $1 | 0, $2 | 0, $4 + 16 | 0 | 0, $4 + 32 | 0 | 0, 1 | 0);
            $5 = HEAP32[($4 + 8 | 0) >> 2] | 0;
            $3 = HEAP32[($4 + 4 | 0) >> 2] | 0;
            $6 = HEAP32[$4 >> 2] | 0;
            if (($6 | 0) == (1 | 0)) {
             break label$7
            }
            $19 = (wasm2js_scratch_store_i32(0, $5), wasm2js_scratch_load_f32());
            $20 = (wasm2js_scratch_store_i32(0, $3), wasm2js_scratch_load_f32());
            if (!$6) {
             break label$5
            }
            FUNCTION_TABLE[HEAP32[$5 >> 2] | 0]($3);
            $6 = HEAP32[($5 + 4 | 0) >> 2] | 0;
            if (!$6) {
             break label$5
            }
            __rust_dealloc($3 | 0, $6 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0);
            break label$5;
           }
           $3 = ($7 | 0) != (0 | 0);
           $20 = Math_fround($14 * $20);
           break label$8;
          }
          $3 = 1;
         }
         label$31 : {
          label$32 : {
           label$33 : {
            if (($11 | 0) == (3 | 0)) {
             break label$33
            }
            if (($11 | 0) != (2 | 0)) {
             break label$32
            }
            $5 = 0;
            break label$31;
           }
           $5 = ($6 | 0) != (0 | 0);
           $19 = Math_fround($13 * $19);
           break label$31;
          }
          $5 = 1;
         }
         HEAPF32[(($4 + 16 | 0) + 12 | 0) >> 2] = $19;
         HEAP32[($4 + 24 | 0) >> 2] = $5;
         HEAPF32[($4 + 20 | 0) >> 2] = $20;
         HEAP32[($4 + 16 | 0) >> 2] = $3;
         HEAPF32[(($4 + 32 | 0) + 12 | 0) >> 2] = $13;
         HEAP32[($4 + 40 | 0) >> 2] = $6;
         HEAPF32[($4 + 36 | 0) >> 2] = $14;
         HEAP32[($4 + 32 | 0) >> 2] = $7;
         stretch__algo___impl_20stretch__forest__Forest___compute_internal__h1faccff9b0af78e6($4 | 0, $1 | 0, $2 | 0, $4 + 16 | 0 | 0, $4 + 32 | 0 | 0, 1 | 0);
         $5 = HEAP32[($4 + 8 | 0) >> 2] | 0;
         $3 = HEAP32[($4 + 4 | 0) >> 2] | 0;
         $6 = HEAP32[$4 >> 2] | 0;
         if (($6 | 0) != (1 | 0)) {
          break label$6
         }
        }
        if (!$3) {
         break label$4
        }
        HEAP32[($0 + 4 | 0) >> 2] = $3;
        HEAP32[($0 + 8 | 0) >> 2] = $5;
        $3 = 1;
        break label$3;
       }
       $19 = (wasm2js_scratch_store_i32(0, $5), wasm2js_scratch_load_f32());
       $20 = (wasm2js_scratch_store_i32(0, $3), wasm2js_scratch_load_f32());
       if (!$6) {
        break label$5
       }
       FUNCTION_TABLE[HEAP32[$5 >> 2] | 0]($3);
       $6 = HEAP32[($5 + 4 | 0) >> 2] | 0;
       if (!$6) {
        break label$5
       }
       __rust_dealloc($3 | 0, $6 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0);
      }
      $3 = HEAP32[($1 + 8 | 0) >> 2] | 0;
      if ($3 >>> 0 <= $2 >>> 0) {
       break label$1
      }
      $3 = (HEAP32[$1 >> 2] | 0) + Math_imul($2, 288) | 0;
      HEAP32[($3 + 220 | 0) >> 2] = 0;
      i64toi32_i32$1 = $3 + 232 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
      HEAPF32[($3 + 228 | 0) >> 2] = $19;
      HEAPF32[($3 + 224 | 0) >> 2] = $20;
      stretch__algo___impl_20stretch__forest__Forest___round_layout__hb419edbcacf68d87($1 | 0, $1 + 12 | 0 | 0, $2 | 0, Math_fround(Math_fround(0.0)), Math_fround(Math_fround(0.0)));
     }
     $3 = 2;
    }
    HEAP32[$0 >> 2] = $3;
    global$0 = $4 + 48 | 0;
    return;
   }
   core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $2 | 0, $5 | 0);
   abort();
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1051112 | 0, $2 | 0, $3 | 0);
  abort();
 }
 
 function $str_20as_20core__fmt__Debug___fmt__hc8f3c3cee2cdcf2f($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, $13 = 0, i64toi32_i32$2 = 0, $12 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $6 = 0, $18 = 0, $18$hi = 0, $9 = 0, $3 = 0, $10 = 0, $14 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $15 = 0, $5 = 0, $17 = 0, $4 = 0, $7 = 0, $8 = 0, $16 = 0, $29 = 0, $11 = 0, $250 = 0, $250$hi = 0, $252$hi = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  $4 = 1;
  label$1 : {
   if (FUNCTION_TABLE[HEAP32[((HEAP32[($2 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0](HEAP32[($2 + 24 | 0) >> 2] | 0, 34) | 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (!$1) {
      break label$3
     }
     $5 = $0 + $1 | 0;
     $6 = 0;
     $7 = $2 + 24 | 0;
     $8 = $2 + 28 | 0;
     $9 = $0;
     $10 = 0;
     label$4 : {
      label$5 : {
       label$6 : while (1) {
        $11 = $9;
        $12 = $9 + 1 | 0;
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             $13 = HEAP8[$9 >> 0] | 0;
             if (($13 | 0) <= (-1 | 0)) {
              break label$11
             }
             $13 = $13 & 255 | 0;
             break label$10;
            }
            label$12 : {
             label$13 : {
              if (($12 | 0) == ($5 | 0)) {
               break label$13
              }
              $14 = (HEAPU8[$12 >> 0] | 0) & 63 | 0;
              $9 = $9 + 2 | 0;
              $12 = $9;
              break label$12;
             }
             $14 = 0;
             $9 = $5;
            }
            $15 = $13 & 31 | 0;
            label$14 : {
             label$15 : {
              label$16 : {
               $13 = $13 & 255 | 0;
               if ($13 >>> 0 <= 223 >>> 0) {
                break label$16
               }
               if (($9 | 0) == ($5 | 0)) {
                break label$15
               }
               $16 = (HEAPU8[$9 >> 0] | 0) & 63 | 0;
               $12 = $9 + 1 | 0;
               $17 = $12;
               break label$14;
              }
              $13 = $14 | ($15 << 6 | 0) | 0;
              break label$10;
             }
             $16 = 0;
             $17 = $5;
            }
            $14 = $16 | ($14 << 6 | 0) | 0;
            label$17 : {
             if ($13 >>> 0 < 240 >>> 0) {
              break label$17
             }
             if (($17 | 0) == ($5 | 0)) {
              break label$9
             }
             $9 = $17 + 1 | 0;
             $13 = (HEAPU8[$17 >> 0] | 0) & 63 | 0;
             break label$8;
            }
            $13 = $14 | ($15 << 12 | 0) | 0;
           }
           $9 = $12;
           break label$7;
          }
          $13 = 0;
          $9 = $12;
         }
         $13 = $14 << 6 | 0 | (($15 << 18 | 0) & 1835008 | 0) | 0 | $13 | 0;
         if (($13 | 0) == (1114112 | 0)) {
          break label$5
         }
        }
        $12 = 2;
        label$18 : {
         label$19 : {
          label$20 : {
           label$21 : {
            label$22 : {
             label$23 : {
              label$24 : {
               label$25 : {
                label$26 : {
                 label$27 : {
                  label$28 : {
                   $15 = $13 + -9 | 0;
                   if ($15 >>> 0 > 30 >>> 0) {
                    break label$28
                   }
                   $14 = 116;
                   label$29 : {
                    switch ($15 | 0) {
                    case 4:
                     break label$25;
                    case 2:
                    case 3:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                     break label$26;
                    case 25:
                    case 30:
                     break label$27;
                    case 1:
                     break label$29;
                    default:
                     break label$20;
                    };
                   }
                   $14 = 110;
                   break label$24;
                  }
                  if (($13 | 0) != (92 | 0)) {
                   break label$26
                  }
                 }
                 break label$21;
                }
                if (!(core__unicode__bool_trie__BoolTrie__lookup__h31c9aa57385fbd21(1064352 | 0, $13 | 0) | 0)) {
                 break label$23
                }
                break label$22;
               }
               $14 = 114;
              }
              break label$20;
             }
             label$30 : {
              if ($13 >>> 0 >= 65536 >>> 0) {
               break label$30
              }
              if (!(core__unicode__printable__check__h1e7c010e493ddb3e($13 | 0, 1061504 | 0, 40 | 0, 1061584 | 0, 303 | 0, 1061887 | 0, 316 | 0) | 0)) {
               break label$22
              }
              break label$19;
             }
             label$31 : {
              if ($13 >>> 0 >= 131072 >>> 0) {
               break label$31
              }
              if (!(core__unicode__printable__check__h1e7c010e493ddb3e($13 | 0, 1062203 | 0, 33 | 0, 1062269 | 0, 158 | 0, 1062427 | 0, 381 | 0) | 0)) {
               break label$22
              }
              break label$19;
             }
             if ($13 >>> 0 > 917999 >>> 0) {
              break label$22
             }
             if (($13 + -195102 | 0) >>> 0 < 722658 >>> 0) {
              break label$22
             }
             if (($13 + -191457 | 0) >>> 0 < 3103 >>> 0) {
              break label$22
             }
             if (($13 + -183970 | 0) >>> 0 < 14 >>> 0) {
              break label$22
             }
             if (($13 & 2097150 | 0 | 0) == (178206 | 0)) {
              break label$22
             }
             if (($13 + -173783 | 0) >>> 0 < 41 >>> 0) {
              break label$22
             }
             if (($13 + -177973 | 0) >>> 0 > 10 >>> 0) {
              break label$19
             }
            }
            i64toi32_i32$0 = 0;
            i64toi32_i32$2 = (Math_clz32($13 | 1 | 0) >>> 2 | 0) ^ 7 | 0;
            i64toi32_i32$1 = 5;
            i64toi32_i32$3 = 0;
            i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
            $18 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
            $18$hi = i64toi32_i32$1;
            $12 = 3;
           }
           $14 = $13;
          }
          HEAP32[($3 + 4 | 0) >> 2] = $1;
          HEAP32[$3 >> 2] = $0;
          HEAP32[($3 + 8 | 0) >> 2] = $6;
          HEAP32[($3 + 12 | 0) >> 2] = $10;
          if ($10 >>> 0 < $6 >>> 0) {
           break label$4
          }
          label$32 : {
           if (!$6) {
            break label$32
           }
           if (($6 | 0) == ($1 | 0)) {
            break label$32
           }
           if ($6 >>> 0 >= $1 >>> 0) {
            break label$4
           }
           if ((HEAP8[($0 + $6 | 0) >> 0] | 0 | 0) <= (-65 | 0)) {
            break label$4
           }
          }
          label$33 : {
           if (!$10) {
            break label$33
           }
           if (($10 | 0) == ($1 | 0)) {
            break label$33
           }
           if ($10 >>> 0 >= $1 >>> 0) {
            break label$4
           }
           if ((HEAP8[($0 + $10 | 0) >> 0] | 0 | 0) <= (-65 | 0)) {
            break label$4
           }
          }
          if (FUNCTION_TABLE[HEAP32[((HEAP32[$8 >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[$7 >> 2] | 0, $0 + $6 | 0, $10 - $6 | 0) | 0) {
           break label$18
          }
          label$34 : {
           label$35 : while (1) {
            label$36 : {
             label$37 : {
              label$38 : {
               label$39 : {
                label$40 : {
                 label$41 : {
                  label$42 : {
                   if (($12 | 0) == (1 | 0)) {
                    break label$42
                   }
                   $6 = 92;
                   label$43 : {
                    if (($12 | 0) == (2 | 0)) {
                     break label$43
                    }
                    if (($12 | 0) != (3 | 0)) {
                     break label$34
                    }
                    i64toi32_i32$1 = $18$hi;
                    i64toi32_i32$0 = $18;
                    i64toi32_i32$2 = 0;
                    i64toi32_i32$3 = 32;
                    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
                    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                     i64toi32_i32$2 = 0;
                     $29 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                    } else {
                     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                     $29 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
                    }
                    $12 = ($29 & 255 | 0) + -1 | 0;
                    if ($12 >>> 0 > 4 >>> 0) {
                     break label$34
                    }
                    label$44 : {
                     switch ($12 | 0) {
                     case 1:
                      break label$38;
                     case 3:
                      break label$39;
                     case 2:
                      break label$40;
                     case 4:
                      break label$41;
                     default:
                      break label$44;
                     };
                    }
                    i64toi32_i32$2 = $18$hi;
                    i64toi32_i32$1 = $18;
                    i64toi32_i32$0 = -256;
                    i64toi32_i32$3 = -1;
                    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
                    $18 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
                    $18$hi = i64toi32_i32$0;
                    $12 = 3;
                    $6 = 125;
                    break label$36;
                   }
                   $12 = 1;
                   break label$36;
                  }
                  $12 = 0;
                  $6 = $14;
                  break label$36;
                 }
                 i64toi32_i32$0 = $18$hi;
                 i64toi32_i32$2 = $18;
                 i64toi32_i32$1 = -256;
                 i64toi32_i32$3 = -1;
                 i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
                 i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
                 i64toi32_i32$2 = 4;
                 i64toi32_i32$3 = 0;
                 i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
                 $18 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
                 $18$hi = i64toi32_i32$2;
                 break label$37;
                }
                i64toi32_i32$2 = $18$hi;
                i64toi32_i32$1 = $18;
                i64toi32_i32$0 = -256;
                i64toi32_i32$3 = -1;
                i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
                i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
                i64toi32_i32$1 = 2;
                i64toi32_i32$3 = 0;
                i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
                $18 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
                $18$hi = i64toi32_i32$1;
                $12 = 3;
                $6 = 123;
                break label$36;
               }
               i64toi32_i32$1 = $18$hi;
               i64toi32_i32$0 = $18;
               i64toi32_i32$2 = -256;
               i64toi32_i32$3 = -1;
               i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
               i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
               i64toi32_i32$0 = 3;
               i64toi32_i32$3 = 0;
               i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
               $18 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
               $18$hi = i64toi32_i32$0;
               $12 = 3;
               $6 = 117;
               break label$36;
              }
              i64toi32_i32$0 = $18$hi;
              $15 = $18;
              $12 = ($14 >>> (($18 << 2 | 0) & 28 | 0) | 0) & 15 | 0;
              $6 = $12 >>> 0 < 10 >>> 0 ? $12 | 48 | 0 : $12 + 87 | 0;
              label$45 : {
               if (!$18) {
                break label$45
               }
               i64toi32_i32$0 = $18$hi;
               i64toi32_i32$2 = $18;
               i64toi32_i32$1 = -1;
               i64toi32_i32$3 = -1;
               i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
               i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
               if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
               }
               i64toi32_i32$0 = i64toi32_i32$4;
               i64toi32_i32$2 = 0;
               i64toi32_i32$3 = -1;
               i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
               $250 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
               $250$hi = i64toi32_i32$2;
               i64toi32_i32$2 = $18$hi;
               i64toi32_i32$5 = $18;
               i64toi32_i32$0 = -1;
               i64toi32_i32$3 = 0;
               i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
               $252$hi = i64toi32_i32$0;
               i64toi32_i32$0 = $250$hi;
               i64toi32_i32$2 = $250;
               i64toi32_i32$5 = $252$hi;
               i64toi32_i32$3 = $18 & i64toi32_i32$3 | 0;
               i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
               $18 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
               $18$hi = i64toi32_i32$5;
               break label$37;
              }
              i64toi32_i32$5 = $18$hi;
              i64toi32_i32$5 = $18$hi;
              i64toi32_i32$0 = $18;
              i64toi32_i32$2 = -256;
              i64toi32_i32$3 = -1;
              i64toi32_i32$2 = $18$hi & i64toi32_i32$2 | 0;
              i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
              i64toi32_i32$0 = 1;
              i64toi32_i32$3 = 0;
              i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
              $18 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
              $18$hi = i64toi32_i32$0;
             }
             $12 = 3;
            }
            if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$8 >> 2] | 0) + 16 | 0) >> 2] | 0](HEAP32[$7 >> 2] | 0, $6) | 0)) {
             continue label$35
            }
            break label$18;
           };
          }
          $12 = 1;
          label$46 : {
           if ($13 >>> 0 < 128 >>> 0) {
            break label$46
           }
           $12 = 2;
           if ($13 >>> 0 < 2048 >>> 0) {
            break label$46
           }
           $12 = $13 >>> 0 < 65536 >>> 0 ? 3 : 4;
          }
          $6 = $12 + $10 | 0;
         }
         $10 = ($10 - $11 | 0) + $9 | 0;
         if (($5 | 0) != ($9 | 0)) {
          continue label$6
         }
         break label$5;
        }
        break label$6;
       };
       $4 = 1;
       break label$1;
      }
      if (!$6) {
       break label$2
      }
      if (($6 | 0) == ($1 | 0)) {
       break label$2
      }
      label$47 : {
       if ($6 >>> 0 >= $1 >>> 0) {
        break label$47
       }
       if ((HEAP8[($0 + $6 | 0) >> 0] | 0 | 0) > (-65 | 0)) {
        break label$2
       }
      }
      core__str__slice_error_fail__h65b601301310b052($0 | 0, $1 | 0, $6 | 0, $1 | 0);
      abort();
     }
     HEAP32[($3 + 24 | 0) >> 2] = $3 + 12 | 0;
     HEAP32[($3 + 20 | 0) >> 2] = $3 + 8 | 0;
     HEAP32[($3 + 16 | 0) >> 2] = $3;
     core__str__traits___impl_20core__slice__SliceIndex_str__20for_20core__ops__range__Range_usize____index___7b_7bclosure_7d_7d__hc5b52f0064ab9328($3 + 16 | 0 | 0);
     abort();
    }
    $6 = 0;
   }
   $12 = $2 + 24 | 0;
   $10 = $2 + 28 | 0;
   if (FUNCTION_TABLE[HEAP32[((HEAP32[$10 >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[$12 >> 2] | 0, $0 + $6 | 0, $1 - $6 | 0) | 0) {
    break label$1
   }
   $4 = FUNCTION_TABLE[HEAP32[((HEAP32[$10 >> 2] | 0) + 16 | 0) >> 2] | 0](HEAP32[$12 >> 2] | 0, 34) | 0;
  }
  global$0 = $3 + 32 | 0;
  return $4 | 0;
 }
 
 function stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h95e6f43759c26b3c($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $11 = 0, $3 = 0, $10 = 0, $15 = Math_fround(0), $7 = 0, $8 = 0, $14 = 0, $9 = 0, $16 = Math_fround(0), $12 = 0, $13 = 0, $26 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), wasm2js_f32$0 = Math_fround(0), wasm2js_f32$1 = Math_fround(0), wasm2js_i32$0 = 0;
  $3 = global$0 - 48 | 0;
  global$0 = $3;
  $4 = HEAP32[$2 >> 2] | 0;
  $5 = HEAP32[(HEAP32[$1 >> 2] | 0) >> 2] | 0;
  HEAP32[(($3 + 16 | 0) + 12 | 0) >> 2] = HEAP32[($2 + 164 | 0) >> 2] | 0;
  HEAP32[($3 + 24 | 0) >> 2] = 0;
  HEAP32[($3 + 16 | 0) >> 2] = 0;
  HEAP32[($3 + 20 | 0) >> 2] = HEAP32[($2 + 160 | 0) >> 2] | 0;
  $6 = HEAP32[($1 + 4 | 0) >> 2] | 0;
  HEAP32[(($3 + 32 | 0) + 12 | 0) >> 2] = HEAP32[($6 + 4 | 0) >> 2] | 0;
  HEAP32[($3 + 40 | 0) >> 2] = 0;
  HEAP32[($3 + 32 | 0) >> 2] = 0;
  HEAP32[($3 + 36 | 0) >> 2] = HEAP32[$6 >> 2] | 0;
  stretch__algo___impl_20stretch__forest__Forest___compute_internal__h1faccff9b0af78e6($3 | 0, $5 | 0, $4 | 0, $3 + 16 | 0 | 0, $3 + 32 | 0 | 0, 1 | 0);
  $7 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  $8 = HEAP32[($3 + 4 | 0) >> 2] | 0;
  label$1 : {
   $4 = HEAP32[$3 >> 2] | 0;
   if (($4 | 0) == (1 | 0)) {
    break label$1
   }
   label$2 : {
    if (!$4) {
     break label$2
    }
    FUNCTION_TABLE[HEAP32[$7 >> 2] | 0]($8);
    $4 = HEAP32[($7 + 4 | 0) >> 2] | 0;
    if (!$4) {
     break label$2
    }
    __rust_dealloc($8 | 0, $4 | 0, HEAP32[($7 + 8 | 0) >> 2] | 0 | 0);
   }
   $9 = $2 + 84 | 0;
   $15 = Math_fround(HEAPF32[($2 + 180 | 0) >> 2]);
   $16 = Math_fround(HEAPF32[(HEAP32[($1 + 8 | 0) >> 2] | 0) >> 2]);
   label$3 : {
    label$4 : {
     $4 = HEAPU8[(HEAP32[($1 + 12 | 0) >> 2] | 0) >> 0] | 0;
     if (($4 | 2 | 0 | 0) != (3 | 0)) {
      break label$4
     }
     $5 = $2 + 92 | 0;
     break label$3;
    }
    $5 = $9;
   }
   $6 = $2 + 52 | 0;
   $17 = Math_fround(HEAPF32[$5 >> 2]);
   label$5 : {
    label$6 : {
     if ((($4 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
      break label$6
     }
     $5 = $2 + 72 | 0;
     $10 = $2 + 68 | 0;
     break label$5;
    }
    $5 = $2 + 56 | 0;
    $10 = $6;
   }
   $10 = HEAP32[$10 >> 2] | 0;
   $18 = Math_fround(HEAPF32[$5 >> 2]);
   label$7 : {
    label$8 : {
     if ((($4 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
      break label$8
     }
     $5 = $2 + 80 | 0;
     $11 = $2 + 76 | 0;
     break label$7;
    }
    $5 = $2 + 64 | 0;
    $11 = $2 + 60 | 0;
   }
   $11 = HEAP32[$11 >> 2] | 0;
   $19 = Math_fround(HEAPF32[$5 >> 2]);
   $20 = Math_fround(HEAPF32[($2 + 184 | 0) >> 2]);
   $21 = Math_fround(HEAPF32[(HEAP32[($1 + 16 | 0) >> 2] | 0) >> 2]);
   $22 = Math_fround(HEAPF32[(HEAP32[($1 + 20 | 0) >> 2] | 0) >> 2]);
   label$9 : {
    label$10 : {
     if ((($4 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
      break label$10
     }
     $5 = $9;
     break label$9;
    }
    $5 = $2 + 92 | 0;
   }
   $23 = Math_fround(HEAPF32[$5 >> 2]);
   label$11 : {
    label$12 : {
     if ((($4 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
      break label$12
     }
     $5 = $2 + 56 | 0;
     break label$11;
    }
    $5 = $2 + 72 | 0;
    $6 = $2 + 68 | 0;
   }
   $6 = HEAP32[$6 >> 2] | 0;
   $24 = Math_fround(HEAPF32[$5 >> 2]);
   label$13 : {
    label$14 : {
     if ((($4 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
      break label$14
     }
     $4 = $2 + 64 | 0;
     $5 = $2 + 60 | 0;
     break label$13;
    }
    $4 = $2 + 80 | 0;
    $5 = $2 + 76 | 0;
   }
   label$15 : {
    label$16 : {
     label$17 : {
      $12 = HEAP32[(HEAP32[$1 >> 2] | 0) >> 2] | 0;
      $13 = HEAP32[($12 + 20 | 0) >> 2] | 0;
      $14 = HEAP32[(HEAP32[($1 + 24 | 0) >> 2] | 0) >> 2] | 0;
      if ($13 >>> 0 <= $14 >>> 0) {
       break label$17
      }
      $25 = (wasm2js_scratch_store_i32(0, $7), wasm2js_scratch_load_f32());
      $26 = (wasm2js_scratch_store_i32(0, $8), wasm2js_scratch_load_f32());
      $15 = Math_fround(Math_fround(Math_fround($16 + $15) + $17) + Math_fround(($10 ? Math_fround(0.0) : $18) - ($11 ? Math_fround(0.0) : $19)));
      $16 = Math_fround(Math_fround(Math_fround(Math_fround($21 + $20) + $22) + $23) + Math_fround(($6 ? Math_fround(0.0) : $24) - (wasm2js_f32$0 = Math_fround(0.0), wasm2js_f32$1 = Math_fround(HEAPF32[$4 >> 2]), wasm2js_i32$0 = HEAP32[$5 >> 2] | 0, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1)));
      $4 = (HEAP32[($12 + 12 | 0) >> 2] | 0) + Math_imul($14, 12) | 0;
      $5 = HEAP32[$4 >> 2] | 0;
      $10 = (HEAP32[($4 + 8 | 0) >> 2] | 0) << 2 | 0;
      $13 = $5 + $10 | 0;
      $4 = HEAP32[$2 >> 2] | 0;
      $6 = 0;
      $11 = $5;
      label$18 : {
       label$19 : {
        label$20 : {
         label$21 : {
          label$22 : while (1) {
           if (($13 - $11 | 0) >>> 0 <= 12 >>> 0) {
            break label$21
           }
           $11 = HEAP32[$5 >> 2] | 0;
           $6 = $6 + (($11 | 0) != ($4 | 0)) | 0;
           if (($11 | 0) == ($4 | 0)) {
            break label$20
           }
           $11 = HEAP32[($5 + 4 | 0) >> 2] | 0;
           $6 = $6 + (($11 | 0) != ($4 | 0)) | 0;
           if (($11 | 0) == ($4 | 0)) {
            break label$20
           }
           $11 = HEAP32[($5 + 8 | 0) >> 2] | 0;
           $6 = $6 + (($11 | 0) != ($4 | 0)) | 0;
           if (($11 | 0) == ($4 | 0)) {
            break label$20
           }
           $10 = $10 + -16 | 0;
           $14 = HEAP32[($5 + 12 | 0) >> 2] | 0;
           $6 = $6 + (($14 | 0) != ($4 | 0)) | 0;
           $11 = $5 + 16 | 0;
           $5 = $11;
           if (($14 | 0) != ($4 | 0)) {
            continue label$22
           }
           break label$20;
          };
         }
         $6 = 1 - $6 | 0;
         label$23 : while (1) {
          if (!$10) {
           break label$19
          }
          $6 = $6 + -1 | 0;
          $10 = $10 + -4 | 0;
          $11 = HEAP32[$5 >> 2] | 0;
          $5 = $5 + 4 | 0;
          $11 = ($11 | 0) == ($4 | 0);
          if (!$11) {
           continue label$23
          }
          break label$23;
         };
         $6 = (($11 + 1 | 0) & 1 | 0) - $6 | 0;
        }
        $5 = HEAP32[($12 + 8 | 0) >> 2] | 0;
        if ($5 >>> 0 <= $4 >>> 0) {
         break label$16
        }
        $5 = HEAPU8[(HEAP32[($1 + 28 | 0) >> 2] | 0) >> 0] | 0;
        $10 = HEAPU8[(HEAP32[($1 + 32 | 0) >> 2] | 0) >> 0] | 0;
        $4 = (HEAP32[$12 >> 2] | 0) + Math_imul($4, 288) | 0;
        HEAP32[($4 + 220 | 0) >> 2] = $6;
        HEAPF32[($4 + 236 | 0) >> 2] = $10 ? $15 : $16;
        HEAPF32[($4 + 232 | 0) >> 2] = $5 ? $15 : $16;
        HEAP32[($4 + 228 | 0) >> 2] = $7;
        HEAP32[($4 + 224 | 0) >> 2] = $8;
        $15 = Math_fround(HEAPF32[($2 + 180 | 0) >> 2]);
        $4 = HEAPU8[(HEAP32[($1 + 12 | 0) >> 2] | 0) >> 0] | 0;
        if (($4 | 2 | 0 | 0) != (3 | 0)) {
         break label$18
        }
        $5 = $2 + 96 | 0;
        $9 = $2 + 92 | 0;
        break label$15;
       }
       core__panicking__panic__h2d0bc53a963fb996(1050988 | 0);
       abort();
      }
      $5 = $2 + 88 | 0;
      break label$15;
     }
     core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $14 | 0, $13 | 0);
     abort();
    }
    core__panicking__panic_bounds_check__h0537ade040df571e(1051112 | 0, $4 | 0, $5 | 0);
    abort();
   }
   $15 = Math_fround($15 + Math_fround(Math_fround(HEAPF32[$9 >> 2]) + Math_fround(HEAPF32[$5 >> 2])));
   label$24 : {
    if ((($4 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
     break label$24
    }
    $26 = $25;
   }
   $4 = HEAP32[($1 + 8 | 0) >> 2] | 0;
   HEAPF32[$4 >> 2] = Math_fround(Math_fround($15 + $26) + Math_fround(HEAPF32[$4 >> 2]));
   $8 = 0;
  }
  HEAP32[($0 + 4 | 0) >> 2] = $7;
  HEAP32[$0 >> 2] = $8;
  global$0 = $3 + 48 | 0;
 }
 
 function stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h95e6f43759c26b3c_1($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $11 = 0, $3 = 0, $10 = 0, $15 = Math_fround(0), $7 = 0, $8 = 0, $14 = 0, $9 = 0, $16 = Math_fround(0), $12 = 0, $13 = 0, $26 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), wasm2js_f32$0 = Math_fround(0), wasm2js_f32$1 = Math_fround(0), wasm2js_i32$0 = 0;
  $3 = global$0 - 48 | 0;
  global$0 = $3;
  $4 = HEAP32[$2 >> 2] | 0;
  $5 = HEAP32[(HEAP32[$1 >> 2] | 0) >> 2] | 0;
  HEAP32[(($3 + 16 | 0) + 12 | 0) >> 2] = HEAP32[($2 + 164 | 0) >> 2] | 0;
  HEAP32[($3 + 24 | 0) >> 2] = 0;
  HEAP32[($3 + 16 | 0) >> 2] = 0;
  HEAP32[($3 + 20 | 0) >> 2] = HEAP32[($2 + 160 | 0) >> 2] | 0;
  $6 = HEAP32[($1 + 4 | 0) >> 2] | 0;
  HEAP32[(($3 + 32 | 0) + 12 | 0) >> 2] = HEAP32[($6 + 4 | 0) >> 2] | 0;
  HEAP32[($3 + 40 | 0) >> 2] = 0;
  HEAP32[($3 + 32 | 0) >> 2] = 0;
  HEAP32[($3 + 36 | 0) >> 2] = HEAP32[$6 >> 2] | 0;
  stretch__algo___impl_20stretch__forest__Forest___compute_internal__h1faccff9b0af78e6($3 | 0, $5 | 0, $4 | 0, $3 + 16 | 0 | 0, $3 + 32 | 0 | 0, 1 | 0);
  $7 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  $8 = HEAP32[($3 + 4 | 0) >> 2] | 0;
  label$1 : {
   $4 = HEAP32[$3 >> 2] | 0;
   if (($4 | 0) == (1 | 0)) {
    break label$1
   }
   label$2 : {
    if (!$4) {
     break label$2
    }
    FUNCTION_TABLE[HEAP32[$7 >> 2] | 0]($8);
    $4 = HEAP32[($7 + 4 | 0) >> 2] | 0;
    if (!$4) {
     break label$2
    }
    __rust_dealloc($8 | 0, $4 | 0, HEAP32[($7 + 8 | 0) >> 2] | 0 | 0);
   }
   $9 = $2 + 84 | 0;
   $15 = Math_fround(HEAPF32[($2 + 180 | 0) >> 2]);
   $16 = Math_fround(HEAPF32[(HEAP32[($1 + 8 | 0) >> 2] | 0) >> 2]);
   label$3 : {
    label$4 : {
     $4 = HEAPU8[(HEAP32[($1 + 12 | 0) >> 2] | 0) >> 0] | 0;
     if (($4 | 2 | 0 | 0) != (3 | 0)) {
      break label$4
     }
     $5 = $2 + 92 | 0;
     break label$3;
    }
    $5 = $9;
   }
   $6 = $2 + 52 | 0;
   $17 = Math_fround(HEAPF32[$5 >> 2]);
   label$5 : {
    label$6 : {
     if ((($4 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
      break label$6
     }
     $5 = $2 + 72 | 0;
     $10 = $2 + 68 | 0;
     break label$5;
    }
    $5 = $2 + 56 | 0;
    $10 = $6;
   }
   $10 = HEAP32[$10 >> 2] | 0;
   $18 = Math_fround(HEAPF32[$5 >> 2]);
   label$7 : {
    label$8 : {
     if ((($4 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
      break label$8
     }
     $5 = $2 + 80 | 0;
     $11 = $2 + 76 | 0;
     break label$7;
    }
    $5 = $2 + 64 | 0;
    $11 = $2 + 60 | 0;
   }
   $11 = HEAP32[$11 >> 2] | 0;
   $19 = Math_fround(HEAPF32[$5 >> 2]);
   $20 = Math_fround(HEAPF32[($2 + 184 | 0) >> 2]);
   $21 = Math_fround(HEAPF32[(HEAP32[($1 + 16 | 0) >> 2] | 0) >> 2]);
   $22 = Math_fround(HEAPF32[(HEAP32[($1 + 20 | 0) >> 2] | 0) >> 2]);
   label$9 : {
    label$10 : {
     if ((($4 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
      break label$10
     }
     $5 = $9;
     break label$9;
    }
    $5 = $2 + 92 | 0;
   }
   $23 = Math_fround(HEAPF32[$5 >> 2]);
   label$11 : {
    label$12 : {
     if ((($4 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
      break label$12
     }
     $5 = $2 + 56 | 0;
     break label$11;
    }
    $5 = $2 + 72 | 0;
    $6 = $2 + 68 | 0;
   }
   $6 = HEAP32[$6 >> 2] | 0;
   $24 = Math_fround(HEAPF32[$5 >> 2]);
   label$13 : {
    label$14 : {
     if ((($4 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
      break label$14
     }
     $4 = $2 + 64 | 0;
     $5 = $2 + 60 | 0;
     break label$13;
    }
    $4 = $2 + 80 | 0;
    $5 = $2 + 76 | 0;
   }
   label$15 : {
    label$16 : {
     label$17 : {
      $12 = HEAP32[(HEAP32[$1 >> 2] | 0) >> 2] | 0;
      $13 = HEAP32[($12 + 20 | 0) >> 2] | 0;
      $14 = HEAP32[(HEAP32[($1 + 24 | 0) >> 2] | 0) >> 2] | 0;
      if ($13 >>> 0 <= $14 >>> 0) {
       break label$17
      }
      $25 = (wasm2js_scratch_store_i32(0, $7), wasm2js_scratch_load_f32());
      $26 = (wasm2js_scratch_store_i32(0, $8), wasm2js_scratch_load_f32());
      $15 = Math_fround(Math_fround(Math_fround($16 + $15) + $17) + Math_fround(($10 ? Math_fround(0.0) : $18) - ($11 ? Math_fround(0.0) : $19)));
      $16 = Math_fround(Math_fround(Math_fround(Math_fround($21 + $20) + $22) + $23) + Math_fround(($6 ? Math_fround(0.0) : $24) - (wasm2js_f32$0 = Math_fround(0.0), wasm2js_f32$1 = Math_fround(HEAPF32[$4 >> 2]), wasm2js_i32$0 = HEAP32[$5 >> 2] | 0, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1)));
      $4 = (HEAP32[($12 + 12 | 0) >> 2] | 0) + Math_imul($14, 12) | 0;
      $5 = HEAP32[$4 >> 2] | 0;
      $10 = (HEAP32[($4 + 8 | 0) >> 2] | 0) << 2 | 0;
      $13 = $5 + $10 | 0;
      $4 = HEAP32[$2 >> 2] | 0;
      $6 = 0;
      $11 = $5;
      label$18 : {
       label$19 : {
        label$20 : {
         label$21 : {
          label$22 : while (1) {
           if (($13 - $11 | 0) >>> 0 <= 12 >>> 0) {
            break label$21
           }
           $11 = HEAP32[$5 >> 2] | 0;
           $6 = $6 + (($11 | 0) != ($4 | 0)) | 0;
           if (($11 | 0) == ($4 | 0)) {
            break label$20
           }
           $11 = HEAP32[($5 + 4 | 0) >> 2] | 0;
           $6 = $6 + (($11 | 0) != ($4 | 0)) | 0;
           if (($11 | 0) == ($4 | 0)) {
            break label$20
           }
           $11 = HEAP32[($5 + 8 | 0) >> 2] | 0;
           $6 = $6 + (($11 | 0) != ($4 | 0)) | 0;
           if (($11 | 0) == ($4 | 0)) {
            break label$20
           }
           $10 = $10 + -16 | 0;
           $14 = HEAP32[($5 + 12 | 0) >> 2] | 0;
           $6 = $6 + (($14 | 0) != ($4 | 0)) | 0;
           $11 = $5 + 16 | 0;
           $5 = $11;
           if (($14 | 0) != ($4 | 0)) {
            continue label$22
           }
           break label$20;
          };
         }
         $6 = 1 - $6 | 0;
         label$23 : while (1) {
          if (!$10) {
           break label$19
          }
          $6 = $6 + -1 | 0;
          $10 = $10 + -4 | 0;
          $11 = HEAP32[$5 >> 2] | 0;
          $5 = $5 + 4 | 0;
          $11 = ($11 | 0) == ($4 | 0);
          if (!$11) {
           continue label$23
          }
          break label$23;
         };
         $6 = (($11 + 1 | 0) & 1 | 0) - $6 | 0;
        }
        $5 = HEAP32[($12 + 8 | 0) >> 2] | 0;
        if ($5 >>> 0 <= $4 >>> 0) {
         break label$16
        }
        $5 = HEAPU8[(HEAP32[($1 + 28 | 0) >> 2] | 0) >> 0] | 0;
        $10 = HEAPU8[(HEAP32[($1 + 32 | 0) >> 2] | 0) >> 0] | 0;
        $4 = (HEAP32[$12 >> 2] | 0) + Math_imul($4, 288) | 0;
        HEAP32[($4 + 220 | 0) >> 2] = $6;
        HEAPF32[($4 + 236 | 0) >> 2] = $10 ? $15 : $16;
        HEAPF32[($4 + 232 | 0) >> 2] = $5 ? $15 : $16;
        HEAP32[($4 + 228 | 0) >> 2] = $7;
        HEAP32[($4 + 224 | 0) >> 2] = $8;
        $15 = Math_fround(HEAPF32[($2 + 180 | 0) >> 2]);
        $4 = HEAPU8[(HEAP32[($1 + 12 | 0) >> 2] | 0) >> 0] | 0;
        if (($4 | 2 | 0 | 0) != (3 | 0)) {
         break label$18
        }
        $5 = $2 + 96 | 0;
        $9 = $2 + 92 | 0;
        break label$15;
       }
       core__panicking__panic__h2d0bc53a963fb996(1051456 | 0);
       abort();
      }
      $5 = $2 + 88 | 0;
      break label$15;
     }
     core__panicking__panic_bounds_check__h0537ade040df571e(1051560 | 0, $14 | 0, $13 | 0);
     abort();
    }
    core__panicking__panic_bounds_check__h0537ade040df571e(1051576 | 0, $4 | 0, $5 | 0);
    abort();
   }
   $15 = Math_fround($15 + Math_fround(Math_fround(HEAPF32[$9 >> 2]) + Math_fround(HEAPF32[$5 >> 2])));
   label$24 : {
    if ((($4 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
     break label$24
    }
    $26 = $25;
   }
   $4 = HEAP32[($1 + 8 | 0) >> 2] | 0;
   HEAPF32[$4 >> 2] = Math_fround(Math_fround($15 + $26) + Math_fround(HEAPF32[$4 >> 2]));
   $8 = 0;
  }
  HEAP32[($0 + 4 | 0) >> 2] = $7;
  HEAP32[$0 >> 2] = $8;
  global$0 = $3 + 48 | 0;
 }
 
 function core__fmt__write__h85435378f7fd6609($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $7 = 0, $12 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $3 = global$0 - 64 | 0;
  global$0 = $3;
  HEAP32[($3 + 36 | 0) >> 2] = $1;
  $4 = HEAP32[($2 + 20 | 0) >> 2] | 0;
  HEAP32[($3 + 52 | 0) >> 2] = $4;
  HEAP8[($3 + 56 | 0) >> 0] = 3;
  $5 = HEAP32[($2 + 16 | 0) >> 2] | 0;
  HEAP32[($3 + 44 | 0) >> 2] = $5 + ($4 << 3 | 0) | 0;
  HEAP32[($3 + 8 | 0) >> 2] = 0;
  HEAP32[($3 + 12 | 0) >> 2] = 32;
  HEAP32[($3 + 32 | 0) >> 2] = $0;
  $6 = 0;
  HEAP32[($3 + 24 | 0) >> 2] = 0;
  HEAP32[($3 + 16 | 0) >> 2] = 0;
  HEAP32[($3 + 48 | 0) >> 2] = $5;
  HEAP32[($3 + 40 | 0) >> 2] = $5;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           $7 = HEAP32[($2 + 8 | 0) >> 2] | 0;
           if (!$7) {
            break label$9
           }
           $8 = HEAP32[$2 >> 2] | 0;
           $9 = HEAP32[($2 + 4 | 0) >> 2] | 0;
           $5 = HEAP32[($2 + 12 | 0) >> 2] | 0;
           $10 = $5 >>> 0 > $9 >>> 0 ? $9 : $5;
           if (!$10) {
            break label$8
           }
           if (FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0]($0, HEAP32[$8 >> 2] | 0, HEAP32[($8 + 4 | 0) >> 2] | 0) | 0) {
            break label$7
           }
           $5 = $8 + 12 | 0;
           $0 = $3 + 56 | 0;
           $1 = $3 + 52 | 0;
           $11 = $3 + 48 | 0;
           $6 = 1;
           label$10 : while (1) {
            HEAP8[$0 >> 0] = HEAPU8[($7 + 32 | 0) >> 0] | 0;
            HEAP32[($3 + 12 | 0) >> 2] = HEAP32[($7 + 8 | 0) >> 2] | 0;
            HEAP32[($3 + 8 | 0) >> 2] = HEAP32[($7 + 12 | 0) >> 2] | 0;
            $2 = 0;
            label$11 : {
             label$12 : {
              label$13 : {
               label$14 : {
                $4 = HEAP32[($7 + 24 | 0) >> 2] | 0;
                if (($4 | 0) == (1 | 0)) {
                 break label$14
                }
                label$15 : {
                 if (($4 | 0) == (3 | 0)) {
                  break label$15
                 }
                 if (($4 | 0) != (2 | 0)) {
                  break label$13
                 }
                 $4 = ($3 + 8 | 0) + 32 | 0;
                 $12 = HEAP32[$4 >> 2] | 0;
                 if (($12 | 0) == (HEAP32[(($3 + 8 | 0) + 36 | 0) >> 2] | 0 | 0)) {
                  break label$15
                 }
                 HEAP32[$4 >> 2] = $12 + 8 | 0;
                 if ((HEAP32[($12 + 4 | 0) >> 2] | 0 | 0) != (79 | 0)) {
                  break label$11
                 }
                 $4 = HEAP32[(HEAP32[$12 >> 2] | 0) >> 2] | 0;
                 break label$12;
                }
                break label$11;
               }
               $12 = HEAP32[($7 + 28 | 0) >> 2] | 0;
               $4 = HEAP32[$1 >> 2] | 0;
               if ($12 >>> 0 >= $4 >>> 0) {
                break label$2
               }
               $12 = (HEAP32[$11 >> 2] | 0) + ($12 << 3 | 0) | 0;
               if ((HEAP32[($12 + 4 | 0) >> 2] | 0 | 0) != (79 | 0)) {
                break label$11
               }
               $4 = HEAP32[(HEAP32[$12 >> 2] | 0) >> 2] | 0;
               break label$12;
              }
              $4 = HEAP32[($7 + 28 | 0) >> 2] | 0;
             }
             $2 = 1;
            }
            HEAP32[(($3 + 8 | 0) + 12 | 0) >> 2] = $4;
            HEAP32[(($3 + 8 | 0) + 8 | 0) >> 2] = $2;
            $2 = 0;
            label$16 : {
             label$17 : {
              label$18 : {
               label$19 : {
                $4 = HEAP32[($7 + 16 | 0) >> 2] | 0;
                if (($4 | 0) == (1 | 0)) {
                 break label$19
                }
                label$20 : {
                 if (($4 | 0) == (3 | 0)) {
                  break label$20
                 }
                 if (($4 | 0) != (2 | 0)) {
                  break label$18
                 }
                 $4 = ($3 + 8 | 0) + 32 | 0;
                 $12 = HEAP32[$4 >> 2] | 0;
                 if (($12 | 0) == (HEAP32[(($3 + 8 | 0) + 36 | 0) >> 2] | 0 | 0)) {
                  break label$20
                 }
                 HEAP32[$4 >> 2] = $12 + 8 | 0;
                 if ((HEAP32[($12 + 4 | 0) >> 2] | 0 | 0) != (79 | 0)) {
                  break label$16
                 }
                 $4 = HEAP32[(HEAP32[$12 >> 2] | 0) >> 2] | 0;
                 break label$17;
                }
                break label$16;
               }
               $12 = HEAP32[($7 + 20 | 0) >> 2] | 0;
               $4 = HEAP32[$1 >> 2] | 0;
               if ($12 >>> 0 >= $4 >>> 0) {
                break label$1
               }
               $12 = (HEAP32[$11 >> 2] | 0) + ($12 << 3 | 0) | 0;
               if ((HEAP32[($12 + 4 | 0) >> 2] | 0 | 0) != (79 | 0)) {
                break label$16
               }
               $4 = HEAP32[(HEAP32[$12 >> 2] | 0) >> 2] | 0;
               break label$17;
              }
              $4 = HEAP32[($7 + 20 | 0) >> 2] | 0;
             }
             $2 = 1;
            }
            HEAP32[(($3 + 8 | 0) + 20 | 0) >> 2] = $4;
            HEAP32[(($3 + 8 | 0) + 16 | 0) >> 2] = $2;
            label$21 : {
             label$22 : {
              if ((HEAP32[$7 >> 2] | 0 | 0) != (1 | 0)) {
               break label$22
              }
              $2 = HEAP32[($7 + 4 | 0) >> 2] | 0;
              $4 = HEAP32[$1 >> 2] | 0;
              if ($2 >>> 0 >= $4 >>> 0) {
               break label$4
              }
              $2 = (HEAP32[$11 >> 2] | 0) + ($2 << 3 | 0) | 0;
              break label$21;
             }
             $4 = ($3 + 8 | 0) + 32 | 0;
             $2 = HEAP32[$4 >> 2] | 0;
             if (($2 | 0) == (HEAP32[(($3 + 8 | 0) + 36 | 0) >> 2] | 0 | 0)) {
              break label$3
             }
             HEAP32[$4 >> 2] = $2 + 8 | 0;
            }
            if (FUNCTION_TABLE[HEAP32[($2 + 4 | 0) >> 2] | 0](HEAP32[$2 >> 2] | 0, $3 + 8 | 0) | 0) {
             break label$7
            }
            if ($6 >>> 0 >= $10 >>> 0) {
             break label$8
            }
            $2 = $5 + -4 | 0;
            $4 = HEAP32[$5 >> 2] | 0;
            $5 = $5 + 8 | 0;
            $7 = $7 + 36 | 0;
            $6 = $6 + 1 | 0;
            if (!(FUNCTION_TABLE[HEAP32[((HEAP32[(($3 + 8 | 0) + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[(($3 + 8 | 0) + 24 | 0) >> 2] | 0, HEAP32[$2 >> 2] | 0, $4) | 0)) {
             continue label$10
            }
            break label$7;
           };
          }
          $8 = HEAP32[$2 >> 2] | 0;
          $9 = HEAP32[($2 + 4 | 0) >> 2] | 0;
          $10 = $4 >>> 0 > $9 >>> 0 ? $9 : $4;
          if (!$10) {
           break label$8
          }
          if (FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0]($0, HEAP32[$8 >> 2] | 0, HEAP32[($8 + 4 | 0) >> 2] | 0) | 0) {
           break label$7
          }
          $7 = $8 + 12 | 0;
          $0 = $3 + 32 | 0;
          $1 = $3 + 36 | 0;
          $6 = 1;
          label$23 : while (1) {
           if (FUNCTION_TABLE[HEAP32[($5 + 4 | 0) >> 2] | 0](HEAP32[$5 >> 2] | 0, $3 + 8 | 0) | 0) {
            break label$7
           }
           if ($6 >>> 0 >= $10 >>> 0) {
            break label$8
           }
           $2 = $7 + -4 | 0;
           $4 = HEAP32[$7 >> 2] | 0;
           $7 = $7 + 8 | 0;
           $5 = $5 + 8 | 0;
           $6 = $6 + 1 | 0;
           if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$1 >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[$0 >> 2] | 0, HEAP32[$2 >> 2] | 0, $4) | 0)) {
            continue label$23
           }
           break label$7;
          };
         }
         if ($9 >>> 0 <= $6 >>> 0) {
          break label$6
         }
         $7 = $8 + ($6 << 3 | 0) | 0;
         if (!(FUNCTION_TABLE[HEAP32[((HEAP32[($3 + 36 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[($3 + 32 | 0) >> 2] | 0, HEAP32[$7 >> 2] | 0, HEAP32[($7 + 4 | 0) >> 2] | 0) | 0)) {
          break label$6
         }
        }
        $7 = 1;
        break label$5;
       }
       $7 = 0;
      }
      global$0 = $3 + 64 | 0;
      return $7 | 0;
     }
     core__panicking__panic_bounds_check__h0537ade040df571e(1061352 | 0, $2 | 0, $4 | 0);
     abort();
    }
    core__panicking__panic__h2d0bc53a963fb996(1060540 | 0);
    abort();
   }
   core__panicking__panic_bounds_check__h0537ade040df571e(1061368 | 0, $12 | 0, $4 | 0);
   abort();
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1061368 | 0, $12 | 0, $4 | 0);
  abort();
 }
 
 function stretch__node__Stretch__add_node__h9152754f05108ed7($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $18 = 0, $18$hi = 0, $19$hi = 0, $3 = 0, $19 = 0, $5 = 0, $4 = 0, $20$hi = 0, $21$hi = 0, $20 = 0, $21 = 0, $14 = 0, $10 = 0, $22$hi = 0, $22 = 0, $11 = 0, $118 = 0, $17 = 0, $119 = 0, $23$hi = 0, $15 = 0, $120 = 0, $121 = 0, $122 = 0, $6 = 0, $9 = 0, $12 = 0, $33 = 0, $36 = 0, $45 = 0, $48 = 0, $57 = 0, $62 = 0, $69 = 0, $78 = 0, $87$hi = 0, $89 = 0, $89$hi = 0, $93 = 0, $93$hi = 0, $96 = 0, $96$hi = 0, $99 = 0, $99$hi = 0, $103 = 0, $103$hi = 0, $108 = 0, $108$hi = 0, $111 = 0, $111$hi = 0, $23 = 0, $115 = 0, $115$hi = 0, $118$hi = 0, $125 = 0, $125$hi = 0, $131 = 0, $131$hi = 0, $133 = 0, $133$hi = 0, $135$hi = 0, $141 = 0, $141$hi = 0, $147 = 0, $147$hi = 0, $150 = 0, $150$hi = 0, $151 = 0, $151$hi = 0, $153$hi = 0, $158 = 0, $158$hi = 0, $165 = 0, $165$hi = 0, $166 = 0, $166$hi = 0, $168$hi = 0, $173 = 0, $173$hi = 0, $180 = 0, $180$hi = 0, $181 = 0, $181$hi = 0, $183$hi = 0, $188 = 0, $188$hi = 0, $191$hi = 0, $193 = 0, $193$hi = 0, $195$hi = 0, $200 = 0, $200$hi = 0, $206$hi = 0, $123 = 0, $209 = 0, $209$hi = 0, $210 = 0, $210$hi = 0, $212 = 0, $212$hi = 0, $213 = 0, $213$hi = 0, $215$hi = 0, $7 = 0, $8 = 0, $13 = 0, $16 = 0, $305 = 0, $308 = 0, $319 = 0, $324 = 0, $342 = 0, $345 = 0, $416 = 0, $419 = 0;
  $3 = global$0 - 112 | 0;
  global$0 = $3;
  $4 = $1 + 8 | 0;
  i64toi32_i32$2 = $4;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $33 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3 + 48 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $33;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $36 = i64toi32_i32$1;
  i64toi32_i32$1 = $3;
  HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = $36;
  HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = i64toi32_i32$0;
  std__collections__hash__map__HashMap_K_2cV_2cS___insert__hca58c4e73e4e0c5d($0 | 0, i64toi32_i32$1 + 48 | 0 | 0, $2 | 0);
  i64toi32_i32$2 = $4;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $45 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3 + 8 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $45;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $48 = i64toi32_i32$1;
  i64toi32_i32$1 = $3;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $48;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $1 = (i64toi32_i32$1 + 48 | 0) + 40 | 0;
  i64toi32_i32$2 = $0 + 48 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $18 = i64toi32_i32$0;
  $18$hi = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = 1952801890;
  i64toi32_i32$3 = 2037671283;
  i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
  $57 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $1;
  HEAP32[i64toi32_i32$2 >> 2] = $57;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
  $4 = $3 + 80 | 0;
  i64toi32_i32$0 = i64toi32_i32$1;
  i64toi32_i32$0 = i64toi32_i32$1;
  i64toi32_i32$1 = $18;
  i64toi32_i32$2 = 1685025377;
  i64toi32_i32$3 = 1852075885;
  i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
  $62 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = $4;
  HEAP32[i64toi32_i32$1 >> 2] = $62;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
  $5 = $3 + 72 | 0;
  i64toi32_i32$0 = $0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] | 0;
  $19 = i64toi32_i32$2;
  $19$hi = i64toi32_i32$1;
  i64toi32_i32$0 = i64toi32_i32$2;
  i64toi32_i32$2 = 1819895653;
  i64toi32_i32$3 = 1852142177;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $69 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $5;
  HEAP32[i64toi32_i32$0 >> 2] = $69;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$0 = $3;
  i64toi32_i32$2 = 0;
  HEAP32[(i64toi32_i32$0 + 104 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 108 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $18$hi;
  HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] = $18;
  HEAP32[(i64toi32_i32$0 + 60 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] = $19;
  HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$1 = $19;
  i64toi32_i32$0 = 1936682341;
  i64toi32_i32$3 = 1886610805;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $78 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = $3;
  HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = $78;
  HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = $2;
  $std__collections__hash__map__DefaultHasher_20as_20core__hash__Hasher___write__h7303af2f85960aff(i64toi32_i32$1 + 48 | 0 | 0, i64toi32_i32$1 + 32 | 0 | 0);
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 104 | 0) >> 2] | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 56;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $120 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $120 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $87$hi = i64toi32_i32$0;
  i64toi32_i32$1 = $3;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 96 | 0) >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 100 | 0) >> 2] | 0;
  $89 = i64toi32_i32$0;
  $89$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $87$hi;
  i64toi32_i32$1 = $120;
  i64toi32_i32$0 = $89$hi;
  i64toi32_i32$3 = $89;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $18 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $18$hi = i64toi32_i32$0;
  i64toi32_i32$2 = $1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $93 = i64toi32_i32$0;
  $93$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$2 = $18;
  i64toi32_i32$0 = $93$hi;
  i64toi32_i32$3 = $93;
  i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
  $19 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $19$hi = i64toi32_i32$0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($19 | 0, i64toi32_i32$0 | 0, 16 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $96 = i64toi32_i32$2;
  $96$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $19$hi;
  i64toi32_i32$1 = $5;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  $99 = i64toi32_i32$0;
  $99$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $19$hi;
  i64toi32_i32$1 = $19;
  i64toi32_i32$0 = $99$hi;
  i64toi32_i32$3 = $99;
  i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $19 = i64toi32_i32$4;
  $19$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $96$hi;
  i64toi32_i32$2 = $96;
  i64toi32_i32$1 = $19$hi;
  i64toi32_i32$3 = i64toi32_i32$4;
  i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
  $20 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
  $20$hi = i64toi32_i32$1;
  $103 = $20;
  $103$hi = i64toi32_i32$1;
  i64toi32_i32$5 = $4;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
  $21 = i64toi32_i32$1;
  $21$hi = i64toi32_i32$2;
  i64toi32_i32$5 = $3;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 64 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 68 | 0) >> 2] | 0;
  $108 = i64toi32_i32$2;
  $108$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $21$hi;
  i64toi32_i32$5 = $21;
  i64toi32_i32$2 = $108$hi;
  i64toi32_i32$3 = $108;
  i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $22 = i64toi32_i32$0;
  $22$hi = i64toi32_i32$4;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, 32 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $111 = i64toi32_i32$5;
  $111$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $103$hi;
  i64toi32_i32$1 = $103;
  i64toi32_i32$5 = $111$hi;
  i64toi32_i32$3 = $111;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $23 = i64toi32_i32$2;
  $23$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $18$hi;
  i64toi32_i32$0 = $23$hi;
  i64toi32_i32$4 = i64toi32_i32$2;
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$3 = $18;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $115 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $115$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $19$hi;
  i64toi32_i32$1 = $21$hi;
  i64toi32_i32$4 = 0;
  i64toi32_i32$4 = __wasm_rotl_i64($21 | 0, i64toi32_i32$1 | 0, 13 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $118$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $22$hi;
  i64toi32_i32$1 = $118$hi;
  i64toi32_i32$0 = i64toi32_i32$4;
  i64toi32_i32$4 = $22$hi;
  i64toi32_i32$3 = $22;
  i64toi32_i32$4 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
  $18 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $18$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $19$hi;
  i64toi32_i32$1 = $19;
  i64toi32_i32$0 = $18$hi;
  i64toi32_i32$3 = $18;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $19 = i64toi32_i32$5;
  $19$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $18$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($18 | 0, i64toi32_i32$2 | 0, 17 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $125 = i64toi32_i32$1;
  $125$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $19$hi;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$1 = $125$hi;
  i64toi32_i32$3 = $125;
  i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
  $18 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  $18$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $115$hi;
  i64toi32_i32$2 = $115;
  i64toi32_i32$4 = $18$hi;
  i64toi32_i32$3 = $18;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $21 = i64toi32_i32$0;
  $21$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $18$hi;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($18 | 0, i64toi32_i32$5 | 0, 13 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $131 = i64toi32_i32$2;
  $131$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $21$hi;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$2 = $131$hi;
  i64toi32_i32$3 = $131;
  i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
  $18 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $18$hi = i64toi32_i32$2;
  $133 = $18;
  $133$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $20$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($20 | 0, i64toi32_i32$2 | 0, 21 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $135$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $23$hi;
  i64toi32_i32$2 = $135$hi;
  i64toi32_i32$5 = i64toi32_i32$1;
  i64toi32_i32$1 = $23$hi;
  i64toi32_i32$3 = $23;
  i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
  $20 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  $20$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $19$hi;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64($19 | 0, i64toi32_i32$1 | 0, 32 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$2 = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 255;
  i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
  $141 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $141$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$1 = $20;
  i64toi32_i32$2 = $141$hi;
  i64toi32_i32$3 = $141;
  i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $19 = i64toi32_i32$4;
  $19$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $133$hi;
  i64toi32_i32$5 = $133;
  i64toi32_i32$1 = $19$hi;
  i64toi32_i32$3 = i64toi32_i32$4;
  i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $22 = i64toi32_i32$2;
  $22$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $18$hi;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64($18 | 0, i64toi32_i32$4 | 0, 17 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $147 = i64toi32_i32$5;
  $147$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $22$hi;
  i64toi32_i32$0 = i64toi32_i32$2;
  i64toi32_i32$5 = $147$hi;
  i64toi32_i32$3 = $147;
  i64toi32_i32$5 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
  $18 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $18$hi = i64toi32_i32$5;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = __wasm_rotl_i64($18 | 0, i64toi32_i32$5 | 0, 13 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $150 = i64toi32_i32$0;
  $150$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $18$hi;
  $151 = $18;
  $151$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = __wasm_rotl_i64($20 | 0, i64toi32_i32$5 | 0, 16 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $153$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $19$hi;
  i64toi32_i32$5 = $153$hi;
  i64toi32_i32$4 = i64toi32_i32$0;
  i64toi32_i32$0 = $19$hi;
  i64toi32_i32$3 = $19;
  i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
  $19 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
  $19$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$4 = 0;
  i64toi32_i32$4 = __wasm_rotl_i64($21 | 0, i64toi32_i32$0 | 0, 32 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $158 = i64toi32_i32$4;
  $158$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $19$hi;
  i64toi32_i32$5 = $19;
  i64toi32_i32$4 = $158$hi;
  i64toi32_i32$3 = $158;
  i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $20 = i64toi32_i32$1;
  $20$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $151$hi;
  i64toi32_i32$0 = $151;
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$3 = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $18 = i64toi32_i32$4;
  $18$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $150$hi;
  i64toi32_i32$2 = $150;
  i64toi32_i32$0 = $18$hi;
  i64toi32_i32$3 = i64toi32_i32$4;
  i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
  $21 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
  $21$hi = i64toi32_i32$0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($21 | 0, i64toi32_i32$0 | 0, 17 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $165 = i64toi32_i32$2;
  $165$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  $166 = $21;
  $166$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $19$hi;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($19 | 0, i64toi32_i32$0 | 0, 21 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $168$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $20$hi;
  i64toi32_i32$0 = $168$hi;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = $20$hi;
  i64toi32_i32$3 = $20;
  i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
  $19 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $19$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $22$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($22 | 0, i64toi32_i32$2 | 0, 32 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $173 = i64toi32_i32$1;
  $173$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $19$hi;
  i64toi32_i32$0 = $19;
  i64toi32_i32$1 = $173$hi;
  i64toi32_i32$3 = $173;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $20 = i64toi32_i32$5;
  $20$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $166$hi;
  i64toi32_i32$2 = $166;
  i64toi32_i32$0 = $20$hi;
  i64toi32_i32$3 = i64toi32_i32$5;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
  i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $21 = i64toi32_i32$1;
  $21$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $165$hi;
  i64toi32_i32$4 = $165;
  i64toi32_i32$2 = $21$hi;
  i64toi32_i32$3 = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
  $22 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
  $22$hi = i64toi32_i32$2;
  i64toi32_i32$4 = 0;
  i64toi32_i32$4 = __wasm_rotl_i64($22 | 0, i64toi32_i32$2 | 0, 13 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $180 = i64toi32_i32$4;
  $180$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $22$hi;
  $181 = $22;
  $181$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $19$hi;
  i64toi32_i32$4 = 0;
  i64toi32_i32$4 = __wasm_rotl_i64($19 | 0, i64toi32_i32$2 | 0, 16 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $183$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $20$hi;
  i64toi32_i32$2 = $183$hi;
  i64toi32_i32$5 = i64toi32_i32$4;
  i64toi32_i32$4 = $20$hi;
  i64toi32_i32$3 = $20;
  i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
  $19 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  $19$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $18$hi;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64($18 | 0, i64toi32_i32$4 | 0, 32 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $188 = i64toi32_i32$5;
  $188$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $19$hi;
  i64toi32_i32$2 = $19;
  i64toi32_i32$5 = $188$hi;
  i64toi32_i32$3 = $188;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $18 = i64toi32_i32$0;
  $18$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $181$hi;
  i64toi32_i32$4 = $181;
  i64toi32_i32$2 = $18$hi;
  i64toi32_i32$3 = i64toi32_i32$0;
  i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $191$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $180$hi;
  i64toi32_i32$1 = $180;
  i64toi32_i32$4 = $191$hi;
  i64toi32_i32$3 = i64toi32_i32$5;
  i64toi32_i32$4 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
  $20 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
  $20$hi = i64toi32_i32$4;
  $193 = $20;
  $193$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $19$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($19 | 0, i64toi32_i32$4 | 0, 21 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $195$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $18$hi;
  i64toi32_i32$4 = $195$hi;
  i64toi32_i32$0 = i64toi32_i32$1;
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$3 = $18;
  i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
  $18 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $18$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $21$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = __wasm_rotl_i64($21 | 0, i64toi32_i32$1 | 0, 32 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $200 = i64toi32_i32$0;
  $200$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$4 = $18;
  i64toi32_i32$0 = $200$hi;
  i64toi32_i32$3 = $200;
  i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $19 = i64toi32_i32$2;
  $19$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $193$hi;
  i64toi32_i32$1 = $193;
  i64toi32_i32$4 = $19$hi;
  i64toi32_i32$3 = i64toi32_i32$2;
  i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
  i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $21 = i64toi32_i32$0;
  $21$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $18$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($18 | 0, i64toi32_i32$2 | 0, 16 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $206$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $19$hi;
  i64toi32_i32$2 = $206$hi;
  i64toi32_i32$5 = i64toi32_i32$1;
  i64toi32_i32$1 = $19$hi;
  i64toi32_i32$3 = $19;
  i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
  $123 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64($123 | 0, i64toi32_i32$1 | 0, 21 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $209 = i64toi32_i32$5;
  $209$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $21$hi;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$5 = $209$hi;
  i64toi32_i32$3 = $209;
  i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
  $210 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $210$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($20 | 0, i64toi32_i32$5 | 0, 17 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $212 = i64toi32_i32$2;
  $212$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $210$hi;
  i64toi32_i32$1 = $210;
  i64toi32_i32$2 = $212$hi;
  i64toi32_i32$3 = $212;
  i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
  $213 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $213$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $21$hi;
  i64toi32_i32$5 = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $121 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $121 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
  }
  $215$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $213$hi;
  i64toi32_i32$2 = $213;
  i64toi32_i32$5 = $215$hi;
  i64toi32_i32$3 = $121;
  i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
  $18 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $18$hi = i64toi32_i32$5;
  i64toi32_i32$1 = $18;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 25;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $122 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
   $122 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6 = $122;
  $1 = $6 & 127 | 0;
  $1 = $1 << 8 | 0 | $1 | 0;
  $7 = $1 << 16 | 0 | $1 | 0;
  $8 = $0 + 40 | 0;
  $9 = HEAP32[($0 + 64 | 0) >> 2] | 0;
  $10 = HEAP32[($0 + 60 | 0) >> 2] | 0;
  $11 = 0;
  $12 = $0 + 56 | 0;
  $4 = HEAP32[$12 >> 2] | 0;
  i64toi32_i32$2 = $18$hi;
  $13 = $18;
  $14 = $4 & $18 | 0;
  $5 = $14;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : while (1) {
       $118 = $10 + $5 | 0;
       $15 = HEAPU8[$118 >> 0] | 0 | ((HEAPU8[($118 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($118 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($118 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       $1 = $15 ^ $7 | 0;
       $1 = (($1 ^ -1 | 0) & ($1 + -16843009 | 0) | 0) & -2139062144 | 0;
       $11 = $11 + 4 | 0;
       $16 = ($11 + $5 | 0) & $4 | 0;
       label$6 : {
        label$7 : while (1) {
         if (!$1) {
          break label$6
         }
         $17 = __wasm_ctz_i32($1 | 0) | 0;
         $1 = ($1 + -1 | 0) & $1 | 0;
         $17 = (($17 >>> 3 | 0) + $5 | 0) & $4 | 0;
         if ((HEAP32[($9 + Math_imul($17, 20) | 0) >> 2] | 0 | 0) == ($2 | 0)) {
          break label$4
         }
         continue label$7;
        };
       }
       $5 = $16;
       if (!(($15 & ($15 << 1 | 0) | 0) & -2139062144 | 0)) {
        continue label$5
       }
       break label$5;
      };
      HEAP32[($3 + 28 | 0) >> 2] = $8;
      $1 = ($3 + 32 | 0) + 8 | 0;
      i64toi32_i32$5 = ($3 + 8 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $305 = i64toi32_i32$2;
      i64toi32_i32$2 = $1;
      HEAP32[i64toi32_i32$2 >> 2] = $305;
      HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$5 = $3;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] | 0;
      $308 = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$5;
      HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = $308;
      HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$2;
      if (!(HEAP32[($0 + 68 | 0) >> 2] | 0)) {
       break label$3
      }
      break label$2;
     }
     $0 = $9 + Math_imul($17, 20) | 0;
     i64toi32_i32$5 = $3;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] | 0;
     $319 = i64toi32_i32$2;
     i64toi32_i32$2 = $0;
     HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = $319;
     HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$5 = i64toi32_i32$5 + 16 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $324 = i64toi32_i32$1;
     i64toi32_i32$1 = $0 + 12 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $324;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
     break label$1;
    }
    hashbrown__raw__RawTable_T___reserve_rehash__hdc1a2044bde0ae8c($12 | 0, 1 | 0, $3 + 28 | 0 | 0, 1 | 0) | 0;
    $4 = HEAP32[($0 + 56 | 0) >> 2] | 0;
    $14 = $4 & $13 | 0;
    $10 = HEAP32[($0 + 60 | 0) >> 2] | 0;
   }
   i64toi32_i32$5 = $1;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $342 = i64toi32_i32$2;
   i64toi32_i32$2 = ($3 + 48 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$2 >> 2] = $342;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$5 = $3;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 36 | 0) >> 2] | 0;
   $345 = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$5;
   HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = $345;
   HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = i64toi32_i32$2;
   $1 = 4;
   label$8 : while (1) {
    $5 = $14;
    $14 = ($5 + $1 | 0) & $4 | 0;
    $1 = $1 + 4 | 0;
    $119 = $10 + $5 | 0;
    $11 = (HEAPU8[$119 >> 0] | 0 | ((HEAPU8[($119 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($119 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($119 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0) & -2139062144 | 0;
    if (!$11) {
     continue label$8
    }
    break label$8;
   };
   label$9 : {
    $1 = (((__wasm_ctz_i32($11 | 0) | 0) >>> 3 | 0) + $5 | 0) & $4 | 0;
    $5 = HEAP8[($10 + $1 | 0) >> 0] | 0;
    if (($5 | 0) < (0 | 0)) {
     break label$9
    }
    $1 = (__wasm_ctz_i32((HEAP32[$10 >> 2] | 0) & -2139062144 | 0 | 0) | 0) >>> 3 | 0;
    $5 = HEAPU8[($10 + $1 | 0) >> 0] | 0;
   }
   $14 = $0 + 68 | 0;
   HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) - ($5 & 1 | 0) | 0;
   $5 = HEAP32[($0 + 64 | 0) >> 2] | 0;
   $14 = $6 & 127 | 0;
   HEAP8[($10 + $1 | 0) >> 0] = $14;
   HEAP8[(($10 + (($1 + -4 | 0) & $4 | 0) | 0) + 4 | 0) >> 0] = $14;
   $1 = $5 + Math_imul($1, 20) | 0;
   i64toi32_i32$5 = $3 + 56 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $416 = i64toi32_i32$2;
   i64toi32_i32$2 = $1 + 12 | 0;
   HEAP32[i64toi32_i32$2 >> 2] = $416;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$5 = $3;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 48 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 52 | 0) >> 2] | 0;
   $419 = i64toi32_i32$1;
   i64toi32_i32$1 = $1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $419;
   HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$2;
   HEAP32[i64toi32_i32$1 >> 2] = $2;
   $0 = $0 + 72 | 0;
   HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1 | 0;
  }
  global$0 = $3 + 112 | 0;
 }
 
 function core__num__dec2flt__convert__h66adbcaef35cbf62($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $6 = 0, $7 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $4 = 0, $5 = 0, $11$hi = 0, $13 = Math_fround(0), $11 = 0, i64toi32_i32$6 = 0, $12 = 0, $12$hi = 0, $8 = 0, $9 = 0, $10 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $192 = 0, $194$hi = 0, $196$hi = 0, $235$hi = 0, $237$hi = 0, $246$hi = 0, $266$hi = 0;
  $2 = global$0 - 192 | 0;
  global$0 = $2;
  $3 = HEAP32[($1 + 8 | 0) >> 2] | 0;
  $4 = HEAP32[($1 + 12 | 0) >> 2] | 0;
  $5 = $3 + $4 | 0;
  $6 = 0;
  $7 = $3;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if ($4 >>> 0 < 4 >>> 0) {
        break label$5
       }
       $6 = 0;
       label$6 : while (1) {
        $7 = $3 + $6 | 0;
        if ((HEAPU8[$7 >> 0] | 0 | 0) != (48 | 0)) {
         break label$1
        }
        if ((HEAPU8[($7 + 1 | 0) >> 0] | 0 | 0) != (48 | 0)) {
         break label$4
        }
        if ((HEAPU8[($7 + 2 | 0) >> 0] | 0 | 0) != (48 | 0)) {
         break label$3
        }
        if ((HEAPU8[($7 + 3 | 0) >> 0] | 0 | 0) != (48 | 0)) {
         break label$2
        }
        $6 = $6 + 4 | 0;
        if (($5 - ($7 + 4 | 0) | 0) >>> 0 > 3 >>> 0) {
         continue label$6
        }
        break label$6;
       };
       $7 = $3 + $6 | 0;
      }
      if (($7 | 0) == ($5 | 0)) {
       break label$1
      }
      label$7 : while (1) {
       if ((HEAPU8[$7 >> 0] | 0 | 0) != (48 | 0)) {
        break label$1
       }
       $6 = $6 + 1 | 0;
       $7 = $7 + 1 | 0;
       if (($5 | 0) != ($7 | 0)) {
        continue label$7
       }
       break label$1;
      };
     }
     $6 = $6 + 1 | 0;
     break label$1;
    }
    $6 = $6 + 2 | 0;
    break label$1;
   }
   $6 = $6 + 3 | 0;
  }
  label$8 : {
   label$9 : {
    label$10 : {
     label$11 : {
      label$12 : {
       if ($4 >>> 0 < $6 >>> 0) {
        break label$12
       }
       $7 = $4 - $6 | 0;
       HEAP32[($1 + 12 | 0) >> 2] = $7;
       $8 = $3 + $6 | 0;
       HEAP32[($1 + 8 | 0) >> 2] = $8;
       $9 = $1 + 20 | 0;
       $6 = HEAP32[$9 >> 2] | 0;
       $3 = HEAP32[($1 + 16 | 0) >> 2] | 0;
       HEAP8[($2 + 36 | 0) >> 0] = 0;
       HEAP32[($2 + 32 | 0) >> 2] = 1049874;
       HEAP32[($2 + 28 | 0) >> 2] = $3 + $6 | 0;
       HEAP32[($2 + 24 | 0) >> 2] = $3;
       $core__iter__adapters__Rev_I__20as_20core__iter__traits__iterator__Iterator___try_fold__hdc43748b75452749($2 + 16 | 0 | 0, $2 + 24 | 0 | 0, 0 | 0, ($2 + 24 | 0) + 8 | 0 | 0, ($2 + 24 | 0) + 12 | 0 | 0);
       $10 = HEAP32[($2 + 20 | 0) >> 2] | 0;
       $4 = $6 - $10 | 0;
       if ($6 >>> 0 < $10 >>> 0) {
        break label$11
       }
       HEAP32[$9 >> 2] = $4;
       label$13 : {
        label$14 : {
         label$15 : {
          label$16 : {
           label$17 : {
            label$18 : {
             label$19 : {
              label$20 : {
               label$21 : {
                label$22 : {
                 label$23 : {
                  label$24 : {
                   label$25 : {
                    if (!$7) {
                     break label$25
                    }
                    if (!$4) {
                     break label$24
                    }
                    i64toi32_i32$2 = $1;
                    i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
                    i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
                    $11 = i64toi32_i32$0;
                    $11$hi = i64toi32_i32$1;
                    break label$16;
                   }
                   $5 = $3 + $4 | 0;
                   $6 = 0;
                   if ($4 >>> 0 < 4 >>> 0) {
                    break label$23
                   }
                   label$26 : while (1) {
                    $7 = $3 + $6 | 0;
                    if ((HEAPU8[$7 >> 0] | 0 | 0) != (48 | 0)) {
                     break label$18
                    }
                    if ((HEAPU8[($7 + 1 | 0) >> 0] | 0 | 0) != (48 | 0)) {
                     break label$21
                    }
                    if ((HEAPU8[($7 + 2 | 0) >> 0] | 0 | 0) != (48 | 0)) {
                     break label$20
                    }
                    if ((HEAPU8[($7 + 3 | 0) >> 0] | 0 | 0) != (48 | 0)) {
                     break label$19
                    }
                    $6 = $6 + 4 | 0;
                    if (($5 - ($7 + 4 | 0) | 0) >>> 0 > 3 >>> 0) {
                     continue label$26
                    }
                    break label$26;
                   };
                   $7 = $3 + $6 | 0;
                   break label$22;
                  }
                  HEAP8[($2 + 36 | 0) >> 0] = 0;
                  HEAP32[($2 + 32 | 0) >> 2] = 1049874;
                  HEAP32[($2 + 24 | 0) >> 2] = $8;
                  HEAP32[($2 + 28 | 0) >> 2] = $5;
                  $core__iter__adapters__Rev_I__20as_20core__iter__traits__iterator__Iterator___try_fold__hdc43748b75452749($2 + 8 | 0 | 0, $2 + 24 | 0 | 0, 0 | 0, $2 + 32 | 0 | 0, ($2 + 24 | 0) + 12 | 0 | 0);
                  $5 = $1 + 12 | 0;
                  $3 = HEAP32[$5 >> 2] | 0;
                  $6 = HEAP32[($2 + 12 | 0) >> 2] | 0;
                  $7 = $3 - $6 | 0;
                  if ($3 >>> 0 < $6 >>> 0) {
                   break label$9
                  }
                  HEAP32[$5 >> 2] = $7;
                  $192 = $1;
                  i64toi32_i32$2 = $1;
                  i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
                  i64toi32_i32$0 = HEAP32[($1 + 4 | 0) >> 2] | 0;
                  $194$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = 0;
                  $196$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = $194$hi;
                  i64toi32_i32$2 = i64toi32_i32$1;
                  i64toi32_i32$1 = $196$hi;
                  i64toi32_i32$3 = $6;
                  i64toi32_i32$4 = i64toi32_i32$2 + $6 | 0;
                  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
                  if (i64toi32_i32$4 >>> 0 < $6 >>> 0) {
                   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
                  }
                  $11 = i64toi32_i32$4;
                  $11$hi = i64toi32_i32$5;
                  i64toi32_i32$2 = $192;
                  HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$4;
                  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
                  if ($7) {
                   break label$16
                  }
                  break label$17;
                 }
                 $7 = $3;
                }
                if (($7 | 0) == ($5 | 0)) {
                 break label$18
                }
                label$27 : while (1) {
                 if ((HEAPU8[$7 >> 0] | 0 | 0) != (48 | 0)) {
                  break label$18
                 }
                 $6 = $6 + 1 | 0;
                 $7 = $7 + 1 | 0;
                 if (($5 | 0) != ($7 | 0)) {
                  continue label$27
                 }
                 break label$18;
                };
               }
               $6 = $6 + 1 | 0;
               break label$18;
              }
              $6 = $6 + 2 | 0;
              break label$18;
             }
             $6 = $6 + 3 | 0;
            }
            if ($4 >>> 0 < $6 >>> 0) {
             break label$10
            }
            HEAP32[($1 + 20 | 0) >> 2] = $4 - $6 | 0;
            HEAP32[($1 + 16 | 0) >> 2] = $3 + $6 | 0;
            i64toi32_i32$0 = $1;
            i64toi32_i32$5 = HEAP32[$1 >> 2] | 0;
            i64toi32_i32$2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
            $235$hi = i64toi32_i32$2;
            i64toi32_i32$2 = 0;
            $237$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $235$hi;
            i64toi32_i32$0 = i64toi32_i32$5;
            i64toi32_i32$5 = $237$hi;
            i64toi32_i32$3 = $6;
            i64toi32_i32$1 = i64toi32_i32$0 - $6 | 0;
            i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < $6 >>> 0;
            i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
            i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
            $11 = i64toi32_i32$1;
            $11$hi = i64toi32_i32$4;
            i64toi32_i32$0 = $1;
            HEAP32[$1 >> 2] = i64toi32_i32$1;
            HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$4;
           }
           $7 = 0;
           if (!(HEAP32[($1 + 20 | 0) >> 2] | 0)) {
            break label$15
           }
          }
          $13 = Math_fround(infinity);
          i64toi32_i32$4 = $11$hi;
          i64toi32_i32$4 = 0;
          $246$hi = i64toi32_i32$4;
          i64toi32_i32$4 = $11$hi;
          i64toi32_i32$2 = $11;
          i64toi32_i32$0 = $246$hi;
          i64toi32_i32$3 = $7;
          i64toi32_i32$5 = i64toi32_i32$2 + $7 | 0;
          i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
          if (i64toi32_i32$5 >>> 0 < $7 >>> 0) {
           i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
          }
          $12 = i64toi32_i32$5;
          $12$hi = i64toi32_i32$1;
          i64toi32_i32$4 = i64toi32_i32$5;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = 40;
          if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
           $30 = 1
          } else {
           if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
            if (i64toi32_i32$4 >>> 0 <= i64toi32_i32$3 >>> 0) {
             $31 = 0
            } else {
             $31 = 1
            }
            $32 = $31;
           } else {
            $32 = 0
           }
           $30 = $32;
          }
          if ($30) {
           break label$14
          }
          $13 = Math_fround(0.0);
          i64toi32_i32$4 = $12$hi;
          i64toi32_i32$3 = $12;
          i64toi32_i32$1 = -1;
          i64toi32_i32$2 = -48;
          if ((i64toi32_i32$4 | 0) < (i64toi32_i32$1 | 0)) {
           $33 = 1
          } else {
           if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$1 | 0)) {
            if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$2 >>> 0) {
             $34 = 0
            } else {
             $34 = 1
            }
            $35 = $34;
           } else {
            $35 = 0
           }
           $33 = $35;
          }
          if ($33) {
           break label$14
          }
          $6 = HEAP32[($1 + 20 | 0) >> 2] | 0;
          i64toi32_i32$3 = $11$hi;
          i64toi32_i32$3 = 0;
          $266$hi = i64toi32_i32$3;
          i64toi32_i32$3 = $11$hi;
          i64toi32_i32$2 = $11;
          i64toi32_i32$4 = $266$hi;
          i64toi32_i32$1 = $6;
          i64toi32_i32$0 = i64toi32_i32$2 - $6 | 0;
          i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < $6 >>> 0;
          i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
          i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
          $11 = i64toi32_i32$0;
          $11$hi = i64toi32_i32$5;
          core__num__dec2flt__algorithm__fast_path__h475be7bf8e084dd6($2 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0, $7 | 0, HEAP32[($1 + 16 | 0) >> 2] | 0 | 0, $6 | 0, i64toi32_i32$0 | 0, i64toi32_i32$5 | 0);
          if ((HEAP32[$2 >> 2] | 0 | 0) != (1 | 0)) {
           break label$13
          }
          $13 = Math_fround(HEAPF32[($2 + 4 | 0) >> 2]);
          HEAP8[$0 >> 0] = 0;
          HEAPF32[($0 + 4 | 0) >> 2] = $13;
          break label$8;
         }
         $13 = Math_fround(0.0);
        }
        HEAP8[$0 >> 0] = 0;
        HEAPF32[($0 + 4 | 0) >> 2] = $13;
        break label$8;
       }
       label$28 : {
        i64toi32_i32$5 = $11$hi;
        i64toi32_i32$5 = core__num__dec2flt__bound_intermediate_digits__h2886e07128e9448a($1 | 0, $11 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $12 = i64toi32_i32$5;
        $12$hi = i64toi32_i32$2;
        i64toi32_i32$3 = i64toi32_i32$5;
        i64toi32_i32$5 = 0;
        i64toi32_i32$1 = 375;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$1 >>> 0 | 0) | 0) {
         break label$28
        }
        $6 = core__num__dec2flt__pfe_invalid__h9f0729b42d956f16() | 0;
        HEAP8[$0 >> 0] = 1;
        HEAP8[($0 + 1 | 0) >> 0] = $6;
        break label$8;
       }
       core__num__dec2flt__num__digits_to_big__hef6bb2d3b095a9ae($2 + 24 | 0 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($1 + 20 | 0) >> 2] | 0 | 0);
       label$29 : {
        label$30 : {
         i64toi32_i32$3 = $11$hi;
         $6 = $11;
         if ((($6 + 305 | 0) & 65535 | 0) >>> 0 > 610 >>> 0) {
          break label$30
         }
         i64toi32_i32$3 = $12$hi;
         i64toi32_i32$1 = $12;
         i64toi32_i32$2 = 0;
         i64toi32_i32$5 = 36;
         if (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$5 >>> 0 | 0) | 0) {
          break label$30
         }
         $13 = Math_fround(core__num__dec2flt__algorithm__bellerophon__h0c5b0e70784f3385($2 + 24 | 0 | 0, $6 | 0));
         break label$29;
        }
        $13 = Math_fround(core__num__dec2flt__algorithm__algorithm_m__h98d3ac2557e797f4($2 + 24 | 0 | 0, $6 | 0));
       }
       HEAP8[$0 >> 0] = 0;
       HEAPF32[($0 + 4 | 0) >> 2] = $13;
       break label$8;
      }
      core__slice__slice_index_order_fail__ha75fa70416d3bc2f($6 | 0, $4 | 0);
      abort();
     }
     core__slice__slice_index_len_fail__h4544fc57f3d8a7a0($4 | 0, $6 | 0);
     abort();
    }
    core__slice__slice_index_order_fail__ha75fa70416d3bc2f($6 | 0, $4 | 0);
    abort();
   }
   core__slice__slice_index_len_fail__h4544fc57f3d8a7a0($7 | 0, $3 | 0);
   abort();
  }
  global$0 = $2 + 192 | 0;
 }
 
 function stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h8bf46266788d9673($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $13 = Math_fround(0), $4 = 0, $14 = Math_fround(0), $7 = 0, $3 = 0, $5 = 0, $8 = 0, $11 = 0, i64toi32_i32$0 = 0, $12 = 0, i64toi32_i32$1 = 0, $6 = 0, $9 = 0, $10 = 0, i64toi32_i32$2 = 0, $117 = 0, $120 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f32$1 = Math_fround(0), wasm2js_i32$0 = 0;
  $3 = global$0 - 48 | 0;
  global$0 = $3;
  $4 = HEAP32[$1 >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           $5 = HEAPU8[(HEAP32[($1 + 4 | 0) >> 2] | 0) >> 0] | 0;
           if (($5 | 2 | 0 | 0) != (3 | 0)) {
            break label$9
           }
           if (!(HEAP32[($4 + 8 | 0) >> 2] | 0)) {
            break label$8
           }
           break label$7;
          }
          if (HEAP32[$4 >> 2] | 0) {
           break label$7
          }
         }
         $6 = $2 + 160 | 0;
         break label$6;
        }
        $6 = $2 + 160 | 0;
        if (!(HEAPU8[(HEAP32[($1 + 8 | 0) >> 2] | 0) >> 0] | 0)) {
         break label$6
        }
        $4 = HEAP32[$2 >> 2] | 0;
        $7 = HEAP32[(HEAP32[($1 + 12 | 0) >> 2] | 0) >> 2] | 0;
        label$10 : {
         label$11 : {
          if (!(HEAP32[($2 + 4 | 0) >> 2] | 0)) {
           break label$11
          }
          $8 = 1;
          break label$10;
         }
         $13 = Math_fround(HEAPF32[($2 + 8 | 0) >> 2]);
         $13 = (wasm2js_f32$0 = $13, wasm2js_f32$1 = Math_fround(fmaxf(Math_fround($13), Math_fround(Math_fround(HEAPF32[($2 + 24 | 0) >> 2])))), wasm2js_i32$0 = HEAP32[($2 + 20 | 0) >> 2] | 0, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
         $13 = (wasm2js_f32$0 = $13, wasm2js_f32$1 = Math_fround(fminf(Math_fround($13), Math_fround(Math_fround(HEAPF32[($2 + 40 | 0) >> 2])))), wasm2js_i32$0 = HEAP32[($2 + 36 | 0) >> 2] | 0, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
         $8 = 0;
        }
        label$12 : {
         label$13 : {
          if (!(HEAP32[($2 + 12 | 0) >> 2] | 0)) {
           break label$13
          }
          $9 = $2 + 48 | 0;
          $10 = $2 + 44 | 0;
          $11 = 1;
          break label$12;
         }
         $14 = Math_fround(HEAPF32[($2 + 16 | 0) >> 2]);
         $14 = (wasm2js_f32$0 = $14, wasm2js_f32$1 = Math_fround(fmaxf(Math_fround($14), Math_fround(Math_fround(HEAPF32[($2 + 32 | 0) >> 2])))), wasm2js_i32$0 = HEAP32[($2 + 28 | 0) >> 2] | 0, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
         $9 = $2 + 48 | 0;
         $10 = $2 + 44 | 0;
         $14 = (wasm2js_f32$0 = $14, wasm2js_f32$1 = Math_fround(fminf(Math_fround($14), Math_fround(Math_fround(HEAPF32[$9 >> 2])))), wasm2js_i32$0 = HEAP32[$10 >> 2] | 0, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
         $11 = 0;
        }
        HEAPF32[($3 + 28 | 0) >> 2] = $14;
        HEAP32[($3 + 24 | 0) >> 2] = $11;
        HEAPF32[($3 + 20 | 0) >> 2] = $13;
        HEAP32[($3 + 16 | 0) >> 2] = $8;
        $8 = HEAP32[($1 + 16 | 0) >> 2] | 0;
        i64toi32_i32$2 = $8 + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $117 = i64toi32_i32$0;
        i64toi32_i32$0 = ($3 + 32 | 0) + 8 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $117;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = $8;
        i64toi32_i32$1 = HEAP32[$8 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($8 + 4 | 0) >> 2] | 0;
        $120 = i64toi32_i32$1;
        i64toi32_i32$1 = $3;
        HEAP32[($3 + 32 | 0) >> 2] = $120;
        HEAP32[($3 + 36 | 0) >> 2] = i64toi32_i32$0;
        stretch__algo___impl_20stretch__forest__Forest___compute_internal__h1faccff9b0af78e6($3 | 0, $7 | 0, $4 | 0, $3 + 16 | 0 | 0, $3 + 32 | 0 | 0, 0 | 0);
        $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
        $7 = HEAP32[($3 + 4 | 0) >> 2] | 0;
        $8 = HEAP32[$3 >> 2] | 0;
        if (($8 | 0) == (1 | 0)) {
         break label$1
        }
        $11 = HEAPU8[(HEAP32[($1 + 4 | 0) >> 2] | 0) >> 0] | 0;
        $12 = $11 | 2 | 0;
        if (($12 | 0) != (3 | 0)) {
         break label$5
        }
        $13 = (wasm2js_scratch_store_i32(0, $4), wasm2js_scratch_load_f32());
        break label$3;
       }
       label$14 : {
        label$15 : {
         $4 = (($5 | 2 | 0) & 3 | 0 | 0) == (3 | 0);
         if (!$4) {
          break label$15
         }
         $13 = Math_fround(HEAPF32[($2 + 148 | 0) >> 2]);
         if (!$4) {
          break label$14
         }
         break label$4;
        }
        $13 = Math_fround(HEAPF32[($2 + 144 | 0) >> 2]);
        if ($4) {
         break label$4
        }
       }
       HEAPF32[($2 + 160 | 0) >> 2] = $13;
       break label$2;
      }
      $13 = (wasm2js_scratch_store_i32(0, $7), wasm2js_scratch_load_f32());
      break label$3;
     }
     HEAPF32[($2 + 164 | 0) >> 2] = $13;
     break label$2;
    }
    label$16 : {
     label$17 : {
      if (($12 & 3 | 0 | 0) != (3 | 0)) {
       break label$17
      }
      $12 = HEAP32[($2 + 28 | 0) >> 2] | 0;
      $14 = Math_fround(HEAPF32[($2 + 32 | 0) >> 2]);
      break label$16;
     }
     $14 = Math_fround(HEAPF32[($2 + 24 | 0) >> 2]);
     $12 = HEAP32[($2 + 20 | 0) >> 2] | 0;
    }
    $13 = (wasm2js_f32$0 = $13, wasm2js_f32$1 = Math_fround(fmaxf(Math_fround($13), Math_fround($14))), wasm2js_i32$0 = $12, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
    label$18 : {
     label$19 : {
      if ((($11 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
       break label$19
      }
      $11 = HEAP32[$10 >> 2] | 0;
      $14 = Math_fround(HEAPF32[$9 >> 2]);
      break label$18;
     }
     $14 = Math_fround(HEAPF32[($2 + 40 | 0) >> 2]);
     $11 = HEAP32[($2 + 36 | 0) >> 2] | 0;
    }
    $13 = (wasm2js_f32$0 = $13, wasm2js_f32$1 = Math_fround(fminf(Math_fround($13), Math_fround($14))), wasm2js_i32$0 = $11, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
    label$20 : {
     label$21 : {
      if ((($5 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
       break label$21
      }
      $5 = $2 + 164 | 0;
      break label$20;
     }
     $5 = $6;
    }
    HEAPF32[$5 >> 2] = $13;
    if (!$8) {
     break label$2
    }
    FUNCTION_TABLE[HEAP32[$4 >> 2] | 0]($7);
    $5 = HEAP32[($4 + 4 | 0) >> 2] | 0;
    if (!$5) {
     break label$2
    }
    __rust_dealloc($7 | 0, $5 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
   }
   label$22 : {
    label$23 : {
     $4 = HEAPU8[(HEAP32[($1 + 4 | 0) >> 2] | 0) >> 0] | 0;
     $7 = $4 | 2 | 0;
     if (($7 | 0) != (3 | 0)) {
      break label$23
     }
     $13 = Math_fround(HEAPF32[($2 + 164 | 0) >> 2]);
     break label$22;
    }
    $13 = Math_fround(HEAPF32[$6 >> 2]);
   }
   label$24 : {
    label$25 : {
     if (($7 & 3 | 0 | 0) != (3 | 0)) {
      break label$25
     }
     $7 = $2 + 96 | 0;
     $5 = $2 + 92 | 0;
     break label$24;
    }
    $7 = $2 + 88 | 0;
    $5 = $2 + 84 | 0;
   }
   $13 = Math_fround($13 + Math_fround(Math_fround(HEAPF32[$5 >> 2]) + Math_fround(HEAPF32[$7 >> 2])));
   label$26 : {
    label$27 : {
     if ((($4 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
      break label$27
     }
     $4 = $2 + 172 | 0;
     break label$26;
    }
    $4 = $2 + 168 | 0;
   }
   HEAPF32[$4 >> 2] = $13;
   label$28 : {
    label$29 : {
     label$30 : {
      label$31 : {
       label$32 : {
        label$33 : {
         $4 = HEAP32[(HEAP32[($1 + 12 | 0) >> 2] | 0) >> 2] | 0;
         $5 = HEAP32[($4 + 8 | 0) >> 2] | 0;
         $7 = HEAP32[$2 >> 2] | 0;
         if ($5 >>> 0 <= $7 >>> 0) {
          break label$33
         }
         label$34 : {
          $4 = (HEAP32[$4 >> 2] | 0) + Math_imul($7, 288) | 0;
          if (Math_fround(HEAPF32[($4 + 128 | 0) >> 2]) != Math_fround(0.0)) {
           break label$34
          }
          if (Math_fround(HEAPF32[($4 + 132 | 0) >> 2]) == Math_fround(0.0)) {
           break label$29
          }
         }
         if (!(HEAPU8[(HEAP32[($1 + 20 | 0) >> 2] | 0) >> 0] | 0)) {
          break label$30
         }
         $13 = Math_fround(HEAPF32[($2 + 132 | 0) >> 2]);
         if ((HEAPU8[(HEAP32[($1 + 4 | 0) >> 2] | 0) >> 0] | 0 | 2 | 0 | 0) != (3 | 0)) {
          break label$32
         }
         $14 = Math_fround(HEAPF32[($2 + 148 | 0) >> 2]);
         break label$31;
        }
        core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $7 | 0, $5 | 0);
        abort();
       }
       $14 = Math_fround(HEAPF32[($2 + 144 | 0) >> 2]);
      }
      if ($13 > $14) {
       break label$29
      }
     }
     $7 = 0;
     if (!(HEAPU8[(HEAP32[($1 + 24 | 0) >> 2] | 0) >> 0] | 0)) {
      break label$28
     }
     $13 = Math_fround(HEAPF32[($2 + 132 | 0) >> 2]);
     label$35 : {
      label$36 : {
       if ((HEAPU8[(HEAP32[($1 + 4 | 0) >> 2] | 0) >> 0] | 0 | 2 | 0 | 0) != (3 | 0)) {
        break label$36
       }
       $14 = Math_fround(HEAPF32[($2 + 148 | 0) >> 2]);
       break label$35;
      }
      $14 = Math_fround(HEAPF32[($2 + 144 | 0) >> 2]);
     }
     if ($13 < $14 ^ 1 | 0) {
      break label$1
     }
    }
    HEAP8[($2 + 188 | 0) >> 0] = 1;
    $7 = 0;
   }
  }
  HEAP32[($0 + 4 | 0) >> 2] = $4;
  HEAP32[$0 >> 2] = $7;
  global$0 = $3 + 48 | 0;
 }
 
 function std__collections__hash__map__HashMap_K_2cV_2cS___insert__hca58c4e73e4e0c5d($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $21 = 0, $21$hi = 0, $22$hi = 0, $22 = 0, $9 = 0, $23$hi = 0, $8 = 0, $24$hi = 0, $23 = 0, $3 = 0, $24 = 0, $14 = 0, $16 = 0, $25$hi = 0, $25 = 0, $19 = 0, $13 = 0, $109 = 0, $111 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $26$hi = 0, $15 = 0, $18 = 0, $112 = 0, $113 = 0, $114 = 0, $10 = 0, $20 = 0, $45 = 0, $50 = 0, $58 = 0, $67 = 0, $94$hi = 0, $96 = 0, $96$hi = 0, $100 = 0, $100$hi = 0, $103 = 0, $103$hi = 0, $106 = 0, $106$hi = 0, $110 = 0, $110$hi = 0, $115 = 0, $115$hi = 0, $118 = 0, $118$hi = 0, $26 = 0, $122 = 0, $122$hi = 0, $125$hi = 0, $132 = 0, $132$hi = 0, $138 = 0, $138$hi = 0, $140 = 0, $140$hi = 0, $142$hi = 0, $148 = 0, $148$hi = 0, $154 = 0, $154$hi = 0, $157 = 0, $157$hi = 0, $158 = 0, $158$hi = 0, $160$hi = 0, $165 = 0, $165$hi = 0, $172 = 0, $172$hi = 0, $173 = 0, $173$hi = 0, $175$hi = 0, $180 = 0, $180$hi = 0, $187 = 0, $187$hi = 0, $188 = 0, $188$hi = 0, $190$hi = 0, $195 = 0, $195$hi = 0, $198$hi = 0, $200 = 0, $200$hi = 0, $202$hi = 0, $207 = 0, $207$hi = 0, $213$hi = 0, $116 = 0, $216 = 0, $216$hi = 0, $217 = 0, $217$hi = 0, $219 = 0, $219$hi = 0, $220 = 0, $220$hi = 0, $222$hi = 0, $11 = 0, $12 = 0, $17 = 0;
  $3 = global$0 - 80 | 0;
  global$0 = $3;
  $4 = HEAP32[($1 + 12 | 0) >> 2] | 0;
  $5 = HEAP32[($1 + 8 | 0) >> 2] | 0;
  $6 = HEAP32[($1 + 4 | 0) >> 2] | 0;
  $7 = HEAP32[$1 >> 2] | 0;
  $1 = $3 + 48 | 0;
  i64toi32_i32$2 = $0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $21 = i64toi32_i32$0;
  $21$hi = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = 1952801890;
  i64toi32_i32$3 = 2037671283;
  i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
  $45 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $1;
  HEAP32[i64toi32_i32$2 >> 2] = $45;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
  $8 = $3 + 40 | 0;
  i64toi32_i32$0 = i64toi32_i32$1;
  i64toi32_i32$0 = i64toi32_i32$1;
  i64toi32_i32$1 = $21;
  i64toi32_i32$2 = 1685025377;
  i64toi32_i32$3 = 1852075885;
  i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
  $50 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = $8;
  HEAP32[i64toi32_i32$1 >> 2] = $50;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
  $9 = ($3 + 8 | 0) + 24 | 0;
  i64toi32_i32$0 = $0;
  i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
  $22 = i64toi32_i32$2;
  $22$hi = i64toi32_i32$1;
  i64toi32_i32$0 = i64toi32_i32$2;
  i64toi32_i32$2 = 1819895653;
  i64toi32_i32$3 = 1852142177;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $58 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $9;
  HEAP32[i64toi32_i32$0 >> 2] = $58;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$0 = $3;
  i64toi32_i32$2 = 0;
  HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 60 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $21$hi;
  HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = $21;
  HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $22;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$1 = $22;
  i64toi32_i32$0 = 1936682341;
  i64toi32_i32$3 = 1886610805;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $67 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = $3;
  HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = $67;
  HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = $7;
  $std__collections__hash__map__DefaultHasher_20as_20core__hash__Hasher___write__h7303af2f85960aff(i64toi32_i32$1 + 8 | 0 | 0, i64toi32_i32$1 + 76 | 0 | 0);
  HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = $6;
  $std__collections__hash__map__DefaultHasher_20as_20core__hash__Hasher___write__h7303af2f85960aff(i64toi32_i32$1 + 8 | 0 | 0, i64toi32_i32$1 + 76 | 0 | 0);
  HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = $5;
  $std__collections__hash__map__DefaultHasher_20as_20core__hash__Hasher___write__h7303af2f85960aff(i64toi32_i32$1 + 8 | 0 | 0, i64toi32_i32$1 + 76 | 0 | 0);
  HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = $4;
  $std__collections__hash__map__DefaultHasher_20as_20core__hash__Hasher___write__h7303af2f85960aff(i64toi32_i32$1 + 8 | 0 | 0, i64toi32_i32$1 + 76 | 0 | 0);
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 56;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $112 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $112 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $94$hi = i64toi32_i32$0;
  i64toi32_i32$1 = $3;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] | 0;
  $96 = i64toi32_i32$0;
  $96$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $94$hi;
  i64toi32_i32$1 = $112;
  i64toi32_i32$0 = $96$hi;
  i64toi32_i32$3 = $96;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $21 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $21$hi = i64toi32_i32$0;
  i64toi32_i32$2 = $1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $100 = i64toi32_i32$0;
  $100$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $21$hi;
  i64toi32_i32$2 = $21;
  i64toi32_i32$0 = $100$hi;
  i64toi32_i32$3 = $100;
  i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
  $22 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $22$hi = i64toi32_i32$0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($22 | 0, i64toi32_i32$0 | 0, 16 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $103 = i64toi32_i32$2;
  $103$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $22$hi;
  i64toi32_i32$1 = $9;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  $106 = i64toi32_i32$0;
  $106$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $22$hi;
  i64toi32_i32$1 = $22;
  i64toi32_i32$0 = $106$hi;
  i64toi32_i32$3 = $106;
  i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $22 = i64toi32_i32$4;
  $22$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $103$hi;
  i64toi32_i32$2 = $103;
  i64toi32_i32$1 = $22$hi;
  i64toi32_i32$3 = i64toi32_i32$4;
  i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
  $23 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
  $23$hi = i64toi32_i32$1;
  $110 = $23;
  $110$hi = i64toi32_i32$1;
  i64toi32_i32$5 = $8;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
  $24 = i64toi32_i32$1;
  $24$hi = i64toi32_i32$2;
  i64toi32_i32$5 = $3;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 24 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 28 | 0) >> 2] | 0;
  $115 = i64toi32_i32$2;
  $115$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $24$hi;
  i64toi32_i32$5 = $24;
  i64toi32_i32$2 = $115$hi;
  i64toi32_i32$3 = $115;
  i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $25 = i64toi32_i32$0;
  $25$hi = i64toi32_i32$4;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, 32 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $118 = i64toi32_i32$5;
  $118$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $110$hi;
  i64toi32_i32$1 = $110;
  i64toi32_i32$5 = $118$hi;
  i64toi32_i32$3 = $118;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $26 = i64toi32_i32$2;
  $26$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$0 = $26$hi;
  i64toi32_i32$4 = i64toi32_i32$2;
  i64toi32_i32$1 = $21$hi;
  i64toi32_i32$3 = $21;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $122 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $122$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $22$hi;
  i64toi32_i32$1 = $24$hi;
  i64toi32_i32$4 = 0;
  i64toi32_i32$4 = __wasm_rotl_i64($24 | 0, i64toi32_i32$1 | 0, 13 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $125$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $25$hi;
  i64toi32_i32$1 = $125$hi;
  i64toi32_i32$0 = i64toi32_i32$4;
  i64toi32_i32$4 = $25$hi;
  i64toi32_i32$3 = $25;
  i64toi32_i32$4 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
  $21 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $21$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $22$hi;
  i64toi32_i32$1 = $22;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$3 = $21;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $22 = i64toi32_i32$5;
  $22$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $21$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($21 | 0, i64toi32_i32$2 | 0, 17 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $132 = i64toi32_i32$1;
  $132$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $22$hi;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$1 = $132$hi;
  i64toi32_i32$3 = $132;
  i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
  $21 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  $21$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $122$hi;
  i64toi32_i32$2 = $122;
  i64toi32_i32$4 = $21$hi;
  i64toi32_i32$3 = $21;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $24 = i64toi32_i32$0;
  $24$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $21$hi;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($21 | 0, i64toi32_i32$5 | 0, 13 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $138 = i64toi32_i32$2;
  $138$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $24$hi;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$2 = $138$hi;
  i64toi32_i32$3 = $138;
  i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
  $21 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $21$hi = i64toi32_i32$2;
  $140 = $21;
  $140$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $23$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($23 | 0, i64toi32_i32$2 | 0, 21 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $142$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $26$hi;
  i64toi32_i32$2 = $142$hi;
  i64toi32_i32$5 = i64toi32_i32$1;
  i64toi32_i32$1 = $26$hi;
  i64toi32_i32$3 = $26;
  i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
  $23 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  $23$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $22$hi;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64($22 | 0, i64toi32_i32$1 | 0, 32 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$2 = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 255;
  i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
  $148 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $148$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $23$hi;
  i64toi32_i32$1 = $23;
  i64toi32_i32$2 = $148$hi;
  i64toi32_i32$3 = $148;
  i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $22 = i64toi32_i32$4;
  $22$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $140$hi;
  i64toi32_i32$5 = $140;
  i64toi32_i32$1 = $22$hi;
  i64toi32_i32$3 = i64toi32_i32$4;
  i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $25 = i64toi32_i32$2;
  $25$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $21$hi;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64($21 | 0, i64toi32_i32$4 | 0, 17 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $154 = i64toi32_i32$5;
  $154$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $25$hi;
  i64toi32_i32$0 = i64toi32_i32$2;
  i64toi32_i32$5 = $154$hi;
  i64toi32_i32$3 = $154;
  i64toi32_i32$5 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
  $21 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $21$hi = i64toi32_i32$5;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = __wasm_rotl_i64($21 | 0, i64toi32_i32$5 | 0, 13 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $157 = i64toi32_i32$0;
  $157$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $21$hi;
  $158 = $21;
  $158$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $23$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = __wasm_rotl_i64($23 | 0, i64toi32_i32$5 | 0, 16 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $160$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $22$hi;
  i64toi32_i32$5 = $160$hi;
  i64toi32_i32$4 = i64toi32_i32$0;
  i64toi32_i32$0 = $22$hi;
  i64toi32_i32$3 = $22;
  i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
  $22 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
  $22$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $24$hi;
  i64toi32_i32$4 = 0;
  i64toi32_i32$4 = __wasm_rotl_i64($24 | 0, i64toi32_i32$0 | 0, 32 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $165 = i64toi32_i32$4;
  $165$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $22$hi;
  i64toi32_i32$5 = $22;
  i64toi32_i32$4 = $165$hi;
  i64toi32_i32$3 = $165;
  i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $23 = i64toi32_i32$1;
  $23$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $158$hi;
  i64toi32_i32$0 = $158;
  i64toi32_i32$5 = $23$hi;
  i64toi32_i32$3 = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $21 = i64toi32_i32$4;
  $21$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $157$hi;
  i64toi32_i32$2 = $157;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$3 = i64toi32_i32$4;
  i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
  $24 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
  $24$hi = i64toi32_i32$0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($24 | 0, i64toi32_i32$0 | 0, 17 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $172 = i64toi32_i32$2;
  $172$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $24$hi;
  $173 = $24;
  $173$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $22$hi;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($22 | 0, i64toi32_i32$0 | 0, 21 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $175$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $23$hi;
  i64toi32_i32$0 = $175$hi;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = $23$hi;
  i64toi32_i32$3 = $23;
  i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
  $22 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $22$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $25$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($25 | 0, i64toi32_i32$2 | 0, 32 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $180 = i64toi32_i32$1;
  $180$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $22$hi;
  i64toi32_i32$0 = $22;
  i64toi32_i32$1 = $180$hi;
  i64toi32_i32$3 = $180;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $23 = i64toi32_i32$5;
  $23$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $173$hi;
  i64toi32_i32$2 = $173;
  i64toi32_i32$0 = $23$hi;
  i64toi32_i32$3 = i64toi32_i32$5;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
  i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $24 = i64toi32_i32$1;
  $24$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $172$hi;
  i64toi32_i32$4 = $172;
  i64toi32_i32$2 = $24$hi;
  i64toi32_i32$3 = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
  $25 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
  $25$hi = i64toi32_i32$2;
  i64toi32_i32$4 = 0;
  i64toi32_i32$4 = __wasm_rotl_i64($25 | 0, i64toi32_i32$2 | 0, 13 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $187 = i64toi32_i32$4;
  $187$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $25$hi;
  $188 = $25;
  $188$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $22$hi;
  i64toi32_i32$4 = 0;
  i64toi32_i32$4 = __wasm_rotl_i64($22 | 0, i64toi32_i32$2 | 0, 16 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $190$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $23$hi;
  i64toi32_i32$2 = $190$hi;
  i64toi32_i32$5 = i64toi32_i32$4;
  i64toi32_i32$4 = $23$hi;
  i64toi32_i32$3 = $23;
  i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
  $22 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  $22$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $21$hi;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64($21 | 0, i64toi32_i32$4 | 0, 32 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $195 = i64toi32_i32$5;
  $195$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $22$hi;
  i64toi32_i32$2 = $22;
  i64toi32_i32$5 = $195$hi;
  i64toi32_i32$3 = $195;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $21 = i64toi32_i32$0;
  $21$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $188$hi;
  i64toi32_i32$4 = $188;
  i64toi32_i32$2 = $21$hi;
  i64toi32_i32$3 = i64toi32_i32$0;
  i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $198$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $187$hi;
  i64toi32_i32$1 = $187;
  i64toi32_i32$4 = $198$hi;
  i64toi32_i32$3 = i64toi32_i32$5;
  i64toi32_i32$4 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
  $23 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
  $23$hi = i64toi32_i32$4;
  $200 = $23;
  $200$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $22$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($22 | 0, i64toi32_i32$4 | 0, 21 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $202$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $21$hi;
  i64toi32_i32$4 = $202$hi;
  i64toi32_i32$0 = i64toi32_i32$1;
  i64toi32_i32$1 = $21$hi;
  i64toi32_i32$3 = $21;
  i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
  $21 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $21$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $24$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = __wasm_rotl_i64($24 | 0, i64toi32_i32$1 | 0, 32 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $207 = i64toi32_i32$0;
  $207$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $21$hi;
  i64toi32_i32$4 = $21;
  i64toi32_i32$0 = $207$hi;
  i64toi32_i32$3 = $207;
  i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $22 = i64toi32_i32$2;
  $22$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $200$hi;
  i64toi32_i32$1 = $200;
  i64toi32_i32$4 = $22$hi;
  i64toi32_i32$3 = i64toi32_i32$2;
  i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
  i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $24 = i64toi32_i32$0;
  $24$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $21$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($21 | 0, i64toi32_i32$2 | 0, 16 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $213$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $22$hi;
  i64toi32_i32$2 = $213$hi;
  i64toi32_i32$5 = i64toi32_i32$1;
  i64toi32_i32$1 = $22$hi;
  i64toi32_i32$3 = $22;
  i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
  $116 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64($116 | 0, i64toi32_i32$1 | 0, 21 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $216 = i64toi32_i32$5;
  $216$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $24$hi;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$5 = $216$hi;
  i64toi32_i32$3 = $216;
  i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
  $217 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $217$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $23$hi;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($23 | 0, i64toi32_i32$5 | 0, 17 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $219 = i64toi32_i32$2;
  $219$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $217$hi;
  i64toi32_i32$1 = $217;
  i64toi32_i32$2 = $219$hi;
  i64toi32_i32$3 = $219;
  i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
  $220 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $220$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $24$hi;
  i64toi32_i32$5 = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $113 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $113 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
  }
  $222$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $220$hi;
  i64toi32_i32$2 = $220;
  i64toi32_i32$5 = $222$hi;
  i64toi32_i32$3 = $113;
  i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
  $21 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $21$hi = i64toi32_i32$5;
  i64toi32_i32$1 = $21;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 25;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $114 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
   $114 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $10 = $114;
  $1 = $10 & 127 | 0;
  $1 = $1 << 8 | 0 | $1 | 0;
  $11 = $1 << 16 | 0 | $1 | 0;
  $12 = $0 + 16 | 0;
  $13 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $14 = HEAP32[($0 + 20 | 0) >> 2] | 0;
  $15 = 0;
  $16 = HEAP32[($0 + 16 | 0) >> 2] | 0;
  i64toi32_i32$2 = $21$hi;
  $17 = $21;
  $8 = $16 & $21 | 0;
  $1 = $8;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : while (1) {
       label$6 : {
        $109 = $14 + $1 | 0;
        $18 = HEAPU8[$109 >> 0] | 0 | ((HEAPU8[($109 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($109 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($109 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        $9 = $18 ^ $11 | 0;
        $19 = (($9 ^ -1 | 0) & ($9 + -16843009 | 0) | 0) & -2139062144 | 0;
        if (!$19) {
         break label$6
        }
        label$7 : while (1) {
         label$8 : {
          $20 = (((__wasm_ctz_i32($19 | 0) | 0) >>> 3 | 0) + $1 | 0) & $16 | 0;
          $9 = $13 + Math_imul($20, 20) | 0;
          if (($7 | 0) != (HEAP32[$9 >> 2] | 0 | 0)) {
           break label$8
          }
          if (($6 | 0) != (HEAP32[($9 + 4 | 0) >> 2] | 0 | 0)) {
           break label$8
          }
          if (($5 | 0) != (HEAP32[($9 + 8 | 0) >> 2] | 0 | 0)) {
           break label$8
          }
          if (($4 | 0) == (HEAP32[($9 + 12 | 0) >> 2] | 0 | 0)) {
           break label$4
          }
         }
         $19 = ($19 + -1 | 0) & $19 | 0;
         if ($19) {
          continue label$7
         }
         break label$7;
        };
       }
       $15 = $15 + 4 | 0;
       $1 = ($15 + $1 | 0) & $16 | 0;
       if (!(($18 & ($18 << 1 | 0) | 0) & -2139062144 | 0)) {
        continue label$5
       }
       break label$5;
      };
      HEAP32[($3 + 8 | 0) >> 2] = $0;
      if (!(HEAP32[($0 + 28 | 0) >> 2] | 0)) {
       break label$3
      }
      break label$2;
     }
     HEAP32[(($13 + Math_imul($20, 20) | 0) + 16 | 0) >> 2] = $2;
     break label$1;
    }
    hashbrown__raw__RawTable_T___reserve_rehash__h182d01c1eace4354($12 | 0, 1 | 0, $3 + 8 | 0 | 0, 1 | 0) | 0;
    $16 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    $8 = $16 & $17 | 0;
    $14 = HEAP32[($0 + 20 | 0) >> 2] | 0;
   }
   $1 = 4;
   label$9 : while (1) {
    $9 = $8;
    $8 = ($9 + $1 | 0) & $16 | 0;
    $1 = $1 + 4 | 0;
    $111 = $14 + $9 | 0;
    $13 = (HEAPU8[$111 >> 0] | 0 | ((HEAPU8[($111 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($111 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($111 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0) & -2139062144 | 0;
    if (!$13) {
     continue label$9
    }
    break label$9;
   };
   label$10 : {
    $1 = (((__wasm_ctz_i32($13 | 0) | 0) >>> 3 | 0) + $9 | 0) & $16 | 0;
    $8 = HEAP8[($14 + $1 | 0) >> 0] | 0;
    if (($8 | 0) < (0 | 0)) {
     break label$10
    }
    $1 = (__wasm_ctz_i32((HEAP32[$14 >> 2] | 0) & -2139062144 | 0 | 0) | 0) >>> 3 | 0;
    $8 = HEAPU8[($14 + $1 | 0) >> 0] | 0;
   }
   $9 = $0 + 28 | 0;
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) - ($8 & 1 | 0) | 0;
   $8 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   $9 = $10 & 127 | 0;
   HEAP8[($14 + $1 | 0) >> 0] = $9;
   HEAP8[(($14 + (($1 + -4 | 0) & $16 | 0) | 0) + 4 | 0) >> 0] = $9;
   $1 = $8 + Math_imul($1, 20) | 0;
   HEAP32[($1 + 16 | 0) >> 2] = $2;
   HEAP32[($1 + 12 | 0) >> 2] = $4;
   HEAP32[($1 + 8 | 0) >> 2] = $5;
   HEAP32[($1 + 4 | 0) >> 2] = $6;
   HEAP32[$1 >> 2] = $7;
   $1 = $0 + 32 | 0;
   HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1 | 0;
  }
  global$0 = $3 + 80 | 0;
 }
 
 function core__str__slice_error_fail__h65b601301310b052($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $8 = 0, $6 = 0, $9 = 0, $5 = 0, $7 = 0, i64toi32_i32$0 = 0;
  $4 = global$0 - 112 | 0;
  global$0 = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $3;
  HEAP32[($4 + 8 | 0) >> 2] = $2;
  $5 = 1;
  $6 = $1;
  label$1 : {
   if ($1 >>> 0 < 257 >>> 0) {
    break label$1
   }
   $7 = 0 - $1 | 0;
   $8 = 256;
   label$2 : {
    label$3 : while (1) {
     label$4 : {
      if ($8 >>> 0 >= $1 >>> 0) {
       break label$4
      }
      if ((HEAP8[($0 + $8 | 0) >> 0] | 0 | 0) > (-65 | 0)) {
       break label$2
      }
     }
     $6 = $8 + -1 | 0;
     $5 = 0;
     if (($8 | 0) == (1 | 0)) {
      break label$1
     }
     $9 = $7 + $8 | 0;
     $8 = $6;
     if (($9 | 0) != (1 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   $5 = 0;
   $6 = $8;
  }
  HEAP32[($4 + 20 | 0) >> 2] = $6;
  HEAP32[($4 + 16 | 0) >> 2] = $0;
  HEAP32[($4 + 28 | 0) >> 2] = $5 ? 0 : 5;
  HEAP32[($4 + 24 | 0) >> 2] = $5 ? 1053644 : 1060778;
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       $8 = $2 >>> 0 > $1 >>> 0;
       if ($8) {
        break label$9
       }
       if ($3 >>> 0 > $1 >>> 0) {
        break label$9
       }
       if ($2 >>> 0 > $3 >>> 0) {
        break label$6
       }
       label$10 : {
        label$11 : {
         if (!$2) {
          break label$11
         }
         if (($1 | 0) == ($2 | 0)) {
          break label$11
         }
         if ($1 >>> 0 <= $2 >>> 0) {
          break label$10
         }
         if ((HEAP8[($0 + $2 | 0) >> 0] | 0 | 0) < (-64 | 0)) {
          break label$10
         }
        }
        $2 = $3;
       }
       HEAP32[($4 + 32 | 0) >> 2] = $2;
       if (!$2) {
        break label$8
       }
       if (($2 | 0) == ($1 | 0)) {
        break label$8
       }
       $9 = $1 + 1 | 0;
       label$12 : {
        label$13 : {
         label$14 : while (1) {
          label$15 : {
           if ($2 >>> 0 >= $1 >>> 0) {
            break label$15
           }
           if ((HEAP8[($0 + $2 | 0) >> 0] | 0 | 0) > (-65 | 0)) {
            break label$13
           }
          }
          $8 = $2 + -1 | 0;
          if (($2 | 0) == (1 | 0)) {
           break label$12
          }
          $6 = ($9 | 0) == ($2 | 0);
          $2 = $8;
          if (!$6) {
           continue label$14
          }
          break label$12;
         };
        }
        $8 = $2;
       }
       if (($8 | 0) != ($1 | 0)) {
        break label$7
       }
       break label$5;
      }
      HEAP32[($4 + 40 | 0) >> 2] = $8 ? $2 : $3;
      HEAP32[(($4 + 72 | 0) + 20 | 0) >> 2] = 76;
      HEAP32[($4 + 84 | 0) >> 2] = 76;
      HEAP32[(($4 + 48 | 0) + 20 | 0) >> 2] = 3;
      HEAP32[($4 + 76 | 0) >> 2] = 75;
      i64toi32_i32$0 = 0;
      HEAP32[($4 + 52 | 0) >> 2] = 3;
      HEAP32[($4 + 56 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($4 + 48 | 0) >> 2] = 1060816;
      HEAP32[($4 + 88 | 0) >> 2] = $4 + 24 | 0;
      HEAP32[($4 + 80 | 0) >> 2] = $4 + 16 | 0;
      HEAP32[($4 + 72 | 0) >> 2] = $4 + 40 | 0;
      HEAP32[($4 + 64 | 0) >> 2] = $4 + 72 | 0;
      core__panicking__panic_fmt__h2daf88b2616ca2b2($4 + 48 | 0 | 0, 1060840 | 0);
      abort();
     }
     $8 = $2;
     if (($2 | 0) == ($1 | 0)) {
      break label$5
     }
    }
    $6 = 1;
    label$16 : {
     label$17 : {
      $9 = $0 + $8 | 0;
      $2 = HEAP8[$9 >> 0] | 0;
      if (($2 | 0) <= (-1 | 0)) {
       break label$17
      }
      HEAP32[($4 + 36 | 0) >> 2] = $2 & 255 | 0;
      $2 = $4 + 40 | 0;
      break label$16;
     }
     $5 = 0;
     $6 = $0 + $1 | 0;
     $1 = $6;
     label$18 : {
      if (($9 + 1 | 0 | 0) == ($1 | 0)) {
       break label$18
      }
      $1 = $9 + 2 | 0;
      $5 = (HEAPU8[($9 + 1 | 0) >> 0] | 0) & 63 | 0;
     }
     $9 = $2 & 31 | 0;
     label$19 : {
      label$20 : {
       label$21 : {
        if (($2 & 255 | 0) >>> 0 <= 223 >>> 0) {
         break label$21
        }
        $0 = 0;
        $7 = $6;
        label$22 : {
         if (($1 | 0) == ($6 | 0)) {
          break label$22
         }
         $7 = $1 + 1 | 0;
         $0 = (HEAPU8[$1 >> 0] | 0) & 63 | 0;
        }
        $1 = $0 | ($5 << 6 | 0) | 0;
        if (($2 & 255 | 0) >>> 0 < 240 >>> 0) {
         break label$20
        }
        $2 = 0;
        label$23 : {
         if (($7 | 0) == ($6 | 0)) {
          break label$23
         }
         $2 = (HEAPU8[$7 >> 0] | 0) & 63 | 0;
        }
        $1 = $1 << 6 | 0 | (($9 << 18 | 0) & 1835008 | 0) | 0 | $2 | 0;
        if (($1 | 0) == (1114112 | 0)) {
         break label$5
        }
        break label$19;
       }
       $1 = $5 | ($9 << 6 | 0) | 0;
       break label$19;
      }
      $1 = $1 | ($9 << 12 | 0) | 0;
     }
     HEAP32[($4 + 36 | 0) >> 2] = $1;
     $6 = 1;
     $2 = $4 + 40 | 0;
     if ($1 >>> 0 < 128 >>> 0) {
      break label$16
     }
     $6 = 2;
     if ($1 >>> 0 < 2048 >>> 0) {
      break label$16
     }
     $6 = $1 >>> 0 < 65536 >>> 0 ? 3 : 4;
    }
    HEAP32[($4 + 40 | 0) >> 2] = $8;
    HEAP32[($4 + 44 | 0) >> 2] = $6 + $8 | 0;
    HEAP32[($4 + 108 | 0) >> 2] = 76;
    HEAP32[($4 + 100 | 0) >> 2] = 76;
    HEAP32[(($4 + 72 | 0) + 20 | 0) >> 2] = 77;
    HEAP32[($4 + 84 | 0) >> 2] = 78;
    HEAP32[(($4 + 48 | 0) + 20 | 0) >> 2] = 5;
    HEAP32[($4 + 88 | 0) >> 2] = $2;
    HEAP32[($4 + 76 | 0) >> 2] = 75;
    i64toi32_i32$0 = 0;
    HEAP32[($4 + 52 | 0) >> 2] = 5;
    HEAP32[($4 + 56 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($4 + 48 | 0) >> 2] = 1060992;
    HEAP32[($4 + 104 | 0) >> 2] = $4 + 24 | 0;
    HEAP32[($4 + 96 | 0) >> 2] = $4 + 16 | 0;
    HEAP32[($4 + 80 | 0) >> 2] = $4 + 36 | 0;
    HEAP32[($4 + 72 | 0) >> 2] = $4 + 32 | 0;
    HEAP32[($4 + 64 | 0) >> 2] = $4 + 72 | 0;
    core__panicking__panic_fmt__h2daf88b2616ca2b2($4 + 48 | 0 | 0, 1061032 | 0);
    abort();
   }
   HEAP32[($4 + 100 | 0) >> 2] = 76;
   HEAP32[(($4 + 72 | 0) + 20 | 0) >> 2] = 76;
   HEAP32[($4 + 84 | 0) >> 2] = 75;
   HEAP32[(($4 + 48 | 0) + 20 | 0) >> 2] = 4;
   HEAP32[($4 + 76 | 0) >> 2] = 75;
   i64toi32_i32$0 = 0;
   HEAP32[($4 + 52 | 0) >> 2] = 4;
   HEAP32[($4 + 56 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($4 + 48 | 0) >> 2] = 1060892;
   HEAP32[($4 + 96 | 0) >> 2] = $4 + 24 | 0;
   HEAP32[($4 + 88 | 0) >> 2] = $4 + 16 | 0;
   HEAP32[($4 + 80 | 0) >> 2] = $4 + 12 | 0;
   HEAP32[($4 + 72 | 0) >> 2] = $4 + 8 | 0;
   HEAP32[($4 + 64 | 0) >> 2] = $4 + 72 | 0;
   core__panicking__panic_fmt__h2daf88b2616ca2b2($4 + 48 | 0 | 0, 1060924 | 0);
   abort();
  }
  core__panicking__panic__h2d0bc53a963fb996(1060540 | 0);
  abort();
 }
 
 function stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__h02902cd429c6e7a9($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $8 = 0, $15 = Math_fround(0), $11 = 0, $3 = 0, $16 = Math_fround(0), $10 = 0, $5 = 0, $6 = 0, $13 = 0, $9 = 0, $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7 = 0, i64toi32_i32$2 = 0, $12 = 0, $14 = Math_fround(0), $233 = 0, $236 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f32$1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$2 = Math_fround(0), wasm2js_i32$1 = 0;
  $3 = global$0 - 48 | 0;
  global$0 = $3;
  label$1 : {
   label$2 : {
    $4 = HEAP32[(HEAP32[$1 >> 2] | 0) >> 2] | 0;
    $5 = HEAP32[($4 + 8 | 0) >> 2] | 0;
    $6 = HEAP32[$2 >> 2] | 0;
    if ($5 >>> 0 <= $6 >>> 0) {
     break label$2
    }
    $7 = HEAP32[$4 >> 2] | 0;
    $8 = $7 + Math_imul($6, 288) | 0;
    $9 = HEAPU8[($8 + 207 | 0) >> 0] | 0;
    $10 = HEAP32[($8 + 192 | 0) >> 2] | 0;
    $11 = HEAP32[($8 + 136 | 0) >> 2] | 0;
    $14 = Math_fround(HEAPF32[($8 + 196 | 0) >> 2]);
    $15 = Math_fround(HEAPF32[($8 + 140 | 0) >> 2]);
    $8 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    label$3 : {
     $12 = HEAPU8[(HEAP32[($1 + 8 | 0) >> 2] | 0) >> 0] | 0;
     if (($12 | 2 | 0 | 0) != (3 | 0)) {
      break label$3
     }
     $13 = HEAP32[($8 + 8 | 0) >> 2] | 0;
     $16 = Math_fround(HEAPF32[($8 + 12 | 0) >> 2]);
     break label$1;
    }
    $16 = Math_fround(HEAPF32[($8 + 4 | 0) >> 2]);
    $13 = HEAP32[$8 >> 2] | 0;
    break label$1;
   }
   core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $6 | 0, $5 | 0);
   abort();
  }
  label$4 : {
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       label$9 : {
        if (($11 | 0) == (2 | 0)) {
         break label$9
        }
        label$10 : {
         label$11 : {
          if (($11 | 0) != (3 | 0)) {
           break label$11
          }
          if (!$13) {
           break label$10
          }
         }
         if ($10) {
          break label$5
         }
         $8 = HEAP32[($1 + 12 | 0) >> 2] | 0;
         if ((($12 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
          break label$8
         }
         $10 = HEAP32[$8 >> 2] | 0;
         $15 = Math_fround(HEAPF32[($8 + 4 | 0) >> 2]);
         break label$7;
        }
        $15 = Math_fround($15 * $16);
       }
       HEAPF32[($2 + 132 | 0) >> 2] = $15;
       break label$6;
      }
      $15 = Math_fround(HEAPF32[($8 + 12 | 0) >> 2]);
      $10 = HEAP32[($8 + 8 | 0) >> 2] | 0;
     }
     if (($11 | 0) != (1 | 0)) {
      break label$5
     }
     if ($10) {
      break label$5
     }
     HEAPF32[($2 + 132 | 0) >> 2] = Math_fround($14 * $15);
    }
    $11 = 0;
    break label$4;
   }
   $11 = $2 + 8 | 0;
   $8 = 0;
   label$12 : {
    label$13 : {
     label$14 : {
      label$15 : {
       label$16 : {
        label$17 : {
         if (!(HEAP32[($2 + 4 | 0) >> 2] | 0)) {
          break label$17
         }
         $13 = HEAP32[(HEAP32[($1 + 16 | 0) >> 2] | 0) >> 2] | 0;
         if ($5 >>> 0 <= $13 >>> 0) {
          break label$15
         }
         $10 = 1;
         label$18 : {
          if (($9 | 0) == (5 | 0)) {
           break label$18
          }
          if ($9) {
           break label$16
          }
          if ((HEAPU8[(($7 + Math_imul($13, 288) | 0) + 206 | 0) >> 0] | 0) >>> 0 < 4 >>> 0) {
           break label$16
          }
         }
         if (!(HEAPU8[(HEAP32[($1 + 20 | 0) >> 2] | 0) >> 0] | 0)) {
          break label$16
         }
         $10 = HEAP32[($1 + 24 | 0) >> 2] | 0;
         $11 = $10 + 4 | 0;
         $10 = HEAP32[$10 >> 2] | 0;
         break label$16;
        }
        $10 = 0;
       }
       $13 = $2 + 16 | 0;
       $15 = Math_fround(HEAPF32[$11 >> 2]);
       label$19 : {
        if (!(HEAP32[($2 + 12 | 0) >> 2] | 0)) {
         break label$19
        }
        $11 = HEAP32[(HEAP32[($1 + 16 | 0) >> 2] | 0) >> 2] | 0;
        if ($5 >>> 0 <= $11 >>> 0) {
         break label$14
        }
        $8 = 1;
        label$20 : {
         if (($9 | 0) == (5 | 0)) {
          break label$20
         }
         if ($9) {
          break label$19
         }
         if ((HEAPU8[(($7 + Math_imul($11, 288) | 0) + 206 | 0) >> 0] | 0) >>> 0 < 4 >>> 0) {
          break label$19
         }
        }
        if (!(HEAPU8[(HEAP32[($1 + 28 | 0) >> 2] | 0) >> 0] | 0)) {
         break label$19
        }
        $8 = HEAP32[($1 + 24 | 0) >> 2] | 0;
        $13 = $8 + 12 | 0;
        $8 = HEAP32[($8 + 8 | 0) >> 2] | 0;
       }
       $16 = Math_fround(HEAPF32[$13 >> 2]);
       label$21 : {
        label$22 : {
         if (!$10) {
          break label$22
         }
         $11 = 1;
         if (!$8) {
          break label$21
         }
         break label$13;
        }
        $15 = (wasm2js_f32$0 = $15, wasm2js_f32$1 = Math_fround(fmaxf(Math_fround($15), Math_fround(Math_fround(HEAPF32[($2 + 24 | 0) >> 2])))), wasm2js_i32$0 = HEAP32[($2 + 20 | 0) >> 2] | 0, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
        $15 = (wasm2js_f32$0 = $15, wasm2js_f32$1 = Math_fround(fminf(Math_fround($15), Math_fround(Math_fround(HEAPF32[($2 + 40 | 0) >> 2])))), wasm2js_i32$0 = HEAP32[($2 + 36 | 0) >> 2] | 0, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
        $11 = 0;
        if ($8) {
         break label$13
        }
       }
       $16 = (wasm2js_f32$0 = $16, wasm2js_f32$1 = Math_fround(fmaxf(Math_fround($16), Math_fround(Math_fround(HEAPF32[($2 + 32 | 0) >> 2])))), wasm2js_i32$0 = HEAP32[($2 + 28 | 0) >> 2] | 0, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
       $9 = $2 + 48 | 0;
       $5 = $2 + 44 | 0;
       $16 = (wasm2js_f32$0 = $16, wasm2js_f32$1 = Math_fround(fminf(Math_fround($16), Math_fround(Math_fround(HEAPF32[$9 >> 2])))), wasm2js_i32$0 = HEAP32[$5 >> 2] | 0, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
       $8 = 0;
       break label$12;
      }
      core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $13 | 0, $5 | 0);
      abort();
     }
     core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $11 | 0, $5 | 0);
     abort();
    }
    $9 = $2 + 48 | 0;
    $5 = $2 + 44 | 0;
    $8 = 1;
   }
   HEAPF32[($3 + 28 | 0) >> 2] = $16;
   HEAP32[($3 + 24 | 0) >> 2] = $8;
   HEAPF32[($3 + 20 | 0) >> 2] = $15;
   HEAP32[($3 + 16 | 0) >> 2] = $11;
   $8 = HEAP32[($1 + 24 | 0) >> 2] | 0;
   i64toi32_i32$2 = $8 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $233 = i64toi32_i32$0;
   i64toi32_i32$0 = ($3 + 32 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $233;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $8;
   i64toi32_i32$1 = HEAP32[$8 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($8 + 4 | 0) >> 2] | 0;
   $236 = i64toi32_i32$1;
   i64toi32_i32$1 = $3;
   HEAP32[($3 + 32 | 0) >> 2] = $236;
   HEAP32[($3 + 36 | 0) >> 2] = i64toi32_i32$0;
   stretch__algo___impl_20stretch__forest__Forest___compute_internal__h1faccff9b0af78e6($3 | 0, $4 | 0, $6 | 0, $3 + 16 | 0 | 0, $3 + 32 | 0 | 0, 0 | 0);
   $8 = HEAP32[($3 + 8 | 0) >> 2] | 0;
   $11 = HEAP32[($3 + 4 | 0) >> 2] | 0;
   $4 = HEAP32[$3 >> 2] | 0;
   if (($4 | 0) == (1 | 0)) {
    break label$4
   }
   label$23 : {
    label$24 : {
     $1 = HEAPU8[(HEAP32[($1 + 8 | 0) >> 2] | 0) >> 0] | 0;
     $6 = $1 | 2 | 0;
     if (($6 | 0) != (3 | 0)) {
      break label$24
     }
     $15 = (wasm2js_scratch_store_i32(0, $8), wasm2js_scratch_load_f32());
     break label$23;
    }
    $15 = (wasm2js_scratch_store_i32(0, $11), wasm2js_scratch_load_f32());
   }
   label$25 : {
    label$26 : {
     if (($6 & 3 | 0 | 0) != (3 | 0)) {
      break label$26
     }
     $6 = HEAP32[($2 + 28 | 0) >> 2] | 0;
     $16 = Math_fround(HEAPF32[($2 + 32 | 0) >> 2]);
     break label$25;
    }
    $16 = Math_fround(HEAPF32[($2 + 24 | 0) >> 2]);
    $6 = HEAP32[($2 + 20 | 0) >> 2] | 0;
   }
   $15 = (wasm2js_f32$0 = $15, wasm2js_f32$1 = Math_fround(fmaxf(Math_fround($15), Math_fround($16))), wasm2js_i32$0 = $6, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
   label$27 : {
    label$28 : {
     if ((($1 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
      break label$28
     }
     $1 = HEAP32[$5 >> 2] | 0;
     $16 = Math_fround(HEAPF32[$9 >> 2]);
     break label$27;
    }
    $16 = Math_fround(HEAPF32[($2 + 40 | 0) >> 2]);
    $1 = HEAP32[($2 + 36 | 0) >> 2] | 0;
   }
   (wasm2js_i32$0 = $2, wasm2js_f32$0 = (wasm2js_f32$1 = $15, wasm2js_f32$2 = Math_fround(fminf(Math_fround($15), Math_fround($16))), wasm2js_i32$1 = $1, wasm2js_i32$1 ? wasm2js_f32$1 : wasm2js_f32$2)), HEAPF32[(wasm2js_i32$0 + 132 | 0) >> 2] = wasm2js_f32$0;
   label$29 : {
    if (!$4) {
     break label$29
    }
    FUNCTION_TABLE[HEAP32[$8 >> 2] | 0]($11);
    $2 = HEAP32[($8 + 4 | 0) >> 2] | 0;
    if (!$2) {
     break label$29
    }
    __rust_dealloc($11 | 0, $2 | 0, HEAP32[($8 + 8 | 0) >> 2] | 0 | 0);
   }
   $11 = 0;
  }
  HEAP32[($0 + 4 | 0) >> 2] = $8;
  HEAP32[$0 >> 2] = $11;
  global$0 = $3 + 48 | 0;
 }
 
 function stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h4070443ad7cd95b9($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $4 = 0, $3 = 0, $9 = 0, $6 = 0, $10 = 0, $7 = 0, $8 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f32$1 = Math_fround(0), wasm2js_i32$0 = 0;
  $3 = global$0 - 48 | 0;
  global$0 = $3;
  label$1 : {
   label$2 : {
    $4 = HEAPU8[(HEAP32[$1 >> 2] | 0) >> 0] | 0;
    $5 = $4 | 2 | 0;
    if (($5 | 0) != (3 | 0)) {
     break label$2
    }
    $11 = Math_fround(HEAPF32[($2 + 8 | 0) >> 2]);
    $6 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    break label$1;
   }
   $11 = Math_fround(HEAPF32[($2 + 16 | 0) >> 2]);
   $6 = HEAP32[($2 + 12 | 0) >> 2] | 0;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if (($5 & 3 | 0 | 0) != (3 | 0)) {
       break label$6
      }
      $5 = HEAP32[($2 + 20 | 0) >> 2] | 0;
      $12 = Math_fround(HEAPF32[($2 + 24 | 0) >> 2]);
      if (!$6) {
       break label$5
      }
      break label$4;
     }
     $12 = Math_fround(HEAPF32[($2 + 32 | 0) >> 2]);
     $5 = HEAP32[($2 + 28 | 0) >> 2] | 0;
     if ($6) {
      break label$4
     }
    }
    $11 = (wasm2js_f32$0 = $11, wasm2js_f32$1 = Math_fround(fmaxf(Math_fround($11), Math_fround($12))), wasm2js_i32$0 = $5, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
    $5 = 0;
    break label$3;
   }
   $5 = 1;
  }
  label$7 : {
   label$8 : {
    label$9 : {
     label$10 : {
      if ((($4 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
       break label$10
      }
      $6 = HEAP32[($2 + 36 | 0) >> 2] | 0;
      $12 = Math_fround(HEAPF32[($2 + 40 | 0) >> 2]);
      if (!$5) {
       break label$9
      }
      break label$8;
     }
     $12 = Math_fround(HEAPF32[($2 + 48 | 0) >> 2]);
     $6 = HEAP32[($2 + 44 | 0) >> 2] | 0;
     if ($5) {
      break label$8
     }
    }
    $11 = (wasm2js_f32$0 = $11, wasm2js_f32$1 = Math_fround(fminf(Math_fround($11), Math_fround($12))), wasm2js_i32$0 = $6, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
    $5 = 0;
    break label$7;
   }
   $5 = 1;
  }
  $6 = HEAP32[$2 >> 2] | 0;
  $7 = HEAP32[(HEAP32[($1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  label$11 : {
   label$12 : {
    $8 = HEAPU8[(HEAP32[($1 + 8 | 0) >> 2] | 0) >> 0] | 0;
    if (!$8) {
     break label$12
    }
    $12 = Math_fround(HEAPF32[($2 + 160 | 0) >> 2]);
    $9 = 0;
    $10 = 0;
    break label$11;
   }
   $10 = 1;
   $9 = $5;
   $12 = $11;
   $11 = Math_fround(HEAPF32[($2 + 164 | 0) >> 2]);
   $5 = 0;
  }
  HEAPF32[($3 + 28 | 0) >> 2] = $11;
  HEAP32[($3 + 24 | 0) >> 2] = $5;
  HEAPF32[($3 + 20 | 0) >> 2] = $12;
  HEAP32[($3 + 16 | 0) >> 2] = $9;
  label$13 : {
   label$14 : {
    label$15 : {
     if (!$10) {
      break label$15
     }
     $5 = HEAP32[($1 + 12 | 0) >> 2] | 0;
     $11 = Math_fround(HEAPF32[$5 >> 2]);
     $9 = HEAP32[($1 + 16 | 0) >> 2] | 0;
     $12 = Math_fround(HEAPF32[($9 + 4 | 0) >> 2]);
     $9 = HEAP32[$9 >> 2] | 0;
     break label$14;
    }
    $5 = HEAP32[($1 + 12 | 0) >> 2] | 0;
    $11 = Math_fround(HEAPF32[$5 >> 2]);
    $12 = $11;
    label$16 : {
     if ((($4 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
      break label$16
     }
     $12 = Math_fround(HEAPF32[($5 + 4 | 0) >> 2]);
    }
    label$17 : {
     if (!$8) {
      break label$17
     }
     $5 = HEAP32[($1 + 16 | 0) >> 2] | 0;
     $11 = Math_fround(HEAPF32[($5 + 12 | 0) >> 2]);
     $10 = HEAP32[($5 + 8 | 0) >> 2] | 0;
     $9 = 0;
     break label$13;
    }
    $9 = 0;
   }
   $10 = 0;
   if ((($4 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
    break label$13
   }
   $11 = Math_fround(HEAPF32[($5 + 4 | 0) >> 2]);
  }
  HEAPF32[($3 + 44 | 0) >> 2] = $11;
  HEAP32[($3 + 40 | 0) >> 2] = $10;
  HEAPF32[($3 + 36 | 0) >> 2] = $12;
  HEAP32[($3 + 32 | 0) >> 2] = $9;
  stretch__algo___impl_20stretch__forest__Forest___compute_internal__h1faccff9b0af78e6($3 | 0, $7 | 0, $6 | 0, $3 + 16 | 0 | 0, $3 + 32 | 0 | 0, 0 | 0);
  $6 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  $5 = HEAP32[($3 + 4 | 0) >> 2] | 0;
  label$18 : {
   $7 = HEAP32[$3 >> 2] | 0;
   if (($7 | 0) == (1 | 0)) {
    break label$18
   }
   label$19 : {
    label$20 : {
     $9 = HEAPU8[(HEAP32[$1 >> 2] | 0) >> 0] | 0;
     $10 = $9 | 2 | 0;
     if (($10 | 0) != (3 | 0)) {
      break label$20
     }
     $11 = (wasm2js_scratch_store_i32(0, $5), wasm2js_scratch_load_f32());
     break label$19;
    }
    $11 = (wasm2js_scratch_store_i32(0, $6), wasm2js_scratch_load_f32());
   }
   label$21 : {
    label$22 : {
     if (($10 & 3 | 0 | 0) != (3 | 0)) {
      break label$22
     }
     $10 = HEAP32[($2 + 20 | 0) >> 2] | 0;
     $12 = Math_fround(HEAPF32[($2 + 24 | 0) >> 2]);
     break label$21;
    }
    $12 = Math_fround(HEAPF32[($2 + 32 | 0) >> 2]);
    $10 = HEAP32[($2 + 28 | 0) >> 2] | 0;
   }
   $11 = (wasm2js_f32$0 = $11, wasm2js_f32$1 = Math_fround(fmaxf(Math_fround($11), Math_fround($12))), wasm2js_i32$0 = $10, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
   label$23 : {
    label$24 : {
     if ((($9 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
      break label$24
     }
     $10 = HEAP32[($2 + 36 | 0) >> 2] | 0;
     $12 = Math_fround(HEAPF32[($2 + 40 | 0) >> 2]);
     break label$23;
    }
    $12 = Math_fround(HEAPF32[($2 + 48 | 0) >> 2]);
    $10 = HEAP32[($2 + 44 | 0) >> 2] | 0;
   }
   $9 = $2 + 144 | 0;
   $11 = (wasm2js_f32$0 = $11, wasm2js_f32$1 = Math_fround(fminf(Math_fround($11), Math_fround($12))), wasm2js_i32$0 = $10, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
   label$25 : {
    label$26 : {
     if ((($4 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
      break label$26
     }
     $4 = $9;
     break label$25;
    }
    $4 = $2 + 148 | 0;
   }
   HEAPF32[$4 >> 2] = $11;
   label$27 : {
    if (!$7) {
     break label$27
    }
    FUNCTION_TABLE[HEAP32[$6 >> 2] | 0]($5);
    $4 = HEAP32[($6 + 4 | 0) >> 2] | 0;
    if (!$4) {
     break label$27
    }
    __rust_dealloc($5 | 0, $4 | 0, HEAP32[($6 + 8 | 0) >> 2] | 0 | 0);
   }
   label$28 : {
    label$29 : {
     $1 = HEAPU8[(HEAP32[$1 >> 2] | 0) >> 0] | 0;
     $4 = $1 | 2 | 0;
     if (($4 | 0) != (3 | 0)) {
      break label$29
     }
     $11 = Math_fround(HEAPF32[$9 >> 2]);
     break label$28;
    }
    $11 = Math_fround(HEAPF32[($2 + 148 | 0) >> 2]);
   }
   label$30 : {
    label$31 : {
     if (($4 & 3 | 0 | 0) != (3 | 0)) {
      break label$31
     }
     $4 = $2 + 88 | 0;
     $5 = $2 + 84 | 0;
     break label$30;
    }
    $4 = $2 + 96 | 0;
    $5 = $2 + 92 | 0;
   }
   $11 = Math_fround($11 + Math_fround(Math_fround(HEAPF32[$5 >> 2]) + Math_fround(HEAPF32[$4 >> 2])));
   label$32 : {
    label$33 : {
     if ((($1 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
      break label$33
     }
     HEAPF32[($2 + 152 | 0) >> 2] = $11;
     break label$32;
    }
    HEAPF32[($2 + 156 | 0) >> 2] = $11;
   }
   $5 = 0;
  }
  HEAP32[($0 + 4 | 0) >> 2] = $6;
  HEAP32[$0 >> 2] = $5;
  global$0 = $3 + 48 | 0;
 }
 
 function core__fmt__Formatter__pad__h68a31bee2c5b56a5($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $10 = 0, $9 = 0, $6 = 0, $7 = 0, $5 = 0, $8 = 0, $11 = 0, $14 = 0, $4 = 0, $12 = 0, $13 = 0;
  $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
            if (($4 | 0) != (1 | 0)) {
             break label$10
            }
            if ($3) {
             break label$9
            }
            break label$8;
           }
           if (!$3) {
            break label$2
           }
          }
          label$11 : {
           if (!$2) {
            break label$11
           }
           $5 = $1 + $2 | 0;
           $6 = (HEAP32[($0 + 20 | 0) >> 2] | 0) ^ -1 | 0;
           $7 = 0;
           $3 = $1;
           $8 = $3;
           label$12 : {
            label$13 : while (1) {
             $9 = $3 + 1 | 0;
             label$14 : {
              label$15 : {
               label$16 : {
                label$17 : {
                 label$18 : {
                  $10 = HEAP8[$3 >> 0] | 0;
                  if (($10 | 0) <= (-1 | 0)) {
                   break label$18
                  }
                  $10 = $10 & 255 | 0;
                  break label$17;
                 }
                 label$19 : {
                  label$20 : {
                   if (($9 | 0) == ($5 | 0)) {
                    break label$20
                   }
                   $11 = (HEAPU8[$9 >> 0] | 0) & 63 | 0;
                   $3 = $3 + 2 | 0;
                   $9 = $3;
                   break label$19;
                  }
                  $11 = 0;
                  $3 = $5;
                 }
                 $12 = $10 & 31 | 0;
                 label$21 : {
                  label$22 : {
                   label$23 : {
                    $10 = $10 & 255 | 0;
                    if ($10 >>> 0 <= 223 >>> 0) {
                     break label$23
                    }
                    if (($3 | 0) == ($5 | 0)) {
                     break label$22
                    }
                    $13 = (HEAPU8[$3 >> 0] | 0) & 63 | 0;
                    $9 = $3 + 1 | 0;
                    $14 = $9;
                    break label$21;
                   }
                   $10 = $11 | ($12 << 6 | 0) | 0;
                   break label$17;
                  }
                  $13 = 0;
                  $14 = $5;
                 }
                 $11 = $13 | ($11 << 6 | 0) | 0;
                 label$24 : {
                  if ($10 >>> 0 < 240 >>> 0) {
                   break label$24
                  }
                  if (($14 | 0) == ($5 | 0)) {
                   break label$16
                  }
                  $3 = $14 + 1 | 0;
                  $10 = (HEAPU8[$14 >> 0] | 0) & 63 | 0;
                  break label$15;
                 }
                 $10 = $11 | ($12 << 12 | 0) | 0;
                }
                $3 = $9;
                break label$14;
               }
               $10 = 0;
               $3 = $9;
              }
              $10 = $11 << 6 | 0 | (($12 << 18 | 0) & 1835008 | 0) | 0 | $10 | 0;
              if (($10 | 0) == (1114112 | 0)) {
               break label$12
              }
             }
             label$25 : {
              $6 = $6 + 1 | 0;
              if (!$6) {
               break label$25
              }
              $7 = ($7 - $8 | 0) + $3 | 0;
              $8 = $3;
              if (($5 | 0) != ($3 | 0)) {
               continue label$13
              }
              break label$12;
             }
             break label$13;
            };
            if (($10 | 0) == (1114112 | 0)) {
             break label$12
            }
            label$26 : {
             label$27 : {
              if (!$7) {
               break label$27
              }
              if (($7 | 0) == ($2 | 0)) {
               break label$27
              }
              $3 = 0;
              if ($7 >>> 0 >= $2 >>> 0) {
               break label$26
              }
              if ((HEAP8[($1 + $7 | 0) >> 0] | 0 | 0) < (-64 | 0)) {
               break label$26
              }
             }
             $3 = $1;
            }
            $2 = $3 ? $7 : $2;
            $1 = $3 ? $3 : $1;
           }
           if (!$4) {
            break label$7
           }
           break label$8;
          }
          $2 = 0;
          if (!$4) {
           break label$7
          }
         }
         $9 = 0;
         label$28 : {
          if (!$2) {
           break label$28
          }
          $10 = $2;
          $3 = $1;
          label$29 : while (1) {
           $9 = $9 + (((HEAPU8[$3 >> 0] | 0) & 192 | 0 | 0) == (128 | 0)) | 0;
           $3 = $3 + 1 | 0;
           $10 = $10 + -1 | 0;
           if ($10) {
            continue label$29
           }
           break label$29;
          };
         }
         $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
         if (($2 - $9 | 0) >>> 0 >= $7 >>> 0) {
          break label$6
         }
         $6 = 0;
         $9 = 0;
         label$30 : {
          if (!$2) {
           break label$30
          }
          $9 = 0;
          $10 = $2;
          $3 = $1;
          label$31 : while (1) {
           $9 = $9 + (((HEAPU8[$3 >> 0] | 0) & 192 | 0 | 0) == (128 | 0)) | 0;
           $3 = $3 + 1 | 0;
           $10 = $10 + -1 | 0;
           if ($10) {
            continue label$31
           }
           break label$31;
          };
         }
         $3 = ($9 - $2 | 0) + $7 | 0;
         $9 = HEAPU8[($0 + 48 | 0) >> 0] | 0;
         $9 = ($9 | 0) == (3 | 0) ? 0 : $9;
         if (!($9 & 3 | 0)) {
          break label$5
         }
         if (($9 | 0) == (2 | 0)) {
          break label$4
         }
         $8 = 0;
         $6 = $3;
         break label$3;
        }
        return FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[($0 + 24 | 0) >> 2] | 0, $1, $2) | 0 | 0;
       }
       return FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[($0 + 24 | 0) >> 2] | 0, $1, $2) | 0 | 0;
      }
      $8 = $3;
      break label$3;
     }
     $6 = $3 >>> 1 | 0;
     $8 = ($3 + 1 | 0) >>> 1 | 0;
    }
    $3 = -1;
    $9 = $0 + 4 | 0;
    $10 = $0 + 24 | 0;
    $7 = $0 + 28 | 0;
    label$32 : {
     label$33 : while (1) {
      $3 = $3 + 1 | 0;
      if ($3 >>> 0 >= $6 >>> 0) {
       break label$32
      }
      if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$7 >> 2] | 0) + 16 | 0) >> 2] | 0](HEAP32[$10 >> 2] | 0, HEAP32[$9 >> 2] | 0) | 0)) {
       continue label$33
      }
      break label$33;
     };
     return 1 | 0;
    }
    $9 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $3 = 1;
    $10 = $0 + 24 | 0;
    $6 = $0 + 28 | 0;
    if (FUNCTION_TABLE[HEAP32[((HEAP32[$6 >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[$10 >> 2] | 0, $1, $2) | 0) {
     break label$1
    }
    $10 = HEAP32[$10 >> 2] | 0;
    $3 = -1;
    $6 = (HEAP32[$6 >> 2] | 0) + 16 | 0;
    label$34 : {
     label$35 : while (1) {
      $3 = $3 + 1 | 0;
      if ($3 >>> 0 >= $8 >>> 0) {
       break label$34
      }
      if (!(FUNCTION_TABLE[HEAP32[$6 >> 2] | 0]($10, $9) | 0)) {
       continue label$35
      }
      break label$35;
     };
     return 1 | 0;
    }
    return 0 | 0;
   }
   $3 = FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[($0 + 24 | 0) >> 2] | 0, $1, $2) | 0;
  }
  return $3 | 0;
 }
 
 function core__ops__function__impls___impl_20core__ops__function__FnOnce_A__20for_20_mut_20F___call_once__h496367f6f69950fa($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $7 = 0, $4 = 0, $16 = Math_fround(0), $6 = 0, $9 = 0, $13 = 0, $14 = 0, $15 = Math_fround(0), $8 = 0, $17 = Math_fround(0), $18 = Math_fround(0), $10 = 0, $19 = Math_fround(0), $11 = 0, $20 = Math_fround(0), $12 = 0, $21 = Math_fround(0), $5 = 0, $114 = 0, $121 = 0, $128 = 0, $131 = 0, $139 = 0, $143 = 0, $147 = 0, $150 = 0, $160 = 0, $164 = 0, $168 = 0, $171 = 0, $181 = 0, $185 = 0, $189 = 0, $192 = 0, $236 = 0, $241 = 0, $246 = 0, $251 = 0, $257 = 0, $260 = 0, $266 = 0, $269 = 0, $275 = 0, $278 = 0;
  $4 = global$0 - 112 | 0;
  global$0 = $4;
  $15 = Math_fround(HEAPF32[($3 + 148 | 0) >> 2]);
  $5 = HEAP32[$2 >> 2] | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  $16 = Math_fround(HEAPF32[($2 + 4 | 0) >> 2]);
  $6 = HEAP32[$2 >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $7 = HEAP32[($3 + 144 | 0) >> 2] | 0;
     if (($7 | 0) == (3 | 0)) {
      break label$3
     }
     if (($7 | 0) != (2 | 0)) {
      break label$2
     }
     $8 = 0;
     break label$1;
    }
    $15 = Math_fround($15 * $16);
    $8 = $6;
    break label$1;
   }
   $8 = 1;
  }
  $17 = Math_fround(HEAPF32[($2 + 12 | 0) >> 2]);
  $9 = HEAP32[($2 + 8 | 0) >> 2] | 0;
  $18 = Math_fround(HEAPF32[($3 + 156 | 0) >> 2]);
  label$4 : {
   label$5 : {
    label$6 : {
     $7 = HEAP32[($3 + 152 | 0) >> 2] | 0;
     if (($7 | 0) == (3 | 0)) {
      break label$6
     }
     if (($7 | 0) != (2 | 0)) {
      break label$5
     }
     $10 = 0;
     break label$4;
    }
    $18 = Math_fround($18 * $17);
    $10 = $9;
    break label$4;
   }
   $10 = 1;
  }
  $19 = Math_fround(HEAPF32[($3 + 164 | 0) >> 2]);
  label$7 : {
   label$8 : {
    label$9 : {
     $7 = HEAP32[($3 + 160 | 0) >> 2] | 0;
     if (($7 | 0) == (3 | 0)) {
      break label$9
     }
     if (($7 | 0) != (2 | 0)) {
      break label$8
     }
     $11 = 0;
     break label$7;
    }
    $19 = Math_fround($16 * $19);
    $11 = $6;
    break label$7;
   }
   $11 = 1;
  }
  $20 = Math_fround(HEAPF32[($3 + 172 | 0) >> 2]);
  label$10 : {
   label$11 : {
    label$12 : {
     $7 = HEAP32[($3 + 168 | 0) >> 2] | 0;
     if (($7 | 0) == (3 | 0)) {
      break label$12
     }
     if (($7 | 0) != (2 | 0)) {
      break label$11
     }
     $12 = 0;
     break label$10;
    }
    $20 = Math_fround($17 * $20);
    $12 = $9;
    break label$10;
   }
   $12 = 1;
  }
  $21 = Math_fround(HEAPF32[($3 + 180 | 0) >> 2]);
  label$13 : {
   label$14 : {
    label$15 : {
     $7 = HEAP32[($3 + 176 | 0) >> 2] | 0;
     if (($7 | 0) == (3 | 0)) {
      break label$15
     }
     if (($7 | 0) != (2 | 0)) {
      break label$14
     }
     $6 = 0;
     break label$13;
    }
    $21 = Math_fround($16 * $21);
    break label$13;
   }
   $6 = 1;
  }
  $16 = Math_fround(HEAPF32[($3 + 188 | 0) >> 2]);
  label$16 : {
   label$17 : {
    label$18 : {
     $7 = HEAP32[($3 + 184 | 0) >> 2] | 0;
     if (($7 | 0) == (3 | 0)) {
      break label$18
     }
     if (($7 | 0) != (2 | 0)) {
      break label$17
     }
     $9 = 0;
     break label$16;
    }
    $16 = Math_fround($17 * $16);
    break label$16;
   }
   $9 = 1;
  }
  $7 = ($4 + 80 | 0) + 24 | 0;
  i64toi32_i32$2 = $3 + 24 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $114 = i64toi32_i32$0;
  i64toi32_i32$0 = $7;
  HEAP32[i64toi32_i32$0 >> 2] = $114;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $13 = ($4 + 80 | 0) + 16 | 0;
  i64toi32_i32$2 = $3 + 16 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $121 = i64toi32_i32$1;
  i64toi32_i32$1 = $13;
  HEAP32[i64toi32_i32$1 >> 2] = $121;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $14 = ($4 + 80 | 0) + 8 | 0;
  i64toi32_i32$2 = $3 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $128 = i64toi32_i32$0;
  i64toi32_i32$0 = $14;
  HEAP32[i64toi32_i32$0 >> 2] = $128;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $131 = i64toi32_i32$1;
  i64toi32_i32$1 = $4;
  HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] = $131;
  HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] = i64toi32_i32$0;
  stretch__geometry__Rect_T___map__h2333f270d1aed74b(i64toi32_i32$1 | 0, i64toi32_i32$1 + 80 | 0 | 0, $2 | 0);
  i64toi32_i32$2 = i64toi32_i32$2 + 56 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $139 = i64toi32_i32$0;
  i64toi32_i32$0 = $7;
  HEAP32[i64toi32_i32$0 >> 2] = $139;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3 + 48 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $143 = i64toi32_i32$1;
  i64toi32_i32$1 = $13;
  HEAP32[i64toi32_i32$1 >> 2] = $143;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $3 + 40 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $147 = i64toi32_i32$0;
  i64toi32_i32$0 = $14;
  HEAP32[i64toi32_i32$0 >> 2] = $147;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
  $150 = i64toi32_i32$1;
  i64toi32_i32$1 = $4;
  HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] = $150;
  HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] = i64toi32_i32$0;
  stretch__geometry__Rect_T___map__h857c4b6fe1834629(i64toi32_i32$1 + 32 | 0 | 0, i64toi32_i32$1 + 80 | 0 | 0, HEAP32[$1 >> 2] | 0 | 0);
  i64toi32_i32$2 = i64toi32_i32$2 + 88 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $160 = i64toi32_i32$0;
  i64toi32_i32$0 = $7;
  HEAP32[i64toi32_i32$0 >> 2] = $160;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3 + 80 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $164 = i64toi32_i32$1;
  i64toi32_i32$1 = $13;
  HEAP32[i64toi32_i32$1 >> 2] = $164;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $3 + 72 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $168 = i64toi32_i32$0;
  i64toi32_i32$0 = $14;
  HEAP32[i64toi32_i32$0 >> 2] = $168;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
  $171 = i64toi32_i32$1;
  i64toi32_i32$1 = $4;
  HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] = $171;
  HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] = i64toi32_i32$0;
  stretch__geometry__Rect_T___map__h45e68c610a717c7a(i64toi32_i32$1 + 48 | 0 | 0, i64toi32_i32$1 + 80 | 0 | 0, HEAP32[$1 >> 2] | 0 | 0);
  i64toi32_i32$2 = i64toi32_i32$2 + 120 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $181 = i64toi32_i32$0;
  i64toi32_i32$0 = $7;
  HEAP32[i64toi32_i32$0 >> 2] = $181;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3 + 112 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $185 = i64toi32_i32$1;
  i64toi32_i32$1 = $13;
  HEAP32[i64toi32_i32$1 >> 2] = $185;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $3 + 104 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $189 = i64toi32_i32$0;
  i64toi32_i32$0 = $14;
  HEAP32[i64toi32_i32$0 >> 2] = $189;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 96 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] | 0;
  $192 = i64toi32_i32$1;
  i64toi32_i32$1 = $4;
  HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] = $192;
  HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] = i64toi32_i32$0;
  stretch__geometry__Rect_T___map__hd04920c0441c8325(i64toi32_i32$1 + 64 | 0 | 0, i64toi32_i32$1 + 80 | 0 | 0, HEAP32[$1 >> 2] | 0 | 0);
  HEAPF32[($0 + 48 | 0) >> 2] = $16;
  HEAP32[($0 + 44 | 0) >> 2] = $9;
  HEAPF32[($0 + 40 | 0) >> 2] = $21;
  HEAP32[($0 + 36 | 0) >> 2] = $6;
  HEAPF32[($0 + 32 | 0) >> 2] = $20;
  HEAP32[($0 + 28 | 0) >> 2] = $12;
  HEAPF32[($0 + 24 | 0) >> 2] = $19;
  HEAP32[($0 + 20 | 0) >> 2] = $11;
  HEAPF32[($0 + 16 | 0) >> 2] = $18;
  HEAP32[($0 + 12 | 0) >> 2] = $10;
  HEAPF32[($0 + 8 | 0) >> 2] = $15;
  HEAP32[($0 + 4 | 0) >> 2] = $8;
  HEAP32[$0 >> 2] = $5;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  $236 = i64toi32_i32$0;
  i64toi32_i32$0 = $0;
  HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] = $236;
  HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $241 = i64toi32_i32$1;
  i64toi32_i32$1 = $0 + 60 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $241;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4 + 16 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $246 = i64toi32_i32$0;
  i64toi32_i32$0 = $0 + 68 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $246;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4 + 24 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $251 = i64toi32_i32$1;
  i64toi32_i32$1 = $0 + 76 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $251;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = ($4 + 32 | 0) + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $257 = i64toi32_i32$0;
  i64toi32_i32$0 = $0 + 92 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $257;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
  $260 = i64toi32_i32$1;
  i64toi32_i32$1 = $0;
  HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] = $260;
  HEAP32[(i64toi32_i32$1 + 88 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = (i64toi32_i32$2 + 48 | 0) + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $266 = i64toi32_i32$0;
  i64toi32_i32$0 = $0 + 108 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $266;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
  $269 = i64toi32_i32$1;
  i64toi32_i32$1 = $0;
  HEAP32[(i64toi32_i32$1 + 100 | 0) >> 2] = $269;
  HEAP32[(i64toi32_i32$1 + 104 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = (i64toi32_i32$2 + 64 | 0) + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $275 = i64toi32_i32$0;
  i64toi32_i32$0 = $0 + 124 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $275;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
  $278 = i64toi32_i32$1;
  i64toi32_i32$1 = $0;
  HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = $278;
  HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = i64toi32_i32$0;
  memset(i64toi32_i32$1 + 132 | 0 | 0, 0 | 0, 57 | 0) | 0;
  global$0 = i64toi32_i32$2 + 112 | 0;
 }
 
 function dlmalloc__dlmalloc__Dlmalloc__free__h4acdae787fb6f877($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $4 = 0, $3 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = $1 + -8 | 0;
  $3 = HEAP32[($1 + -4 | 0) >> 2] | 0;
  $1 = $3 & -8 | 0;
  $4 = $2 + $1 | 0;
  label$1 : {
   label$2 : {
    if ($3 & 1 | 0) {
     break label$2
    }
    if (!($3 & 3 | 0)) {
     break label$1
    }
    $3 = HEAP32[$2 >> 2] | 0;
    $1 = $3 + $1 | 0;
    label$3 : {
     label$4 : {
      label$5 : {
       $2 = $2 - $3 | 0;
       if ((HEAP32[($0 + 408 | 0) >> 2] | 0 | 0) == ($2 | 0)) {
        break label$5
       }
       if ($3 >>> 0 >= 256 >>> 0) {
        break label$4
       }
       $5 = HEAP32[($2 + 12 | 0) >> 2] | 0;
       $6 = HEAP32[($2 + 8 | 0) >> 2] | 0;
       if (($5 | 0) == ($6 | 0)) {
        break label$3
       }
       HEAP32[($6 + 12 | 0) >> 2] = $5;
       HEAP32[($5 + 8 | 0) >> 2] = $6;
       break label$2;
      }
      if (((HEAP32[($4 + 4 | 0) >> 2] | 0) & 3 | 0 | 0) != (3 | 0)) {
       break label$2
      }
      HEAP32[($0 + 400 | 0) >> 2] = $1;
      $0 = $4 + 4 | 0;
      HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) & -2 | 0;
      HEAP32[($2 + 4 | 0) >> 2] = $1 | 1 | 0;
      HEAP32[($2 + $1 | 0) >> 2] = $1;
      return;
     }
     dlmalloc__dlmalloc__Dlmalloc__unlink_large_chunk__h173f6e2d56218081($0 | 0, $2 | 0);
     break label$2;
    }
    (wasm2js_i32$0 = $0, wasm2js_i32$1 = (HEAP32[$0 >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $3 >>> 3 | 0 | 0) | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   }
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       label$10 : {
        label$11 : {
         label$12 : {
          label$13 : {
           label$14 : {
            $3 = HEAP32[($4 + 4 | 0) >> 2] | 0;
            if ($3 & 2 | 0) {
             break label$14
            }
            if ((HEAP32[($0 + 412 | 0) >> 2] | 0 | 0) == ($4 | 0)) {
             break label$13
            }
            if ((HEAP32[($0 + 408 | 0) >> 2] | 0 | 0) == ($4 | 0)) {
             break label$12
            }
            $5 = $3 & -8 | 0;
            $1 = $5 + $1 | 0;
            if ($5 >>> 0 >= 256 >>> 0) {
             break label$11
            }
            $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
            $4 = HEAP32[($4 + 8 | 0) >> 2] | 0;
            if (($5 | 0) == ($4 | 0)) {
             break label$10
            }
            HEAP32[($4 + 12 | 0) >> 2] = $5;
            HEAP32[($5 + 8 | 0) >> 2] = $4;
            break label$9;
           }
           HEAP32[($4 + 4 | 0) >> 2] = $3 & -2 | 0;
           HEAP32[($2 + 4 | 0) >> 2] = $1 | 1 | 0;
           HEAP32[($2 + $1 | 0) >> 2] = $1;
           break label$6;
          }
          HEAP32[($0 + 412 | 0) >> 2] = $2;
          $1 = (HEAP32[($0 + 404 | 0) >> 2] | 0) + $1 | 0;
          HEAP32[($0 + 404 | 0) >> 2] = $1;
          HEAP32[($2 + 4 | 0) >> 2] = $1 | 1 | 0;
          label$15 : {
           if (($2 | 0) != (HEAP32[($0 + 408 | 0) >> 2] | 0 | 0)) {
            break label$15
           }
           HEAP32[($0 + 400 | 0) >> 2] = 0;
           HEAP32[($0 + 408 | 0) >> 2] = 0;
          }
          $3 = HEAP32[($0 + 440 | 0) >> 2] | 0;
          if ($3 >>> 0 >= $1 >>> 0) {
           break label$1
          }
          $1 = HEAP32[($0 + 412 | 0) >> 2] | 0;
          if (!$1) {
           break label$1
          }
          label$16 : {
           $5 = HEAP32[($0 + 404 | 0) >> 2] | 0;
           if ($5 >>> 0 < 41 >>> 0) {
            break label$16
           }
           $2 = $0 + 424 | 0;
           label$17 : while (1) {
            label$18 : {
             $4 = HEAP32[$2 >> 2] | 0;
             if ($4 >>> 0 > $1 >>> 0) {
              break label$18
             }
             if (($4 + (HEAP32[($2 + 4 | 0) >> 2] | 0) | 0) >>> 0 > $1 >>> 0) {
              break label$16
             }
            }
            $2 = HEAP32[($2 + 8 | 0) >> 2] | 0;
            if ($2) {
             continue label$17
            }
            break label$17;
           };
          }
          $1 = HEAP32[($0 + 432 | 0) >> 2] | 0;
          if (!$1) {
           break label$8
          }
          $2 = 0;
          label$19 : while (1) {
           $2 = $2 + 1 | 0;
           $1 = HEAP32[($1 + 8 | 0) >> 2] | 0;
           if ($1) {
            continue label$19
           }
           break label$19;
          };
          $2 = $2 >>> 0 > 4095 >>> 0 ? $2 : 4095;
          break label$7;
         }
         HEAP32[($0 + 408 | 0) >> 2] = $2;
         $1 = (HEAP32[($0 + 400 | 0) >> 2] | 0) + $1 | 0;
         HEAP32[($0 + 400 | 0) >> 2] = $1;
         HEAP32[($2 + 4 | 0) >> 2] = $1 | 1 | 0;
         HEAP32[($2 + $1 | 0) >> 2] = $1;
         return;
        }
        dlmalloc__dlmalloc__Dlmalloc__unlink_large_chunk__h173f6e2d56218081($0 | 0, $4 | 0);
        break label$9;
       }
       (wasm2js_i32$0 = $0, wasm2js_i32$1 = (HEAP32[$0 >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $3 >>> 3 | 0 | 0) | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      }
      HEAP32[($2 + 4 | 0) >> 2] = $1 | 1 | 0;
      HEAP32[($2 + $1 | 0) >> 2] = $1;
      if (($2 | 0) != (HEAP32[($0 + 408 | 0) >> 2] | 0 | 0)) {
       break label$6
      }
      HEAP32[($0 + 400 | 0) >> 2] = $1;
      break label$1;
     }
     $2 = 4095;
    }
    HEAP32[($0 + 448 | 0) >> 2] = $2;
    if ($5 >>> 0 <= $3 >>> 0) {
     break label$1
    }
    HEAP32[($0 + 440 | 0) >> 2] = -1;
    return;
   }
   label$20 : {
    label$21 : {
     label$22 : {
      label$23 : {
       label$24 : {
        if ($1 >>> 0 >= 256 >>> 0) {
         break label$24
        }
        $4 = $1 >>> 3 | 0;
        $1 = ($0 + ($4 << 3 | 0) | 0) + 8 | 0;
        $3 = HEAP32[$0 >> 2] | 0;
        $4 = 1 << ($4 & 31 | 0) | 0;
        if (!($3 & $4 | 0)) {
         break label$23
        }
        $0 = HEAP32[($1 + 8 | 0) >> 2] | 0;
        break label$22;
       }
       dlmalloc__dlmalloc__Dlmalloc__insert_large_chunk__h2b5800089452f7a4($0 | 0, $2 | 0, $1 | 0);
       $2 = (HEAP32[($0 + 448 | 0) >> 2] | 0) + -1 | 0;
       HEAP32[($0 + 448 | 0) >> 2] = $2;
       if ($2) {
        break label$1
       }
       $1 = HEAP32[($0 + 432 | 0) >> 2] | 0;
       if (!$1) {
        break label$21
       }
       $2 = 0;
       label$25 : while (1) {
        $2 = $2 + 1 | 0;
        $1 = HEAP32[($1 + 8 | 0) >> 2] | 0;
        if ($1) {
         continue label$25
        }
        break label$25;
       };
       $2 = $2 >>> 0 > 4095 >>> 0 ? $2 : 4095;
       break label$20;
      }
      HEAP32[$0 >> 2] = $3 | $4 | 0;
      $0 = $1;
     }
     HEAP32[($1 + 8 | 0) >> 2] = $2;
     HEAP32[($0 + 12 | 0) >> 2] = $2;
     HEAP32[($2 + 12 | 0) >> 2] = $1;
     HEAP32[($2 + 8 | 0) >> 2] = $0;
     return;
    }
    $2 = 4095;
   }
   HEAP32[($0 + 448 | 0) >> 2] = $2;
   return;
  }
 }
 
 function hashbrown__raw__RawTable_T___rehash_in_place__hcf96faeff03f0b31($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3 = 0, $5 = 0, $6 = 0, i64toi32_i32$2 = 0, $12 = 0, $11 = 0, $2 = 0, $15 = 0, $15$hi = 0, $14 = 0, $27 = 0, $28 = 0, $29 = 0, $8 = 0, $9 = 0, $10 = 0, $7 = 0, $16 = 0, $16$hi = 0, $58 = 0, $13 = 0, $194 = 0, $212 = 0, $264 = 0, $274 = 0;
  $2 = global$0 - 32 | 0;
  global$0 = $2;
  HEAP32[($2 + 4 | 0) >> 2] = $1;
  $3 = (HEAP32[$0 >> 2] | 0) + 1 | 0;
  $4 = 0;
  $1 = 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      if (!($4 & 1 | 0)) {
       break label$4
      }
      $4 = $1 + 3 | 0;
      $5 = $4 >>> 0 < $1 >>> 0;
      if ($5) {
       break label$1
      }
      $6 = $4 >>> 0 < $3 >>> 0;
      if (!$6) {
       break label$1
      }
      $1 = $6 ? ($5 ? $3 : $1 + 4 | 0) : $3;
      break label$3;
     }
     if ($1 >>> 0 >= $3 >>> 0) {
      break label$1
     }
     $4 = $1;
     $1 = $1 + 1 | 0;
    }
    $4 = (HEAP32[($0 + 4 | 0) >> 2] | 0) + $4 | 0;
    $58 = $4;
    $4 = HEAP32[$4 >> 2] | 0;
    HEAP32[$58 >> 2] = ((($4 >>> 7 | 0) ^ -1 | 0) & 16843009 | 0) + ($4 | 2139062143 | 0) | 0;
    $4 = 1;
    continue label$2;
   };
  }
  $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  label$5 : {
   label$6 : {
    $4 = (HEAP32[$0 >> 2] | 0) + 1 | 0;
    if ($4 >>> 0 >= 4 >>> 0) {
     break label$6
    }
    memmove($1 + 4 | 0 | 0, $1 | 0, $4 | 0) | 0;
    break label$5;
   }
   $27 = $1 + $4 | 0;
   $28 = HEAPU8[$1 >> 0] | 0 | ((HEAPU8[($1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[$27 >> 0] = $28;
   HEAP8[($27 + 1 | 0) >> 0] = $28 >>> 8 | 0;
   HEAP8[($27 + 2 | 0) >> 0] = $28 >>> 16 | 0;
   HEAP8[($27 + 3 | 0) >> 0] = $28 >>> 24 | 0;
  }
  label$7 : {
   label$8 : {
    label$9 : {
     label$10 : {
      $7 = (HEAP32[$0 >> 2] | 0) + 1 | 0;
      if (!$7) {
       break label$10
      }
      $8 = $0 + 4 | 0;
      $9 = $0 + 8 | 0;
      $10 = 0;
      break label$9;
     }
     $1 = -1;
     break label$8;
    }
    label$11 : while (1) {
     $11 = $10;
     $10 = $11 + 1 | 0;
     label$12 : {
      if ((HEAPU8[($11 + (HEAP32[$8 >> 2] | 0) | 0) >> 0] | 0 | 0) != (128 | 0)) {
       break label$12
      }
      label$13 : {
       label$14 : while (1) {
        $12 = (HEAP32[$9 >> 2] | 0) + Math_imul($11, 20) | 0;
        i64toi32_i32$0 = hashbrown__map__HashMap_K_2cV_2cS___insert___7b_7bclosure_7d_7d__hc370fba381b8e2c7($2 + 4 | 0 | 0, $12 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $15 = i64toi32_i32$0;
        $15$hi = i64toi32_i32$1;
        $6 = HEAP32[$8 >> 2] | 0;
        $5 = HEAP32[$0 >> 2] | 0;
        $1 = 0;
        $13 = i64toi32_i32$0;
        $4 = i64toi32_i32$0;
        label$15 : while (1) {
         $1 = $1 + 4 | 0;
         $3 = $4 & $5 | 0;
         $4 = $1 + $3 | 0;
         $29 = $6 + $3 | 0;
         $14 = (HEAPU8[$29 >> 0] | 0 | ((HEAPU8[($29 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($29 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($29 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0) & -2139062144 | 0;
         if (!$14) {
          continue label$15
         }
         break label$15;
        };
        label$16 : {
         $1 = (((__wasm_ctz_i32($14 | 0) | 0) >>> 3 | 0) + $3 | 0) & $5 | 0;
         if ((HEAP8[($6 + $1 | 0) >> 0] | 0 | 0) < (0 | 0)) {
          break label$16
         }
         $1 = (__wasm_ctz_i32((HEAP32[$6 >> 2] | 0) & -2139062144 | 0 | 0) | 0) >>> 3 | 0;
        }
        label$17 : {
         $4 = $5 & $13 | 0;
         if (((($1 - $4 | 0) ^ ($11 - $4 | 0) | 0) & $5 | 0) >>> 0 < 4 >>> 0) {
          break label$17
         }
         $4 = $6 + $1 | 0;
         $3 = HEAPU8[$4 >> 0] | 0;
         i64toi32_i32$1 = $15$hi;
         $14 = $15 >>> 25 | 0;
         HEAP8[$4 >> 0] = $14;
         HEAP8[(($6 + (($1 + -4 | 0) & $5 | 0) | 0) + 4 | 0) >> 0] = $14;
         if (($3 | 0) == (255 | 0)) {
          break label$13
         }
         $1 = (HEAP32[$9 >> 2] | 0) + Math_imul($1, 20) | 0;
         i64toi32_i32$2 = $1;
         i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[($1 + 4 | 0) >> 2] | 0;
         $15 = i64toi32_i32$1;
         $15$hi = i64toi32_i32$0;
         i64toi32_i32$2 = $12;
         i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $194 = i64toi32_i32$0;
         i64toi32_i32$0 = $1;
         HEAP32[$1 >> 2] = $194;
         HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$1;
         $3 = $1 + 16 | 0;
         $4 = HEAP32[$3 >> 2] | 0;
         $5 = i64toi32_i32$2 + 16 | 0;
         HEAP32[$3 >> 2] = HEAP32[$5 >> 2] | 0;
         $1 = $1 + 8 | 0;
         i64toi32_i32$2 = $1;
         i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[($1 + 4 | 0) >> 2] | 0;
         $16 = i64toi32_i32$1;
         $16$hi = i64toi32_i32$0;
         $3 = $12 + 8 | 0;
         i64toi32_i32$2 = $3;
         i64toi32_i32$0 = HEAP32[$3 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[($3 + 4 | 0) >> 2] | 0;
         $212 = i64toi32_i32$0;
         i64toi32_i32$0 = $1;
         HEAP32[$1 >> 2] = $212;
         HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$1;
         HEAP32[(($2 + 8 | 0) + 16 | 0) >> 2] = $4;
         i64toi32_i32$1 = $16$hi;
         i64toi32_i32$0 = ($2 + 8 | 0) + 8 | 0;
         HEAP32[i64toi32_i32$0 >> 2] = $16;
         HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
         i64toi32_i32$1 = $15$hi;
         i64toi32_i32$0 = $12;
         HEAP32[i64toi32_i32$0 >> 2] = $15;
         HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
         HEAP32[$5 >> 2] = $4;
         i64toi32_i32$1 = $16$hi;
         i64toi32_i32$0 = $3;
         HEAP32[i64toi32_i32$0 >> 2] = $16;
         HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
         i64toi32_i32$1 = $15$hi;
         i64toi32_i32$0 = $2;
         HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $15;
         HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
         continue label$14;
        }
        break label$14;
       };
       i64toi32_i32$1 = $15$hi;
       $1 = $15 >>> 25 | 0;
       HEAP8[($6 + $11 | 0) >> 0] = $1;
       HEAP8[(($6 + ($5 & ($11 + -4 | 0) | 0) | 0) + 4 | 0) >> 0] = $1;
       break label$12;
      }
      $4 = HEAP32[$8 >> 2] | 0;
      HEAP8[($4 + $11 | 0) >> 0] = 255;
      HEAP8[(($4 + ((HEAP32[$0 >> 2] | 0) & ($11 + -4 | 0) | 0) | 0) + 4 | 0) >> 0] = 255;
      $1 = (HEAP32[$9 >> 2] | 0) + Math_imul($1, 20) | 0;
      i64toi32_i32$2 = $12;
      i64toi32_i32$1 = HEAP32[$12 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($12 + 4 | 0) >> 2] | 0;
      $264 = i64toi32_i32$1;
      i64toi32_i32$1 = $1;
      HEAP32[$1 >> 2] = $264;
      HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($1 + 16 | 0) >> 2] = HEAP32[($12 + 16 | 0) >> 2] | 0;
      i64toi32_i32$2 = $12 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $274 = i64toi32_i32$0;
      i64toi32_i32$0 = $1 + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $274;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     }
     if (($10 | 0) != ($7 | 0)) {
      continue label$11
     }
     break label$11;
    };
    $1 = HEAP32[$0 >> 2] | 0;
    if ($1 >>> 0 < 8 >>> 0) {
     break label$7
    }
   }
   $1 = Math_imul(($1 + 1 | 0) >>> 3 | 0, 7);
  }
  HEAP32[($0 + 12 | 0) >> 2] = $1 - (HEAP32[($0 + 16 | 0) >> 2] | 0) | 0;
  global$0 = $2 + 32 | 0;
 }
 
 function hashbrown__raw__RawTable_T___rehash_in_place__h5648115f49c4a6e8($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3 = 0, $5 = 0, $6 = 0, i64toi32_i32$2 = 0, $12 = 0, $11 = 0, $2 = 0, $15 = 0, $15$hi = 0, $14 = 0, $27 = 0, $28 = 0, $29 = 0, $8 = 0, $9 = 0, $10 = 0, $7 = 0, $16 = 0, $16$hi = 0, $58 = 0, $13 = 0, $194 = 0, $212 = 0, $264 = 0, $274 = 0;
  $2 = global$0 - 32 | 0;
  global$0 = $2;
  HEAP32[($2 + 4 | 0) >> 2] = $1;
  $3 = (HEAP32[$0 >> 2] | 0) + 1 | 0;
  $4 = 0;
  $1 = 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      if (!($4 & 1 | 0)) {
       break label$4
      }
      $4 = $1 + 3 | 0;
      $5 = $4 >>> 0 < $1 >>> 0;
      if ($5) {
       break label$1
      }
      $6 = $4 >>> 0 < $3 >>> 0;
      if (!$6) {
       break label$1
      }
      $1 = $6 ? ($5 ? $3 : $1 + 4 | 0) : $3;
      break label$3;
     }
     if ($1 >>> 0 >= $3 >>> 0) {
      break label$1
     }
     $4 = $1;
     $1 = $1 + 1 | 0;
    }
    $4 = (HEAP32[($0 + 4 | 0) >> 2] | 0) + $4 | 0;
    $58 = $4;
    $4 = HEAP32[$4 >> 2] | 0;
    HEAP32[$58 >> 2] = ((($4 >>> 7 | 0) ^ -1 | 0) & 16843009 | 0) + ($4 | 2139062143 | 0) | 0;
    $4 = 1;
    continue label$2;
   };
  }
  $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  label$5 : {
   label$6 : {
    $4 = (HEAP32[$0 >> 2] | 0) + 1 | 0;
    if ($4 >>> 0 >= 4 >>> 0) {
     break label$6
    }
    memmove($1 + 4 | 0 | 0, $1 | 0, $4 | 0) | 0;
    break label$5;
   }
   $27 = $1 + $4 | 0;
   $28 = HEAPU8[$1 >> 0] | 0 | ((HEAPU8[($1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[$27 >> 0] = $28;
   HEAP8[($27 + 1 | 0) >> 0] = $28 >>> 8 | 0;
   HEAP8[($27 + 2 | 0) >> 0] = $28 >>> 16 | 0;
   HEAP8[($27 + 3 | 0) >> 0] = $28 >>> 24 | 0;
  }
  label$7 : {
   label$8 : {
    label$9 : {
     label$10 : {
      $7 = (HEAP32[$0 >> 2] | 0) + 1 | 0;
      if (!$7) {
       break label$10
      }
      $8 = $0 + 4 | 0;
      $9 = $0 + 8 | 0;
      $10 = 0;
      break label$9;
     }
     $1 = -1;
     break label$8;
    }
    label$11 : while (1) {
     $11 = $10;
     $10 = $11 + 1 | 0;
     label$12 : {
      if ((HEAPU8[($11 + (HEAP32[$8 >> 2] | 0) | 0) >> 0] | 0 | 0) != (128 | 0)) {
       break label$12
      }
      label$13 : {
       label$14 : while (1) {
        $12 = (HEAP32[$9 >> 2] | 0) + Math_imul($11, 20) | 0;
        i64toi32_i32$0 = hashbrown__map__HashMap_K_2cV_2cS___insert___7b_7bclosure_7d_7d__hfac359ccde629c1a($2 + 4 | 0 | 0, $12 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $15 = i64toi32_i32$0;
        $15$hi = i64toi32_i32$1;
        $6 = HEAP32[$8 >> 2] | 0;
        $5 = HEAP32[$0 >> 2] | 0;
        $1 = 0;
        $13 = i64toi32_i32$0;
        $4 = i64toi32_i32$0;
        label$15 : while (1) {
         $1 = $1 + 4 | 0;
         $3 = $4 & $5 | 0;
         $4 = $1 + $3 | 0;
         $29 = $6 + $3 | 0;
         $14 = (HEAPU8[$29 >> 0] | 0 | ((HEAPU8[($29 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($29 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($29 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0) & -2139062144 | 0;
         if (!$14) {
          continue label$15
         }
         break label$15;
        };
        label$16 : {
         $1 = (((__wasm_ctz_i32($14 | 0) | 0) >>> 3 | 0) + $3 | 0) & $5 | 0;
         if ((HEAP8[($6 + $1 | 0) >> 0] | 0 | 0) < (0 | 0)) {
          break label$16
         }
         $1 = (__wasm_ctz_i32((HEAP32[$6 >> 2] | 0) & -2139062144 | 0 | 0) | 0) >>> 3 | 0;
        }
        label$17 : {
         $4 = $5 & $13 | 0;
         if (((($1 - $4 | 0) ^ ($11 - $4 | 0) | 0) & $5 | 0) >>> 0 < 4 >>> 0) {
          break label$17
         }
         $4 = $6 + $1 | 0;
         $3 = HEAPU8[$4 >> 0] | 0;
         i64toi32_i32$1 = $15$hi;
         $14 = $15 >>> 25 | 0;
         HEAP8[$4 >> 0] = $14;
         HEAP8[(($6 + (($1 + -4 | 0) & $5 | 0) | 0) + 4 | 0) >> 0] = $14;
         if (($3 | 0) == (255 | 0)) {
          break label$13
         }
         $1 = (HEAP32[$9 >> 2] | 0) + Math_imul($1, 20) | 0;
         i64toi32_i32$2 = $1;
         i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[($1 + 4 | 0) >> 2] | 0;
         $15 = i64toi32_i32$1;
         $15$hi = i64toi32_i32$0;
         i64toi32_i32$2 = $12;
         i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $194 = i64toi32_i32$0;
         i64toi32_i32$0 = $1;
         HEAP32[$1 >> 2] = $194;
         HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$1;
         $3 = $1 + 16 | 0;
         $4 = HEAP32[$3 >> 2] | 0;
         $5 = i64toi32_i32$2 + 16 | 0;
         HEAP32[$3 >> 2] = HEAP32[$5 >> 2] | 0;
         $1 = $1 + 8 | 0;
         i64toi32_i32$2 = $1;
         i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[($1 + 4 | 0) >> 2] | 0;
         $16 = i64toi32_i32$1;
         $16$hi = i64toi32_i32$0;
         $3 = $12 + 8 | 0;
         i64toi32_i32$2 = $3;
         i64toi32_i32$0 = HEAP32[$3 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[($3 + 4 | 0) >> 2] | 0;
         $212 = i64toi32_i32$0;
         i64toi32_i32$0 = $1;
         HEAP32[$1 >> 2] = $212;
         HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$1;
         HEAP32[(($2 + 8 | 0) + 16 | 0) >> 2] = $4;
         i64toi32_i32$1 = $16$hi;
         i64toi32_i32$0 = ($2 + 8 | 0) + 8 | 0;
         HEAP32[i64toi32_i32$0 >> 2] = $16;
         HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
         i64toi32_i32$1 = $15$hi;
         i64toi32_i32$0 = $12;
         HEAP32[i64toi32_i32$0 >> 2] = $15;
         HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
         HEAP32[$5 >> 2] = $4;
         i64toi32_i32$1 = $16$hi;
         i64toi32_i32$0 = $3;
         HEAP32[i64toi32_i32$0 >> 2] = $16;
         HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
         i64toi32_i32$1 = $15$hi;
         i64toi32_i32$0 = $2;
         HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $15;
         HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
         continue label$14;
        }
        break label$14;
       };
       i64toi32_i32$1 = $15$hi;
       $1 = $15 >>> 25 | 0;
       HEAP8[($6 + $11 | 0) >> 0] = $1;
       HEAP8[(($6 + ($5 & ($11 + -4 | 0) | 0) | 0) + 4 | 0) >> 0] = $1;
       break label$12;
      }
      $4 = HEAP32[$8 >> 2] | 0;
      HEAP8[($4 + $11 | 0) >> 0] = 255;
      HEAP8[(($4 + ((HEAP32[$0 >> 2] | 0) & ($11 + -4 | 0) | 0) | 0) + 4 | 0) >> 0] = 255;
      $1 = (HEAP32[$9 >> 2] | 0) + Math_imul($1, 20) | 0;
      i64toi32_i32$2 = $12;
      i64toi32_i32$1 = HEAP32[$12 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($12 + 4 | 0) >> 2] | 0;
      $264 = i64toi32_i32$1;
      i64toi32_i32$1 = $1;
      HEAP32[$1 >> 2] = $264;
      HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($1 + 16 | 0) >> 2] = HEAP32[($12 + 16 | 0) >> 2] | 0;
      i64toi32_i32$2 = $12 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $274 = i64toi32_i32$0;
      i64toi32_i32$0 = $1 + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $274;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     }
     if (($10 | 0) != ($7 | 0)) {
      continue label$11
     }
     break label$11;
    };
    $1 = HEAP32[$0 >> 2] | 0;
    if ($1 >>> 0 < 8 >>> 0) {
     break label$7
    }
   }
   $1 = Math_imul(($1 + 1 | 0) >>> 3 | 0, 7);
  }
  HEAP32[($0 + 12 | 0) >> 2] = $1 - (HEAP32[($0 + 16 | 0) >> 2] | 0) | 0;
  global$0 = $2 + 32 | 0;
 }
 
 function $core__iter__adapters__Map_I_2cF__20as_20core__iter__traits__iterator__Iterator___fold__h39f27bb7080210e0($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $22 = 0, $22$hi = 0, $23$hi = 0, $23 = 0, $24$hi = 0, $25$hi = 0, $24 = 0, $25 = 0, $2 = 0, $13 = 0, $26$hi = 0, $5 = 0, $26 = 0, $111 = 0, $21 = 0, $3 = 0, $8 = 0, $9 = 0, $27$hi = 0, $15 = 0, $19 = 0, $6 = 0, $10 = 0, $11 = 0, $12 = 0, $112 = 0, $113 = 0, $4 = 0, $7 = 0, $70 = 0, $73 = 0, $78 = 0, $84 = 0, $98$hi = 0, $100 = 0, $100$hi = 0, $104 = 0, $104$hi = 0, $107 = 0, $107$hi = 0, $110 = 0, $110$hi = 0, $114 = 0, $114$hi = 0, $119 = 0, $119$hi = 0, $122 = 0, $122$hi = 0, $27 = 0, $126 = 0, $126$hi = 0, $129$hi = 0, $136 = 0, $136$hi = 0, $142 = 0, $142$hi = 0, $144 = 0, $144$hi = 0, $146$hi = 0, $152 = 0, $152$hi = 0, $158 = 0, $158$hi = 0, $161 = 0, $161$hi = 0, $162 = 0, $162$hi = 0, $164$hi = 0, $169 = 0, $169$hi = 0, $176 = 0, $176$hi = 0, $177 = 0, $177$hi = 0, $179$hi = 0, $184 = 0, $184$hi = 0, $191 = 0, $191$hi = 0, $192 = 0, $192$hi = 0, $194$hi = 0, $199 = 0, $199$hi = 0, $202$hi = 0, $204 = 0, $204$hi = 0, $206$hi = 0, $211 = 0, $211$hi = 0, $217$hi = 0, $115 = 0, $220 = 0, $220$hi = 0, $221 = 0, $221$hi = 0, $223 = 0, $223$hi = 0, $224 = 0, $224$hi = 0, $226$hi = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $308 = 0;
  $2 = global$0 - 80 | 0;
  global$0 = $2;
  $3 = HEAP32[($1 + 8 | 0) >> 2] | 0;
  $4 = HEAP32[($1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $5 = HEAP32[$0 >> 2] | 0;
    $6 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if (($5 | 0) == ($6 | 0)) {
     break label$2
    }
    $7 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    $8 = ($2 + 8 | 0) + 48 | 0;
    $9 = HEAP32[$1 >> 2] | 0;
    $10 = $2 + 48 | 0;
    $11 = $2 + 40 | 0;
    $12 = $2 + 32 | 0;
    label$3 : while (1) {
     $1 = HEAP32[$7 >> 2] | 0;
     i64toi32_i32$1 = $8 + 8 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $8;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $1 + 48 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $22 = i64toi32_i32$0;
     $22$hi = i64toi32_i32$1;
     i64toi32_i32$0 = ($2 + 8 | 0) + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $22;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $22;
     i64toi32_i32$0 = 1952801890;
     i64toi32_i32$3 = 2037671283;
     i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
     $70 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
     i64toi32_i32$2 = $10;
     HEAP32[i64toi32_i32$2 >> 2] = $70;
     HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$1 = $22;
     i64toi32_i32$2 = 1685025377;
     i64toi32_i32$3 = 1852075885;
     i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
     $73 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     i64toi32_i32$1 = $11;
     HEAP32[i64toi32_i32$1 >> 2] = $73;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
     i64toi32_i32$0 = $1;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] | 0;
     $22 = i64toi32_i32$2;
     $22$hi = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$2 = 1819895653;
     i64toi32_i32$3 = 1852142177;
     i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
     $78 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
     i64toi32_i32$0 = $12;
     HEAP32[i64toi32_i32$0 >> 2] = $78;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
     $0 = ($2 + 8 | 0) + 16 | 0;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $22;
     i64toi32_i32$0 = 1936682341;
     i64toi32_i32$3 = 1886610805;
     i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $84 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     i64toi32_i32$1 = $0;
     HEAP32[i64toi32_i32$1 >> 2] = $84;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = $2;
     i64toi32_i32$0 = i64toi32_i32$2;
     HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $22;
     HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$2;
     HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = HEAP32[$5 >> 2] | 0;
     $std__collections__hash__map__DefaultHasher_20as_20core__hash__Hasher___write__h7303af2f85960aff(i64toi32_i32$1 + 8 | 0 | 0, i64toi32_i32$1 + 76 | 0 | 0);
     i64toi32_i32$2 = (i64toi32_i32$1 + 8 | 0) + 56 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 56;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $112 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $112 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $98$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $8;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $100 = i64toi32_i32$0;
     $100$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $98$hi;
     i64toi32_i32$1 = $112;
     i64toi32_i32$0 = $100$hi;
     i64toi32_i32$3 = $100;
     i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     $22 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $22$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $10;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $104 = i64toi32_i32$0;
     $104$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $22$hi;
     i64toi32_i32$2 = $22;
     i64toi32_i32$0 = $104$hi;
     i64toi32_i32$3 = $104;
     i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
     $23 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
     $23$hi = i64toi32_i32$0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$2 = __wasm_rotl_i64($23 | 0, i64toi32_i32$0 | 0, 16 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $107 = i64toi32_i32$2;
     $107$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $23$hi;
     i64toi32_i32$1 = $12;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $110 = i64toi32_i32$0;
     $110$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$1 = $23;
     i64toi32_i32$0 = $110$hi;
     i64toi32_i32$3 = $110;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $23 = i64toi32_i32$4;
     $23$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $107$hi;
     i64toi32_i32$2 = $107;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
     $24 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
     $24$hi = i64toi32_i32$1;
     $114 = $24;
     $114$hi = i64toi32_i32$1;
     i64toi32_i32$5 = $11;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $25 = i64toi32_i32$1;
     $25$hi = i64toi32_i32$2;
     i64toi32_i32$5 = $0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $119 = i64toi32_i32$2;
     $119$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $25$hi;
     i64toi32_i32$5 = $25;
     i64toi32_i32$2 = $119$hi;
     i64toi32_i32$3 = $119;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $26 = i64toi32_i32$0;
     $26$hi = i64toi32_i32$4;
     i64toi32_i32$5 = 0;
     i64toi32_i32$5 = __wasm_rotl_i64(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, 32 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $122 = i64toi32_i32$5;
     $122$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $114$hi;
     i64toi32_i32$1 = $114;
     i64toi32_i32$5 = $122$hi;
     i64toi32_i32$3 = $122;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $27 = i64toi32_i32$2;
     $27$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $22$hi;
     i64toi32_i32$0 = $27$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$1 = $22$hi;
     i64toi32_i32$3 = $22;
     i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
     $126 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
     $126$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$1 = $25$hi;
     i64toi32_i32$4 = 0;
     i64toi32_i32$4 = __wasm_rotl_i64($25 | 0, i64toi32_i32$1 | 0, 13 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $129$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $26$hi;
     i64toi32_i32$1 = $129$hi;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$4 = $26$hi;
     i64toi32_i32$3 = $26;
     i64toi32_i32$4 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
     $22 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
     $22$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $23$hi;
     i64toi32_i32$1 = $23;
     i64toi32_i32$0 = $22$hi;
     i64toi32_i32$3 = $22;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $23 = i64toi32_i32$5;
     $23$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $22$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$1 = __wasm_rotl_i64($22 | 0, i64toi32_i32$2 | 0, 17 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $136 = i64toi32_i32$1;
     $136$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$1 = $136$hi;
     i64toi32_i32$3 = $136;
     i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
     $22 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
     $22$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $126$hi;
     i64toi32_i32$2 = $126;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$3 = $22;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $25 = i64toi32_i32$0;
     $25$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$2 = __wasm_rotl_i64($22 | 0, i64toi32_i32$5 | 0, 13 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $142 = i64toi32_i32$2;
     $142$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $25$hi;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$2 = $142$hi;
     i64toi32_i32$3 = $142;
     i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     $22 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $22$hi = i64toi32_i32$2;
     $144 = $22;
     $144$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $24$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$1 = __wasm_rotl_i64($24 | 0, i64toi32_i32$2 | 0, 21 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $146$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $27$hi;
     i64toi32_i32$2 = $146$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$1 = $27$hi;
     i64toi32_i32$3 = $27;
     i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
     $24 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
     $24$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$5 = 0;
     i64toi32_i32$5 = __wasm_rotl_i64($23 | 0, i64toi32_i32$1 | 0, 32 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = 255;
     i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
     $152 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
     $152$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$1 = $24;
     i64toi32_i32$2 = $152$hi;
     i64toi32_i32$3 = $152;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $23 = i64toi32_i32$4;
     $23$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $144$hi;
     i64toi32_i32$5 = $144;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $26 = i64toi32_i32$2;
     $26$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$5 = 0;
     i64toi32_i32$5 = __wasm_rotl_i64($22 | 0, i64toi32_i32$4 | 0, 17 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $158 = i64toi32_i32$5;
     $158$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $26$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$5 = $158$hi;
     i64toi32_i32$3 = $158;
     i64toi32_i32$5 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
     $22 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
     $22$hi = i64toi32_i32$5;
     i64toi32_i32$0 = 0;
     i64toi32_i32$0 = __wasm_rotl_i64($22 | 0, i64toi32_i32$5 | 0, 13 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $161 = i64toi32_i32$0;
     $161$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $22$hi;
     $162 = $22;
     $162$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$0 = 0;
     i64toi32_i32$0 = __wasm_rotl_i64($24 | 0, i64toi32_i32$5 | 0, 16 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $164$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $23$hi;
     i64toi32_i32$5 = $164$hi;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$0 = $23$hi;
     i64toi32_i32$3 = $23;
     i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
     $23 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
     $23$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $25$hi;
     i64toi32_i32$4 = 0;
     i64toi32_i32$4 = __wasm_rotl_i64($25 | 0, i64toi32_i32$0 | 0, 32 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $169 = i64toi32_i32$4;
     $169$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $23$hi;
     i64toi32_i32$5 = $23;
     i64toi32_i32$4 = $169$hi;
     i64toi32_i32$3 = $169;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $24 = i64toi32_i32$1;
     $24$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $162$hi;
     i64toi32_i32$0 = $162;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $22 = i64toi32_i32$4;
     $22$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $161$hi;
     i64toi32_i32$2 = $161;
     i64toi32_i32$0 = $22$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
     $25 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
     $25$hi = i64toi32_i32$0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$2 = __wasm_rotl_i64($25 | 0, i64toi32_i32$0 | 0, 17 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $176 = i64toi32_i32$2;
     $176$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $25$hi;
     $177 = $25;
     $177$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $23$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$2 = __wasm_rotl_i64($23 | 0, i64toi32_i32$0 | 0, 21 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $179$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$0 = $179$hi;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$2 = $24$hi;
     i64toi32_i32$3 = $24;
     i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
     $23 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $23$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $26$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$1 = __wasm_rotl_i64($26 | 0, i64toi32_i32$2 | 0, 32 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $184 = i64toi32_i32$1;
     $184$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$0 = $23;
     i64toi32_i32$1 = $184$hi;
     i64toi32_i32$3 = $184;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $24 = i64toi32_i32$5;
     $24$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $177$hi;
     i64toi32_i32$2 = $177;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $25 = i64toi32_i32$1;
     $25$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $176$hi;
     i64toi32_i32$4 = $176;
     i64toi32_i32$2 = $25$hi;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     $26 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
     $26$hi = i64toi32_i32$2;
     i64toi32_i32$4 = 0;
     i64toi32_i32$4 = __wasm_rotl_i64($26 | 0, i64toi32_i32$2 | 0, 13 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $191 = i64toi32_i32$4;
     $191$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $26$hi;
     $192 = $26;
     $192$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$4 = 0;
     i64toi32_i32$4 = __wasm_rotl_i64($23 | 0, i64toi32_i32$2 | 0, 16 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $194$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $24$hi;
     i64toi32_i32$2 = $194$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$4 = $24$hi;
     i64toi32_i32$3 = $24;
     i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
     $23 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
     $23$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$5 = 0;
     i64toi32_i32$5 = __wasm_rotl_i64($22 | 0, i64toi32_i32$4 | 0, 32 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $199 = i64toi32_i32$5;
     $199$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $23$hi;
     i64toi32_i32$2 = $23;
     i64toi32_i32$5 = $199$hi;
     i64toi32_i32$3 = $199;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $22 = i64toi32_i32$0;
     $22$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $192$hi;
     i64toi32_i32$4 = $192;
     i64toi32_i32$2 = $22$hi;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $202$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $191$hi;
     i64toi32_i32$1 = $191;
     i64toi32_i32$4 = $202$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$4 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
     $24 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
     $24$hi = i64toi32_i32$4;
     $204 = $24;
     $204$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $23$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$1 = __wasm_rotl_i64($23 | 0, i64toi32_i32$4 | 0, 21 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $206$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$4 = $206$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$1 = $22$hi;
     i64toi32_i32$3 = $22;
     i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
     $22 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
     $22$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $25$hi;
     i64toi32_i32$0 = 0;
     i64toi32_i32$0 = __wasm_rotl_i64($25 | 0, i64toi32_i32$1 | 0, 32 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $211 = i64toi32_i32$0;
     $211$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $22$hi;
     i64toi32_i32$4 = $22;
     i64toi32_i32$0 = $211$hi;
     i64toi32_i32$3 = $211;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $23 = i64toi32_i32$2;
     $23$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $204$hi;
     i64toi32_i32$1 = $204;
     i64toi32_i32$4 = $23$hi;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $25 = i64toi32_i32$0;
     $25$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $22$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$1 = __wasm_rotl_i64($22 | 0, i64toi32_i32$2 | 0, 16 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $217$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$2 = $217$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$3 = $23;
     i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
     $115 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$5 = __wasm_rotl_i64($115 | 0, i64toi32_i32$1 | 0, 21 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $220 = i64toi32_i32$5;
     $220$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $25$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$5 = $220$hi;
     i64toi32_i32$3 = $220;
     i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
     $221 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
     $221$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$2 = __wasm_rotl_i64($24 | 0, i64toi32_i32$5 | 0, 17 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $223 = i64toi32_i32$2;
     $223$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $221$hi;
     i64toi32_i32$1 = $221;
     i64toi32_i32$2 = $223$hi;
     i64toi32_i32$3 = $223;
     i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     $224 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $224$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $25$hi;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $113 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $113 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
     }
     $226$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $224$hi;
     i64toi32_i32$2 = $224;
     i64toi32_i32$5 = $226$hi;
     i64toi32_i32$3 = $113;
     i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
     $0 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
     $13 = $0 >>> 25 | 0;
     $13 = $13 << 8 | 0 | $13 | 0;
     $14 = $13 << 16 | 0 | $13 | 0;
     $15 = HEAP32[($1 + 56 | 0) >> 2] | 0;
     $0 = $15 & $0 | 0;
     $16 = $5 + 4 | 0;
     $17 = HEAP32[($1 + 64 | 0) >> 2] | 0;
     $18 = HEAP32[($1 + 60 | 0) >> 2] | 0;
     $13 = 0;
     label$4 : while (1) {
      $111 = $18 + $0 | 0;
      $19 = HEAPU8[$111 >> 0] | 0 | ((HEAPU8[($111 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($111 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($111 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      $1 = $19 ^ $14 | 0;
      $1 = (($1 ^ -1 | 0) & ($1 + -16843009 | 0) | 0) & -2139062144 | 0;
      $13 = $13 + 4 | 0;
      $20 = ($13 + $0 | 0) & $15 | 0;
      label$5 : {
       label$6 : {
        label$7 : while (1) {
         if (!$1) {
          break label$6
         }
         $21 = __wasm_ctz_i32($1 | 0) | 0;
         $1 = ($1 + -1 | 0) & $1 | 0;
         $21 = $17 + Math_imul((($21 >>> 3 | 0) + $0 | 0) & $15 | 0, 20) | 0;
         if ((HEAP32[$5 >> 2] | 0 | 0) == (HEAP32[$21 >> 2] | 0 | 0)) {
          break label$5
         }
         continue label$7;
        };
       }
       $0 = $20;
       if (!(($19 & ($19 << 1 | 0) | 0) & -2139062144 | 0)) {
        continue label$4
       }
       break label$1;
      }
      break label$4;
     };
     i64toi32_i32$1 = $21;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
     $22 = i64toi32_i32$5;
     $22$hi = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $308 = i64toi32_i32$2;
     i64toi32_i32$2 = $9 + 8 | 0;
     HEAP32[i64toi32_i32$2 >> 2] = $308;
     HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$2 = $9;
     HEAP32[i64toi32_i32$2 >> 2] = $22;
     HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
     $3 = $3 + 1 | 0;
     $9 = i64toi32_i32$2 + 16 | 0;
     $5 = $16;
     if (($5 | 0) != ($6 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   HEAP32[$4 >> 2] = $3;
   global$0 = $2 + 80 | 0;
   return;
  }
  core__option__expect_failed__h4b77ebe6e62ec3a1(1051369 | 0, 22 | 0);
  abort();
 }
 
 function stretch__node__Stretch__find_node__h5d72b27b054a57c0($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $18$hi = 0, $17$hi = 0, $17 = 0, $18 = 0, $19$hi = 0, $20$hi = 0, $19 = 0, $5 = 0, $4 = 0, $20 = 0, $3 = 0, $21$hi = 0, $6 = 0, $21 = 0, $15 = 0, $107 = 0, $22$hi = 0, $13 = 0, $14 = 0, $7 = 0, $109 = 0, $110 = 0, $16 = 0, $32 = 0, $37 = 0, $45 = 0, $54 = 0, $87$hi = 0, $89 = 0, $89$hi = 0, $93 = 0, $93$hi = 0, $96 = 0, $96$hi = 0, $99 = 0, $99$hi = 0, $103 = 0, $103$hi = 0, $108 = 0, $108$hi = 0, $111 = 0, $111$hi = 0, $22 = 0, $115 = 0, $115$hi = 0, $118$hi = 0, $125 = 0, $125$hi = 0, $131 = 0, $131$hi = 0, $133 = 0, $133$hi = 0, $135$hi = 0, $141 = 0, $141$hi = 0, $147 = 0, $147$hi = 0, $150 = 0, $150$hi = 0, $151 = 0, $151$hi = 0, $153$hi = 0, $158 = 0, $158$hi = 0, $165 = 0, $165$hi = 0, $166 = 0, $166$hi = 0, $168$hi = 0, $173 = 0, $173$hi = 0, $180 = 0, $180$hi = 0, $181 = 0, $181$hi = 0, $183$hi = 0, $188 = 0, $188$hi = 0, $191$hi = 0, $193 = 0, $193$hi = 0, $195$hi = 0, $200 = 0, $200$hi = 0, $206$hi = 0, $112 = 0, $209 = 0, $209$hi = 0, $210 = 0, $210$hi = 0, $212 = 0, $212$hi = 0, $213 = 0, $213$hi = 0, $215$hi = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $309 = 0, $314 = 0;
  $3 = global$0 - 80 | 0;
  global$0 = $3;
  $4 = $3 + 48 | 0;
  i64toi32_i32$2 = $1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $17 = i64toi32_i32$0;
  $17$hi = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = 1952801890;
  i64toi32_i32$3 = 2037671283;
  i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
  $32 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $4;
  HEAP32[i64toi32_i32$2 >> 2] = $32;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5 = $3 + 40 | 0;
  i64toi32_i32$0 = i64toi32_i32$1;
  i64toi32_i32$0 = i64toi32_i32$1;
  i64toi32_i32$1 = $17;
  i64toi32_i32$2 = 1685025377;
  i64toi32_i32$3 = 1852075885;
  i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
  $37 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = $5;
  HEAP32[i64toi32_i32$1 >> 2] = $37;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
  $6 = ($3 + 8 | 0) + 24 | 0;
  i64toi32_i32$0 = $1;
  i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
  $18 = i64toi32_i32$2;
  $18$hi = i64toi32_i32$1;
  i64toi32_i32$0 = i64toi32_i32$2;
  i64toi32_i32$2 = 1819895653;
  i64toi32_i32$3 = 1852142177;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $45 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $6;
  HEAP32[i64toi32_i32$0 >> 2] = $45;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$0 = $3;
  i64toi32_i32$2 = 0;
  HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 60 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $17$hi;
  HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = $17;
  HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $18;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$1 = $18;
  i64toi32_i32$0 = 1936682341;
  i64toi32_i32$3 = 1886610805;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $54 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = $3;
  HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = $54;
  HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = HEAP32[$2 >> 2] | 0;
  $std__collections__hash__map__DefaultHasher_20as_20core__hash__Hasher___write__h7303af2f85960aff(i64toi32_i32$1 + 8 | 0 | 0, i64toi32_i32$1 + 76 | 0 | 0);
  HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = HEAP32[($2 + 4 | 0) >> 2] | 0;
  $std__collections__hash__map__DefaultHasher_20as_20core__hash__Hasher___write__h7303af2f85960aff(i64toi32_i32$1 + 8 | 0 | 0, i64toi32_i32$1 + 76 | 0 | 0);
  HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = HEAP32[($2 + 8 | 0) >> 2] | 0;
  $std__collections__hash__map__DefaultHasher_20as_20core__hash__Hasher___write__h7303af2f85960aff(i64toi32_i32$1 + 8 | 0 | 0, i64toi32_i32$1 + 76 | 0 | 0);
  $7 = HEAP32[($2 + 12 | 0) >> 2] | 0;
  HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = $7;
  $std__collections__hash__map__DefaultHasher_20as_20core__hash__Hasher___write__h7303af2f85960aff(i64toi32_i32$1 + 8 | 0 | 0, i64toi32_i32$1 + 76 | 0 | 0);
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 56;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $109 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $109 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $87$hi = i64toi32_i32$0;
  i64toi32_i32$1 = $3;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] | 0;
  $89 = i64toi32_i32$0;
  $89$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $87$hi;
  i64toi32_i32$1 = $109;
  i64toi32_i32$0 = $89$hi;
  i64toi32_i32$3 = $89;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $17 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $17$hi = i64toi32_i32$0;
  i64toi32_i32$2 = $4;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $93 = i64toi32_i32$0;
  $93$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $17$hi;
  i64toi32_i32$2 = $17;
  i64toi32_i32$0 = $93$hi;
  i64toi32_i32$3 = $93;
  i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
  $18 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $18$hi = i64toi32_i32$0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($18 | 0, i64toi32_i32$0 | 0, 16 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $96 = i64toi32_i32$2;
  $96$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $18$hi;
  i64toi32_i32$1 = $6;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  $99 = i64toi32_i32$0;
  $99$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $18$hi;
  i64toi32_i32$1 = $18;
  i64toi32_i32$0 = $99$hi;
  i64toi32_i32$3 = $99;
  i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $18 = i64toi32_i32$4;
  $18$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $96$hi;
  i64toi32_i32$2 = $96;
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$3 = i64toi32_i32$4;
  i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
  $19 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
  $19$hi = i64toi32_i32$1;
  $103 = $19;
  $103$hi = i64toi32_i32$1;
  i64toi32_i32$5 = $5;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
  $20 = i64toi32_i32$1;
  $20$hi = i64toi32_i32$2;
  i64toi32_i32$5 = $3;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 24 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 28 | 0) >> 2] | 0;
  $108 = i64toi32_i32$2;
  $108$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $20$hi;
  i64toi32_i32$5 = $20;
  i64toi32_i32$2 = $108$hi;
  i64toi32_i32$3 = $108;
  i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $21 = i64toi32_i32$0;
  $21$hi = i64toi32_i32$4;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, 32 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $111 = i64toi32_i32$5;
  $111$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $103$hi;
  i64toi32_i32$1 = $103;
  i64toi32_i32$5 = $111$hi;
  i64toi32_i32$3 = $111;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $22 = i64toi32_i32$2;
  $22$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $17$hi;
  i64toi32_i32$0 = $22$hi;
  i64toi32_i32$4 = i64toi32_i32$2;
  i64toi32_i32$1 = $17$hi;
  i64toi32_i32$3 = $17;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $115 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $115$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$1 = $20$hi;
  i64toi32_i32$4 = 0;
  i64toi32_i32$4 = __wasm_rotl_i64($20 | 0, i64toi32_i32$1 | 0, 13 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $118$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $21$hi;
  i64toi32_i32$1 = $118$hi;
  i64toi32_i32$0 = i64toi32_i32$4;
  i64toi32_i32$4 = $21$hi;
  i64toi32_i32$3 = $21;
  i64toi32_i32$4 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
  $17 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $17$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $18$hi;
  i64toi32_i32$1 = $18;
  i64toi32_i32$0 = $17$hi;
  i64toi32_i32$3 = $17;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $18 = i64toi32_i32$5;
  $18$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $17$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($17 | 0, i64toi32_i32$2 | 0, 17 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $125 = i64toi32_i32$1;
  $125$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $18$hi;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$1 = $125$hi;
  i64toi32_i32$3 = $125;
  i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
  $17 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  $17$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $115$hi;
  i64toi32_i32$2 = $115;
  i64toi32_i32$4 = $17$hi;
  i64toi32_i32$3 = $17;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $20 = i64toi32_i32$0;
  $20$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $17$hi;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($17 | 0, i64toi32_i32$5 | 0, 13 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $131 = i64toi32_i32$2;
  $131$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$2 = $131$hi;
  i64toi32_i32$3 = $131;
  i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
  $17 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $17$hi = i64toi32_i32$2;
  $133 = $17;
  $133$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $19$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($19 | 0, i64toi32_i32$2 | 0, 21 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $135$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $22$hi;
  i64toi32_i32$2 = $135$hi;
  i64toi32_i32$5 = i64toi32_i32$1;
  i64toi32_i32$1 = $22$hi;
  i64toi32_i32$3 = $22;
  i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
  $19 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  $19$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64($18 | 0, i64toi32_i32$1 | 0, 32 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$2 = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 255;
  i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
  $141 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $141$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $19$hi;
  i64toi32_i32$1 = $19;
  i64toi32_i32$2 = $141$hi;
  i64toi32_i32$3 = $141;
  i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $18 = i64toi32_i32$4;
  $18$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $133$hi;
  i64toi32_i32$5 = $133;
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$3 = i64toi32_i32$4;
  i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $21 = i64toi32_i32$2;
  $21$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $17$hi;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64($17 | 0, i64toi32_i32$4 | 0, 17 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $147 = i64toi32_i32$5;
  $147$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $21$hi;
  i64toi32_i32$0 = i64toi32_i32$2;
  i64toi32_i32$5 = $147$hi;
  i64toi32_i32$3 = $147;
  i64toi32_i32$5 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
  $17 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $17$hi = i64toi32_i32$5;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = __wasm_rotl_i64($17 | 0, i64toi32_i32$5 | 0, 13 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $150 = i64toi32_i32$0;
  $150$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $17$hi;
  $151 = $17;
  $151$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $19$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = __wasm_rotl_i64($19 | 0, i64toi32_i32$5 | 0, 16 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $153$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $18$hi;
  i64toi32_i32$5 = $153$hi;
  i64toi32_i32$4 = i64toi32_i32$0;
  i64toi32_i32$0 = $18$hi;
  i64toi32_i32$3 = $18;
  i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
  $18 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
  $18$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $20$hi;
  i64toi32_i32$4 = 0;
  i64toi32_i32$4 = __wasm_rotl_i64($20 | 0, i64toi32_i32$0 | 0, 32 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $158 = i64toi32_i32$4;
  $158$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $18$hi;
  i64toi32_i32$5 = $18;
  i64toi32_i32$4 = $158$hi;
  i64toi32_i32$3 = $158;
  i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $19 = i64toi32_i32$1;
  $19$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $151$hi;
  i64toi32_i32$0 = $151;
  i64toi32_i32$5 = $19$hi;
  i64toi32_i32$3 = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $17 = i64toi32_i32$4;
  $17$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $150$hi;
  i64toi32_i32$2 = $150;
  i64toi32_i32$0 = $17$hi;
  i64toi32_i32$3 = i64toi32_i32$4;
  i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
  $20 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
  $20$hi = i64toi32_i32$0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($20 | 0, i64toi32_i32$0 | 0, 17 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $165 = i64toi32_i32$2;
  $165$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $20$hi;
  $166 = $20;
  $166$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $18$hi;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($18 | 0, i64toi32_i32$0 | 0, 21 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $168$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $19$hi;
  i64toi32_i32$0 = $168$hi;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = $19$hi;
  i64toi32_i32$3 = $19;
  i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
  $18 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $18$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $21$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($21 | 0, i64toi32_i32$2 | 0, 32 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $173 = i64toi32_i32$1;
  $173$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $18$hi;
  i64toi32_i32$0 = $18;
  i64toi32_i32$1 = $173$hi;
  i64toi32_i32$3 = $173;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $19 = i64toi32_i32$5;
  $19$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $166$hi;
  i64toi32_i32$2 = $166;
  i64toi32_i32$0 = $19$hi;
  i64toi32_i32$3 = i64toi32_i32$5;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
  i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $20 = i64toi32_i32$1;
  $20$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $165$hi;
  i64toi32_i32$4 = $165;
  i64toi32_i32$2 = $20$hi;
  i64toi32_i32$3 = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
  $21 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
  $21$hi = i64toi32_i32$2;
  i64toi32_i32$4 = 0;
  i64toi32_i32$4 = __wasm_rotl_i64($21 | 0, i64toi32_i32$2 | 0, 13 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $180 = i64toi32_i32$4;
  $180$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $21$hi;
  $181 = $21;
  $181$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $18$hi;
  i64toi32_i32$4 = 0;
  i64toi32_i32$4 = __wasm_rotl_i64($18 | 0, i64toi32_i32$2 | 0, 16 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $183$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $19$hi;
  i64toi32_i32$2 = $183$hi;
  i64toi32_i32$5 = i64toi32_i32$4;
  i64toi32_i32$4 = $19$hi;
  i64toi32_i32$3 = $19;
  i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
  $18 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  $18$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $17$hi;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64($17 | 0, i64toi32_i32$4 | 0, 32 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $188 = i64toi32_i32$5;
  $188$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $18$hi;
  i64toi32_i32$2 = $18;
  i64toi32_i32$5 = $188$hi;
  i64toi32_i32$3 = $188;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $17 = i64toi32_i32$0;
  $17$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $181$hi;
  i64toi32_i32$4 = $181;
  i64toi32_i32$2 = $17$hi;
  i64toi32_i32$3 = i64toi32_i32$0;
  i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $191$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $180$hi;
  i64toi32_i32$1 = $180;
  i64toi32_i32$4 = $191$hi;
  i64toi32_i32$3 = i64toi32_i32$5;
  i64toi32_i32$4 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
  $19 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
  $19$hi = i64toi32_i32$4;
  $193 = $19;
  $193$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $18$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($18 | 0, i64toi32_i32$4 | 0, 21 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $195$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $17$hi;
  i64toi32_i32$4 = $195$hi;
  i64toi32_i32$0 = i64toi32_i32$1;
  i64toi32_i32$1 = $17$hi;
  i64toi32_i32$3 = $17;
  i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
  $17 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $17$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $20$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = __wasm_rotl_i64($20 | 0, i64toi32_i32$1 | 0, 32 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $200 = i64toi32_i32$0;
  $200$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $17$hi;
  i64toi32_i32$4 = $17;
  i64toi32_i32$0 = $200$hi;
  i64toi32_i32$3 = $200;
  i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $18 = i64toi32_i32$2;
  $18$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $193$hi;
  i64toi32_i32$1 = $193;
  i64toi32_i32$4 = $18$hi;
  i64toi32_i32$3 = i64toi32_i32$2;
  i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
  i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $20 = i64toi32_i32$0;
  $20$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $17$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($17 | 0, i64toi32_i32$2 | 0, 16 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $206$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $18$hi;
  i64toi32_i32$2 = $206$hi;
  i64toi32_i32$5 = i64toi32_i32$1;
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$3 = $18;
  i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
  $112 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64($112 | 0, i64toi32_i32$1 | 0, 21 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $209 = i64toi32_i32$5;
  $209$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $20$hi;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$5 = $209$hi;
  i64toi32_i32$3 = $209;
  i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
  $210 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $210$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $19$hi;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($19 | 0, i64toi32_i32$5 | 0, 17 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $212 = i64toi32_i32$2;
  $212$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $210$hi;
  i64toi32_i32$1 = $210;
  i64toi32_i32$2 = $212$hi;
  i64toi32_i32$3 = $212;
  i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
  $213 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $213$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $20$hi;
  i64toi32_i32$5 = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $110 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $110 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
  }
  $215$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $213$hi;
  i64toi32_i32$2 = $213;
  i64toi32_i32$5 = $215$hi;
  i64toi32_i32$3 = $110;
  i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
  $4 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $5 = $4 >>> 25 | 0;
  $5 = $5 << 8 | 0 | $5 | 0;
  $8 = $5 << 16 | 0 | $5 | 0;
  $6 = HEAP32[($1 + 16 | 0) >> 2] | 0;
  $4 = $6 & $4 | 0;
  $5 = HEAP32[($1 + 24 | 0) >> 2] | 0;
  $9 = HEAP32[($1 + 20 | 0) >> 2] | 0;
  $10 = HEAP32[($2 + 8 | 0) >> 2] | 0;
  $11 = HEAP32[($2 + 4 | 0) >> 2] | 0;
  $12 = HEAP32[$2 >> 2] | 0;
  $13 = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     label$4 : {
      $107 = $9 + $4 | 0;
      $14 = HEAPU8[$107 >> 0] | 0 | ((HEAPU8[($107 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($107 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($107 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      $1 = $14 ^ $8 | 0;
      $15 = (($1 ^ -1 | 0) & ($1 + -16843009 | 0) | 0) & -2139062144 | 0;
      if (!$15) {
       break label$4
      }
      label$5 : while (1) {
       label$6 : {
        $16 = (((__wasm_ctz_i32($15 | 0) | 0) >>> 3 | 0) + $4 | 0) & $6 | 0;
        $1 = $5 + Math_imul($16, 20) | 0;
        if (($12 | 0) != (HEAP32[$1 >> 2] | 0 | 0)) {
         break label$6
        }
        if (($11 | 0) != (HEAP32[($1 + 4 | 0) >> 2] | 0 | 0)) {
         break label$6
        }
        if (($10 | 0) != (HEAP32[($1 + 8 | 0) >> 2] | 0 | 0)) {
         break label$6
        }
        if (($7 | 0) == (HEAP32[($1 + 12 | 0) >> 2] | 0 | 0)) {
         break label$2
        }
       }
       $15 = ($15 + -1 | 0) & $15 | 0;
       if ($15) {
        continue label$5
       }
       break label$5;
      };
     }
     $13 = $13 + 4 | 0;
     $4 = ($13 + $4 | 0) & $6 | 0;
     if (!(($14 & ($14 << 1 | 0) | 0) & -2139062144 | 0)) {
      continue label$3
     }
     break label$3;
    };
    HEAP32[($0 + 4 | 0) >> 2] = 0;
    i64toi32_i32$1 = $2;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $309 = i64toi32_i32$5;
    i64toi32_i32$5 = $0 + 8 | 0;
    HEAP32[i64toi32_i32$5 >> 2] = $309;
    HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $314 = i64toi32_i32$2;
    i64toi32_i32$2 = $0 + 16 | 0;
    HEAP32[i64toi32_i32$2 >> 2] = $314;
    HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
    $2 = 1;
    break label$1;
   }
   HEAP32[($0 + 4 | 0) >> 2] = HEAP32[(($5 + Math_imul($16, 20) | 0) + 16 | 0) >> 2] | 0;
   $2 = 0;
  }
  HEAP32[$0 >> 2] = $2;
  global$0 = $3 + 80 | 0;
 }
 
 function core__fmt__Formatter__pad_integral__h253f31941eb77fc7($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $9 = 0, $8 = 0, $10 = 0, $6 = 0, $11 = 0, $7 = 0;
  label$1 : {
   label$2 : {
    if (!$1) {
     break label$2
    }
    $6 = HEAP32[$0 >> 2] | 0;
    $1 = $6 & 1 | 0;
    $7 = $1 ? 43 : 1114112;
    $8 = $1 + $5 | 0;
    break label$1;
   }
   $8 = $5 + 1 | 0;
   $6 = HEAP32[$0 >> 2] | 0;
   $7 = 45;
  }
  label$3 : {
   label$4 : {
    if ($6 & 4 | 0) {
     break label$4
    }
    $2 = 0;
    break label$3;
   }
   $9 = 0;
   label$5 : {
    if (!$3) {
     break label$5
    }
    $10 = $3;
    $1 = $2;
    label$6 : while (1) {
     $9 = $9 + (((HEAPU8[$1 >> 0] | 0) & 192 | 0 | 0) == (128 | 0)) | 0;
     $1 = $1 + 1 | 0;
     $10 = $10 + -1 | 0;
     if ($10) {
      continue label$6
     }
     break label$6;
    };
   }
   $8 = ($8 + $3 | 0) - $9 | 0;
  }
  $1 = 1;
  label$7 : {
   label$8 : {
    label$9 : {
     label$10 : {
      label$11 : {
       label$12 : {
        label$13 : {
         label$14 : {
          label$15 : {
           label$16 : {
            label$17 : {
             label$18 : {
              if ((HEAP32[($0 + 8 | 0) >> 2] | 0 | 0) != (1 | 0)) {
               break label$18
              }
              $9 = HEAP32[($0 + 12 | 0) >> 2] | 0;
              if ($9 >>> 0 <= $8 >>> 0) {
               break label$17
              }
              if ($6 & 8 | 0) {
               break label$16
              }
              $11 = $9 - $8 | 0;
              $1 = HEAPU8[($0 + 48 | 0) >> 0] | 0;
              $1 = ($1 | 0) == (3 | 0) ? 1 : $1;
              if (!($1 & 3 | 0)) {
               break label$15
              }
              if (($1 | 0) == (2 | 0)) {
               break label$14
              }
              $9 = $11;
              $11 = 0;
              break label$13;
             }
             if (core__fmt__Formatter__pad_integral__write_prefix__h8ff96a3030fbf13b($0 | 0, $7 | 0, $2 | 0, $3 | 0) | 0) {
              break label$9
             }
             return FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[($0 + 24 | 0) >> 2] | 0, $4, $5) | 0 | 0;
            }
            if (core__fmt__Formatter__pad_integral__write_prefix__h8ff96a3030fbf13b($0 | 0, $7 | 0, $2 | 0, $3 | 0) | 0) {
             break label$9
            }
            return FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[($0 + 24 | 0) >> 2] | 0, $4, $5) | 0 | 0;
           }
           $1 = 1;
           HEAP8[($0 + 48 | 0) >> 0] = 1;
           HEAP32[($0 + 4 | 0) >> 2] = 48;
           if (core__fmt__Formatter__pad_integral__write_prefix__h8ff96a3030fbf13b($0 | 0, $7 | 0, $2 | 0, $3 | 0) | 0) {
            break label$9
           }
           $8 = $9 - $8 | 0;
           $1 = HEAPU8[($0 + 48 | 0) >> 0] | 0;
           $1 = ($1 | 0) == (3 | 0) ? 1 : $1;
           if (!($1 & 3 | 0)) {
            break label$12
           }
           if (($1 | 0) == (2 | 0)) {
            break label$11
           }
           $9 = $8;
           $8 = 0;
           break label$10;
          }
          $9 = 0;
          break label$13;
         }
         $9 = $11 >>> 1 | 0;
         $11 = ($11 + 1 | 0) >>> 1 | 0;
        }
        $1 = -1;
        $10 = $0 + 4 | 0;
        $8 = $0 + 24 | 0;
        $6 = $0 + 28 | 0;
        label$19 : {
         label$20 : while (1) {
          $1 = $1 + 1 | 0;
          if ($1 >>> 0 >= $9 >>> 0) {
           break label$19
          }
          if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$6 >> 2] | 0) + 16 | 0) >> 2] | 0](HEAP32[$8 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0)) {
           continue label$20
          }
          break label$20;
         };
         return 1 | 0;
        }
        $10 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        $1 = 1;
        if (core__fmt__Formatter__pad_integral__write_prefix__h8ff96a3030fbf13b($0 | 0, $7 | 0, $2 | 0, $3 | 0) | 0) {
         break label$9
        }
        $9 = $0 + 24 | 0;
        $3 = $0 + 28 | 0;
        if (FUNCTION_TABLE[HEAP32[((HEAP32[$3 >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[$9 >> 2] | 0, $4, $5) | 0) {
         break label$9
        }
        $0 = HEAP32[$9 >> 2] | 0;
        $9 = -1;
        $3 = (HEAP32[$3 >> 2] | 0) + 16 | 0;
        label$21 : while (1) {
         $9 = $9 + 1 | 0;
         if ($9 >>> 0 >= $11 >>> 0) {
          break label$8
         }
         $1 = 1;
         if (!(FUNCTION_TABLE[HEAP32[$3 >> 2] | 0]($0, $10) | 0)) {
          continue label$21
         }
         break label$9;
        };
       }
       $9 = 0;
       break label$10;
      }
      $9 = $8 >>> 1 | 0;
      $8 = ($8 + 1 | 0) >>> 1 | 0;
     }
     $1 = -1;
     $10 = $0 + 4 | 0;
     $3 = $0 + 24 | 0;
     $2 = $0 + 28 | 0;
     label$22 : {
      label$23 : while (1) {
       $1 = $1 + 1 | 0;
       if ($1 >>> 0 >= $9 >>> 0) {
        break label$22
       }
       if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$2 >> 2] | 0) + 16 | 0) >> 2] | 0](HEAP32[$3 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0)) {
        continue label$23
       }
       break label$23;
      };
      return 1 | 0;
     }
     $10 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     $1 = 1;
     $9 = $0 + 24 | 0;
     $3 = $0 + 28 | 0;
     if (FUNCTION_TABLE[HEAP32[((HEAP32[$3 >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[$9 >> 2] | 0, $4, $5) | 0) {
      break label$9
     }
     $0 = HEAP32[$9 >> 2] | 0;
     $9 = -1;
     $3 = (HEAP32[$3 >> 2] | 0) + 16 | 0;
     label$24 : while (1) {
      $9 = $9 + 1 | 0;
      if ($9 >>> 0 >= $8 >>> 0) {
       break label$7
      }
      $1 = 1;
      if (!(FUNCTION_TABLE[HEAP32[$3 >> 2] | 0]($0, $10) | 0)) {
       continue label$24
      }
      break label$24;
     };
    }
    return $1 | 0;
   }
   return 0 | 0;
  }
  return 0 | 0;
 }
 
 function stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__h3df4c467acea4e11($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $9 = Math_fround(0), $4 = 0, $5 = 0, $3 = 0, $6 = 0, $10 = Math_fround(0), i64toi32_i32$0 = 0, $7 = 0, $8 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $71 = 0, $74 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f32$1 = Math_fround(0), wasm2js_i32$0 = 0;
  $3 = global$0 - 48 | 0;
  global$0 = $3;
  $9 = Math_fround(HEAPF32[($2 + 132 | 0) >> 2]);
  label$1 : {
   label$2 : {
    $4 = HEAPU8[(HEAP32[$1 >> 2] | 0) >> 0] | 0;
    if (($4 | 2 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    $5 = $2 + 112 | 0;
    $6 = $2 + 108 | 0;
    break label$1;
   }
   $5 = $2 + 104 | 0;
   $6 = $2 + 100 | 0;
  }
  $9 = Math_fround($9 - Math_fround(Math_fround(HEAPF32[$6 >> 2]) + Math_fround(HEAPF32[$5 >> 2])));
  label$3 : {
   label$4 : {
    if ((($4 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
     break label$4
    }
    $4 = $2 + 128 | 0;
    $5 = $2 + 124 | 0;
    break label$3;
   }
   $4 = $2 + 120 | 0;
   $5 = $2 + 116 | 0;
  }
  HEAPF32[($2 + 136 | 0) >> 2] = Math_fround($9 - Math_fround(Math_fround(HEAPF32[$5 >> 2]) + Math_fround(HEAPF32[$4 >> 2])));
  $4 = HEAP32[$2 >> 2] | 0;
  $5 = HEAP32[(HEAP32[($1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($3 + 24 | 0) >> 2] = 1;
  HEAP32[($3 + 16 | 0) >> 2] = 1;
  $6 = HEAP32[($1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$2 = $6 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $71 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3 + 32 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $71;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $6;
  i64toi32_i32$1 = HEAP32[$6 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($6 + 4 | 0) >> 2] | 0;
  $74 = i64toi32_i32$1;
  i64toi32_i32$1 = $3;
  HEAP32[($3 + 32 | 0) >> 2] = $74;
  HEAP32[($3 + 36 | 0) >> 2] = i64toi32_i32$0;
  stretch__algo___impl_20stretch__forest__Forest___compute_internal__h1faccff9b0af78e6($3 | 0, $5 | 0, $4 | 0, $3 + 16 | 0 | 0, $3 + 32 | 0 | 0, 0 | 0);
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  $5 = HEAP32[($3 + 4 | 0) >> 2] | 0;
  label$5 : {
   $6 = HEAP32[$3 >> 2] | 0;
   if (($6 | 0) == (1 | 0)) {
    break label$5
   }
   label$6 : {
    label$7 : {
     $7 = HEAPU8[(HEAP32[$1 >> 2] | 0) >> 0] | 0;
     $8 = $7 | 2 | 0;
     if (($8 | 0) != (3 | 0)) {
      break label$7
     }
     $9 = (wasm2js_scratch_store_i32(0, $4), wasm2js_scratch_load_f32());
     break label$6;
    }
    $9 = (wasm2js_scratch_store_i32(0, $5), wasm2js_scratch_load_f32());
   }
   label$8 : {
    label$9 : {
     if (($8 & 3 | 0 | 0) != (3 | 0)) {
      break label$9
     }
     $8 = HEAP32[($2 + 28 | 0) >> 2] | 0;
     $10 = Math_fround(HEAPF32[($2 + 32 | 0) >> 2]);
     break label$8;
    }
    $10 = Math_fround(HEAPF32[($2 + 24 | 0) >> 2]);
    $8 = HEAP32[($2 + 20 | 0) >> 2] | 0;
   }
   $9 = (wasm2js_f32$0 = $9, wasm2js_f32$1 = Math_fround(fmaxf(Math_fround($9), Math_fround($10))), wasm2js_i32$0 = $8, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
   label$10 : {
    label$11 : {
     if ((($7 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
      break label$11
     }
     $7 = HEAP32[($2 + 12 | 0) >> 2] | 0;
     $10 = Math_fround(HEAPF32[($2 + 16 | 0) >> 2]);
     break label$10;
    }
    $10 = Math_fround(HEAPF32[($2 + 8 | 0) >> 2]);
    $7 = HEAP32[($2 + 4 | 0) >> 2] | 0;
   }
   $9 = (wasm2js_f32$0 = $9, wasm2js_f32$1 = Math_fround(fminf(Math_fround($9), Math_fround($10))), wasm2js_i32$0 = $7, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
   label$12 : {
    if (!$6) {
     break label$12
    }
    FUNCTION_TABLE[HEAP32[$4 >> 2] | 0]($5);
    $6 = HEAP32[($4 + 4 | 0) >> 2] | 0;
    if (!$6) {
     break label$12
    }
    __rust_dealloc($5 | 0, $6 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
   }
   $9 = Math_fround(fmaxf(Math_fround(Math_fround(HEAPF32[($2 + 132 | 0) >> 2])), Math_fround($9)));
   label$13 : {
    label$14 : {
     $4 = HEAPU8[(HEAP32[$1 >> 2] | 0) >> 0] | 0 | 2 | 0;
     if (($4 | 0) != (3 | 0)) {
      break label$14
     }
     $5 = HEAP32[($2 + 44 | 0) >> 2] | 0;
     $10 = Math_fround(HEAPF32[($2 + 48 | 0) >> 2]);
     break label$13;
    }
    $10 = Math_fround(HEAPF32[($2 + 40 | 0) >> 2]);
    $5 = HEAP32[($2 + 36 | 0) >> 2] | 0;
   }
   $9 = (wasm2js_f32$0 = $9, wasm2js_f32$1 = Math_fround(fminf(Math_fround($9), Math_fround($10))), wasm2js_i32$0 = $5, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
   label$15 : {
    label$16 : {
     if (($4 & 3 | 0 | 0) != (3 | 0)) {
      break label$16
     }
     HEAPF32[($2 + 148 | 0) >> 2] = $9;
     $9 = Math_fround(HEAPF32[($2 + 144 | 0) >> 2]);
     break label$15;
    }
    HEAPF32[($2 + 144 | 0) >> 2] = $9;
   }
   label$17 : {
    $1 = HEAPU8[(HEAP32[$1 >> 2] | 0) >> 0] | 0;
    $4 = $1 | 2 | 0;
    if (($4 | 0) != (3 | 0)) {
     break label$17
    }
    $9 = Math_fround(HEAPF32[($2 + 148 | 0) >> 2]);
   }
   label$18 : {
    label$19 : {
     if (($4 & 3 | 0 | 0) != (3 | 0)) {
      break label$19
     }
     $4 = $2 + 96 | 0;
     $5 = $2 + 92 | 0;
     break label$18;
    }
    $4 = $2 + 88 | 0;
    $5 = $2 + 84 | 0;
   }
   $9 = Math_fround($9 + Math_fround(Math_fround(HEAPF32[$5 >> 2]) + Math_fround(HEAPF32[$4 >> 2])));
   label$20 : {
    label$21 : {
     if ((($1 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
      break label$21
     }
     HEAPF32[($2 + 156 | 0) >> 2] = $9;
     break label$20;
    }
    HEAPF32[($2 + 152 | 0) >> 2] = $9;
   }
   $5 = 0;
  }
  HEAP32[($0 + 4 | 0) >> 2] = $4;
  HEAP32[$0 >> 2] = $5;
  global$0 = $3 + 48 | 0;
 }
 
 function stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h80aa08f016ee8e10($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = $3 | 0;
  var $7 = 0, $14 = Math_fround(0), $6 = 0, $4 = 0, $5 = 0, $8 = 0, i64toi32_i32$0 = 0, $9 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $10 = Math_fround(0), $13 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $49 = 0, $52 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f32$1 = Math_fround(0), wasm2js_i32$0 = 0;
  $4 = global$0 - 48 | 0;
  global$0 = $4;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         if (!(HEAPU8[(HEAP32[$1 >> 2] | 0) >> 0] | 0)) {
          break label$7
         }
         $5 = HEAP32[(HEAP32[($1 + 4 | 0) >> 2] | 0) >> 2] | 0;
         $6 = HEAP32[($5 + 8 | 0) >> 2] | 0;
         $7 = HEAP32[$3 >> 2] | 0;
         $8 = HEAP32[$7 >> 2] | 0;
         if ($6 >>> 0 <= $8 >>> 0) {
          break label$3
         }
         if (HEAP32[(((HEAP32[$5 >> 2] | 0) + Math_imul($8, 288) | 0) + 212 | 0) >> 2] | 0) {
          break label$6
         }
         $7 = 1;
         HEAP32[($4 + 24 | 0) >> 2] = 1;
         HEAP32[($4 + 16 | 0) >> 2] = 1;
         $6 = HEAP32[($1 + 8 | 0) >> 2] | 0;
         i64toi32_i32$2 = $6 + 8 | 0;
         i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $49 = i64toi32_i32$0;
         i64toi32_i32$0 = ($4 + 32 | 0) + 8 | 0;
         HEAP32[i64toi32_i32$0 >> 2] = $49;
         HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
         i64toi32_i32$2 = $6;
         i64toi32_i32$1 = HEAP32[$6 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[($6 + 4 | 0) >> 2] | 0;
         $52 = i64toi32_i32$1;
         i64toi32_i32$1 = $4;
         HEAP32[($4 + 32 | 0) >> 2] = $52;
         HEAP32[($4 + 36 | 0) >> 2] = i64toi32_i32$0;
         $6 = 0;
         stretch__algo___impl_20stretch__forest__Forest___compute_internal__h1faccff9b0af78e6($4 | 0, $5 | 0, $8 | 0, $4 + 16 | 0 | 0, $4 + 32 | 0 | 0, 0 | 0);
         $8 = HEAP32[($4 + 8 | 0) >> 2] | 0;
         $5 = HEAP32[($4 + 4 | 0) >> 2] | 0;
         $9 = HEAP32[$4 >> 2] | 0;
         if (($9 | 0) != (1 | 0)) {
          break label$5
         }
         HEAP32[($0 + 4 | 0) >> 2] = $5;
         HEAP32[($0 + 8 | 0) >> 2] = $8;
         break label$1;
        }
        $7 = HEAP32[$3 >> 2] | 0;
       }
       if ((HEAPU8[(HEAP32[($1 + 12 | 0) >> 2] | 0) >> 0] | 0 | 2 | 0 | 0) != (3 | 0)) {
        break label$4
       }
       $6 = HEAP32[($7 + 28 | 0) >> 2] | 0;
       $10 = Math_fround(HEAPF32[($7 + 32 | 0) >> 2]);
       break label$2;
      }
      $14 = (wasm2js_scratch_store_i32(0, $5), wasm2js_scratch_load_f32());
      $7 = HEAP32[$3 >> 2] | 0;
      $14 = (wasm2js_f32$0 = $14, wasm2js_f32$1 = Math_fround(fminf(Math_fround($14), Math_fround(Math_fround(HEAPF32[($7 + 8 | 0) >> 2])))), wasm2js_i32$0 = HEAP32[($7 + 4 | 0) >> 2] | 0, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
      $10 = (wasm2js_f32$0 = $14, wasm2js_f32$1 = Math_fround(fmaxf(Math_fround($14), Math_fround(Math_fround(HEAPF32[($7 + 24 | 0) >> 2])))), wasm2js_i32$0 = HEAP32[($7 + 20 | 0) >> 2] | 0, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
      if (!$9) {
       break label$2
      }
      FUNCTION_TABLE[HEAP32[$8 >> 2] | 0]($5);
      $7 = HEAP32[($8 + 4 | 0) >> 2] | 0;
      if (!$7) {
       break label$2
      }
      __rust_dealloc($5 | 0, $7 | 0, HEAP32[($8 + 8 | 0) >> 2] | 0 | 0);
      break label$2;
     }
     $10 = Math_fround(HEAPF32[($7 + 24 | 0) >> 2]);
     $6 = HEAP32[($7 + 20 | 0) >> 2] | 0;
     break label$2;
    }
    core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $8 | 0, $6 | 0);
    abort();
   }
   $7 = HEAP32[$3 >> 2] | 0;
   label$8 : {
    label$9 : {
     $5 = HEAPU8[(HEAP32[($1 + 12 | 0) >> 2] | 0) >> 0] | 0;
     $8 = $5 | 2 | 0;
     if (($8 | 0) != (3 | 0)) {
      break label$9
     }
     $9 = HEAP32[($7 + 44 | 0) >> 2] | 0;
     $11 = Math_fround(HEAPF32[($7 + 48 | 0) >> 2]);
     break label$8;
    }
    $11 = Math_fround(HEAPF32[($7 + 40 | 0) >> 2]);
    $9 = HEAP32[($7 + 36 | 0) >> 2] | 0;
   }
   $12 = Math_fround(HEAPF32[($7 + 164 | 0) >> 2]);
   $13 = Math_fround(HEAPF32[($7 + 160 | 0) >> 2]);
   $14 = $13;
   label$10 : {
    if (($8 & 3 | 0 | 0) != (3 | 0)) {
     break label$10
    }
    $14 = $12;
   }
   $14 = (wasm2js_f32$0 = $14, wasm2js_f32$1 = Math_fround(fminf(Math_fround($14), Math_fround($11))), wasm2js_i32$0 = $9, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
   $14 = Math_fround(fmaxf(Math_fround((wasm2js_f32$0 = $14, wasm2js_f32$1 = Math_fround(fmaxf(Math_fround($14), Math_fround($10))), wasm2js_i32$0 = $6, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1)), Math_fround(Math_fround(0.0))));
   label$11 : {
    if ((($5 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
     break label$11
    }
    $13 = $12;
   }
   HEAPF32[($7 + 140 | 0) >> 2] = Math_fround($14 - $13);
   $7 = HEAP32[$3 >> 2] | 0;
   label$12 : {
    label$13 : {
     if ((HEAPU8[(HEAP32[($1 + 12 | 0) >> 2] | 0) >> 0] | 0 | 2 | 0 | 0) != (3 | 0)) {
      break label$13
     }
     $7 = $7 + 164 | 0;
     break label$12;
    }
    $7 = $7 + 160 | 0;
   }
   HEAPF32[$7 >> 2] = $14;
   $7 = HEAP32[$3 >> 2] | 0;
   label$14 : {
    label$15 : {
     $1 = HEAPU8[(HEAP32[($1 + 12 | 0) >> 2] | 0) >> 0] | 0;
     $6 = $1 | 2 | 0;
     if (($6 | 0) != (3 | 0)) {
      break label$15
     }
     $14 = Math_fround(HEAPF32[($7 + 164 | 0) >> 2]);
     break label$14;
    }
    $14 = Math_fround(HEAPF32[($7 + 160 | 0) >> 2]);
   }
   label$16 : {
    label$17 : {
     if (($6 & 3 | 0 | 0) != (3 | 0)) {
      break label$17
     }
     $6 = $7 + 96 | 0;
     $5 = $7 + 92 | 0;
     break label$16;
    }
    $6 = $7 + 88 | 0;
    $5 = $7 + 84 | 0;
   }
   $14 = Math_fround($14 + Math_fround(Math_fround(HEAPF32[$5 >> 2]) + Math_fround(HEAPF32[$6 >> 2])));
   label$18 : {
    label$19 : {
     if ((($1 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
      break label$19
     }
     $1 = $7 + 172 | 0;
     break label$18;
    }
    $1 = $7 + 168 | 0;
   }
   HEAPF32[$1 >> 2] = $14;
   HEAPF32[($0 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[$3 >> 2] | 0) + 140 | 0) >> 2]) + $2);
   $7 = 0;
  }
  HEAP32[$0 >> 2] = $7;
  global$0 = $4 + 48 | 0;
 }
 
 function dlmalloc__dlmalloc__Dlmalloc__realloc__h89a3982cb9693a20($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $7 = 0, $9 = 0, $5 = 0, $6 = 0, $8 = 0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = 0;
  label$1 : {
   if ($2 >>> 0 > -65588 >>> 0) {
    break label$1
   }
   $4 = $2 >>> 0 < 11 >>> 0 ? 16 : ($2 + 11 | 0) & -8 | 0;
   $5 = $1 + -4 | 0;
   $6 = HEAP32[$5 >> 2] | 0;
   $7 = $6 & -8 | 0;
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             if (!($6 & 3 | 0)) {
              break label$11
             }
             $8 = $1 + -8 | 0;
             $9 = $8 + $7 | 0;
             if ($7 >>> 0 >= $4 >>> 0) {
              break label$10
             }
             if ((HEAP32[($0 + 412 | 0) >> 2] | 0 | 0) == ($9 | 0)) {
              break label$9
             }
             if ((HEAP32[($0 + 408 | 0) >> 2] | 0 | 0) == ($9 | 0)) {
              break label$8
             }
             $6 = HEAP32[($9 + 4 | 0) >> 2] | 0;
             if ($6 & 2 | 0) {
              break label$7
             }
             $10 = $6 & -8 | 0;
             $7 = $10 + $7 | 0;
             if ($7 >>> 0 < $4 >>> 0) {
              break label$7
             }
             $2 = $7 - $4 | 0;
             if ($10 >>> 0 >= 256 >>> 0) {
              break label$5
             }
             $3 = HEAP32[($9 + 12 | 0) >> 2] | 0;
             $9 = HEAP32[($9 + 8 | 0) >> 2] | 0;
             if (($3 | 0) == ($9 | 0)) {
              break label$4
             }
             HEAP32[($9 + 12 | 0) >> 2] = $3;
             HEAP32[($3 + 8 | 0) >> 2] = $9;
             break label$3;
            }
            if ($4 >>> 0 < 256 >>> 0) {
             break label$7
            }
            if ($7 >>> 0 < ($4 | 4 | 0) >>> 0) {
             break label$7
            }
            if (($7 - $4 | 0) >>> 0 < 131073 >>> 0) {
             break label$2
            }
            break label$7;
           }
           $2 = $7 - $4 | 0;
           if ($2 >>> 0 < 16 >>> 0) {
            break label$2
           }
           HEAP32[$5 >> 2] = $4 | ($6 & 1 | 0) | 0 | 2 | 0;
           $3 = $8 + $4 | 0;
           HEAP32[($3 + 4 | 0) >> 2] = $2 | 3 | 0;
           HEAP32[($9 + 4 | 0) >> 2] = HEAP32[($9 + 4 | 0) >> 2] | 0 | 1 | 0;
           dlmalloc__dlmalloc__Dlmalloc__dispose_chunk__h6f59f1d81bec5e46($0 | 0, $3 | 0, $2 | 0);
           break label$2;
          }
          $7 = (HEAP32[($0 + 404 | 0) >> 2] | 0) + $7 | 0;
          if ($7 >>> 0 <= $4 >>> 0) {
           break label$7
          }
          HEAP32[$5 >> 2] = $4 | ($6 & 1 | 0) | 0 | 2 | 0;
          $2 = $8 + $4 | 0;
          $3 = $7 - $4 | 0;
          HEAP32[($2 + 4 | 0) >> 2] = $3 | 1 | 0;
          HEAP32[($0 + 404 | 0) >> 2] = $3;
          HEAP32[($0 + 412 | 0) >> 2] = $2;
          break label$2;
         }
         $7 = (HEAP32[($0 + 400 | 0) >> 2] | 0) + $7 | 0;
         if ($7 >>> 0 >= $4 >>> 0) {
          break label$6
         }
        }
        $4 = dlmalloc__dlmalloc__Dlmalloc__malloc__haa66310b00a7bd6b($0 | 0, $2 | 0) | 0;
        if (!$4) {
         break label$1
        }
        $3 = HEAP32[$5 >> 2] | 0;
        $3 = ($3 & -8 | 0) - ($3 & 3 | 0 ? 4 : 8) | 0;
        $2 = memcpy($4 | 0, $1 | 0, ($3 >>> 0 > $2 >>> 0 ? $2 : $3) | 0) | 0;
        dlmalloc__dlmalloc__Dlmalloc__free__h4acdae787fb6f877($0 | 0, $1 | 0);
        return $2 | 0;
       }
       label$12 : {
        label$13 : {
         $2 = $7 - $4 | 0;
         if ($2 >>> 0 > 15 >>> 0) {
          break label$13
         }
         HEAP32[$5 >> 2] = $6 & 1 | 0 | $7 | 0 | 2 | 0;
         $2 = $8 + $7 | 0;
         HEAP32[($2 + 4 | 0) >> 2] = HEAP32[($2 + 4 | 0) >> 2] | 0 | 1 | 0;
         $2 = 0;
         $3 = 0;
         break label$12;
        }
        HEAP32[$5 >> 2] = $4 | ($6 & 1 | 0) | 0 | 2 | 0;
        $3 = $8 + $4 | 0;
        HEAP32[($3 + 4 | 0) >> 2] = $2 | 1 | 0;
        $4 = $8 + $7 | 0;
        HEAP32[$4 >> 2] = $2;
        HEAP32[($4 + 4 | 0) >> 2] = (HEAP32[($4 + 4 | 0) >> 2] | 0) & -2 | 0;
       }
       HEAP32[($0 + 408 | 0) >> 2] = $3;
       HEAP32[($0 + 400 | 0) >> 2] = $2;
       break label$2;
      }
      dlmalloc__dlmalloc__Dlmalloc__unlink_large_chunk__h173f6e2d56218081($0 | 0, $9 | 0);
      break label$3;
     }
     (wasm2js_i32$0 = $0, wasm2js_i32$1 = (HEAP32[$0 >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $6 >>> 3 | 0 | 0) | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    label$14 : {
     if ($2 >>> 0 >= 16 >>> 0) {
      break label$14
     }
     HEAP32[$5 >> 2] = $7 | ((HEAP32[$5 >> 2] | 0) & 1 | 0) | 0 | 2 | 0;
     $2 = $8 + $7 | 0;
     HEAP32[($2 + 4 | 0) >> 2] = HEAP32[($2 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$2;
    }
    HEAP32[$5 >> 2] = $4 | ((HEAP32[$5 >> 2] | 0) & 1 | 0) | 0 | 2 | 0;
    $3 = $8 + $4 | 0;
    HEAP32[($3 + 4 | 0) >> 2] = $2 | 3 | 0;
    $4 = $8 + $7 | 0;
    HEAP32[($4 + 4 | 0) >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0 | 1 | 0;
    dlmalloc__dlmalloc__Dlmalloc__dispose_chunk__h6f59f1d81bec5e46($0 | 0, $3 | 0, $2 | 0);
   }
   $3 = $1;
  }
  return $3 | 0;
 }
 
 function core__slice__memchr__memchr__h7af23d5070345c6c($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $5 = 0, $10 = 0, $7 = 0, $9 = 0, $4 = 0, $8 = 0, $6 = 0;
  $4 = 0;
  label$1 : {
   label$2 : {
    $5 = $2 & 3 | 0;
    if (!$5) {
     break label$2
    }
    $5 = 4 - $5 | 0;
    if (!$5) {
     break label$2
    }
    $4 = $5 >>> 0 > $3 >>> 0 ? $3 : $5;
    $6 = $2 + $4 | 0;
    $5 = 0;
    $7 = $1 & 255 | 0;
    $8 = $4;
    $9 = $2;
    label$3 : {
     label$4 : {
      label$5 : while (1) {
       if (($6 - $9 | 0) >>> 0 <= 3 >>> 0) {
        break label$4
       }
       $10 = HEAPU8[$9 >> 0] | 0;
       $5 = $5 + (($10 | 0) != ($7 | 0)) | 0;
       if (($10 | 0) == ($7 | 0)) {
        break label$3
       }
       $10 = HEAPU8[($9 + 1 | 0) >> 0] | 0;
       $5 = $5 + (($10 | 0) != ($7 | 0)) | 0;
       if (($10 | 0) == ($7 | 0)) {
        break label$3
       }
       $10 = HEAPU8[($9 + 2 | 0) >> 0] | 0;
       $5 = $5 + (($10 | 0) != ($7 | 0)) | 0;
       if (($10 | 0) == ($7 | 0)) {
        break label$3
       }
       $10 = HEAPU8[($9 + 3 | 0) >> 0] | 0;
       $5 = $5 + (($10 | 0) != ($7 | 0)) | 0;
       $8 = $8 + -4 | 0;
       $9 = $9 + 4 | 0;
       if (($10 | 0) != ($7 | 0)) {
        continue label$5
       }
       break label$3;
      };
     }
     $7 = 0;
     $6 = $1 & 255 | 0;
     label$6 : while (1) {
      if (!$8) {
       break label$2
      }
      $10 = $9 + $7 | 0;
      $8 = $8 + -1 | 0;
      $7 = $7 + 1 | 0;
      $10 = HEAPU8[$10 >> 0] | 0;
      if (($10 | 0) != ($6 | 0)) {
       continue label$6
      }
      break label$6;
     };
     $5 = (((((($10 | 0) == ($1 & 255 | 0 | 0)) + 1 | 0) & 1 | 0) + $5 | 0) + $7 | 0) + -1 | 0;
    }
    $9 = 1;
    break label$1;
   }
   $7 = $1 & 255 | 0;
   label$7 : {
    label$8 : {
     if ($3 >>> 0 < 8 >>> 0) {
      break label$8
     }
     $10 = $3 + -8 | 0;
     if ($4 >>> 0 > $10 >>> 0) {
      break label$8
     }
     $5 = Math_imul($7, 16843009);
     label$9 : {
      label$10 : while (1) {
       $9 = $2 + $4 | 0;
       $8 = (HEAP32[($9 + 4 | 0) >> 2] | 0) ^ $5 | 0;
       $9 = (HEAP32[$9 >> 2] | 0) ^ $5 | 0;
       if ((($8 ^ -1 | 0) & ($8 + -16843009 | 0) | 0 | (($9 ^ -1 | 0) & ($9 + -16843009 | 0) | 0) | 0) & -2139062144 | 0) {
        break label$9
       }
       $4 = $4 + 8 | 0;
       if ($4 >>> 0 <= $10 >>> 0) {
        continue label$10
       }
       break label$10;
      };
     }
     if ($4 >>> 0 > $3 >>> 0) {
      break label$7
     }
    }
    $9 = $2 + $4 | 0;
    $2 = $2 + $3 | 0;
    $8 = $3 - $4 | 0;
    $5 = 0;
    label$11 : {
     label$12 : {
      label$13 : {
       label$14 : while (1) {
        if (($2 - $9 | 0) >>> 0 <= 3 >>> 0) {
         break label$13
        }
        $10 = HEAPU8[$9 >> 0] | 0;
        $5 = $5 + (($10 | 0) != ($7 | 0)) | 0;
        if (($10 | 0) == ($7 | 0)) {
         break label$12
        }
        $10 = HEAPU8[($9 + 1 | 0) >> 0] | 0;
        $5 = $5 + (($10 | 0) != ($7 | 0)) | 0;
        if (($10 | 0) == ($7 | 0)) {
         break label$12
        }
        $10 = HEAPU8[($9 + 2 | 0) >> 0] | 0;
        $5 = $5 + (($10 | 0) != ($7 | 0)) | 0;
        if (($10 | 0) == ($7 | 0)) {
         break label$12
        }
        $10 = HEAPU8[($9 + 3 | 0) >> 0] | 0;
        $5 = $5 + (($10 | 0) != ($7 | 0)) | 0;
        $8 = $8 + -4 | 0;
        $9 = $9 + 4 | 0;
        if (($10 | 0) != ($7 | 0)) {
         continue label$14
        }
        break label$12;
       };
      }
      $7 = 0;
      $2 = $1 & 255 | 0;
      label$15 : while (1) {
       if (!$8) {
        break label$11
       }
       $10 = $9 + $7 | 0;
       $8 = $8 + -1 | 0;
       $7 = $7 + 1 | 0;
       $10 = HEAPU8[$10 >> 0] | 0;
       if (($10 | 0) != ($2 | 0)) {
        continue label$15
       }
       break label$15;
      };
      $5 = (((((($10 | 0) == ($1 & 255 | 0 | 0)) + 1 | 0) & 1 | 0) + $5 | 0) + $7 | 0) + -1 | 0;
     }
     $9 = 1;
     $5 = $5 + $4 | 0;
     break label$1;
    }
    $9 = 0;
    $5 = ($5 + $7 | 0) + $4 | 0;
    break label$1;
   }
   core__slice__slice_index_order_fail__ha75fa70416d3bc2f($4 | 0, $3 | 0);
   abort();
  }
  HEAP32[($0 + 4 | 0) >> 2] = $5;
  HEAP32[$0 >> 2] = $9;
 }
 
 function core__num__dec2flt__algorithm__algorithm_m__h98d3ac2557e797f4($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, $6 = Math_fround(0), i64toi32_i32$1 = 0, $3 = 0, $4 = 0, $5 = 0, $5$hi = 0;
  $2 = global$0 - 1536 | 0;
  global$0 = $2;
  $3 = $1 << 16 | 0;
  $4 = $3 >> 31 | 0;
  $1 = ((($1 + $4 | 0) ^ $4 | 0) << 16 | 0) >> 16 | 0;
  HEAP16[($2 + 358 | 0) >> 1] = 0;
  label$1 : {
   label$2 : {
    if (($3 >> 16 | 0 | 0) < (0 | 0)) {
     break label$2
    }
    $core__num__bignum__Big32x40_20as_20core__clone__Clone___clone__h6d9ab1cb70598592($2 + 1368 | 0 | 0, $0 | 0);
    memcpy($2 + 24 | 0 | 0, $2 + 1368 | 0 | 0, 164 | 0) | 0;
    core__num__bignum__Big32x40__mul_pow2__h9585b2465912363e(core__num__bignum__Big32x40__mul_pow5__h5aa98cad29f0d9cf($2 + 24 | 0 | 0, $1 | 0) | 0 | 0, $1 | 0) | 0;
    core__num__bignum__Big32x40__from_small__h597a0b75ac140389($2 + 1368 | 0 | 0, 1 | 0);
    memcpy($2 + 192 | 0 | 0, $2 + 1368 | 0 | 0, 164 | 0) | 0;
    break label$1;
   }
   $core__num__bignum__Big32x40_20as_20core__clone__Clone___clone__h6d9ab1cb70598592($2 + 1368 | 0 | 0, $0 | 0);
   memcpy($2 + 24 | 0 | 0, $2 + 1368 | 0 | 0, 164 | 0) | 0;
   core__num__bignum__Big32x40__from_small__h597a0b75ac140389($2 + 1368 | 0 | 0, 1 | 0);
   memcpy($2 + 192 | 0 | 0, $2 + 1368 | 0 | 0, 164 | 0) | 0;
   core__num__bignum__Big32x40__mul_pow2__h9585b2465912363e(core__num__bignum__Big32x40__mul_pow5__h5aa98cad29f0d9cf($2 + 192 | 0 | 0, $1 | 0) | 0 | 0, $1 | 0) | 0;
  }
  core__num__dec2flt__algorithm__quick_start__h42b2807582e4051c($2 + 24 | 0 | 0, $2 + 192 | 0 | 0, $2 + 358 | 0 | 0);
  core__num__bignum__Big32x40__from_small__h597a0b75ac140389($2 + 360 | 0 | 0, 0 | 0);
  core__num__bignum__Big32x40__from_small__h597a0b75ac140389($2 + 528 | 0 | 0, 0 | 0);
  i64toi32_i32$0 = 0;
  core__num__bignum__Big32x40__from_u64__hb47af5bbea157ebc($2 + 696 | 0 | 0, 8388608 | 0, i64toi32_i32$0 | 0);
  i64toi32_i32$0 = 0;
  core__num__bignum__Big32x40__from_u64__hb47af5bbea157ebc($2 + 864 | 0 | 0, 16777215 | 0, i64toi32_i32$0 | 0);
  $1 = HEAPU16[($2 + 358 | 0) >> 1] | 0;
  core__num__bignum__Big32x40__div_rem__hdacb35c2d8ce4a26($2 + 24 | 0 | 0, $2 + 192 | 0 | 0, $2 + 528 | 0 | 0, $2 + 360 | 0 | 0);
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       if (($1 | 0) == (65387 | 0)) {
        break label$7
       }
       label$8 : while (1) {
        if ((($1 << 16 | 0) >> 16 | 0 | 0) > (104 | 0)) {
         break label$6
        }
        label$9 : {
         label$10 : {
          if ((($core__num__bignum__Big32x40_20as_20core__cmp__Ord___cmp__h9d6c8e8935c913cf($2 + 528 | 0 | 0, $2 + 696 | 0 | 0) | 0) & 255 | 0 | 0) == (255 | 0)) {
           break label$10
          }
          if ((($core__num__bignum__Big32x40_20as_20core__cmp__Ord___cmp__h9d6c8e8935c913cf($2 + 528 | 0 | 0, $2 + 864 | 0 | 0) | 0) & 255 | 0 | 0) != (1 | 0)) {
           break label$5
          }
          $0 = 1;
          core__num__bignum__Big32x40__mul_pow2__h9585b2465912363e($2 + 192 | 0 | 0, 1 | 0) | 0;
          break label$9;
         }
         core__num__bignum__Big32x40__mul_pow2__h9585b2465912363e($2 + 24 | 0 | 0, 1 | 0) | 0;
         $0 = 65535;
        }
        core__num__bignum__Big32x40__div_rem__hdacb35c2d8ce4a26($2 + 24 | 0 | 0, $2 + 192 | 0 | 0, $2 + 528 | 0 | 0, $2 + 360 | 0 | 0);
        $1 = $1 + $0 | 0;
        if (($1 & 65535 | 0 | 0) != (65387 | 0)) {
         continue label$8
        }
        break label$8;
       };
       HEAP16[($2 + 358 | 0) >> 1] = 65387;
      }
      label$11 : {
       if ((($core__num__bignum__Big32x40_20as_20core__cmp__Ord___cmp__h9d6c8e8935c913cf($2 + 528 | 0 | 0, $2 + 696 | 0 | 0) | 0) & 255 | 0) >>> 0 > 1 >>> 0) {
        break label$11
       }
       $0 = $core__num__bignum__Big32x40_20as_20core__cmp__Ord___cmp__h9d6c8e8935c913cf($2 + 528 | 0 | 0, $2 + 864 | 0 | 0) | 0;
       if (($0 & 255 | 0 | 0) == (2 | 0)) {
        break label$11
       }
       $1 = 65387;
       if (((($0 << 24 | 0) >> 24 | 0) + 1 | 0) >>> 0 < 2 >>> 0) {
        break label$4
       }
      }
      memcpy($2 + 1032 | 0 | 0, $2 + 528 | 0 | 0, 164 | 0) | 0;
      memcpy($2 + 1200 | 0 | 0, $2 + 192 | 0 | 0, 164 | 0) | 0;
      memcpy($2 + 1368 | 0 | 0, $2 + 360 | 0 | 0, 164 | 0) | 0;
      $6 = Math_fround(core__num__dec2flt__algorithm__underflow__hf0cfbbd4e5bacbdb($2 + 1032 | 0 | 0, $2 + 1200 | 0 | 0, $2 + 1368 | 0 | 0));
      break label$3;
     }
     HEAP16[($2 + 358 | 0) >> 1] = $1;
     $6 = Math_fround(infinity);
     break label$3;
    }
    HEAP16[($2 + 358 | 0) >> 1] = $1;
   }
   i64toi32_i32$0 = core__num__dec2flt__num__to_u64__h5d5282c7dcdcfd3f($2 + 528 | 0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $5 = i64toi32_i32$0;
   $5$hi = i64toi32_i32$1;
   core__num__dec2flt__rawfp__Unpacked__new__h5fa9d5bfbc21692b($2 + 8 | 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $1 | 0);
   i64toi32_i32$1 = HEAP32[($2 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($2 + 12 | 0) >> 2] | 0;
   $6 = Math_fround(core__num__dec2flt__rawfp__encode_normal__h79788dc1a919ce5b(i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, HEAPU16[($2 + 16 | 0) >> 1] | 0 | 0));
   memcpy($2 + 1200 | 0 | 0, $2 + 192 | 0 | 0, 164 | 0) | 0;
   memcpy($2 + 1368 | 0 | 0, $2 + 360 | 0 | 0, 164 | 0) | 0;
   i64toi32_i32$0 = $5$hi;
   $6 = Math_fround(core__num__dec2flt__algorithm__round_by_remainder__h3d86a91325e59e59($2 + 1200 | 0 | 0, $2 + 1368 | 0 | 0, $5 | 0, i64toi32_i32$0 | 0, Math_fround($6)));
  }
  global$0 = $2 + 1536 | 0;
  return Math_fround($6);
 }
 
 function core__num__dec2flt__rawfp__big_to_fp__h3ecadc46bb8700fe($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $2 = 0, $9 = 0, $9$hi = 0, $10 = 0, $3 = 0, $10$hi = 0, $6 = 0, $4 = 0, $5 = 0, $7 = 0, $11 = 0, $11$hi = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $8 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $37$hi = 0, $48$hi = 0, $54$hi = 0, $61$hi = 0, $68$hi = 0, $75$hi = 0, $82$hi = 0, $88 = 0, $88$hi = 0, $91$hi = 0, $118 = 0, $175$hi = 0, $182$hi = 0, $189$hi = 0, $196$hi = 0, $203$hi = 0, $209 = 0, $209$hi = 0, $212$hi = 0, $237 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $2 = core__num__bignum__Big32x40__bit_length__h13ff63659f8edff3($1 | 0) | 0;
     if (!$2) {
      break label$3
     }
     $3 = $2 + -64 | 0;
     $4 = $3 >>> 0 > $2 >>> 0 ? 0 : $3;
     if (($2 - $4 | 0) >>> 0 > 64 >>> 0) {
      break label$2
     }
     i64toi32_i32$0 = 0;
     $9 = 0;
     $9$hi = i64toi32_i32$0;
     label$4 : {
      label$5 : {
       label$6 : {
        if ($2 >>> 0 <= $4 >>> 0) {
         break label$6
        }
        i64toi32_i32$0 = 0;
        $9 = 0;
        $9$hi = i64toi32_i32$0;
        label$7 : while (1) {
         $2 = $2 + -1 | 0;
         $3 = $2 >>> 5 | 0;
         if ($2 >>> 0 >= 1280 >>> 0) {
          break label$5
         }
         i64toi32_i32$0 = $9$hi;
         i64toi32_i32$2 = $9;
         i64toi32_i32$1 = 0;
         i64toi32_i32$3 = 1;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
          $41 = 0;
         } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
          $41 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         }
         $37$hi = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         $48$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $37$hi;
         i64toi32_i32$0 = $41;
         i64toi32_i32$2 = $48$hi;
         i64toi32_i32$3 = ((HEAP32[(($1 + ($3 << 2 | 0) | 0) + 4 | 0) >> 2] | 0) >>> ($2 & 31 | 0) | 0) & 1 | 0;
         i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
         $9 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
         $9$hi = i64toi32_i32$2;
         if ($2 >>> 0 > $4 >>> 0) {
          continue label$7
         }
         break label$7;
        };
       }
       i64toi32_i32$2 = $9$hi;
       i64toi32_i32$1 = $9;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 32;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
        $42 = 0;
       } else {
        i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
        $42 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       }
       $54$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$2 = $9;
       i64toi32_i32$1 = 1;
       i64toi32_i32$3 = 0;
       $2 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$4 = $2;
       i64toi32_i32$2 = $54$hi;
       i64toi32_i32$1 = i64toi32_i32$4 ? $42 : $9;
       i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$0;
       $10 = i64toi32_i32$1;
       $10$hi = i64toi32_i32$3;
       i64toi32_i32$4 = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 16;
       i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
        $43 = 0;
       } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
        $43 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
       }
       $61$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $10$hi;
       i64toi32_i32$3 = $10;
       i64toi32_i32$4 = 65536;
       i64toi32_i32$2 = 0;
       $3 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
       i64toi32_i32$0 = $3;
       i64toi32_i32$3 = $61$hi;
       i64toi32_i32$4 = i64toi32_i32$0 ? $43 : $10;
       i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$3 : i64toi32_i32$1;
       $10 = i64toi32_i32$4;
       $10$hi = i64toi32_i32$2;
       i64toi32_i32$0 = i64toi32_i32$4;
       i64toi32_i32$4 = 0;
       i64toi32_i32$3 = 8;
       i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
        $44 = 0;
       } else {
        i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
        $44 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
       }
       $68$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $10$hi;
       i64toi32_i32$2 = $10;
       i64toi32_i32$0 = 16777216;
       i64toi32_i32$3 = 0;
       $5 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$1 = $5;
       i64toi32_i32$2 = $68$hi;
       i64toi32_i32$0 = i64toi32_i32$1 ? $44 : $10;
       i64toi32_i32$3 = i64toi32_i32$1 ? i64toi32_i32$2 : i64toi32_i32$4;
       $10 = i64toi32_i32$0;
       $10$hi = i64toi32_i32$3;
       i64toi32_i32$1 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$2 = 4;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
        $45 = 0;
       } else {
        i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
        $45 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       }
       $75$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $10$hi;
       i64toi32_i32$3 = $10;
       i64toi32_i32$1 = 268435456;
       i64toi32_i32$2 = 0;
       $6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
       i64toi32_i32$4 = $6;
       i64toi32_i32$3 = $75$hi;
       i64toi32_i32$1 = i64toi32_i32$4 ? $45 : $10;
       i64toi32_i32$2 = i64toi32_i32$4 ? i64toi32_i32$3 : i64toi32_i32$0;
       $10 = i64toi32_i32$1;
       $10$hi = i64toi32_i32$2;
       i64toi32_i32$4 = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 2;
       i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
        $46 = 0;
       } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
        $46 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
       }
       $82$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $10$hi;
       i64toi32_i32$2 = $10;
       i64toi32_i32$4 = 1073741824;
       i64toi32_i32$3 = 0;
       $7 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$0 = $7;
       i64toi32_i32$2 = $82$hi;
       i64toi32_i32$4 = i64toi32_i32$0 ? $46 : $10;
       i64toi32_i32$3 = i64toi32_i32$0 ? i64toi32_i32$2 : i64toi32_i32$1;
       $10 = i64toi32_i32$4;
       $10$hi = i64toi32_i32$3;
       $88 = i64toi32_i32$4;
       $88$hi = i64toi32_i32$3;
       i64toi32_i32$0 = i64toi32_i32$4;
       i64toi32_i32$4 = -1;
       i64toi32_i32$2 = -1;
       i64toi32_i32$4 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
       i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$2 = 63;
       i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = 0;
        $47 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
        $47 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
       }
       $91$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $88$hi;
       i64toi32_i32$4 = $88;
       i64toi32_i32$3 = $91$hi;
       i64toi32_i32$2 = $47;
       i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
        $48 = 0;
       } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
        $48 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
       }
       $11 = $48;
       $11$hi = i64toi32_i32$3;
       $8 = $4 + -32 | 0;
       $2 = $2 ? $8 : $4;
       $2 = $3 ? $2 + -16 | 0 : $2;
       $2 = $5 ? $2 + -8 | 0 : $2;
       $2 = $6 ? $2 + -4 | 0 : $2;
       $118 = $7 ? $2 + -2 | 0 : $2;
       i64toi32_i32$3 = $10$hi;
       i64toi32_i32$0 = $10;
       i64toi32_i32$4 = 0;
       i64toi32_i32$2 = 63;
       i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$3 >> 31 | 0;
        $49 = i64toi32_i32$3 >> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$4 = i64toi32_i32$3 >> i64toi32_i32$1 | 0;
        $49 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
       }
       $7 = $118 + ($49 ^ -1 | 0) | 0;
       label$8 : {
        if (!$4) {
         break label$8
        }
        $6 = $4 + -1 | 0;
        $2 = $6 >>> 5 | 0;
        if ($6 >>> 0 >= 1280 >>> 0) {
         break label$1
        }
        if (!((HEAP32[(($1 + ($2 << 2 | 0) | 0) + 4 | 0) >> 2] | 0) & (1 << ($6 & 31 | 0) | 0) | 0)) {
         break label$8
        }
        $2 = 0;
        label$9 : {
         label$10 : {
          label$11 : while (1) {
           if ($2 >>> 0 >= $6 >>> 0) {
            break label$10
           }
           $3 = $2 >>> 5 | 0;
           if ($2 >>> 0 >= 1280 >>> 0) {
            break label$4
           }
           $5 = $2 & 31 | 0;
           $2 = $2 + 1 | 0;
           if (!((HEAP32[(($1 + ($3 << 2 | 0) | 0) + 4 | 0) >> 2] | 0) & (1 << $5 | 0) | 0)) {
            continue label$11
           }
           break label$9;
          };
         }
         i64toi32_i32$4 = $9$hi;
         i64toi32_i32$3 = $9;
         i64toi32_i32$0 = 0;
         i64toi32_i32$2 = 1;
         i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
         if (!(i64toi32_i32$3 & i64toi32_i32$2 | 0 | i64toi32_i32$0 | 0)) {
          break label$8
         }
        }
        label$12 : {
         i64toi32_i32$0 = $9$hi;
         i64toi32_i32$4 = $9;
         i64toi32_i32$3 = 0;
         i64toi32_i32$2 = 1;
         i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
         i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
         if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
         }
         $10 = i64toi32_i32$1;
         $10$hi = i64toi32_i32$5;
         i64toi32_i32$5 = $9$hi;
         i64toi32_i32$5 = $10$hi;
         i64toi32_i32$0 = i64toi32_i32$1;
         i64toi32_i32$4 = $9$hi;
         i64toi32_i32$2 = $9;
         if (i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0 | 0) | 0) {
          break label$12
         }
         $7 = $4 + 1 | 0;
         i64toi32_i32$0 = -2147483648;
         $11 = 0;
         $11$hi = i64toi32_i32$0;
         break label$8;
        }
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$2 = $10;
        i64toi32_i32$5 = 0;
        i64toi32_i32$4 = 32;
        i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         $50 = 0;
        } else {
         i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
         $50 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        }
        $175$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $10$hi;
        i64toi32_i32$0 = $10;
        i64toi32_i32$2 = 1;
        i64toi32_i32$4 = 0;
        $2 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
        i64toi32_i32$3 = $2;
        i64toi32_i32$0 = $175$hi;
        i64toi32_i32$2 = i64toi32_i32$3 ? $50 : $10;
        i64toi32_i32$4 = i64toi32_i32$3 ? i64toi32_i32$0 : i64toi32_i32$5;
        $9 = i64toi32_i32$2;
        $9$hi = i64toi32_i32$4;
        i64toi32_i32$3 = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 16;
        i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
         $51 = 0;
        } else {
         i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
         $51 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
        }
        $182$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $9$hi;
        i64toi32_i32$4 = $9;
        i64toi32_i32$3 = 65536;
        i64toi32_i32$0 = 0;
        $3 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
        i64toi32_i32$5 = $3;
        i64toi32_i32$4 = $182$hi;
        i64toi32_i32$3 = i64toi32_i32$5 ? $51 : $9;
        i64toi32_i32$0 = i64toi32_i32$5 ? i64toi32_i32$4 : i64toi32_i32$2;
        $9 = i64toi32_i32$3;
        $9$hi = i64toi32_i32$0;
        i64toi32_i32$5 = i64toi32_i32$3;
        i64toi32_i32$3 = 0;
        i64toi32_i32$4 = 8;
        i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
         i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
         $52 = 0;
        } else {
         i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
         $52 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
        }
        $189$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $9$hi;
        i64toi32_i32$0 = $9;
        i64toi32_i32$5 = 16777216;
        i64toi32_i32$4 = 0;
        $1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
        i64toi32_i32$2 = $1;
        i64toi32_i32$0 = $189$hi;
        i64toi32_i32$5 = i64toi32_i32$2 ? $52 : $9;
        i64toi32_i32$4 = i64toi32_i32$2 ? i64toi32_i32$0 : i64toi32_i32$3;
        $9 = i64toi32_i32$5;
        $9$hi = i64toi32_i32$4;
        i64toi32_i32$2 = i64toi32_i32$5;
        i64toi32_i32$5 = 0;
        i64toi32_i32$0 = 4;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         $53 = 0;
        } else {
         i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
         $53 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        }
        $196$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $9$hi;
        i64toi32_i32$4 = $9;
        i64toi32_i32$2 = 268435456;
        i64toi32_i32$0 = 0;
        $5 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
        i64toi32_i32$3 = $5;
        i64toi32_i32$4 = $196$hi;
        i64toi32_i32$2 = i64toi32_i32$3 ? $53 : $9;
        i64toi32_i32$0 = i64toi32_i32$3 ? i64toi32_i32$4 : i64toi32_i32$5;
        $9 = i64toi32_i32$2;
        $9$hi = i64toi32_i32$0;
        i64toi32_i32$3 = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        i64toi32_i32$4 = 2;
        i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
         $54 = 0;
        } else {
         i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
         $54 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
        }
        $203$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $9$hi;
        i64toi32_i32$0 = $9;
        i64toi32_i32$3 = 1073741824;
        i64toi32_i32$4 = 0;
        $6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
        i64toi32_i32$5 = $6;
        i64toi32_i32$0 = $203$hi;
        i64toi32_i32$3 = i64toi32_i32$5 ? $54 : $9;
        i64toi32_i32$4 = i64toi32_i32$5 ? i64toi32_i32$0 : i64toi32_i32$2;
        $9 = i64toi32_i32$3;
        $9$hi = i64toi32_i32$4;
        $209 = i64toi32_i32$3;
        $209$hi = i64toi32_i32$4;
        i64toi32_i32$5 = i64toi32_i32$3;
        i64toi32_i32$3 = -1;
        i64toi32_i32$0 = -1;
        i64toi32_i32$3 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
        i64toi32_i32$5 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$5 = 0;
         $55 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
        } else {
         i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
         $55 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
        }
        $212$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $209$hi;
        i64toi32_i32$3 = $209;
        i64toi32_i32$4 = $212$hi;
        i64toi32_i32$0 = $55;
        i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
         $56 = 0;
        } else {
         i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
         $56 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
        }
        $11 = $56;
        $11$hi = i64toi32_i32$4;
        $2 = $2 ? $8 : $4;
        $2 = $3 ? $2 + -16 | 0 : $2;
        $2 = $1 ? $2 + -8 | 0 : $2;
        $2 = $5 ? $2 + -4 | 0 : $2;
        $237 = $6 ? $2 + -2 | 0 : $2;
        i64toi32_i32$4 = $9$hi;
        i64toi32_i32$5 = $9;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$3 = i64toi32_i32$4 >> 31 | 0;
         $57 = i64toi32_i32$4 >> i64toi32_i32$2 | 0;
        } else {
         i64toi32_i32$3 = i64toi32_i32$4 >> i64toi32_i32$2 | 0;
         $57 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
        }
        $7 = $237 + ($57 ^ -1 | 0) | 0;
       }
       HEAP16[($0 + 8 | 0) >> 1] = $7;
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$5 = $0;
       HEAP32[i64toi32_i32$5 >> 2] = $11;
       HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$3;
       return;
      }
      core__panicking__panic_bounds_check__h0537ade040df571e(1065964 | 0, $3 | 0, 40 | 0);
      abort();
     }
     core__panicking__panic_bounds_check__h0537ade040df571e(1065964 | 0, $3 | 0, 40 | 0);
     abort();
    }
    core__panicking__panic__h2d0bc53a963fb996(1060280 | 0);
    abort();
   }
   core__panicking__panic__h2d0bc53a963fb996(1060084 | 0);
   abort();
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1065964 | 0, $2 | 0, 40 | 0);
  abort();
 }
 
 function core__iter__traits__iterator__Iterator__try_for_each___7b_7bclosure_7d_7d__h579f9fc6382fbf1f($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $11 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $12 = 0;
  $3 = global$0 - 112 | 0;
  global$0 = $3;
  $4 = HEAP32[$1 >> 2] | 0;
  label$1 : {
   $5 = HEAP32[($1 + 4 | 0) >> 2] | 0;
   if ((HEAPU8[$5 >> 0] | 0 | 2 | 0 | 0) != (3 | 0)) {
    break label$1
   }
   $4 = $4 + 8 | 0;
  }
  HEAP32[($3 + 48 | 0) >> 2] = HEAP32[$4 >> 2] | 0;
  HEAP32[($3 + 52 | 0) >> 2] = HEAP32[($2 + 16 | 0) >> 2] | 0;
  $4 = HEAP32[($1 + 28 | 0) >> 2] | 0;
  $6 = HEAP32[($1 + 24 | 0) >> 2] | 0;
  $7 = HEAP32[($1 + 20 | 0) >> 2] | 0;
  $8 = HEAP32[($1 + 16 | 0) >> 2] | 0;
  $9 = HEAP32[($1 + 12 | 0) >> 2] | 0;
  $10 = HEAP32[($1 + 8 | 0) >> 2] | 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         if ((HEAPU8[$5 >> 0] | 0 | 1 | 0 | 0) != (3 | 0)) {
          break label$8
         }
         $11 = HEAP32[$2 >> 2] | 0;
         HEAP32[($3 + 64 | 0) >> 2] = $11;
         HEAP32[($3 + 68 | 0) >> 2] = $11 + Math_imul(HEAP32[($2 + 8 | 0) >> 2] | 0, 192) | 0;
         HEAP32[($3 + 104 | 0) >> 2] = $4;
         HEAP32[($3 + 100 | 0) >> 2] = $6;
         HEAP32[($3 + 96 | 0) >> 2] = $7;
         HEAP32[($3 + 88 | 0) >> 2] = $8;
         HEAP32[($3 + 84 | 0) >> 2] = $5;
         HEAP32[($3 + 76 | 0) >> 2] = $9;
         HEAP32[($3 + 72 | 0) >> 2] = $10;
         HEAP32[($3 + 92 | 0) >> 2] = $3 + 52 | 0;
         HEAP32[($3 + 80 | 0) >> 2] = $3 + 48 | 0;
         $core__iter__adapters__Rev_I__20as_20core__iter__traits__iterator__Iterator___try_fold__h59c037ba67c62cca($3 | 0, $3 + 64 | 0 | 0, $3 + 72 | 0 | 0);
         $5 = HEAP32[$3 >> 2] | 0;
         $4 = HEAP32[($3 + 4 | 0) >> 2] | 0;
         HEAP32[($3 + 60 | 0) >> 2] = $4;
         HEAP32[($3 + 56 | 0) >> 2] = $5;
         if ($5) {
          break label$2
         }
         core__ptr__real_drop_in_place__hf3551a957a201778($3 + 56 | 0 | 0);
         break label$7;
        }
        $11 = HEAP32[$2 >> 2] | 0;
        $12 = HEAP32[($2 + 8 | 0) >> 2] | 0;
        HEAP32[($3 + 104 | 0) >> 2] = $4;
        HEAP32[($3 + 100 | 0) >> 2] = $6;
        HEAP32[($3 + 96 | 0) >> 2] = $7;
        HEAP32[($3 + 88 | 0) >> 2] = $8;
        HEAP32[($3 + 84 | 0) >> 2] = $5;
        HEAP32[($3 + 76 | 0) >> 2] = $9;
        HEAP32[($3 + 72 | 0) >> 2] = $10;
        $6 = $11 + Math_imul($12, 192) | 0;
        HEAP32[($3 + 92 | 0) >> 2] = $3 + 52 | 0;
        HEAP32[($3 + 80 | 0) >> 2] = $3 + 48 | 0;
        $4 = $11;
        label$9 : {
         label$10 : while (1) {
          if (($6 - $4 | 0) >>> 0 <= 576 >>> 0) {
           break label$9
          }
          stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h95e6f43759c26b3c_1($3 + 32 | 0 | 0, $3 + 72 | 0 | 0, $4 | 0);
          $5 = HEAP32[($3 + 32 | 0) >> 2] | 0;
          if ($5) {
           break label$6
          }
          stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h95e6f43759c26b3c_1($3 + 24 | 0 | 0, $3 + 72 | 0 | 0, $4 + 192 | 0 | 0);
          $5 = HEAP32[($3 + 24 | 0) >> 2] | 0;
          if ($5) {
           break label$5
          }
          stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h95e6f43759c26b3c_1($3 + 16 | 0 | 0, $3 + 72 | 0 | 0, $4 + 384 | 0 | 0);
          $5 = HEAP32[($3 + 16 | 0) >> 2] | 0;
          if ($5) {
           break label$4
          }
          stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h95e6f43759c26b3c_1($3 + 8 | 0 | 0, $3 + 72 | 0 | 0, $4 + 576 | 0 | 0);
          $4 = $4 + 768 | 0;
          $5 = HEAP32[($3 + 8 | 0) >> 2] | 0;
          if (!$5) {
           continue label$10
          }
          break label$10;
         };
         $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
         break label$2;
        }
        label$11 : {
         if (($4 | 0) == ($6 | 0)) {
          break label$11
         }
         $6 = $11 + Math_imul($12, 192) | 0;
         label$12 : while (1) {
          stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h95e6f43759c26b3c_1($3 + 40 | 0 | 0, $3 + 72 | 0 | 0, $4 | 0);
          $5 = HEAP32[($3 + 40 | 0) >> 2] | 0;
          if ($5) {
           break label$3
          }
          $4 = $4 + 192 | 0;
          if (($6 | 0) != ($4 | 0)) {
           continue label$12
          }
          break label$12;
         };
        }
        HEAP32[($3 + 64 | 0) >> 2] = 0;
        core__ptr__real_drop_in_place__hf3551a957a201778($3 + 64 | 0 | 0);
       }
       $4 = HEAP32[($1 + 16 | 0) >> 2] | 0;
       HEAPF32[$4 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($3 + 52 | 0) >> 2]) + Math_fround(HEAPF32[($2 + 12 | 0) >> 2])) + Math_fround(HEAPF32[$4 >> 2]));
       label$13 : {
        $4 = HEAP32[($1 + 32 | 0) >> 2] | 0;
        $1 = HEAP32[($4 + 8 | 0) >> 2] | 0;
        if (($1 | 0) != (HEAP32[($4 + 4 | 0) >> 2] | 0 | 0)) {
         break label$13
        }
        alloc__raw_vec__RawVec_T_2cA___reserve__h557e4ac64630f5df($4 | 0, $1 | 0, 1 | 0);
        $1 = HEAP32[($4 + 8 | 0) >> 2] | 0;
       }
       $5 = 0;
       $1 = (HEAP32[$4 >> 2] | 0) + Math_imul($1, 12) | 0;
       HEAP32[($1 + 8 | 0) >> 2] = 0;
       HEAP32[$1 >> 2] = 4;
       HEAP32[($1 + 4 | 0) >> 2] = 0;
       $4 = $4 + 8 | 0;
       HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
       break label$2;
      }
      $4 = HEAP32[($3 + 36 | 0) >> 2] | 0;
      break label$2;
     }
     $4 = HEAP32[($3 + 28 | 0) >> 2] | 0;
     break label$2;
    }
    $4 = HEAP32[($3 + 20 | 0) >> 2] | 0;
    break label$2;
   }
   $4 = HEAP32[($3 + 44 | 0) >> 2] | 0;
  }
  HEAP32[($0 + 4 | 0) >> 2] = $4;
  HEAP32[$0 >> 2] = $5;
  global$0 = $3 + 112 | 0;
 }
 
 function $std__collections__hash__map__DefaultHasher_20as_20core__hash__Hasher___write__h7303af2f85960aff($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $6$hi = 0, $5 = 0, $6 = 0, $7$hi = 0, $9$hi = 0, $7 = 0, $2 = 0, $3 = 0, $9 = 0, $8$hi = 0, $8 = 0, $4 = 0, $10$hi = 0, $10 = 0, $11$hi = 0, $75 = 0, $76 = 0, $77 = 0, $11 = 0, $79 = 0, $80 = 0, $37$hi = 0, $40$hi = 0, $41$hi = 0, $52$hi = 0, $55$hi = 0, $56$hi = 0, $59 = 0, $61 = 0, $61$hi = 0, $66$hi = 0, $67$hi = 0, $78 = 0, $82 = 0, $82$hi = 0, $86$hi = 0, $91 = 0, $91$hi = 0, $95 = 0, $95$hi = 0, $98 = 0, $98$hi = 0, $106 = 0, $106$hi = 0, $107 = 0, $110 = 0, $111 = 0, $114 = 0, $114$hi = 0, $117 = 0, $117$hi = 0, $120 = 0, $120$hi = 0, $123 = 0, $127 = 0, $159 = 0, $159$hi = 0, $165 = 0, $165$hi = 0, $171 = 0, $171$hi = 0, $174$hi = 0, $178 = 0, $178$hi = 0, $181 = 0, $181$hi = 0, $222$hi = 0, $225$hi = 0, $226$hi = 0, $239$hi = 0, $242$hi = 0, $243$hi = 0;
  HEAP32[($0 + 56 | 0) >> 2] = (HEAP32[($0 + 56 | 0) >> 2] | 0) + 4 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       $2 = HEAP32[($0 + 60 | 0) >> 2] | 0;
       if (!$2) {
        break label$5
       }
       $3 = 8 - $2 | 0;
       $4 = $3 >>> 0 < 4 >>> 0 ? $3 : 4;
       if ($4 >>> 0 < 4 >>> 0) {
        break label$4
       }
       i64toi32_i32$2 = $1;
       i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       i64toi32_i32$1 = 0;
       $6 = i64toi32_i32$0;
       $6$hi = i64toi32_i32$1;
       $5 = 4;
       break label$3;
      }
      $3 = 0;
      break label$2;
     }
     i64toi32_i32$1 = 0;
     $6 = 0;
     $6$hi = i64toi32_i32$1;
     $5 = 0;
    }
    label$6 : {
     if (($5 | 1 | 0) >>> 0 >= $4 >>> 0) {
      break label$6
     }
     i64toi32_i32$2 = $1 + $5 | 0;
     i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
     i64toi32_i32$0 = 0;
     $37$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $40$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $37$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $40$hi;
     i64toi32_i32$3 = $5 << 3 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $75 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $75 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $41$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$1 = $41$hi;
     i64toi32_i32$0 = $75;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$3 = $6;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     $6 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     $6$hi = i64toi32_i32$2;
     $5 = $5 | 2 | 0;
    }
    label$7 : {
     if ($5 >>> 0 >= $4 >>> 0) {
      break label$7
     }
     i64toi32_i32$1 = $1 + $5 | 0;
     i64toi32_i32$2 = HEAPU8[i64toi32_i32$1 >> 0] | 0;
     i64toi32_i32$0 = 0;
     $52$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $55$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $52$hi;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$2 = $55$hi;
     i64toi32_i32$3 = $5 << 3 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $76 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $76 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $56$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$2 = $56$hi;
     i64toi32_i32$0 = $76;
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$3 = $6;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $6 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     $6$hi = i64toi32_i32$1;
    }
    $59 = $0;
    i64toi32_i32$2 = $0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
    $61 = i64toi32_i32$1;
    $61$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$0 = 0;
    $66$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$2 = $6;
    i64toi32_i32$1 = $66$hi;
    i64toi32_i32$3 = ($2 << 3 | 0) & 56 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $77 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $77 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $67$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $61$hi;
    i64toi32_i32$0 = $61;
    i64toi32_i32$2 = $67$hi;
    i64toi32_i32$3 = $77;
    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $6 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $6$hi = i64toi32_i32$2;
    i64toi32_i32$0 = $59;
    HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] = $6;
    HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] = i64toi32_i32$2;
    label$8 : {
     if ($3 >>> 0 <= 4 >>> 0) {
      break label$8
     }
     $2 = $2 + 4 | 0;
     break label$1;
    }
    HEAP32[($0 + 60 | 0) >> 2] = 0;
    $5 = $0 + 32 | 0;
    $78 = $5;
    $2 = $0 + 24 | 0;
    i64toi32_i32$1 = $2;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $82 = i64toi32_i32$2;
    $82$hi = i64toi32_i32$0;
    $4 = $0 + 40 | 0;
    i64toi32_i32$1 = $4;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $86$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$2 = $86$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$3 = $6;
    i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
    $7 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
    $7$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $82$hi;
    i64toi32_i32$2 = $82;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$3 = $7;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $8 = i64toi32_i32$4;
    $8$hi = i64toi32_i32$5;
    $91 = i64toi32_i32$4;
    $91$hi = i64toi32_i32$5;
    i64toi32_i32$0 = $5;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $9 = i64toi32_i32$5;
    $9$hi = i64toi32_i32$2;
    i64toi32_i32$5 = 0;
    i64toi32_i32$5 = __wasm_rotl_i64($9 | 0, i64toi32_i32$2 | 0, 13 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $95 = i64toi32_i32$5;
    $95$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$0 = $0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
    $98 = i64toi32_i32$2;
    $98$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$0 = $9;
    i64toi32_i32$2 = $98$hi;
    i64toi32_i32$3 = $98;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $9 = i64toi32_i32$1;
    $9$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $95$hi;
    i64toi32_i32$5 = $95;
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
    $10 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $91$hi;
    i64toi32_i32$4 = $91;
    i64toi32_i32$5 = $10$hi;
    i64toi32_i32$3 = $10;
    i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $11 = i64toi32_i32$2;
    $11$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$4 = __wasm_rotl_i64($10 | 0, i64toi32_i32$1 | 0, 17 | 0, i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $106 = i64toi32_i32$4;
    $106$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$4 = $106$hi;
    i64toi32_i32$3 = $106;
    i64toi32_i32$4 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
    $107 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$0 = $78;
    HEAP32[i64toi32_i32$0 >> 2] = $107;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$4;
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_rotl_i64(i64toi32_i32$2 | 0, i64toi32_i32$1 | 0, 32 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
    $110 = i64toi32_i32$0;
    i64toi32_i32$0 = $2;
    HEAP32[i64toi32_i32$0 >> 2] = $110;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$4;
    $111 = $4;
    i64toi32_i32$4 = $8$hi;
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_rotl_i64($7 | 0, i64toi32_i32$4 | 0, 16 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
    $114 = i64toi32_i32$0;
    $114$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $8$hi;
    i64toi32_i32$1 = $8;
    i64toi32_i32$0 = $114$hi;
    i64toi32_i32$3 = $114;
    i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
    $7 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
    $7$hi = i64toi32_i32$0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$1 = __wasm_rotl_i64($7 | 0, i64toi32_i32$0 | 0, 21 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $117 = i64toi32_i32$1;
    $117$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$1 = __wasm_rotl_i64($9 | 0, i64toi32_i32$0 | 0, 32 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $120 = i64toi32_i32$1;
    $120$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$4 = $7;
    i64toi32_i32$1 = $120$hi;
    i64toi32_i32$3 = $120;
    i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $7 = i64toi32_i32$5;
    $7$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $117$hi;
    i64toi32_i32$0 = $117;
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$3 = i64toi32_i32$5;
    i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
    $123 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$0 = $111;
    HEAP32[i64toi32_i32$0 >> 2] = $123;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$4;
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$2 = i64toi32_i32$3;
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$3 = $6;
    i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
    $127 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$2 = $0;
    HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] = $127;
    HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] = i64toi32_i32$0;
   }
   label$9 : {
    $5 = 4 - $3 | 0;
    $2 = $5 & 7 | 0;
    $5 = $5 - $2 | 0;
    if ($3 >>> 0 >= $5 >>> 0) {
     break label$9
    }
    i64toi32_i32$4 = $0 + 24 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $7 = i64toi32_i32$0;
    $7$hi = i64toi32_i32$2;
    i64toi32_i32$4 = $0 + 32 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $6 = i64toi32_i32$2;
    $6$hi = i64toi32_i32$0;
    i64toi32_i32$4 = $0 + 40 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $8 = i64toi32_i32$0;
    $8$hi = i64toi32_i32$2;
    i64toi32_i32$4 = $0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] | 0;
    $9 = i64toi32_i32$2;
    $9$hi = i64toi32_i32$0;
    label$10 : while (1) {
     i64toi32_i32$4 = $1 + $3 | 0;
     i64toi32_i32$0 = HEAPU8[i64toi32_i32$4 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$4 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$4 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$4 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$2 = HEAPU8[(i64toi32_i32$4 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$4 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$4 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$4 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     $10 = i64toi32_i32$0;
     $10$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $8$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$0 = $8$hi;
     i64toi32_i32$3 = $8;
     i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $8 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
     $8$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$0 = $8$hi;
     i64toi32_i32$2 = $8;
     i64toi32_i32$4 = $7$hi;
     i64toi32_i32$3 = $7;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $7 = i64toi32_i32$1;
     $7$hi = i64toi32_i32$5;
     $159 = i64toi32_i32$1;
     $159$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $9$hi;
     i64toi32_i32$5 = $6$hi;
     i64toi32_i32$5 = $9$hi;
     i64toi32_i32$0 = $9;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$3 = $6;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $9 = i64toi32_i32$4;
     $9$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$0 = 0;
     i64toi32_i32$0 = __wasm_rotl_i64($6 | 0, i64toi32_i32$1 | 0, 13 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $165 = i64toi32_i32$0;
     $165$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$0 = $165$hi;
     i64toi32_i32$3 = $165;
     i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
     $6 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
     $6$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $159$hi;
     i64toi32_i32$1 = $159;
     i64toi32_i32$5 = $6$hi;
     i64toi32_i32$3 = $6;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $11 = i64toi32_i32$2;
     $11$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $6$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$1 = __wasm_rotl_i64($6 | 0, i64toi32_i32$4 | 0, 17 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $171 = i64toi32_i32$1;
     $171$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = $171$hi;
     i64toi32_i32$3 = $171;
     i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
     $6 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
     $6$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$0 = 0;
     i64toi32_i32$0 = __wasm_rotl_i64($8 | 0, i64toi32_i32$1 | 0, 16 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $174$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$1 = $174$hi;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$3 = $7;
     i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
     $7 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
     $7$hi = i64toi32_i32$0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$4 = __wasm_rotl_i64($7 | 0, i64toi32_i32$0 | 0, 21 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $178 = i64toi32_i32$4;
     $178$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$4 = 0;
     i64toi32_i32$4 = __wasm_rotl_i64($9 | 0, i64toi32_i32$0 | 0, 32 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $181 = i64toi32_i32$4;
     $181$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$1 = $7;
     i64toi32_i32$4 = $181$hi;
     i64toi32_i32$3 = $181;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $9 = i64toi32_i32$5;
     $9$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $178$hi;
     i64toi32_i32$0 = $178;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
     $8 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
     $8$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$0 = 0;
     i64toi32_i32$0 = __wasm_rotl_i64($11 | 0, i64toi32_i32$1 | 0, 32 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $7 = i64toi32_i32$0;
     $7$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$3 = $10;
     i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
     $9 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
     $9$hi = i64toi32_i32$0;
     $3 = $3 + 8 | 0;
     if ($3 >>> 0 < $5 >>> 0) {
      continue label$10
     }
     break label$10;
    };
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$2 = $0 + 32 | 0;
    HEAP32[i64toi32_i32$2 >> 2] = $6;
    HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$2 = $0 + 16 | 0;
    HEAP32[i64toi32_i32$2 >> 2] = $9;
    HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$2 = $0 + 40 | 0;
    HEAP32[i64toi32_i32$2 >> 2] = $8;
    HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$2 = $0 + 24 | 0;
    HEAP32[i64toi32_i32$2 >> 2] = $7;
    HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
   }
   $5 = 4;
   label$11 : {
    label$12 : {
     if ($2 >>> 0 < 4 >>> 0) {
      break label$12
     }
     i64toi32_i32$1 = $1 + $3 | 0;
     i64toi32_i32$0 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$2 = 0;
     $6 = i64toi32_i32$0;
     $6$hi = i64toi32_i32$2;
     break label$11;
    }
    i64toi32_i32$2 = 0;
    $6 = 0;
    $6$hi = i64toi32_i32$2;
    $5 = 0;
   }
   label$13 : {
    if (($5 | 1 | 0) >>> 0 >= $2 >>> 0) {
     break label$13
    }
    i64toi32_i32$1 = $1 + ($5 + $3 | 0) | 0;
    i64toi32_i32$2 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
    i64toi32_i32$0 = 0;
    $222$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $225$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $222$hi;
    i64toi32_i32$1 = i64toi32_i32$2;
    i64toi32_i32$2 = $225$hi;
    i64toi32_i32$3 = $5 << 3 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $79 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $79 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $226$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$2 = $226$hi;
    i64toi32_i32$0 = $79;
    i64toi32_i32$1 = $6$hi;
    i64toi32_i32$3 = $6;
    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $6 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $6$hi = i64toi32_i32$1;
    $5 = $5 | 2 | 0;
   }
   label$14 : {
    if ($5 >>> 0 >= $2 >>> 0) {
     break label$14
    }
    i64toi32_i32$2 = $1 + ($5 + $3 | 0) | 0;
    i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0;
    i64toi32_i32$0 = 0;
    $239$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $242$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $239$hi;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = $242$hi;
    i64toi32_i32$3 = $5 << 3 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $80 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $80 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $243$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $6$hi;
    i64toi32_i32$1 = $243$hi;
    i64toi32_i32$0 = $80;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$3 = $6;
    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $6 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $6$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $6$hi;
   i64toi32_i32$0 = $0;
   HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] = $6;
   HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] = i64toi32_i32$2;
  }
  HEAP32[($0 + 60 | 0) >> 2] = $2;
 }
 
 function core__num__bignum__Big32x40__div_rem__hdacb35c2d8ce4a26($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $9 = 0, $8 = 0, $5 = 0, $7 = 0, $4 = 0, $11 = 0, $18 = 0, $6 = 0, $10 = 0, $15 = 0, $14 = 0, $16 = 0, $17 = 0, $12 = 0, $13 = 0;
  label$1 : {
   label$2 : {
    $4 = HEAP32[$1 >> 2] | 0;
    if ($4 >>> 0 >= 41 >>> 0) {
     break label$2
    }
    $5 = $1 + 4 | 0;
    $6 = $4 << 2 | 0;
    $7 = $5 + $6 | 0;
    $8 = 0;
    label$3 : {
     label$4 : {
      label$5 : while (1) {
       $9 = $1 + $8 | 0;
       if (($7 - $5 | 0) >>> 0 <= 12 >>> 0) {
        break label$4
       }
       if (HEAP32[($9 + 4 | 0) >> 2] | 0) {
        break label$3
       }
       if (HEAP32[($9 + 8 | 0) >> 2] | 0) {
        break label$3
       }
       if (HEAP32[($9 + 12 | 0) >> 2] | 0) {
        break label$3
       }
       $8 = $8 + 16 | 0;
       $5 = $9 + 20 | 0;
       if (!(HEAP32[($9 + 16 | 0) >> 2] | 0)) {
        continue label$5
       }
       break label$3;
      };
     }
     $8 = $6 - $8 | 0;
     $9 = $9 + 4 | 0;
     label$6 : while (1) {
      if (!$8) {
       break label$1
      }
      $8 = $8 + -4 | 0;
      $5 = HEAP32[$9 >> 2] | 0;
      $9 = $9 + 4 | 0;
      if (!$5) {
       continue label$6
      }
      break label$6;
     };
    }
    memset($2 + 4 | 0 | 0, 0 | 0, 160 | 0) | 0;
    $10 = memset($3 + 4 | 0 | 0, 0 | 0, 160 | 0) | 0;
    HEAP32[$3 >> 2] = $4;
    HEAP32[$2 >> 2] = 1;
    label$7 : {
     $11 = core__num__bignum__Big32x40__bit_length__h13ff63659f8edff3($0 | 0) | 0;
     if (!$11) {
      break label$7
     }
     $12 = $1 + 8 | 0;
     $13 = $3 + 8 | 0;
     $14 = 1;
     label$8 : while (1) {
      core__num__bignum__Big32x40__mul_pow2__h9585b2465912363e($3 | 0, 1 | 0) | 0;
      $11 = $11 + -1 | 0;
      $15 = $11 >>> 5 | 0;
      label$9 : {
       label$10 : {
        label$11 : {
         label$12 : {
          if ($11 >>> 0 >= 1280 >>> 0) {
           break label$12
          }
          $16 = $15 << 2 | 0;
          $17 = $11 & 31 | 0;
          $7 = ((HEAP32[(($0 + $16 | 0) + 4 | 0) >> 2] | 0) >>> $17 | 0) & 1 | 0 | (HEAP32[$10 >> 2] | 0) | 0;
          HEAP32[$10 >> 2] = $7;
          $9 = HEAP32[$3 >> 2] | 0;
          $8 = HEAP32[$1 >> 2] | 0;
          $18 = $8 >>> 0 < $9 >>> 0 ? $9 : $8;
          if ($18 >>> 0 >= 41 >>> 0) {
           break label$11
          }
          $9 = $18 << 2 | 0;
          label$13 : {
           label$14 : {
            label$15 : while (1) {
             if (!$9) {
              break label$14
             }
             if (!$9) {
              break label$13
             }
             $8 = $3 + $9 | 0;
             $5 = $1 + $9 | 0;
             $9 = $9 + -4 | 0;
             $8 = HEAP32[$8 >> 2] | 0;
             $5 = HEAP32[$5 >> 2] | 0;
             if (($8 | 0) == ($5 | 0)) {
              continue label$15
             }
             break label$15;
            };
            if ($8 >>> 0 >= $5 >>> 0) {
             break label$13
            }
            break label$9;
           }
           if ($9) {
            break label$9
           }
          }
          label$16 : {
           if (!$18) {
            break label$16
           }
           $9 = $7 + ((HEAP32[($1 + 4 | 0) >> 2] | 0) ^ -1 | 0) | 0;
           $8 = $9 + 1 | 0;
           HEAP32[$10 >> 2] = $8;
           $7 = $9 >>> 0 < $7 >>> 0 | $8 >>> 0 < $9 >>> 0 | 0;
           label$17 : {
            if (($18 | 0) == (1 | 0)) {
             break label$17
            }
            $4 = 1;
            $8 = $12;
            $9 = $13;
            label$18 : while (1) {
             $6 = HEAP32[$9 >> 2] | 0;
             $5 = $6 + ((HEAP32[$8 >> 2] | 0) ^ -1 | 0) | 0;
             $7 = $5 + ($7 & 1 | 0) | 0;
             HEAP32[$9 >> 2] = $7;
             $7 = $5 >>> 0 < $6 >>> 0 | $7 >>> 0 < $5 >>> 0 | 0;
             $8 = $8 + 4 | 0;
             $9 = $9 + 4 | 0;
             $4 = $4 + 1 | 0;
             if ($4 >>> 0 < $18 >>> 0) {
              continue label$18
             }
             break label$18;
            };
           }
           if (!$7) {
            break label$10
           }
          }
          HEAP32[$3 >> 2] = $18;
          label$19 : {
           if (!($14 & 1 | 0)) {
            break label$19
           }
           HEAP32[$2 >> 2] = $15 + 1 | 0;
          }
          $9 = ($2 + $16 | 0) + 4 | 0;
          HEAP32[$9 >> 2] = HEAP32[$9 >> 2] | 0 | (1 << $17 | 0) | 0;
          $14 = 0;
          if ($11) {
           continue label$8
          }
          break label$7;
         }
         core__panicking__panic_bounds_check__h0537ade040df571e(1065964 | 0, $15 | 0, 40 | 0);
         abort();
        }
        core__slice__slice_index_len_fail__h4544fc57f3d8a7a0($18 | 0, 40 | 0);
        abort();
       }
       core__panicking__panic__h2d0bc53a963fb996(1066024 | 0);
       abort();
      }
      if ($11) {
       continue label$8
      }
      break label$8;
     };
    }
    return;
   }
   core__slice__slice_index_len_fail__h4544fc57f3d8a7a0($4 | 0, 40 | 0);
   abort();
  }
  core__panicking__panic__h2d0bc53a963fb996(1066280 | 0);
  abort();
 }
 
 function stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__hec820052c5c968bc($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $11 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $12 = 0;
  $3 = global$0 - 112 | 0;
  global$0 = $3;
  $4 = HEAP32[$1 >> 2] | 0;
  label$1 : {
   $5 = HEAP32[($1 + 4 | 0) >> 2] | 0;
   if ((HEAPU8[$5 >> 0] | 0 | 2 | 0 | 0) != (3 | 0)) {
    break label$1
   }
   $4 = $4 + 8 | 0;
  }
  HEAP32[($3 + 56 | 0) >> 2] = HEAP32[$4 >> 2] | 0;
  HEAP32[($3 + 60 | 0) >> 2] = HEAP32[($2 + 16 | 0) >> 2] | 0;
  $4 = HEAP32[($1 + 28 | 0) >> 2] | 0;
  $6 = HEAP32[($1 + 24 | 0) >> 2] | 0;
  $7 = HEAP32[($1 + 20 | 0) >> 2] | 0;
  $8 = HEAP32[($1 + 16 | 0) >> 2] | 0;
  $9 = HEAP32[($1 + 12 | 0) >> 2] | 0;
  $10 = HEAP32[($1 + 8 | 0) >> 2] | 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        if ((HEAPU8[$5 >> 0] | 0 | 1 | 0 | 0) != (3 | 0)) {
         break label$7
        }
        $11 = HEAP32[$2 >> 2] | 0;
        HEAP32[($3 + 64 | 0) >> 2] = $11;
        HEAP32[($3 + 68 | 0) >> 2] = $11 + Math_imul(HEAP32[($2 + 8 | 0) >> 2] | 0, 192) | 0;
        HEAP32[($3 + 104 | 0) >> 2] = $4;
        HEAP32[($3 + 100 | 0) >> 2] = $6;
        HEAP32[($3 + 96 | 0) >> 2] = $7;
        HEAP32[($3 + 88 | 0) >> 2] = $8;
        HEAP32[($3 + 84 | 0) >> 2] = $5;
        HEAP32[($3 + 76 | 0) >> 2] = $9;
        HEAP32[($3 + 72 | 0) >> 2] = $10;
        HEAP32[($3 + 92 | 0) >> 2] = $3 + 60 | 0;
        HEAP32[($3 + 80 | 0) >> 2] = $3 + 56 | 0;
        $core__iter__adapters__Rev_I__20as_20core__iter__traits__iterator__Iterator___try_fold__h59c037ba67c62cca($3 + 8 | 0 | 0, $3 + 64 | 0 | 0, $3 + 72 | 0 | 0);
        $5 = HEAP32[($3 + 8 | 0) >> 2] | 0;
        if (!$5) {
         break label$6
        }
        $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
        break label$2;
       }
       $11 = HEAP32[$2 >> 2] | 0;
       $12 = HEAP32[($2 + 8 | 0) >> 2] | 0;
       HEAP32[($3 + 104 | 0) >> 2] = $4;
       HEAP32[($3 + 100 | 0) >> 2] = $6;
       HEAP32[($3 + 96 | 0) >> 2] = $7;
       HEAP32[($3 + 88 | 0) >> 2] = $8;
       HEAP32[($3 + 84 | 0) >> 2] = $5;
       HEAP32[($3 + 76 | 0) >> 2] = $9;
       HEAP32[($3 + 72 | 0) >> 2] = $10;
       $6 = $11 + Math_imul($12, 192) | 0;
       HEAP32[($3 + 92 | 0) >> 2] = $3 + 60 | 0;
       HEAP32[($3 + 80 | 0) >> 2] = $3 + 56 | 0;
       $4 = $11;
       label$8 : {
        label$9 : while (1) {
         if (($6 - $4 | 0) >>> 0 <= 576 >>> 0) {
          break label$8
         }
         stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h95e6f43759c26b3c($3 + 40 | 0 | 0, $3 + 72 | 0 | 0, $4 | 0);
         $5 = HEAP32[($3 + 40 | 0) >> 2] | 0;
         if ($5) {
          break label$5
         }
         stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h95e6f43759c26b3c($3 + 32 | 0 | 0, $3 + 72 | 0 | 0, $4 + 192 | 0 | 0);
         $5 = HEAP32[($3 + 32 | 0) >> 2] | 0;
         if ($5) {
          break label$4
         }
         stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h95e6f43759c26b3c($3 + 24 | 0 | 0, $3 + 72 | 0 | 0, $4 + 384 | 0 | 0);
         $5 = HEAP32[($3 + 24 | 0) >> 2] | 0;
         if ($5) {
          break label$3
         }
         stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h95e6f43759c26b3c($3 + 16 | 0 | 0, $3 + 72 | 0 | 0, $4 + 576 | 0 | 0);
         $4 = $4 + 768 | 0;
         $5 = HEAP32[($3 + 16 | 0) >> 2] | 0;
         if (!$5) {
          continue label$9
         }
         break label$9;
        };
        $4 = HEAP32[($3 + 20 | 0) >> 2] | 0;
        break label$2;
       }
       $6 = $11 + Math_imul($12, 192) | 0;
       label$10 : while (1) {
        if (($6 | 0) == ($4 | 0)) {
         break label$6
        }
        stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h95e6f43759c26b3c($3 + 48 | 0 | 0, $3 + 72 | 0 | 0, $4 | 0);
        $4 = $4 + 192 | 0;
        $5 = HEAP32[($3 + 48 | 0) >> 2] | 0;
        if (!$5) {
         continue label$10
        }
        break label$10;
       };
       $4 = HEAP32[($3 + 52 | 0) >> 2] | 0;
       break label$2;
      }
      $4 = HEAP32[($1 + 16 | 0) >> 2] | 0;
      HEAPF32[$4 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($3 + 60 | 0) >> 2]) + Math_fround(HEAPF32[($2 + 12 | 0) >> 2])) + Math_fround(HEAPF32[$4 >> 2]));
      label$11 : {
       $4 = HEAP32[($1 + 32 | 0) >> 2] | 0;
       $1 = HEAP32[($4 + 8 | 0) >> 2] | 0;
       if (($1 | 0) != (HEAP32[($4 + 4 | 0) >> 2] | 0 | 0)) {
        break label$11
       }
       alloc__raw_vec__RawVec_T_2cA___reserve__h557e4ac64630f5df($4 | 0, $1 | 0, 1 | 0);
       $1 = HEAP32[($4 + 8 | 0) >> 2] | 0;
      }
      $5 = 0;
      $1 = (HEAP32[$4 >> 2] | 0) + Math_imul($1, 12) | 0;
      HEAP32[($1 + 8 | 0) >> 2] = 0;
      HEAP32[$1 >> 2] = 4;
      HEAP32[($1 + 4 | 0) >> 2] = 0;
      $4 = $4 + 8 | 0;
      HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
      break label$2;
     }
     $4 = HEAP32[($3 + 44 | 0) >> 2] | 0;
     break label$2;
    }
    $4 = HEAP32[($3 + 36 | 0) >> 2] | 0;
    break label$2;
   }
   $4 = HEAP32[($3 + 28 | 0) >> 2] | 0;
  }
  HEAP32[($0 + 4 | 0) >> 2] = $4;
  HEAP32[$0 >> 2] = $5;
  global$0 = $3 + 112 | 0;
 }
 
 function stretch__forest__Forest__new_node__hffe9ef898d311913($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $3 = 0, $6 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $7 = 0, $11 = 0, $8 = 0, $4 = 0, $20 = 0, $9 = 0, $10 = 0, $105 = 0, $111 = 0, $117 = 0, $148 = 0, $171 = 0;
  $3 = global$0 - 304 | 0;
  global$0 = $3;
  $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  $5 = $4;
  label$1 : {
   label$2 : {
    $6 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    if (!$6) {
     break label$2
    }
    $7 = HEAP32[$2 >> 2] | 0;
    $8 = $6 << 2 | 0;
    $9 = $0 + 32 | 0;
    $10 = $0 + 24 | 0;
    label$3 : while (1) {
     $6 = HEAP32[$9 >> 2] | 0;
     $5 = HEAP32[$7 >> 2] | 0;
     if ($6 >>> 0 <= $5 >>> 0) {
      break label$1
     }
     $5 = (HEAP32[$10 >> 2] | 0) + Math_imul($5, 12) | 0;
     $6 = $5 + 8 | 0;
     label$4 : {
      $11 = HEAP32[($5 + 8 | 0) >> 2] | 0;
      if (($11 | 0) != (HEAP32[($5 + 4 | 0) >> 2] | 0 | 0)) {
       break label$4
      }
      alloc__raw_vec__RawVec_T_2cA___reserve__h04586cd83aef0f94($5 | 0, $11 | 0, 1 | 0);
      $11 = HEAP32[$6 >> 2] | 0;
     }
     $7 = $7 + 4 | 0;
     HEAP32[((HEAP32[$5 >> 2] | 0) + ($11 << 2 | 0) | 0) >> 2] = $4;
     HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1 | 0;
     $8 = $8 + -4 | 0;
     if ($8) {
      continue label$3
     }
     break label$3;
    };
    $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   }
   memcpy($3 + 88 | 0 | 0, $1 | 0, 212 | 0) | 0;
   HEAP32[(($3 + 64 | 0) + 20 | 0) >> 2] = 0;
   i64toi32_i32$1 = ($3 + 64 | 0) + 12 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $3;
   i64toi32_i32$0 = 0;
   HEAP32[($3 + 68 | 0) >> 2] = 0;
   HEAP32[($3 + 72 | 0) >> 2] = i64toi32_i32$0;
   label$5 : {
    if (($5 | 0) != (HEAP32[($0 + 4 | 0) >> 2] | 0 | 0)) {
     break label$5
    }
    alloc__raw_vec__RawVec_T_2cA___reserve__hfa218c9029d6afc5($0 | 0, $5 | 0, 1 | 0);
    $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   }
   $5 = memcpy((HEAP32[$0 >> 2] | 0) + Math_imul($5, 288) | 0 | 0, $3 + 88 | 0 | 0, 212 | 0) | 0;
   HEAP32[($5 + 212 | 0) >> 2] = 0;
   HEAP32[($5 + 240 | 0) >> 2] = 2;
   i64toi32_i32$2 = $3;
   i64toi32_i32$0 = HEAP32[($3 + 64 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($3 + 68 | 0) >> 2] | 0;
   $105 = i64toi32_i32$0;
   i64toi32_i32$0 = $5 + 216 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $105;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = ($3 + 64 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $111 = i64toi32_i32$1;
   i64toi32_i32$1 = $5 + 224 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $111;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = ($3 + 64 | 0) + 16 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $117 = i64toi32_i32$0;
   i64toi32_i32$0 = $5 + 232 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $117;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   memcpy($5 + 244 | 0 | 0, $3 + 24 | 0 | 0, 40 | 0) | 0;
   HEAP8[($5 + 284 | 0) >> 0] = 1;
   HEAP8[($5 + 287 | 0) >> 0] = HEAPU8[(($3 + 21 | 0) + 2 | 0) >> 0] | 0;
   $20 = HEAPU8[($3 + 21 | 0) >> 0] | 0 | ((HEAPU8[($3 + 22 | 0) >> 0] | 0) << 8 | 0) | 0;
   HEAP8[($5 + 285 | 0) >> 0] = $20;
   HEAP8[($5 + 286 | 0) >> 0] = $20 >>> 8 | 0;
   $5 = $0 + 8 | 0;
   HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1 | 0;
   $6 = ($3 + 88 | 0) + 8 | 0;
   HEAP32[$6 >> 2] = HEAP32[($2 + 8 | 0) >> 2] | 0;
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $148 = i64toi32_i32$1;
   i64toi32_i32$1 = $3;
   HEAP32[($3 + 88 | 0) >> 2] = $148;
   HEAP32[($3 + 92 | 0) >> 2] = i64toi32_i32$0;
   label$6 : {
    $5 = HEAP32[($0 + 20 | 0) >> 2] | 0;
    if (($5 | 0) != (HEAP32[($0 + 16 | 0) >> 2] | 0 | 0)) {
     break label$6
    }
    alloc__raw_vec__RawVec_T_2cA___reserve__h7ab8fdf54bef539a($0 + 12 | 0 | 0, $5 | 0, 1 | 0);
    $5 = HEAP32[($0 + 20 | 0) >> 2] | 0;
   }
   $5 = (HEAP32[($0 + 12 | 0) >> 2] | 0) + Math_imul($5, 12) | 0;
   i64toi32_i32$2 = $3;
   i64toi32_i32$0 = HEAP32[($3 + 88 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($3 + 92 | 0) >> 2] | 0;
   $171 = i64toi32_i32$0;
   i64toi32_i32$0 = $5;
   HEAP32[$5 >> 2] = $171;
   HEAP32[($5 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($5 + 8 | 0) >> 2] = HEAP32[$6 >> 2] | 0;
   $5 = $0 + 20 | 0;
   HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1 | 0;
   alloc__raw_vec__RawVec_T_2cA___allocate_in__h1e6d477234493b78($3 + 8 | 0 | 0, 1 | 0, 0 | 0);
   $7 = $0 + 24 | 0;
   $11 = HEAP32[($3 + 12 | 0) >> 2] | 0;
   $8 = HEAP32[($3 + 8 | 0) >> 2] | 0;
   label$7 : {
    $5 = $0 + 32 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    if (($6 | 0) != (HEAP32[($0 + 28 | 0) >> 2] | 0 | 0)) {
     break label$7
    }
    alloc__raw_vec__RawVec_T_2cA___reserve__h7ab8fdf54bef539a($7 | 0, $6 | 0, 1 | 0);
    $6 = HEAP32[$5 >> 2] | 0;
   }
   $6 = (HEAP32[$7 >> 2] | 0) + Math_imul($6, 12) | 0;
   HEAP32[($6 + 8 | 0) >> 2] = 0;
   HEAP32[($6 + 4 | 0) >> 2] = $11;
   HEAP32[$6 >> 2] = $8;
   HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1 | 0;
   global$0 = $3 + 304 | 0;
   return $4 | 0;
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1051112 | 0, $5 | 0, $6 | 0);
  abort();
 }
 
 function hashbrown__raw__RawTable_T___resize__h45e958d73c3a563c($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4 = 0, $7 = 0, $8 = 0, $13 = 0, i64toi32_i32$2 = 0, $15 = 0, $9 = 0, i64toi32_i32$4 = 0, $14 = 0, $25 = 0, $11 = 0, $16 = 0, $16$hi = 0, $6 = 0, $12 = 0, i64toi32_i32$3 = 0, $26 = 0, $5 = 0, $10 = 0, $156 = 0, $159 = 0;
  $4 = global$0 - 32 | 0;
  global$0 = $4;
  HEAP32[($4 + 4 | 0) >> 2] = $2;
  hashbrown__raw__RawTable_T___try_with_capacity__h16a6d2442004a6f3($4 + 8 | 0 | 0, $1 | 0, $3 | 0);
  label$1 : {
   label$2 : {
    if ((HEAPU8[($4 + 8 | 0) >> 0] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    $1 = ((HEAPU8[($4 + 9 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 | 0);
    break label$1;
   }
   $5 = HEAP32[(($4 + 8 | 0) + 16 | 0) >> 2] | 0;
   $6 = HEAP32[($4 + 20 | 0) >> 2] | 0;
   $7 = HEAP32[(($4 + 8 | 0) + 8 | 0) >> 2] | 0;
   $8 = HEAP32[($4 + 12 | 0) >> 2] | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $9 = $1 + 4 | 0;
   $10 = ($1 + (HEAP32[$0 >> 2] | 0) | 0) + 1 | 0;
   $11 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   $12 = HEAP32[($0 + 16 | 0) >> 2] | 0;
   label$3 : {
    label$4 : {
     $13 = ((HEAP32[$1 >> 2] | 0) ^ -1 | 0) & -2139062144 | 0;
     if ($13) {
      break label$4
     }
     $1 = 0;
     break label$3;
    }
    $1 = 1;
   }
   label$5 : while (1) {
    label$6 : {
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : {
         switch ($1 | 0) {
         case 0:
          if ($9 >>> 0 >= $10 >>> 0) {
           break label$9
          }
          $11 = $11 + 80 | 0;
          $1 = HEAP32[$9 >> 2] | 0;
          $3 = $9 + 4 | 0;
          $9 = $3;
          $1 = $1 & -2139062144 | 0;
          if (($1 | 0) == (-2139062144 | 0)) {
           break label$8
          }
          $13 = $1 ^ -2139062144 | 0;
          $9 = $3;
          $1 = 1;
          continue label$5;
         default:
          break label$10;
         };
        }
        $14 = $11 + Math_imul((__wasm_ctz_i32($13 | 0) | 0) >>> 3 | 0, 20) | 0;
        i64toi32_i32$0 = hashbrown__map__HashMap_K_2cV_2cS___insert___7b_7bclosure_7d_7d__hc370fba381b8e2c7($4 + 4 | 0 | 0, $14 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $16 = i64toi32_i32$0;
        $16$hi = i64toi32_i32$1;
        $1 = i64toi32_i32$0;
        $3 = 0;
        label$12 : while (1) {
         $3 = $3 + 4 | 0;
         $2 = $1 & $8 | 0;
         $1 = $3 + $2 | 0;
         $25 = $7 + $2 | 0;
         $15 = (HEAPU8[$25 >> 0] | 0 | ((HEAPU8[($25 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($25 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($25 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0) & -2139062144 | 0;
         if (!$15) {
          continue label$12
         }
         break label$12;
        };
        $3 = $13 + -1 | 0;
        label$13 : {
         $1 = (((__wasm_ctz_i32($15 | 0) | 0) >>> 3 | 0) + $2 | 0) & $8 | 0;
         if ((HEAP8[($7 + $1 | 0) >> 0] | 0 | 0) < (0 | 0)) {
          break label$13
         }
         $1 = (__wasm_ctz_i32((HEAP32[$7 >> 2] | 0) & -2139062144 | 0 | 0) | 0) >>> 3 | 0;
        }
        i64toi32_i32$1 = $16$hi;
        $2 = $16 >>> 25 | 0;
        HEAP8[($7 + $1 | 0) >> 0] = $2;
        HEAP8[(($7 + (($1 + -4 | 0) & $8 | 0) | 0) + 4 | 0) >> 0] = $2;
        $1 = $6 + Math_imul($1, 20) | 0;
        HEAP32[($1 + 16 | 0) >> 2] = HEAP32[($14 + 16 | 0) >> 2] | 0;
        i64toi32_i32$2 = $14 + 8 | 0;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $156 = i64toi32_i32$1;
        i64toi32_i32$1 = $1 + 8 | 0;
        HEAP32[i64toi32_i32$1 >> 2] = $156;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$2 = $14;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $159 = i64toi32_i32$0;
        i64toi32_i32$0 = $1;
        HEAP32[$1 >> 2] = $159;
        HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$1;
        $13 = $3 & $13 | 0;
        if ($13) {
         break label$6
        }
        break label$7;
       }
       HEAP32[($0 + 16 | 0) >> 2] = $12;
       HEAP32[($0 + 12 | 0) >> 2] = $5 - $12 | 0;
       HEAP32[($0 + 8 | 0) >> 2] = $6;
       $3 = HEAP32[$0 >> 2] | 0;
       HEAP32[$0 >> 2] = $8;
       $1 = $0 + 4 | 0;
       $2 = HEAP32[$1 >> 2] | 0;
       HEAP32[$1 >> 2] = $7;
       $1 = 2;
       if (!$3) {
        break label$1
       }
       $8 = 0;
       label$14 : {
        label$15 : {
         i64toi32_i32$1 = 0;
         i64toi32_i32$0 = 0;
         i64toi32_i32$0 = __wasm_i64_mul($3 + 1 | 0 | 0, i64toi32_i32$1 | 0, 20 | 0, i64toi32_i32$0 | 0) | 0;
         i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
         $16 = i64toi32_i32$0;
         $16$hi = i64toi32_i32$1;
         i64toi32_i32$2 = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         i64toi32_i32$3 = 32;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$0 = 0;
          $26 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
         } else {
          i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
          $26 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
         }
         if (!$26) {
          break label$15
         }
         break label$14;
        }
        $15 = ($3 + 8 | 0) & -4 | 0;
        if ($15 >>> 0 < ($3 + 5 | 0) >>> 0) {
         break label$14
        }
        i64toi32_i32$0 = $16$hi;
        $7 = $15 + $16 | 0;
        $8 = $7 >>> 0 < $15 >>> 0 ? 0 : ($7 >>> 0 < -3 >>> 0) << 2 | 0;
       }
       __rust_dealloc($2 | 0, $7 | 0, $8 | 0);
       break label$1;
      }
      $1 = 0;
      continue label$5;
     }
     $1 = 0;
     continue label$5;
    }
    $1 = 1;
    continue label$5;
   };
  }
  global$0 = $4 + 32 | 0;
  return $1 | 0;
 }
 
 function hashbrown__raw__RawTable_T___resize__hc64b11a3c9bce26e($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4 = 0, $7 = 0, $8 = 0, $13 = 0, i64toi32_i32$2 = 0, $15 = 0, $9 = 0, i64toi32_i32$4 = 0, $14 = 0, $25 = 0, $11 = 0, $16 = 0, $16$hi = 0, $6 = 0, $12 = 0, i64toi32_i32$3 = 0, $26 = 0, $5 = 0, $10 = 0, $156 = 0, $159 = 0;
  $4 = global$0 - 32 | 0;
  global$0 = $4;
  HEAP32[($4 + 4 | 0) >> 2] = $2;
  hashbrown__raw__RawTable_T___try_with_capacity__h19a7c4ef7e1dd020($4 + 8 | 0 | 0, $1 | 0, $3 | 0);
  label$1 : {
   label$2 : {
    if ((HEAPU8[($4 + 8 | 0) >> 0] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    $1 = ((HEAPU8[($4 + 9 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 | 0);
    break label$1;
   }
   $5 = HEAP32[(($4 + 8 | 0) + 16 | 0) >> 2] | 0;
   $6 = HEAP32[($4 + 20 | 0) >> 2] | 0;
   $7 = HEAP32[(($4 + 8 | 0) + 8 | 0) >> 2] | 0;
   $8 = HEAP32[($4 + 12 | 0) >> 2] | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $9 = $1 + 4 | 0;
   $10 = ($1 + (HEAP32[$0 >> 2] | 0) | 0) + 1 | 0;
   $11 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   $12 = HEAP32[($0 + 16 | 0) >> 2] | 0;
   label$3 : {
    label$4 : {
     $13 = ((HEAP32[$1 >> 2] | 0) ^ -1 | 0) & -2139062144 | 0;
     if ($13) {
      break label$4
     }
     $1 = 0;
     break label$3;
    }
    $1 = 1;
   }
   label$5 : while (1) {
    label$6 : {
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : {
         switch ($1 | 0) {
         case 0:
          if ($9 >>> 0 >= $10 >>> 0) {
           break label$9
          }
          $11 = $11 + 80 | 0;
          $1 = HEAP32[$9 >> 2] | 0;
          $3 = $9 + 4 | 0;
          $9 = $3;
          $1 = $1 & -2139062144 | 0;
          if (($1 | 0) == (-2139062144 | 0)) {
           break label$8
          }
          $13 = $1 ^ -2139062144 | 0;
          $9 = $3;
          $1 = 1;
          continue label$5;
         default:
          break label$10;
         };
        }
        $14 = $11 + Math_imul((__wasm_ctz_i32($13 | 0) | 0) >>> 3 | 0, 20) | 0;
        i64toi32_i32$0 = hashbrown__map__HashMap_K_2cV_2cS___insert___7b_7bclosure_7d_7d__hfac359ccde629c1a($4 + 4 | 0 | 0, $14 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $16 = i64toi32_i32$0;
        $16$hi = i64toi32_i32$1;
        $1 = i64toi32_i32$0;
        $3 = 0;
        label$12 : while (1) {
         $3 = $3 + 4 | 0;
         $2 = $1 & $8 | 0;
         $1 = $3 + $2 | 0;
         $25 = $7 + $2 | 0;
         $15 = (HEAPU8[$25 >> 0] | 0 | ((HEAPU8[($25 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($25 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($25 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0) & -2139062144 | 0;
         if (!$15) {
          continue label$12
         }
         break label$12;
        };
        $3 = $13 + -1 | 0;
        label$13 : {
         $1 = (((__wasm_ctz_i32($15 | 0) | 0) >>> 3 | 0) + $2 | 0) & $8 | 0;
         if ((HEAP8[($7 + $1 | 0) >> 0] | 0 | 0) < (0 | 0)) {
          break label$13
         }
         $1 = (__wasm_ctz_i32((HEAP32[$7 >> 2] | 0) & -2139062144 | 0 | 0) | 0) >>> 3 | 0;
        }
        i64toi32_i32$1 = $16$hi;
        $2 = $16 >>> 25 | 0;
        HEAP8[($7 + $1 | 0) >> 0] = $2;
        HEAP8[(($7 + (($1 + -4 | 0) & $8 | 0) | 0) + 4 | 0) >> 0] = $2;
        $1 = $6 + Math_imul($1, 20) | 0;
        HEAP32[($1 + 16 | 0) >> 2] = HEAP32[($14 + 16 | 0) >> 2] | 0;
        i64toi32_i32$2 = $14 + 8 | 0;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $156 = i64toi32_i32$1;
        i64toi32_i32$1 = $1 + 8 | 0;
        HEAP32[i64toi32_i32$1 >> 2] = $156;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$2 = $14;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $159 = i64toi32_i32$0;
        i64toi32_i32$0 = $1;
        HEAP32[$1 >> 2] = $159;
        HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$1;
        $13 = $3 & $13 | 0;
        if ($13) {
         break label$6
        }
        break label$7;
       }
       HEAP32[($0 + 16 | 0) >> 2] = $12;
       HEAP32[($0 + 12 | 0) >> 2] = $5 - $12 | 0;
       HEAP32[($0 + 8 | 0) >> 2] = $6;
       $3 = HEAP32[$0 >> 2] | 0;
       HEAP32[$0 >> 2] = $8;
       $1 = $0 + 4 | 0;
       $2 = HEAP32[$1 >> 2] | 0;
       HEAP32[$1 >> 2] = $7;
       $1 = 2;
       if (!$3) {
        break label$1
       }
       $8 = 0;
       label$14 : {
        label$15 : {
         i64toi32_i32$1 = 0;
         i64toi32_i32$0 = 0;
         i64toi32_i32$0 = __wasm_i64_mul($3 + 1 | 0 | 0, i64toi32_i32$1 | 0, 20 | 0, i64toi32_i32$0 | 0) | 0;
         i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
         $16 = i64toi32_i32$0;
         $16$hi = i64toi32_i32$1;
         i64toi32_i32$2 = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         i64toi32_i32$3 = 32;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$0 = 0;
          $26 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
         } else {
          i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
          $26 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
         }
         if (!$26) {
          break label$15
         }
         break label$14;
        }
        $15 = ($3 + 8 | 0) & -4 | 0;
        if ($15 >>> 0 < ($3 + 5 | 0) >>> 0) {
         break label$14
        }
        i64toi32_i32$0 = $16$hi;
        $7 = $15 + $16 | 0;
        $8 = $7 >>> 0 < $15 >>> 0 ? 0 : ($7 >>> 0 < -3 >>> 0) << 2 | 0;
       }
       __rust_dealloc($2 | 0, $7 | 0, $8 | 0);
       break label$1;
      }
      $1 = 0;
      continue label$5;
     }
     $1 = 0;
     continue label$5;
    }
    $1 = 1;
    continue label$5;
   };
  }
  global$0 = $4 + 32 | 0;
  return $1 | 0;
 }
 
 function $std__collections__hash__map__HashMap_K_2cV_2cS__20as_20core__ops__index__Index__Q____index__hc585c3a6d029245c($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $13$hi = 0, $12$hi = 0, $12 = 0, $13 = 0, $14$hi = 0, $15$hi = 0, $3 = 0, $14 = 0, $15 = 0, $2 = 0, $16$hi = 0, $4 = 0, $16 = 0, $5 = 0, $100 = 0, $11 = 0, $17$hi = 0, $9 = 0, $6 = 0, $101 = 0, $102 = 0, $27 = 0, $32 = 0, $40 = 0, $49 = 0, $60$hi = 0, $62 = 0, $62$hi = 0, $66 = 0, $66$hi = 0, $69 = 0, $69$hi = 0, $72 = 0, $72$hi = 0, $76 = 0, $76$hi = 0, $81 = 0, $81$hi = 0, $84 = 0, $84$hi = 0, $17 = 0, $88 = 0, $88$hi = 0, $91$hi = 0, $98 = 0, $98$hi = 0, $104 = 0, $104$hi = 0, $106 = 0, $106$hi = 0, $108$hi = 0, $114 = 0, $114$hi = 0, $120 = 0, $120$hi = 0, $123 = 0, $123$hi = 0, $124 = 0, $124$hi = 0, $126$hi = 0, $131 = 0, $131$hi = 0, $138 = 0, $138$hi = 0, $139 = 0, $139$hi = 0, $141$hi = 0, $146 = 0, $146$hi = 0, $153 = 0, $153$hi = 0, $154 = 0, $154$hi = 0, $156$hi = 0, $161 = 0, $161$hi = 0, $164$hi = 0, $166 = 0, $166$hi = 0, $168$hi = 0, $173 = 0, $173$hi = 0, $179$hi = 0, $103 = 0, $182 = 0, $182$hi = 0, $183 = 0, $183$hi = 0, $185 = 0, $185$hi = 0, $186 = 0, $186$hi = 0, $188$hi = 0, $7 = 0, $8 = 0, $10 = 0;
  $2 = global$0 - 80 | 0;
  global$0 = $2;
  $3 = $2 + 48 | 0;
  i64toi32_i32$2 = $0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $12 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = 1952801890;
  i64toi32_i32$3 = 2037671283;
  i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
  $27 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $3;
  HEAP32[i64toi32_i32$2 >> 2] = $27;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
  $4 = $2 + 40 | 0;
  i64toi32_i32$0 = i64toi32_i32$1;
  i64toi32_i32$0 = i64toi32_i32$1;
  i64toi32_i32$1 = $12;
  i64toi32_i32$2 = 1685025377;
  i64toi32_i32$3 = 1852075885;
  i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
  $32 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = $4;
  HEAP32[i64toi32_i32$1 >> 2] = $32;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
  $5 = ($2 + 8 | 0) + 24 | 0;
  i64toi32_i32$0 = $0;
  i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
  $13 = i64toi32_i32$2;
  $13$hi = i64toi32_i32$1;
  i64toi32_i32$0 = i64toi32_i32$2;
  i64toi32_i32$2 = 1819895653;
  i64toi32_i32$3 = 1852142177;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $40 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $5;
  HEAP32[i64toi32_i32$0 >> 2] = $40;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$0 = $2;
  i64toi32_i32$2 = 0;
  HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 60 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $12$hi;
  HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = $12;
  HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $13;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$1 = $13;
  i64toi32_i32$0 = 1936682341;
  i64toi32_i32$3 = 1886610805;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $49 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = $2;
  HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = $49;
  HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = i64toi32_i32$0;
  $6 = HEAP32[$1 >> 2] | 0;
  HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = $6;
  $std__collections__hash__map__DefaultHasher_20as_20core__hash__Hasher___write__h7303af2f85960aff(i64toi32_i32$1 + 8 | 0 | 0, i64toi32_i32$1 + 76 | 0 | 0);
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 56;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $101 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $101 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $60$hi = i64toi32_i32$0;
  i64toi32_i32$1 = $2;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] | 0;
  $62 = i64toi32_i32$0;
  $62$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $60$hi;
  i64toi32_i32$1 = $101;
  i64toi32_i32$0 = $62$hi;
  i64toi32_i32$3 = $62;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $12 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$0;
  i64toi32_i32$2 = $3;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $66 = i64toi32_i32$0;
  $66$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$2 = $12;
  i64toi32_i32$0 = $66$hi;
  i64toi32_i32$3 = $66;
  i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
  $13 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($13 | 0, i64toi32_i32$0 | 0, 16 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $69 = i64toi32_i32$2;
  $69$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $13$hi;
  i64toi32_i32$1 = $5;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  $72 = i64toi32_i32$0;
  $72$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $13$hi;
  i64toi32_i32$1 = $13;
  i64toi32_i32$0 = $72$hi;
  i64toi32_i32$3 = $72;
  i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $13 = i64toi32_i32$4;
  $13$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $69$hi;
  i64toi32_i32$2 = $69;
  i64toi32_i32$1 = $13$hi;
  i64toi32_i32$3 = i64toi32_i32$4;
  i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
  $14 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
  $14$hi = i64toi32_i32$1;
  $76 = $14;
  $76$hi = i64toi32_i32$1;
  i64toi32_i32$5 = $4;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
  $15 = i64toi32_i32$1;
  $15$hi = i64toi32_i32$2;
  i64toi32_i32$5 = $2;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 24 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 28 | 0) >> 2] | 0;
  $81 = i64toi32_i32$2;
  $81$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $15$hi;
  i64toi32_i32$5 = $15;
  i64toi32_i32$2 = $81$hi;
  i64toi32_i32$3 = $81;
  i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $16 = i64toi32_i32$0;
  $16$hi = i64toi32_i32$4;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, 32 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $84 = i64toi32_i32$5;
  $84$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $76$hi;
  i64toi32_i32$1 = $76;
  i64toi32_i32$5 = $84$hi;
  i64toi32_i32$3 = $84;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $17 = i64toi32_i32$2;
  $17$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$0 = $17$hi;
  i64toi32_i32$4 = i64toi32_i32$2;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$3 = $12;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $88 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $88$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $13$hi;
  i64toi32_i32$1 = $15$hi;
  i64toi32_i32$4 = 0;
  i64toi32_i32$4 = __wasm_rotl_i64($15 | 0, i64toi32_i32$1 | 0, 13 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $91$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $16$hi;
  i64toi32_i32$1 = $91$hi;
  i64toi32_i32$0 = i64toi32_i32$4;
  i64toi32_i32$4 = $16$hi;
  i64toi32_i32$3 = $16;
  i64toi32_i32$4 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
  $12 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $13$hi;
  i64toi32_i32$1 = $13;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$3 = $12;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $13 = i64toi32_i32$5;
  $13$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($12 | 0, i64toi32_i32$2 | 0, 17 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $98 = i64toi32_i32$1;
  $98$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $13$hi;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$1 = $98$hi;
  i64toi32_i32$3 = $98;
  i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
  $12 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $88$hi;
  i64toi32_i32$2 = $88;
  i64toi32_i32$4 = $12$hi;
  i64toi32_i32$3 = $12;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $15 = i64toi32_i32$0;
  $15$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $12$hi;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($12 | 0, i64toi32_i32$5 | 0, 13 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $104 = i64toi32_i32$2;
  $104$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $15$hi;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$2 = $104$hi;
  i64toi32_i32$3 = $104;
  i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
  $12 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$2;
  $106 = $12;
  $106$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($14 | 0, i64toi32_i32$2 | 0, 21 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $108$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $17$hi;
  i64toi32_i32$2 = $108$hi;
  i64toi32_i32$5 = i64toi32_i32$1;
  i64toi32_i32$1 = $17$hi;
  i64toi32_i32$3 = $17;
  i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
  $14 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $13$hi;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64($13 | 0, i64toi32_i32$1 | 0, 32 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$2 = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 255;
  i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
  $114 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $114$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $14$hi;
  i64toi32_i32$1 = $14;
  i64toi32_i32$2 = $114$hi;
  i64toi32_i32$3 = $114;
  i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $13 = i64toi32_i32$4;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $106$hi;
  i64toi32_i32$5 = $106;
  i64toi32_i32$1 = $13$hi;
  i64toi32_i32$3 = i64toi32_i32$4;
  i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $16 = i64toi32_i32$2;
  $16$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $12$hi;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64($12 | 0, i64toi32_i32$4 | 0, 17 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $120 = i64toi32_i32$5;
  $120$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $16$hi;
  i64toi32_i32$0 = i64toi32_i32$2;
  i64toi32_i32$5 = $120$hi;
  i64toi32_i32$3 = $120;
  i64toi32_i32$5 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
  $12 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$5;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = __wasm_rotl_i64($12 | 0, i64toi32_i32$5 | 0, 13 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $123 = i64toi32_i32$0;
  $123$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $12$hi;
  $124 = $12;
  $124$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $14$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = __wasm_rotl_i64($14 | 0, i64toi32_i32$5 | 0, 16 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $126$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $13$hi;
  i64toi32_i32$5 = $126$hi;
  i64toi32_i32$4 = i64toi32_i32$0;
  i64toi32_i32$0 = $13$hi;
  i64toi32_i32$3 = $13;
  i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
  $13 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $15$hi;
  i64toi32_i32$4 = 0;
  i64toi32_i32$4 = __wasm_rotl_i64($15 | 0, i64toi32_i32$0 | 0, 32 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $131 = i64toi32_i32$4;
  $131$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $13$hi;
  i64toi32_i32$5 = $13;
  i64toi32_i32$4 = $131$hi;
  i64toi32_i32$3 = $131;
  i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $14 = i64toi32_i32$1;
  $14$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $124$hi;
  i64toi32_i32$0 = $124;
  i64toi32_i32$5 = $14$hi;
  i64toi32_i32$3 = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $12 = i64toi32_i32$4;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $123$hi;
  i64toi32_i32$2 = $123;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$3 = i64toi32_i32$4;
  i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
  $15 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
  $15$hi = i64toi32_i32$0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($15 | 0, i64toi32_i32$0 | 0, 17 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $138 = i64toi32_i32$2;
  $138$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $15$hi;
  $139 = $15;
  $139$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $13$hi;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($13 | 0, i64toi32_i32$0 | 0, 21 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $141$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $14$hi;
  i64toi32_i32$0 = $141$hi;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$3 = $14;
  i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
  $13 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $13$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $16$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($16 | 0, i64toi32_i32$2 | 0, 32 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $146 = i64toi32_i32$1;
  $146$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $13$hi;
  i64toi32_i32$0 = $13;
  i64toi32_i32$1 = $146$hi;
  i64toi32_i32$3 = $146;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $14 = i64toi32_i32$5;
  $14$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $139$hi;
  i64toi32_i32$2 = $139;
  i64toi32_i32$0 = $14$hi;
  i64toi32_i32$3 = i64toi32_i32$5;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
  i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $15 = i64toi32_i32$1;
  $15$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $138$hi;
  i64toi32_i32$4 = $138;
  i64toi32_i32$2 = $15$hi;
  i64toi32_i32$3 = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
  $16 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$4 = 0;
  i64toi32_i32$4 = __wasm_rotl_i64($16 | 0, i64toi32_i32$2 | 0, 13 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $153 = i64toi32_i32$4;
  $153$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $16$hi;
  $154 = $16;
  $154$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $13$hi;
  i64toi32_i32$4 = 0;
  i64toi32_i32$4 = __wasm_rotl_i64($13 | 0, i64toi32_i32$2 | 0, 16 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $156$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$2 = $156$hi;
  i64toi32_i32$5 = i64toi32_i32$4;
  i64toi32_i32$4 = $14$hi;
  i64toi32_i32$3 = $14;
  i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
  $13 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  $13$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $12$hi;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64($12 | 0, i64toi32_i32$4 | 0, 32 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $161 = i64toi32_i32$5;
  $161$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $13$hi;
  i64toi32_i32$2 = $13;
  i64toi32_i32$5 = $161$hi;
  i64toi32_i32$3 = $161;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $12 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $154$hi;
  i64toi32_i32$4 = $154;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$3 = i64toi32_i32$0;
  i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $164$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $153$hi;
  i64toi32_i32$1 = $153;
  i64toi32_i32$4 = $164$hi;
  i64toi32_i32$3 = i64toi32_i32$5;
  i64toi32_i32$4 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
  $14 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
  $14$hi = i64toi32_i32$4;
  $166 = $14;
  $166$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $13$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($13 | 0, i64toi32_i32$4 | 0, 21 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $168$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $12$hi;
  i64toi32_i32$4 = $168$hi;
  i64toi32_i32$0 = i64toi32_i32$1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$3 = $12;
  i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
  $12 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $15$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = __wasm_rotl_i64($15 | 0, i64toi32_i32$1 | 0, 32 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $173 = i64toi32_i32$0;
  $173$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$4 = $12;
  i64toi32_i32$0 = $173$hi;
  i64toi32_i32$3 = $173;
  i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $13 = i64toi32_i32$2;
  $13$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $166$hi;
  i64toi32_i32$1 = $166;
  i64toi32_i32$4 = $13$hi;
  i64toi32_i32$3 = i64toi32_i32$2;
  i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
  i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $15 = i64toi32_i32$0;
  $15$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($12 | 0, i64toi32_i32$2 | 0, 16 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $179$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $13$hi;
  i64toi32_i32$2 = $179$hi;
  i64toi32_i32$5 = i64toi32_i32$1;
  i64toi32_i32$1 = $13$hi;
  i64toi32_i32$3 = $13;
  i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
  $103 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64($103 | 0, i64toi32_i32$1 | 0, 21 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $182 = i64toi32_i32$5;
  $182$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $15$hi;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$5 = $182$hi;
  i64toi32_i32$3 = $182;
  i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
  $183 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $183$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $14$hi;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($14 | 0, i64toi32_i32$5 | 0, 17 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $185 = i64toi32_i32$2;
  $185$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $183$hi;
  i64toi32_i32$1 = $183;
  i64toi32_i32$2 = $185$hi;
  i64toi32_i32$3 = $185;
  i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
  $186 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $186$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $15$hi;
  i64toi32_i32$5 = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $102 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $102 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
  }
  $188$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $186$hi;
  i64toi32_i32$2 = $186;
  i64toi32_i32$5 = $188$hi;
  i64toi32_i32$3 = $102;
  i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
  $1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $3 = $1 >>> 25 | 0;
  $3 = $3 << 8 | 0 | $3 | 0;
  $7 = $3 << 16 | 0 | $3 | 0;
  $4 = HEAP32[($0 + 16 | 0) >> 2] | 0;
  $1 = $4 & $1 | 0;
  $5 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $8 = HEAP32[($0 + 20 | 0) >> 2] | 0;
  $3 = 0;
  label$1 : {
   label$2 : while (1) {
    $100 = $8 + $1 | 0;
    $9 = HEAPU8[$100 >> 0] | 0 | ((HEAPU8[($100 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($100 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($100 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $0 = $9 ^ $7 | 0;
    $0 = (($0 ^ -1 | 0) & ($0 + -16843009 | 0) | 0) & -2139062144 | 0;
    $3 = $3 + 4 | 0;
    $10 = ($3 + $1 | 0) & $4 | 0;
    label$3 : {
     label$4 : while (1) {
      if (!$0) {
       break label$3
      }
      $11 = __wasm_ctz_i32($0 | 0) | 0;
      $0 = ($0 + -1 | 0) & $0 | 0;
      $11 = (($11 >>> 3 | 0) + $1 | 0) & $4 | 0;
      if (($6 | 0) == (HEAP32[($5 + Math_imul($11, 20) | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      continue label$4;
     };
    }
    $1 = $10;
    if (!(($9 & ($9 << 1 | 0) | 0) & -2139062144 | 0)) {
     continue label$2
    }
    break label$2;
   };
   core__option__expect_failed__h4b77ebe6e62ec3a1(1051160 | 0, 22 | 0);
   abort();
  }
  global$0 = $2 + 80 | 0;
  return ($5 + Math_imul($11, 20) | 0) + 4 | 0 | 0;
 }
 
 function stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__hcb4d614610713971($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $6 = 0, $7 = 0, $3 = 0, $5 = 0, $4 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $3 = global$0 - 64 | 0;
  global$0 = $3;
  $4 = HEAP32[$2 >> 2] | 0;
  $5 = HEAP32[(HEAP32[$1 >> 2] | 0) >> 2] | 0;
  $6 = HEAPU8[(HEAP32[($1 + 4 | 0) >> 2] | 0) >> 0] | 0;
  HEAP32[(($3 + 24 | 0) + 12 | 0) >> 2] = HEAP32[($6 ? $2 + 148 | 0 : $2 + 164 | 0) >> 2] | 0;
  $7 = 0;
  HEAP32[($3 + 32 | 0) >> 2] = 0;
  HEAP32[($3 + 24 | 0) >> 2] = 0;
  HEAP32[($3 + 28 | 0) >> 2] = HEAP32[($6 ? $2 + 160 | 0 : $2 + 144 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!$6) {
     break label$2
    }
    $8 = HEAP32[($1 + 12 | 0) >> 2] | 0;
    $6 = $8 + 12 | 0;
    $9 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    $8 = HEAP32[($8 + 8 | 0) >> 2] | 0;
    break label$1;
   }
   $6 = (HEAP32[($1 + 8 | 0) >> 2] | 0) + 4 | 0;
   $7 = HEAP32[($1 + 12 | 0) >> 2] | 0;
   $9 = $7 + 4 | 0;
   $7 = HEAP32[$7 >> 2] | 0;
   $8 = 0;
  }
  HEAP32[($3 + 52 | 0) >> 2] = HEAP32[$6 >> 2] | 0;
  HEAP32[($3 + 48 | 0) >> 2] = $8;
  HEAP32[($3 + 40 | 0) >> 2] = $7;
  HEAP32[($3 + 44 | 0) >> 2] = HEAP32[$9 >> 2] | 0;
  stretch__algo___impl_20stretch__forest__Forest___compute_internal__h1faccff9b0af78e6($3 + 8 | 0 | 0, $5 | 0, $4 | 0, $3 + 24 | 0 | 0, $3 + 40 | 0 | 0, 1 | 0);
  $10 = HEAP32[($3 + 16 | 0) >> 2] | 0;
  $11 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      $6 = HEAP32[($3 + 8 | 0) >> 2] | 0;
      if (!$6) {
       break label$6
      }
      if (($6 | 0) == (1 | 0)) {
       break label$5
      }
      FUNCTION_TABLE[HEAP32[$10 >> 2] | 0]($11);
      $6 = HEAP32[($10 + 4 | 0) >> 2] | 0;
      if (!$6) {
       break label$6
      }
      __rust_dealloc($11 | 0, $6 | 0, HEAP32[($10 + 8 | 0) >> 2] | 0 | 0);
     }
     $12 = HEAP32[(HEAP32[$1 >> 2] | 0) >> 2] | 0;
     $6 = HEAP32[($12 + 20 | 0) >> 2] | 0;
     $1 = HEAP32[(HEAP32[($1 + 16 | 0) >> 2] | 0) >> 2] | 0;
     if ($6 >>> 0 <= $1 >>> 0) {
      break label$3
     }
     $6 = HEAP32[$2 >> 2] | 0;
     $7 = (HEAP32[($12 + 12 | 0) >> 2] | 0) + Math_imul($1, 12) | 0;
     $1 = HEAP32[$7 >> 2] | 0;
     $4 = (HEAP32[($7 + 8 | 0) >> 2] | 0) << 2 | 0;
     $8 = $1 + $4 | 0;
     $7 = 0;
     $5 = $1;
     label$7 : {
      label$8 : {
       label$9 : while (1) {
        if (($8 - $5 | 0) >>> 0 <= 12 >>> 0) {
         break label$8
        }
        $5 = HEAP32[$1 >> 2] | 0;
        $7 = $7 + (($5 | 0) != ($6 | 0)) | 0;
        if (($5 | 0) == ($6 | 0)) {
         break label$7
        }
        $5 = HEAP32[($1 + 4 | 0) >> 2] | 0;
        $7 = $7 + (($5 | 0) != ($6 | 0)) | 0;
        if (($5 | 0) == ($6 | 0)) {
         break label$7
        }
        $5 = HEAP32[($1 + 8 | 0) >> 2] | 0;
        $7 = $7 + (($5 | 0) != ($6 | 0)) | 0;
        if (($5 | 0) == ($6 | 0)) {
         break label$7
        }
        $4 = $4 + -16 | 0;
        $9 = HEAP32[($1 + 12 | 0) >> 2] | 0;
        $7 = $7 + (($9 | 0) != ($6 | 0)) | 0;
        $5 = $1 + 16 | 0;
        $1 = $5;
        if (($9 | 0) != ($6 | 0)) {
         continue label$9
        }
        break label$7;
       };
      }
      $7 = 1 - $7 | 0;
      label$10 : while (1) {
       if (!$4) {
        break label$4
       }
       $7 = $7 + -1 | 0;
       $4 = $4 + -4 | 0;
       $5 = HEAP32[$1 >> 2] | 0;
       $1 = $1 + 4 | 0;
       $5 = ($5 | 0) == ($6 | 0);
       if (!$5) {
        continue label$10
       }
       break label$10;
      };
      $7 = (($5 + 1 | 0) & 1 | 0) - $7 | 0;
     }
     HEAP32[($3 + 48 | 0) >> 2] = $10;
     HEAP32[($3 + 52 | 0) >> 2] = 0;
     HEAP32[($3 + 56 | 0) >> 2] = 0;
     HEAP32[($3 + 44 | 0) >> 2] = $11;
     HEAP32[($3 + 40 | 0) >> 2] = $7;
     (wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(stretch__algo___impl_20stretch__forest__Forest___compute_internal__calc_baseline__ha566e9e805d56467($12 | 0, $6 | 0, $3 + 40 | 0 | 0))), HEAPF32[(wasm2js_i32$0 + 176 | 0) >> 2] = wasm2js_f32$0;
     $11 = 0;
    }
    HEAP32[($0 + 4 | 0) >> 2] = $10;
    HEAP32[$0 >> 2] = $11;
    global$0 = $3 + 64 | 0;
    return;
   }
   core__panicking__panic__h2d0bc53a963fb996(1050988 | 0);
   abort();
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $1 | 0, $6 | 0);
  abort();
 }
 
 function stretch__node__Stretch__new_node__h9cb7c16f25561bf6($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $6 = 0, i64toi32_i32$2 = 0, $5 = 0, $7 = 0, $10 = 0, $11 = 0, $8 = 0, $9 = 0, $12 = 0, $84 = 0, $97 = 0, $100 = 0, $109 = 0, $121 = 0, $175 = 0, $178 = 0, $198 = 0, $201 = 0, $210 = 0, $213 = 0;
  $4 = global$0 - 304 | 0;
  global$0 = $4;
  HEAP32[($4 + 4 | 0) >> 2] = $1;
  label$1 : {
   label$2 : {
    $5 = $1 + 100 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    if (!$6) {
     break label$2
    }
    $6 = $6 + -1 | 0;
    HEAP32[$5 >> 2] = $6;
    $5 = (HEAP32[($1 + 92 | 0) >> 2] | 0) + ($6 << 3 | 0) | 0;
    $6 = (HEAP32[($5 + 4 | 0) >> 2] | 0) + 1 | 0;
    $7 = HEAP32[$5 >> 2] | 0;
    break label$1;
   }
   $7 = HEAP32[($1 + 88 | 0) >> 2] | 0;
   HEAP32[($1 + 88 | 0) >> 2] = $7 + 1 | 0;
   $6 = 0;
  }
  $8 = HEAP32[($1 + 84 | 0) >> 2] | 0;
  $9 = HEAP32[($1 + 80 | 0) >> 2] | 0;
  $1 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  $5 = HEAP32[$3 >> 2] | 0;
  HEAP32[($4 + 72 | 0) >> 2] = $5;
  HEAP32[($4 + 76 | 0) >> 2] = $5 + ($1 << 4 | 0) | 0;
  HEAP32[($4 + 80 | 0) >> 2] = $4 + 4 | 0;
  HEAP32[($4 + 84 | 0) >> 2] = 2;
  $alloc__vec__Vec_T__20as_20alloc__vec__SpecExtend_T_2cI____from_iter__h18c413c830ba1369($4 + 288 | 0 | 0, $4 + 72 | 0 | 0);
  $1 = ($4 + 72 | 0) + 12 | 0;
  label$3 : {
   label$4 : {
    if ((HEAP32[($4 + 84 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$4
    }
    $10 = ($4 + 48 | 0) + 8 | 0;
    HEAP32[$10 >> 2] = HEAP32[(($4 + 288 | 0) + 8 | 0) >> 2] | 0;
    i64toi32_i32$2 = $4;
    i64toi32_i32$0 = HEAP32[($4 + 288 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($4 + 292 | 0) >> 2] | 0;
    $84 = i64toi32_i32$0;
    i64toi32_i32$0 = $4;
    HEAP32[($4 + 48 | 0) >> 2] = $84;
    HEAP32[($4 + 52 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[(($4 + 24 | 0) + 16 | 0) >> 2] = HEAP32[(($4 + 48 | 0) + 16 | 0) >> 2] | 0;
    $11 = ($4 + 24 | 0) + 8 | 0;
    i64toi32_i32$2 = $10;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $97 = i64toi32_i32$1;
    i64toi32_i32$1 = $11;
    HEAP32[i64toi32_i32$1 >> 2] = $97;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $4;
    i64toi32_i32$0 = HEAP32[($4 + 48 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($4 + 52 | 0) >> 2] | 0;
    $100 = i64toi32_i32$0;
    i64toi32_i32$0 = $4;
    HEAP32[($4 + 24 | 0) >> 2] = $100;
    HEAP32[($4 + 28 | 0) >> 2] = i64toi32_i32$1;
    $12 = ($4 + 8 | 0) + 8 | 0;
    HEAP32[$12 >> 2] = HEAP32[$11 >> 2] | 0;
    i64toi32_i32$2 = $4;
    i64toi32_i32$1 = HEAP32[($4 + 24 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($4 + 28 | 0) >> 2] | 0;
    $109 = i64toi32_i32$1;
    i64toi32_i32$1 = $4;
    HEAP32[($4 + 8 | 0) >> 2] = $109;
    HEAP32[($4 + 12 | 0) >> 2] = i64toi32_i32$0;
    $11 = HEAP32[($4 + 4 | 0) >> 2] | 0;
    memcpy($4 + 72 | 0 | 0, $2 | 0, 212 | 0) | 0;
    HEAP32[$10 >> 2] = HEAP32[$12 >> 2] | 0;
    i64toi32_i32$2 = $4;
    i64toi32_i32$0 = HEAP32[($4 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($4 + 12 | 0) >> 2] | 0;
    $121 = i64toi32_i32$0;
    i64toi32_i32$0 = $4;
    HEAP32[($4 + 48 | 0) >> 2] = $121;
    HEAP32[($4 + 52 | 0) >> 2] = i64toi32_i32$1;
    $2 = stretch__forest__Forest__new_node__hffe9ef898d311913($11 + 104 | 0 | 0, $4 + 72 | 0 | 0, $4 + 48 | 0 | 0) | 0;
    $10 = HEAP32[($4 + 4 | 0) >> 2] | 0;
    HEAP32[$1 >> 2] = $6;
    HEAP32[($4 + 80 | 0) >> 2] = $7;
    HEAP32[($4 + 76 | 0) >> 2] = $8;
    HEAP32[($4 + 72 | 0) >> 2] = $9;
    stretch__node__Stretch__add_node__h9152754f05108ed7($10 | 0, $4 + 72 | 0 | 0, $2 | 0);
    HEAP32[($0 + 16 | 0) >> 2] = $6;
    HEAP32[($0 + 12 | 0) >> 2] = $7;
    HEAP32[($0 + 8 | 0) >> 2] = $8;
    HEAP32[($0 + 4 | 0) >> 2] = $9;
    HEAP32[$0 >> 2] = 0;
    $1 = HEAP32[($3 + 4 | 0) >> 2] | 0;
    if (!$1) {
     break label$3
    }
    __rust_dealloc($5 | 0, $1 << 4 | 0 | 0, 4 | 0);
    break label$3;
   }
   $6 = ($4 + 48 | 0) + 16 | 0;
   HEAP32[$6 >> 2] = HEAP32[($1 + 16 | 0) >> 2] | 0;
   $7 = ($4 + 48 | 0) + 8 | 0;
   i64toi32_i32$2 = $1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $175 = i64toi32_i32$1;
   i64toi32_i32$1 = $7;
   HEAP32[i64toi32_i32$1 >> 2] = $175;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $1;
   i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
   $178 = i64toi32_i32$0;
   i64toi32_i32$0 = $4;
   HEAP32[($4 + 48 | 0) >> 2] = $178;
   HEAP32[($4 + 52 | 0) >> 2] = i64toi32_i32$1;
   label$5 : {
    $1 = HEAP32[($4 + 292 | 0) >> 2] | 0;
    if (!$1) {
     break label$5
    }
    __rust_dealloc(HEAP32[($4 + 288 | 0) >> 2] | 0 | 0, $1 << 2 | 0 | 0, 4 | 0);
   }
   $1 = ($4 + 24 | 0) + 16 | 0;
   HEAP32[$1 >> 2] = HEAP32[$6 >> 2] | 0;
   $6 = ($4 + 24 | 0) + 8 | 0;
   i64toi32_i32$2 = $7;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $198 = i64toi32_i32$1;
   i64toi32_i32$1 = $6;
   HEAP32[i64toi32_i32$1 >> 2] = $198;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $4;
   i64toi32_i32$0 = HEAP32[($4 + 48 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($4 + 52 | 0) >> 2] | 0;
   $201 = i64toi32_i32$0;
   i64toi32_i32$0 = $4;
   HEAP32[($4 + 24 | 0) >> 2] = $201;
   HEAP32[($4 + 28 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[$0 >> 2] = 1;
   HEAP32[($0 + 20 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
   i64toi32_i32$2 = $6;
   i64toi32_i32$1 = HEAP32[$6 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($6 + 4 | 0) >> 2] | 0;
   $210 = i64toi32_i32$1;
   i64toi32_i32$1 = $0 + 12 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $210;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $4;
   i64toi32_i32$0 = HEAP32[($4 + 24 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($4 + 28 | 0) >> 2] | 0;
   $213 = i64toi32_i32$0;
   i64toi32_i32$0 = $0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = $213;
   HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$1;
   $1 = HEAP32[($3 + 4 | 0) >> 2] | 0;
   if (!$1) {
    break label$3
   }
   __rust_dealloc($5 | 0, $1 << 4 | 0 | 0, 4 | 0);
  }
  global$0 = $4 + 304 | 0;
 }
 
 function $char_20as_20core__fmt__Debug___fmt__h8724f2c9877f6e71($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $2 = 0, $7 = 0, $7$hi = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $4 = 0, $3 = 0, $18 = 0, $5 = 0, $111 = 0, $111$hi = 0, $113 = 0, $113$hi = 0;
  label$1 : {
   if (!(FUNCTION_TABLE[HEAP32[((HEAP32[($1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0](HEAP32[($1 + 24 | 0) >> 2] | 0, 39) | 0)) {
    break label$1
   }
   return 1 | 0;
  }
  $2 = 2;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          $0 = HEAP32[$0 >> 2] | 0;
          $3 = $0 + -9 | 0;
          if ($3 >>> 0 > 30 >>> 0) {
           break label$9
          }
          $4 = 116;
          label$10 : {
           switch ($3 | 0) {
           case 1:
            break label$10;
           case 4:
            break label$6;
           case 2:
           case 3:
           case 5:
           case 6:
           case 7:
           case 8:
           case 9:
           case 10:
           case 11:
           case 12:
           case 13:
           case 14:
           case 15:
           case 16:
           case 17:
           case 18:
           case 19:
           case 20:
           case 21:
           case 22:
           case 23:
           case 24:
           case 26:
           case 27:
           case 28:
           case 29:
            break label$7;
           case 25:
           case 30:
            break label$8;
           default:
            break label$2;
           };
          }
          $4 = 110;
          break label$2;
         }
         if (($0 | 0) != (92 | 0)) {
          break label$7
         }
        }
        break label$3;
       }
       if (!(core__unicode__bool_trie__BoolTrie__lookup__h31c9aa57385fbd21(1064352 | 0, $0 | 0) | 0)) {
        break label$5
       }
       i64toi32_i32$0 = 0;
       i64toi32_i32$2 = (Math_clz32($0 | 1 | 0) >>> 2 | 0) ^ 7 | 0;
       i64toi32_i32$1 = 5;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
       $7 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
       $7$hi = i64toi32_i32$1;
       break label$4;
      }
      $4 = 114;
      break label$2;
     }
     label$11 : {
      label$12 : {
       label$13 : {
        if ($0 >>> 0 >= 65536 >>> 0) {
         break label$13
        }
        if (core__unicode__printable__check__h1e7c010e493ddb3e($0 | 0, 1061504 | 0, 40 | 0, 1061584 | 0, 303 | 0, 1061887 | 0, 316 | 0) | 0) {
         break label$12
        }
        break label$11;
       }
       label$14 : {
        if ($0 >>> 0 >= 131072 >>> 0) {
         break label$14
        }
        if (core__unicode__printable__check__h1e7c010e493ddb3e($0 | 0, 1062203 | 0, 33 | 0, 1062269 | 0, 158 | 0, 1062427 | 0, 381 | 0) | 0) {
         break label$12
        }
        break label$11;
       }
       if ($0 >>> 0 > 917999 >>> 0) {
        break label$11
       }
       if (($0 + -195102 | 0) >>> 0 < 722658 >>> 0) {
        break label$11
       }
       if (($0 + -191457 | 0) >>> 0 < 3103 >>> 0) {
        break label$11
       }
       if (($0 + -183970 | 0) >>> 0 < 14 >>> 0) {
        break label$11
       }
       if (($0 & 2097150 | 0 | 0) == (178206 | 0)) {
        break label$11
       }
       if (($0 + -173783 | 0) >>> 0 < 41 >>> 0) {
        break label$11
       }
       if (($0 + -177973 | 0) >>> 0 <= 10 >>> 0) {
        break label$11
       }
      }
      $2 = 1;
      break label$3;
     }
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = (Math_clz32($0 | 1 | 0) >>> 2 | 0) ^ 7 | 0;
     i64toi32_i32$2 = 5;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     $7 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     $7$hi = i64toi32_i32$2;
    }
    $2 = 3;
   }
   $4 = $0;
  }
  $3 = $1 + 24 | 0;
  $5 = $1 + 28 | 0;
  label$15 : while (1) {
   label$16 : {
    label$17 : {
     label$18 : {
      label$19 : {
       label$20 : {
        label$21 : {
         label$22 : {
          label$23 : {
           label$24 : {
            if (($2 | 0) == (1 | 0)) {
             break label$24
            }
            $0 = 92;
            if (($2 | 0) == (2 | 0)) {
             break label$23
            }
            if (($2 | 0) != (3 | 0)) {
             break label$17
            }
            i64toi32_i32$2 = $7$hi;
            i64toi32_i32$1 = $7;
            i64toi32_i32$0 = 0;
            i64toi32_i32$3 = 32;
            i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
             i64toi32_i32$0 = 0;
             $18 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $18 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
            }
            $2 = ($18 & 255 | 0) + -1 | 0;
            if ($2 >>> 0 > 4 >>> 0) {
             break label$17
            }
            label$25 : {
             switch ($2 | 0) {
             case 4:
              break label$19;
             case 3:
              break label$20;
             case 2:
              break label$21;
             case 1:
              break label$22;
             default:
              break label$25;
             };
            }
            i64toi32_i32$0 = $7$hi;
            i64toi32_i32$2 = $7;
            i64toi32_i32$1 = -256;
            i64toi32_i32$3 = -1;
            i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
            $7 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
            $7$hi = i64toi32_i32$1;
            $0 = 125;
            $2 = 3;
            break label$16;
           }
           $2 = 0;
           $0 = $4;
           break label$16;
          }
          $2 = 1;
          break label$16;
         }
         i64toi32_i32$1 = $7$hi;
         $2 = ($4 >>> (($7 << 2 | 0) & 28 | 0) | 0) & 15 | 0;
         $0 = $2 >>> 0 < 10 >>> 0 ? $2 | 48 | 0 : $2 + 87 | 0;
         if (!$7) {
          break label$18
         }
         i64toi32_i32$1 = $7$hi;
         i64toi32_i32$0 = $7;
         i64toi32_i32$2 = -1;
         i64toi32_i32$3 = -1;
         i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
         i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
         if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
         }
         i64toi32_i32$1 = i64toi32_i32$4;
         i64toi32_i32$0 = 0;
         i64toi32_i32$3 = -1;
         i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
         $111 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
         $111$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $7$hi;
         i64toi32_i32$5 = $7;
         i64toi32_i32$1 = -1;
         i64toi32_i32$3 = 0;
         i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
         $113 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
         $113$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $111$hi;
         i64toi32_i32$0 = $111;
         i64toi32_i32$5 = $113$hi;
         i64toi32_i32$3 = $113;
         i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
         $7 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
         $7$hi = i64toi32_i32$5;
         $2 = 3;
         break label$16;
        }
        i64toi32_i32$5 = $7$hi;
        i64toi32_i32$1 = $7;
        i64toi32_i32$0 = -256;
        i64toi32_i32$3 = -1;
        i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
        i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
        i64toi32_i32$1 = 2;
        i64toi32_i32$3 = 0;
        i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
        $7 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
        $7$hi = i64toi32_i32$1;
        $0 = 123;
        $2 = 3;
        break label$16;
       }
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$0 = $7;
       i64toi32_i32$5 = -256;
       i64toi32_i32$3 = -1;
       i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
       i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
       i64toi32_i32$0 = 3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
       $7 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
       $7$hi = i64toi32_i32$0;
       $0 = 117;
       $2 = 3;
       break label$16;
      }
      i64toi32_i32$0 = $7$hi;
      i64toi32_i32$5 = $7;
      i64toi32_i32$1 = -256;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
      i64toi32_i32$5 = 4;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
      $7 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
      $7$hi = i64toi32_i32$5;
      $2 = 3;
      break label$16;
     }
     i64toi32_i32$5 = $7$hi;
     i64toi32_i32$1 = $7;
     i64toi32_i32$0 = -256;
     i64toi32_i32$3 = -1;
     i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
     i64toi32_i32$1 = 1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $7 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $7$hi = i64toi32_i32$1;
     $2 = 3;
     break label$16;
    }
    return FUNCTION_TABLE[HEAP32[((HEAP32[($1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0](HEAP32[($1 + 24 | 0) >> 2] | 0, 39) | 0 | 0;
   }
   if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$5 >> 2] | 0) + 16 | 0) >> 2] | 0](HEAP32[$3 >> 2] | 0, $0) | 0)) {
    continue label$15
   }
   break label$15;
  };
  return 1 | 0;
 }
 
 function dlmalloc__dlmalloc__Dlmalloc__dispose_chunk__h6f59f1d81bec5e46($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = $1 + $2 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          $4 = HEAP32[($1 + 4 | 0) >> 2] | 0;
          if ($4 & 1 | 0) {
           break label$8
          }
          if (!($4 & 3 | 0)) {
           break label$7
          }
          $4 = HEAP32[$1 >> 2] | 0;
          $2 = $4 + $2 | 0;
          label$9 : {
           label$10 : {
            label$11 : {
             $1 = $1 - $4 | 0;
             if ((HEAP32[($0 + 408 | 0) >> 2] | 0 | 0) == ($1 | 0)) {
              break label$11
             }
             if ($4 >>> 0 >= 256 >>> 0) {
              break label$10
             }
             $5 = HEAP32[($1 + 12 | 0) >> 2] | 0;
             $6 = HEAP32[($1 + 8 | 0) >> 2] | 0;
             if (($5 | 0) == ($6 | 0)) {
              break label$9
             }
             HEAP32[($6 + 12 | 0) >> 2] = $5;
             HEAP32[($5 + 8 | 0) >> 2] = $6;
             break label$8;
            }
            if (((HEAP32[($3 + 4 | 0) >> 2] | 0) & 3 | 0 | 0) != (3 | 0)) {
             break label$8
            }
            HEAP32[($0 + 400 | 0) >> 2] = $2;
            $0 = $3 + 4 | 0;
            HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) & -2 | 0;
            HEAP32[($1 + 4 | 0) >> 2] = $2 | 1 | 0;
            HEAP32[$3 >> 2] = $2;
            return;
           }
           dlmalloc__dlmalloc__Dlmalloc__unlink_large_chunk__h173f6e2d56218081($0 | 0, $1 | 0);
           break label$8;
          }
          (wasm2js_i32$0 = $0, wasm2js_i32$1 = (HEAP32[$0 >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4 >>> 3 | 0 | 0) | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
         }
         label$12 : {
          label$13 : {
           $4 = HEAP32[($3 + 4 | 0) >> 2] | 0;
           if ($4 & 2 | 0) {
            break label$13
           }
           if ((HEAP32[($0 + 412 | 0) >> 2] | 0 | 0) == ($3 | 0)) {
            break label$12
           }
           if ((HEAP32[($0 + 408 | 0) >> 2] | 0 | 0) == ($3 | 0)) {
            break label$6
           }
           $5 = $4 & -8 | 0;
           $2 = $5 + $2 | 0;
           if ($5 >>> 0 >= 256 >>> 0) {
            break label$5
           }
           $5 = HEAP32[($3 + 12 | 0) >> 2] | 0;
           $3 = HEAP32[($3 + 8 | 0) >> 2] | 0;
           if (($5 | 0) == ($3 | 0)) {
            break label$3
           }
           HEAP32[($3 + 12 | 0) >> 2] = $5;
           HEAP32[($5 + 8 | 0) >> 2] = $3;
           break label$2;
          }
          HEAP32[($3 + 4 | 0) >> 2] = $4 & -2 | 0;
          HEAP32[($1 + 4 | 0) >> 2] = $2 | 1 | 0;
          HEAP32[($1 + $2 | 0) >> 2] = $2;
          break label$1;
         }
         HEAP32[($0 + 412 | 0) >> 2] = $1;
         $2 = (HEAP32[($0 + 404 | 0) >> 2] | 0) + $2 | 0;
         HEAP32[($0 + 404 | 0) >> 2] = $2;
         HEAP32[($1 + 4 | 0) >> 2] = $2 | 1 | 0;
         if (($1 | 0) == (HEAP32[($0 + 408 | 0) >> 2] | 0 | 0)) {
          break label$4
         }
        }
        return;
       }
       HEAP32[($0 + 408 | 0) >> 2] = $1;
       $2 = (HEAP32[($0 + 400 | 0) >> 2] | 0) + $2 | 0;
       HEAP32[($0 + 400 | 0) >> 2] = $2;
       HEAP32[($1 + 4 | 0) >> 2] = $2 | 1 | 0;
       HEAP32[($1 + $2 | 0) >> 2] = $2;
       return;
      }
      dlmalloc__dlmalloc__Dlmalloc__unlink_large_chunk__h173f6e2d56218081($0 | 0, $3 | 0);
      break label$2;
     }
     HEAP32[($0 + 400 | 0) >> 2] = 0;
     HEAP32[($0 + 408 | 0) >> 2] = 0;
     return;
    }
    (wasm2js_i32$0 = $0, wasm2js_i32$1 = (HEAP32[$0 >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4 >>> 3 | 0 | 0) | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   }
   HEAP32[($1 + 4 | 0) >> 2] = $2 | 1 | 0;
   HEAP32[($1 + $2 | 0) >> 2] = $2;
   if (($1 | 0) != (HEAP32[($0 + 408 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   HEAP32[($0 + 400 | 0) >> 2] = $2;
   return;
  }
  label$14 : {
   label$15 : {
    label$16 : {
     if ($2 >>> 0 >= 256 >>> 0) {
      break label$16
     }
     $3 = $2 >>> 3 | 0;
     $2 = ($0 + ($3 << 3 | 0) | 0) + 8 | 0;
     $4 = HEAP32[$0 >> 2] | 0;
     $3 = 1 << ($3 & 31 | 0) | 0;
     if (!($4 & $3 | 0)) {
      break label$15
     }
     $0 = HEAP32[($2 + 8 | 0) >> 2] | 0;
     break label$14;
    }
    dlmalloc__dlmalloc__Dlmalloc__insert_large_chunk__h2b5800089452f7a4($0 | 0, $1 | 0, $2 | 0);
    return;
   }
   HEAP32[$0 >> 2] = $4 | $3 | 0;
   $0 = $2;
  }
  HEAP32[($2 + 8 | 0) >> 2] = $1;
  HEAP32[($0 + 12 | 0) >> 2] = $1;
  HEAP32[($1 + 12 | 0) >> 2] = $2;
  HEAP32[($1 + 8 | 0) >> 2] = $0;
 }
 
 function stretch_layout__get_dimension__h7be8d74246d20fbc($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6 = Math_fround(0), $61 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4 = global$0 - 128 | 0;
  global$0 = $4;
  $5 = 0;
  label$1 : {
   label$2 : {
    if (!(stretch_layout__has_key__h3ec688104a7b111a($1 | 0, $2 | 0, $3 | 0) | 0)) {
     break label$2
    }
    (wasm2js_i32$0 = $4, wasm2js_i32$1 = __wbindgen_string_new($2 | 0, $3 | 0) | 0), HEAP32[(wasm2js_i32$0 + 64 | 0) >> 2] = wasm2js_i32$1;
    js_sys__Reflect__get__hb202a761aaf27873($4 + 56 | 0 | 0, $1 | 0, $4 + 64 | 0 | 0);
    $1 = HEAP32[($4 + 60 | 0) >> 2] | 0;
    label$3 : {
     label$4 : {
      if (!(HEAP32[($4 + 56 | 0) >> 2] | 0)) {
       break label$4
      }
      if ($1 >>> 0 < 36 >>> 0) {
       break label$3
      }
      __wbindgen_object_drop_ref($1 | 0);
      break label$3;
     }
     HEAP32[($4 + 68 | 0) >> 2] = $1;
     wasm_bindgen__JsValue__as_f64__h7e1a5be5cc4fe0a8($4 + 40 | 0 | 0, $4 + 68 | 0 | 0);
     label$5 : {
      label$6 : {
       label$7 : {
        i64toi32_i32$0 = HEAP32[($4 + 40 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($4 + 44 | 0) >> 2] | 0;
        if ((i64toi32_i32$0 | 0) != (1 | 0)) {
         break label$7
        }
        $6 = Math_fround(+HEAPF64[($4 + 48 | 0) >> 3]);
        $5 = 2;
        break label$6;
       }
       wasm_bindgen__JsValue__as_string__h629c730fd1acd893($4 + 72 | 0 | 0, $4 + 68 | 0 | 0);
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           label$12 : {
            if (!(HEAP32[($4 + 72 | 0) >> 2] | 0)) {
             break label$12
            }
            HEAP32[(($4 + 88 | 0) + 8 | 0) >> 2] = HEAP32[(($4 + 72 | 0) + 8 | 0) >> 2] | 0;
            i64toi32_i32$1 = HEAP32[($4 + 72 | 0) >> 2] | 0;
            i64toi32_i32$0 = HEAP32[($4 + 76 | 0) >> 2] | 0;
            $61 = i64toi32_i32$1;
            i64toi32_i32$1 = $4;
            HEAP32[($4 + 88 | 0) >> 2] = $61;
            HEAP32[($4 + 92 | 0) >> 2] = i64toi32_i32$0;
            $alloc__vec__Vec_T__20as_20core__ops__deref__Deref___deref__h98c8c687a0fd30bc($4 + 32 | 0 | 0, $4 + 88 | 0 | 0);
            label$13 : {
             if (!(core__slice___impl_20core__cmp__PartialEq__5bB_5d__20for_20_5bA_5d___eq__hd7ee0fb818c13258(HEAP32[($4 + 32 | 0) >> 2] | 0 | 0, HEAP32[($4 + 36 | 0) >> 2] | 0 | 0, 1049085 | 0, 4 | 0) | 0)) {
              break label$13
             }
             $5 = 1;
             break label$8;
            }
            $alloc__vec__Vec_T__20as_20core__ops__deref__Deref___deref__h98c8c687a0fd30bc($4 + 24 | 0 | 0, $4 + 88 | 0 | 0);
            core__num__dec2flt__dec2flt__h61a64678c8bb0200($4 + 112 | 0 | 0, HEAP32[($4 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4 + 28 | 0) >> 2] | 0 | 0);
            if (!(HEAPU8[($4 + 112 | 0) >> 0] | 0)) {
             break label$10
            }
            $alloc__vec__Vec_T__20as_20core__ops__deref__Deref___deref__h98c8c687a0fd30bc($4 + 16 | 0 | 0, $4 + 88 | 0 | 0);
            label$14 : {
             if (!(core__str___impl_20str___ends_with__h5d6bb4579d889be6(HEAP32[($4 + 16 | 0) >> 2] | 0 | 0, HEAP32[($4 + 20 | 0) >> 2] | 0 | 0, 37 | 0) | 0)) {
              break label$14
             }
             $1 = HEAP32[($4 + 96 | 0) >> 2] | 0;
             $alloc__vec__Vec_T__20as_20core__ops__deref__Deref___deref__h98c8c687a0fd30bc($4 + 8 | 0 | 0, $4 + 88 | 0 | 0);
             $2 = HEAP32[($4 + 8 | 0) >> 2] | 0;
             $3 = HEAP32[($4 + 12 | 0) >> 2] | 0;
             HEAP32[($4 + 116 | 0) >> 2] = $3;
             HEAP32[($4 + 112 | 0) >> 2] = $2;
             $1 = $1 + -1 | 0;
             HEAP32[($4 + 124 | 0) >> 2] = $1;
             label$15 : {
              if (!$1) {
               break label$15
              }
              if (($3 | 0) == ($1 | 0)) {
               break label$15
              }
              if ($3 >>> 0 <= $1 >>> 0) {
               break label$5
              }
              if ((HEAP8[($2 + $1 | 0) >> 0] | 0 | 0) <= (-65 | 0)) {
               break label$5
              }
             }
             core__num__dec2flt__dec2flt__h61a64678c8bb0200($4 + 104 | 0 | 0, $2 | 0, $1 | 0);
             if (!(HEAPU8[($4 + 104 | 0) >> 0] | 0)) {
              break label$9
             }
            }
            $alloc__vec__Vec_T__20as_20core__ops__drop__Drop___drop__he16a4be602db4786($4 + 88 | 0 | 0);
            $alloc__raw_vec__RawVec_T_2cA__20as_20core__ops__drop__Drop___drop__h53f3d3b9bd11375e($4 + 88 | 0 | 0);
            if (HEAP32[($4 + 72 | 0) >> 2] | 0) {
             break label$11
            }
           }
           core__ptr__real_drop_in_place__h2d71aab7a2e116e4($4 + 72 | 0 | 0);
          }
          $1 = HEAP32[($4 + 68 | 0) >> 2] | 0;
          if ($1 >>> 0 < 36 >>> 0) {
           break label$3
          }
          __wbindgen_object_drop_ref($1 | 0);
          break label$3;
         }
         $6 = Math_fround(HEAPF32[($4 + 116 | 0) >> 2]);
         $5 = 2;
         break label$8;
        }
        $6 = Math_fround(Math_fround(HEAPF32[($4 + 108 | 0) >> 2]) / Math_fround(100.0));
        $5 = 3;
       }
       $alloc__vec__Vec_T__20as_20core__ops__drop__Drop___drop__he16a4be602db4786($4 + 88 | 0 | 0);
       $alloc__raw_vec__RawVec_T_2cA__20as_20core__ops__drop__Drop___drop__h53f3d3b9bd11375e($4 + 88 | 0 | 0);
       if (HEAP32[($4 + 72 | 0) >> 2] | 0) {
        break label$6
       }
       core__ptr__real_drop_in_place__h2d71aab7a2e116e4($4 + 72 | 0 | 0);
      }
      label$16 : {
       $1 = HEAP32[($4 + 68 | 0) >> 2] | 0;
       if ($1 >>> 0 < 36 >>> 0) {
        break label$16
       }
       __wbindgen_object_drop_ref($1 | 0);
      }
      $1 = HEAP32[($4 + 64 | 0) >> 2] | 0;
      if ($1 >>> 0 < 36 >>> 0) {
       break label$1
      }
      __wbindgen_object_drop_ref($1 | 0);
      break label$1;
     }
     core__str__traits___impl_20core__slice__SliceIndex_str__20for_20core__ops__range__RangeTo_usize____index___7b_7bclosure_7d_7d__h28b5504032a55eb9($4 + 112 | 0 | 0, $4 + 124 | 0 | 0);
     abort();
    }
    $1 = HEAP32[($4 + 64 | 0) >> 2] | 0;
    if ($1 >>> 0 < 36 >>> 0) {
     break label$2
    }
    __wbindgen_object_drop_ref($1 | 0);
   }
  }
  HEAPF32[($0 + 4 | 0) >> 2] = $6;
  HEAP32[$0 >> 2] = $5;
  global$0 = $4 + 128 | 0;
 }
 
 function $alloc__rc__Rc_T__20as_20core__ops__drop__Drop___drop__h4f602f53ef47b86a($0) {
  $0 = $0 | 0;
  var $3 = 0, $2 = 0, $4 = 0, i64toi32_i32$1 = 0, $6 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, $1 = 0, $5 = 0, $7 = 0, $8 = 0, i64toi32_i32$3 = 0, $9 = 0, $9$hi = 0, $20 = 0, $21 = 0, $53$hi = 0, $56$hi = 0, $121$hi = 0, $124$hi = 0;
  $1 = global$0 - 16 | 0;
  global$0 = $1;
  $2 = HEAP32[$0 >> 2] | 0;
  HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1 | 0;
  label$1 : {
   $2 = HEAP32[$0 >> 2] | 0;
   if (HEAP32[$2 >> 2] | 0) {
    break label$1
   }
   $stretch__node__Stretch_20as_20core__ops__drop__Drop___drop__h77dfb89d33e180ee($2 + 16 | 0 | 0);
   $3 = $2 + 108 | 0;
   $alloc__vec__Vec_T__20as_20core__ops__drop__Drop___drop__ha7479f748bca561f($3 | 0);
   $alloc__raw_vec__RawVec_T_2cA__20as_20core__ops__drop__Drop___drop__h28a9fdb08e8b7be5($3 | 0);
   label$2 : {
    $4 = HEAP32[($2 + 32 | 0) >> 2] | 0;
    if (!$4) {
     break label$2
    }
    core__alloc__size_align__h98e296708101f83f($1 + 8 | 0 | 0);
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         $3 = HEAP32[($1 + 12 | 0) >> 2] | 0;
         $5 = $3 + -1 | 0;
         $6 = HEAP32[($1 + 8 | 0) >> 2] | 0;
         $7 = 0 - $3 | 0;
         $8 = ($5 + $6 | 0) & $7 | 0;
         if ($8 >>> 0 < $6 >>> 0) {
          break label$7
         }
         i64toi32_i32$0 = 0;
         $53$hi = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         $56$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $53$hi;
         i64toi32_i32$1 = $56$hi;
         i64toi32_i32$1 = __wasm_i64_mul($8 | 0, i64toi32_i32$0 | 0, $4 + 1 | 0 | 0, i64toi32_i32$1 | 0) | 0;
         i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
         $9 = i64toi32_i32$1;
         $9$hi = i64toi32_i32$0;
         i64toi32_i32$2 = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         i64toi32_i32$3 = 32;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = 0;
          $20 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
         } else {
          i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
          $20 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
         }
         if (!$20) {
          break label$6
         }
        }
        $T_20as_20core__convert__From_T____from__h197a9b5075e87dfb();
        break label$5;
       }
       if (!$3) {
        break label$5
       }
       label$8 : {
        label$9 : {
         $4 = $4 + 5 | 0;
         $6 = ($5 + $4 | 0) & $7 | 0;
         if ($6 >>> 0 < $4 >>> 0) {
          break label$9
         }
         i64toi32_i32$1 = $9$hi;
         $4 = $6 + $9 | 0;
         if ($4 >>> 0 >= $6 >>> 0) {
          break label$8
         }
        }
        $T_20as_20core__convert__From_T____from__h197a9b5075e87dfb();
        break label$4;
       }
       label$10 : {
        $3 = $3 >>> 0 > 4 >>> 0 ? $3 : 4;
        if (($3 + -1 | 0) & $3 | 0) {
         break label$10
        }
        if ($4 >>> 0 <= (0 - $3 | 0) >>> 0) {
         break label$3
        }
       }
       $T_20as_20core__convert__From_T____from__h197a9b5075e87dfb();
       $3 = 0;
       break label$3;
      }
      $T_20as_20core__convert__From_T____from__h3208874747cb8368();
     }
     $3 = 0;
    }
    __rust_dealloc(HEAP32[($2 + 36 | 0) >> 2] | 0 | 0, $4 | 0, $3 | 0);
   }
   label$11 : {
    $4 = HEAP32[($2 + 72 | 0) >> 2] | 0;
    if (!$4) {
     break label$11
    }
    core__alloc__size_align__hcaa321022272ec68($1 | 0);
    label$12 : {
     label$13 : {
      label$14 : {
       label$15 : {
        label$16 : {
         $3 = HEAP32[($1 + 4 | 0) >> 2] | 0;
         $5 = $3 + -1 | 0;
         $6 = HEAP32[$1 >> 2] | 0;
         $7 = 0 - $3 | 0;
         $8 = ($5 + $6 | 0) & $7 | 0;
         if ($8 >>> 0 < $6 >>> 0) {
          break label$16
         }
         i64toi32_i32$1 = 0;
         $121$hi = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         $124$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $121$hi;
         i64toi32_i32$2 = $124$hi;
         i64toi32_i32$2 = __wasm_i64_mul($8 | 0, i64toi32_i32$1 | 0, $4 + 1 | 0 | 0, i64toi32_i32$2 | 0) | 0;
         i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
         $9 = i64toi32_i32$2;
         $9$hi = i64toi32_i32$1;
         i64toi32_i32$0 = i64toi32_i32$2;
         i64toi32_i32$2 = 0;
         i64toi32_i32$3 = 32;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$2 = 0;
          $21 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
         } else {
          i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
          $21 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
         }
         if (!$21) {
          break label$15
         }
        }
        $T_20as_20core__convert__From_T____from__h197a9b5075e87dfb();
        break label$14;
       }
       if (!$3) {
        break label$14
       }
       label$17 : {
        label$18 : {
         $4 = $4 + 5 | 0;
         $6 = ($5 + $4 | 0) & $7 | 0;
         if ($6 >>> 0 < $4 >>> 0) {
          break label$18
         }
         i64toi32_i32$2 = $9$hi;
         $4 = $6 + $9 | 0;
         if ($4 >>> 0 >= $6 >>> 0) {
          break label$17
         }
        }
        $T_20as_20core__convert__From_T____from__h197a9b5075e87dfb();
        break label$13;
       }
       label$19 : {
        $3 = $3 >>> 0 > 4 >>> 0 ? $3 : 4;
        if (($3 + -1 | 0) & $3 | 0) {
         break label$19
        }
        if ($4 >>> 0 <= (0 - $3 | 0) >>> 0) {
         break label$12
        }
       }
       $T_20as_20core__convert__From_T____from__h197a9b5075e87dfb();
       $3 = 0;
       break label$12;
      }
      $T_20as_20core__convert__From_T____from__h3208874747cb8368();
     }
     $3 = 0;
    }
    __rust_dealloc(HEAP32[($2 + 76 | 0) >> 2] | 0 | 0, $4 | 0, $3 | 0);
   }
   $3 = $2 + 120 | 0;
   $alloc__vec__Vec_T__20as_20core__ops__drop__Drop___drop__he298bea3d7dceb19($3 | 0);
   alloc__raw_vec__RawVec_T_2cA___dealloc_buffer__hd25fde2ffd6d2603($3 | 0);
   $3 = $2 + 132 | 0;
   $alloc__vec__Vec_T__20as_20core__ops__drop__Drop___drop__h6e997e740088a7d8($3 | 0);
   alloc__raw_vec__RawVec_T_2cA___dealloc_buffer__hcfc71f822a24d45c($3 | 0);
   $2 = $2 + 144 | 0;
   $alloc__vec__Vec_T__20as_20core__ops__drop__Drop___drop__h6e997e740088a7d8($2 | 0);
   alloc__raw_vec__RawVec_T_2cA___dealloc_buffer__hcfc71f822a24d45c($2 | 0);
   $2 = HEAP32[$0 >> 2] | 0;
   HEAP32[($2 + 4 | 0) >> 2] = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   $2 = HEAP32[$0 >> 2] | 0;
   if (HEAP32[($2 + 4 | 0) >> 2] | 0) {
    break label$1
   }
   __rust_dealloc($2 | 0, 160 | 0, 8 | 0);
  }
  global$0 = $1 + 16 | 0;
 }
 
 function stretch__node__Stretch__replace_child_at_index__h3fce858c1abc4355($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var i64toi32_i32$0 = 0, $5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $6 = 0, $9 = 0, $7 = 0, $8 = 0, $19 = 0, $22 = 0, $33 = 0, $46 = 0, $54 = 0, $57 = 0, $68 = 0, $81 = 0, $176 = 0, $181 = 0;
  $5 = global$0 - 48 | 0;
  global$0 = $5;
  $6 = ($5 + 32 | 0) + 8 | 0;
  i64toi32_i32$2 = $2 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $19 = i64toi32_i32$0;
  i64toi32_i32$0 = $6;
  HEAP32[i64toi32_i32$0 >> 2] = $19;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $22 = i64toi32_i32$1;
  i64toi32_i32$1 = $5;
  HEAP32[($5 + 32 | 0) >> 2] = $22;
  HEAP32[($5 + 36 | 0) >> 2] = i64toi32_i32$0;
  stretch__node__Stretch__find_node__h5d72b27b054a57c0($5 + 8 | 0 | 0, $1 | 0, $5 + 32 | 0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if ((HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) != (1 | 0)) {
         break label$6
        }
        i64toi32_i32$2 = $5;
        i64toi32_i32$0 = HEAP32[($5 + 12 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($5 + 16 | 0) >> 2] | 0;
        $33 = i64toi32_i32$0;
        i64toi32_i32$0 = $0;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = $33;
        HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$1;
        HEAP32[i64toi32_i32$0 >> 2] = 1;
        HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = HEAP32[(($5 + 8 | 0) + 20 | 0) >> 2] | 0;
        i64toi32_i32$2 = ($5 + 8 | 0) + 12 | 0;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $46 = i64toi32_i32$1;
        i64toi32_i32$1 = $0 + 12 | 0;
        HEAP32[i64toi32_i32$1 >> 2] = $46;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        break label$5;
       }
       $7 = HEAP32[($5 + 12 | 0) >> 2] | 0;
       HEAP32[($5 + 4 | 0) >> 2] = $7;
       i64toi32_i32$2 = $4 + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $54 = i64toi32_i32$0;
       i64toi32_i32$0 = $6;
       HEAP32[i64toi32_i32$0 >> 2] = $54;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $4;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $57 = i64toi32_i32$1;
       i64toi32_i32$1 = $5;
       HEAP32[($5 + 32 | 0) >> 2] = $57;
       HEAP32[($5 + 36 | 0) >> 2] = i64toi32_i32$0;
       stretch__node__Stretch__find_node__h5d72b27b054a57c0($5 + 8 | 0 | 0, $1 | 0, $5 + 32 | 0 | 0);
       label$7 : {
        if ((HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) != (1 | 0)) {
         break label$7
        }
        i64toi32_i32$2 = $5;
        i64toi32_i32$0 = HEAP32[($5 + 12 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($5 + 16 | 0) >> 2] | 0;
        $68 = i64toi32_i32$0;
        i64toi32_i32$0 = $0;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = $68;
        HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$1;
        HEAP32[i64toi32_i32$0 >> 2] = 1;
        HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = HEAP32[(($5 + 8 | 0) + 20 | 0) >> 2] | 0;
        i64toi32_i32$2 = ($5 + 8 | 0) + 12 | 0;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $81 = i64toi32_i32$1;
        i64toi32_i32$1 = $0 + 12 | 0;
        HEAP32[i64toi32_i32$1 >> 2] = $81;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        break label$5;
       }
       $2 = HEAP32[($1 + 136 | 0) >> 2] | 0;
       $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
       if ($2 >>> 0 <= $6 >>> 0) {
        break label$4
       }
       $8 = $1 + 128 | 0;
       $2 = (HEAP32[$8 >> 2] | 0) + Math_imul($6, 12) | 0;
       $4 = $2 + 8 | 0;
       label$8 : {
        $9 = HEAP32[($2 + 8 | 0) >> 2] | 0;
        if (($9 | 0) != (HEAP32[($2 + 4 | 0) >> 2] | 0 | 0)) {
         break label$8
        }
        alloc__raw_vec__RawVec_T_2cA___reserve__h04586cd83aef0f94($2 | 0, $9 | 0, 1 | 0);
        $9 = HEAP32[$4 >> 2] | 0;
       }
       HEAP32[((HEAP32[$2 >> 2] | 0) + ($9 << 2 | 0) | 0) >> 2] = $7;
       HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
       $4 = HEAP32[($1 + 124 | 0) >> 2] | 0;
       $2 = HEAP32[($5 + 4 | 0) >> 2] | 0;
       if ($4 >>> 0 <= $2 >>> 0) {
        break label$3
       }
       $2 = (HEAP32[($1 + 116 | 0) >> 2] | 0) + Math_imul($2, 12) | 0;
       $4 = HEAP32[($2 + 8 | 0) >> 2] | 0;
       if ($4 >>> 0 <= $3 >>> 0) {
        break label$2
       }
       $4 = (HEAP32[$2 >> 2] | 0) + ($3 << 2 | 0) | 0;
       $2 = HEAP32[$4 >> 2] | 0;
       HEAP32[$4 >> 2] = $6;
       HEAP32[($5 + 8 | 0) >> 2] = $2;
       $4 = HEAP32[($1 + 136 | 0) >> 2] | 0;
       if ($4 >>> 0 <= $2 >>> 0) {
        break label$1
       }
       alloc__vec__Vec_T___retain__h8d0934f5bb5ee14e((HEAP32[($1 + 128 | 0) >> 2] | 0) + Math_imul($2, 12) | 0 | 0, $5 + 4 | 0 | 0);
       stretch__forest__Forest__mark_dirty__mark_dirty_impl__hafdb374afea4365e($1 + 104 | 0 | 0, $8 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0);
       $1 = $std__collections__hash__map__HashMap_K_2cV_2cS__20as_20core__ops__index__Index__Q____index__hc585c3a6d029245c($1 + 40 | 0 | 0, $5 + 8 | 0 | 0) | 0;
       HEAP32[$0 >> 2] = 0;
       i64toi32_i32$2 = $1;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $176 = i64toi32_i32$0;
       i64toi32_i32$0 = $0;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = $176;
       HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $181 = i64toi32_i32$1;
       i64toi32_i32$1 = $0 + 12 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $181;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      }
      global$0 = $5 + 48 | 0;
      return;
     }
     core__panicking__panic_bounds_check__h0537ade040df571e(1051320 | 0, $6 | 0, $2 | 0);
     abort();
    }
    core__panicking__panic_bounds_check__h0537ade040df571e(1051320 | 0, $2 | 0, $4 | 0);
    abort();
   }
   core__panicking__panic_bounds_check__h0537ade040df571e(1051320 | 0, $3 | 0, $4 | 0);
   abort();
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1051320 | 0, $2 | 0, $4 | 0);
  abort();
 }
 
 function $core__fmt__builders__PadAdapter_20as_20core__fmt__Write___write_str__h09f53eef721a952f($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $11 = 0, $3 = 0, $12 = 0, $15 = 0, $10 = 0, $4 = 0, $5 = 0, $7 = 0, $13 = 0, $9 = 0, i64toi32_i32$1 = 0, $14 = 0, $6 = 0, $8 = 0;
  $3 = global$0 - 48 | 0;
  global$0 = $3;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (!$2) {
        break label$5
       }
       $4 = $3 + 40 | 0;
       $5 = $0 + 8 | 0;
       $6 = $3 + 32 | 0;
       $7 = $3 + 28 | 0;
       $8 = $3 + 36 | 0;
       $9 = $0 + 4 | 0;
       label$6 : while (1) {
        label$7 : {
         if (!(HEAPU8[$5 >> 0] | 0)) {
          break label$7
         }
         if (FUNCTION_TABLE[HEAP32[((HEAP32[$9 >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[$0 >> 2] | 0, 1061276, 4) | 0) {
          break label$4
         }
        }
        HEAP32[$4 >> 2] = 10;
        i64toi32_i32$1 = $6;
        HEAP32[i64toi32_i32$1 >> 2] = 10;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 1;
        HEAP32[$7 >> 2] = $2;
        $10 = ($3 + 16 | 0) + 8 | 0;
        HEAP32[$10 >> 2] = 0;
        HEAP32[($3 + 20 | 0) >> 2] = $2;
        HEAP32[($3 + 16 | 0) >> 2] = $1;
        core__slice__memchr__memchr__h7af23d5070345c6c($3 + 8 | 0 | 0, 10 | 0, $1 | 0, $2 | 0);
        label$8 : {
         label$9 : {
          label$10 : {
           label$11 : {
            label$12 : {
             if ((HEAP32[($3 + 8 | 0) >> 2] | 0 | 0) != (1 | 0)) {
              break label$12
             }
             $11 = HEAP32[($3 + 12 | 0) >> 2] | 0;
             label$13 : while (1) {
              $11 = ($11 + (HEAP32[$10 >> 2] | 0) | 0) + 1 | 0;
              HEAP32[$10 >> 2] = $11;
              label$14 : {
               label$15 : {
                $12 = HEAP32[$8 >> 2] | 0;
                if ($11 >>> 0 >= $12 >>> 0) {
                 break label$15
                }
                $13 = HEAP32[($3 + 20 | 0) >> 2] | 0;
                break label$14;
               }
               $13 = HEAP32[($3 + 20 | 0) >> 2] | 0;
               if ($13 >>> 0 < $11 >>> 0) {
                break label$14
               }
               if ($12 >>> 0 >= 5 >>> 0) {
                break label$9
               }
               $14 = $11 - $12 | 0;
               $15 = (HEAP32[($3 + 16 | 0) >> 2] | 0) + $14 | 0;
               if (($15 | 0) == ($4 | 0)) {
                break label$10
               }
               if (!(memcmp($15 | 0, $4 | 0, $12 | 0) | 0)) {
                break label$10
               }
              }
              $15 = HEAP32[$7 >> 2] | 0;
              if ($15 >>> 0 < $11 >>> 0) {
               break label$11
              }
              if ($13 >>> 0 < $15 >>> 0) {
               break label$11
              }
              core__slice__memchr__memchr__h7af23d5070345c6c($3 | 0, HEAPU8[((($3 + 16 | 0) + $12 | 0) + 23 | 0) >> 0] | 0 | 0, (HEAP32[($3 + 16 | 0) >> 2] | 0) + $11 | 0 | 0, $15 - $11 | 0 | 0);
              $11 = HEAP32[($3 + 4 | 0) >> 2] | 0;
              if ((HEAP32[$3 >> 2] | 0 | 0) == (1 | 0)) {
               continue label$13
              }
              break label$13;
             };
            }
            HEAP32[$10 >> 2] = HEAP32[$7 >> 2] | 0;
           }
           HEAP8[$5 >> 0] = 0;
           $11 = $2;
           break label$8;
          }
          HEAP8[$5 >> 0] = 1;
          $11 = $14 + 1 | 0;
          break label$8;
         }
         core__slice__slice_index_len_fail__h4544fc57f3d8a7a0($12 | 0, 4 | 0);
         abort();
        }
        $15 = HEAP32[$9 >> 2] | 0;
        $12 = HEAP32[$0 >> 2] | 0;
        label$16 : {
         $10 = !$11 | ($2 | 0) == ($11 | 0) | 0;
         if ($10) {
          break label$16
         }
         if ($2 >>> 0 <= $11 >>> 0) {
          break label$2
         }
         if ((HEAP8[($1 + $11 | 0) >> 0] | 0 | 0) <= (-65 | 0)) {
          break label$2
         }
        }
        if (FUNCTION_TABLE[HEAP32[($15 + 12 | 0) >> 2] | 0]($12, $1, $11) | 0) {
         break label$4
        }
        label$17 : {
         if ($10) {
          break label$17
         }
         if ($2 >>> 0 <= $11 >>> 0) {
          break label$1
         }
         if ((HEAP8[($1 + $11 | 0) >> 0] | 0 | 0) <= (-65 | 0)) {
          break label$1
         }
        }
        $1 = $1 + $11 | 0;
        $2 = $2 - $11 | 0;
        if ($2) {
         continue label$6
        }
        break label$6;
       };
      }
      $11 = 0;
      break label$3;
     }
     $11 = 1;
    }
    global$0 = $3 + 48 | 0;
    return $11 | 0;
   }
   core__str__slice_error_fail__h65b601301310b052($1 | 0, $2 | 0, 0 | 0, $11 | 0);
   abort();
  }
  core__str__slice_error_fail__h65b601301310b052($1 | 0, $2 | 0, $11 | 0, $2 | 0);
  abort();
 }
 
 function core__num__dec2flt__num__digits_to_big__hef6bb2d3b095a9ae($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var i64toi32_i32$0 = 0, $11 = 0, $5 = 0, $14 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $6 = 0, $12 = 0, $14$hi = 0, $13 = 0, $9 = 0, i64toi32_i32$3 = 0, $8 = 0, i64toi32_i32$4 = 0, $24 = 0, $7 = 0, $10 = 0, $86 = 0, $25 = 0, $89$hi = 0;
  $5 = global$0 - 176 | 0;
  global$0 = $5;
  HEAP32[($5 + 8 | 0) >> 2] = 1;
  $6 = 0;
  $7 = memset($5 + 8 | 0 | 4 | 0 | 0, 0 | 0, 160 | 0) | 0;
  $8 = $3 + $4 | 0;
  $9 = $1 + $2 | 0;
  $10 = $5 + 16 | 0;
  $11 = 1;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           $2 = $6 & 255 | 0;
           if (($2 | 0) == (1 | 0)) {
            break label$9
           }
           if (($2 | 0) != (2 | 0)) {
            break label$8
           }
           if (($3 | 0) == ($8 | 0)) {
            break label$4
           }
           $13 = $3 + 1 | 0;
           $6 = 2;
           $12 = $1;
           if ($11 >>> 0 < 41 >>> 0) {
            break label$3
           }
           break label$5;
          }
          if (($1 | 0) == ($9 | 0)) {
           break label$4
          }
          $6 = 1;
          $12 = $1 + 1 | 0;
          break label$7;
         }
         if (($1 | 0) == ($9 | 0)) {
          break label$6
         }
         $12 = $1 + 1 | 0;
         $6 = 0;
        }
        $13 = $3;
        $3 = $1;
        if ($11 >>> 0 >= 41 >>> 0) {
         break label$5
        }
        break label$3;
       }
       if (($3 | 0) == ($8 | 0)) {
        break label$4
       }
       $13 = $3 + 1 | 0;
       $6 = 2;
       $12 = $9;
       if ($11 >>> 0 < 41 >>> 0) {
        break label$3
       }
      }
      core__slice__slice_index_len_fail__h4544fc57f3d8a7a0($11 | 0, 40 | 0);
      abort();
     }
     memcpy($0 | 0, $5 + 8 | 0 | 0, 164 | 0) | 0;
     global$0 = $5 + 176 | 0;
     return;
    }
    $1 = HEAPU8[$3 >> 0] | 0;
    label$10 : {
     label$11 : {
      if (!$11) {
       break label$11
      }
      $2 = $11 << 2 | 0;
      $4 = (($5 + 8 | 0) + $2 | 0) + 4 | 0;
      i64toi32_i32$0 = 0;
      $14 = 0;
      $14$hi = i64toi32_i32$0;
      $3 = $7;
      label$12 : while (1) {
       $86 = $3;
       i64toi32_i32$2 = $3;
       i64toi32_i32$0 = HEAP32[$3 >> 2] | 0;
       i64toi32_i32$1 = 0;
       $25 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$0 = __wasm_i64_mul($25 | 0, i64toi32_i32$1 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $89$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $14$hi;
       i64toi32_i32$1 = $89$hi;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = $14$hi;
       i64toi32_i32$3 = $14;
       i64toi32_i32$4 = i64toi32_i32$2 + $14 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$4 >>> 0 < $14 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $14 = i64toi32_i32$4;
       $14$hi = i64toi32_i32$5;
       HEAP32[$86 >> 2] = $14;
       $3 = $3 + 4 | 0;
       i64toi32_i32$1 = $14;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 32;
       i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $24 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
        $24 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
       }
       $14 = $24;
       $14$hi = i64toi32_i32$2;
       $2 = $2 + -4 | 0;
       if ($2) {
        continue label$12
       }
       break label$12;
      };
      i64toi32_i32$2 = $14$hi;
      $3 = $14;
      if (!$3) {
       break label$10
      }
      if ($11 >>> 0 > 39 >>> 0) {
       break label$1
      }
      HEAP32[$4 >> 2] = $3;
      $11 = $11 + 1 | 0;
      break label$10;
     }
     $11 = 0;
    }
    HEAP32[($5 + 8 | 0) >> 2] = $11;
    $3 = HEAP32[($5 + 12 | 0) >> 2] | 0;
    $1 = $3 + (($1 + -48 | 0) & 255 | 0) | 0;
    HEAP32[($5 + 12 | 0) >> 2] = $1;
    $2 = 1;
    label$13 : {
     label$14 : {
      if ($1 >>> 0 >= $3 >>> 0) {
       break label$14
      }
      $2 = 1;
      $3 = $10;
      label$15 : while (1) {
       if ($2 >>> 0 >= 40 >>> 0) {
        break label$13
       }
       $1 = HEAP32[$3 >> 2] | 0;
       $4 = $1 + 1 | 0;
       HEAP32[$3 >> 2] = $4;
       $3 = $3 + 4 | 0;
       $2 = $2 + 1 | 0;
       if ($4 >>> 0 < $1 >>> 0) {
        continue label$15
       }
       break label$15;
      };
     }
     $1 = $12;
     $3 = $13;
     if ($2 >>> 0 <= $11 >>> 0) {
      continue label$2
     }
     HEAP32[($5 + 8 | 0) >> 2] = $2;
     $11 = $2;
     $1 = $12;
     $3 = $13;
     continue label$2;
    }
    break label$2;
   };
   core__panicking__panic_bounds_check__h0537ade040df571e(1065980 | 0, $2 | 0, 40 | 0);
   abort();
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1066048 | 0, $11 | 0, 40 | 0);
  abort();
 }
 
 function std__thread__park__h8c2d8fb1038e650a() {
  var $0 = 0, $1 = 0, $2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3 = 0, $4 = 0, $14 = 0, $39 = 0, $71 = 0;
  $0 = global$0 - 96 | 0;
  global$0 = $0;
  label$1 : {
   if ((HEAP32[(0 + 1066400 | 0) >> 2] | 0 | 0) == (1 | 0)) {
    break label$1
   }
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 1066400 | 0) >> 2] = 1;
   HEAP32[(i64toi32_i32$1 + 1066404 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(0 + 1066408 | 0) >> 2] = 0;
  }
  $1 = std__sys_common__thread_info__ThreadInfo__with___7b_7bclosure_7d_7d__hb699849b36c0e1da(1066404 | 0) | 0;
  $2 = HEAP32[($1 + 24 | 0) >> 2] | 0;
  $14 = $2;
  $2 = ($2 | 0) == (2 | 0);
  HEAP32[($1 + 24 | 0) >> 2] = $2 ? 0 : $14;
  HEAP32[($0 + 8 | 0) >> 2] = $1;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        if ($2) {
         break label$7
        }
        $1 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        $2 = HEAP32[($1 + 28 | 0) >> 2] | 0;
        if (HEAPU8[$2 >> 0] | 0) {
         break label$6
        }
        HEAP8[$2 >> 0] = 1;
        $3 = 0;
        label$8 : {
         label$9 : {
          if ((HEAP32[(0 + 1066864 | 0) >> 2] | 0 | 0) != (1 | 0)) {
           break label$9
          }
          $3 = HEAP32[(0 + 1066868 | 0) >> 2] | 0;
          break label$8;
         }
         i64toi32_i32$1 = 0;
         i64toi32_i32$0 = 0;
         HEAP32[(i64toi32_i32$1 + 1066864 | 0) >> 2] = 1;
         HEAP32[(i64toi32_i32$1 + 1066868 | 0) >> 2] = i64toi32_i32$0;
        }
        HEAP32[(0 + 1066868 | 0) >> 2] = $3;
        if (HEAPU8[($1 + 32 | 0) >> 0] | 0) {
         break label$5
        }
        $2 = $1 + 24 | 0;
        $39 = $2;
        $2 = HEAP32[$2 >> 2] | 0;
        HEAP32[$39 >> 2] = $2 ? $2 : 1;
        if (!$2) {
         break label$4
        }
        if (($2 | 0) != (2 | 0)) {
         break label$3
        }
        $4 = (HEAP32[($0 + 8 | 0) >> 2] | 0) + 24 | 0;
        $2 = HEAP32[$4 >> 2] | 0;
        HEAP32[$4 >> 2] = 0;
        HEAP32[($0 + 12 | 0) >> 2] = $2;
        if (($2 | 0) != (2 | 0)) {
         break label$2
        }
        label$10 : {
         if ($3) {
          break label$10
         }
         label$11 : {
          if ((HEAP32[(0 + 1066864 | 0) >> 2] | 0 | 0) != (1 | 0)) {
           break label$11
          }
          if (!(HEAP32[(0 + 1066868 | 0) >> 2] | 0)) {
           break label$10
          }
          HEAP8[($1 + 32 | 0) >> 0] = 1;
          break label$10;
         }
         i64toi32_i32$1 = 0;
         i64toi32_i32$0 = 0;
         HEAP32[(i64toi32_i32$1 + 1066864 | 0) >> 2] = 1;
         HEAP32[(i64toi32_i32$1 + 1066868 | 0) >> 2] = i64toi32_i32$0;
        }
        HEAP8[(HEAP32[($1 + 28 | 0) >> 2] | 0) >> 0] = 0;
       }
       $1 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       $71 = $1;
       $1 = HEAP32[$1 >> 2] | 0;
       HEAP32[$71 >> 2] = $1 + -1 | 0;
       label$12 : {
        if (($1 | 0) != (1 | 0)) {
         break label$12
        }
        alloc__sync__Arc_T___drop_slow__h51a4fa13661dd7d4($0 + 8 | 0 | 0);
       }
       global$0 = $0 + 96 | 0;
       return;
      }
      std__panicking__begin_panic__haa7e8f73e4c17ace(1053544 | 0, 32 | 0, 1053528 | 0);
      abort();
     }
     core__result__unwrap_failed__hf393a2f4cae996d3($1 + 28 | 0 | 0, ($3 | 0) != (0 | 0) | 0);
     abort();
    }
    $0 = (HEAP32[($0 + 8 | 0) >> 2] | 0) + 36 | 0;
    $1 = HEAP32[($1 + 28 | 0) >> 2] | 0;
    std__sync__condvar__Condvar__verify__h4afacbcb46c33d4f($0 | 0, $1 | 0);
    std__sys_common__condvar__Condvar__wait__h21d1cd2c1460ca72(HEAP32[$0 >> 2] | 0 | 0, $1 | 0);
    abort();
   }
   std__panicking__begin_panic__haa7e8f73e4c17ace(1052768 | 0, 23 | 0, 1052752 | 0);
   abort();
  }
  HEAP32[($0 + 64 | 0) >> 2] = $0 + 12 | 0;
  HEAP32[($0 + 68 | 0) >> 2] = 1052792;
  HEAP32[(($0 + 72 | 0) + 20 | 0) >> 2] = 0;
  HEAP32[(($0 + 40 | 0) + 20 | 0) >> 2] = 22;
  HEAP32[($0 + 52 | 0) >> 2] = 55;
  HEAP32[(($0 + 16 | 0) + 20 | 0) >> 2] = 3;
  HEAP32[($0 + 88 | 0) >> 2] = 1052380;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[($0 + 76 | 0) >> 2] = 1;
  HEAP32[($0 + 80 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 72 | 0) >> 2] = 1052828;
  HEAP32[($0 + 44 | 0) >> 2] = 55;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[($0 + 20 | 0) >> 2] = 3;
  HEAP32[($0 + 24 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 16 | 0) >> 2] = 1052400;
  HEAP32[($0 + 56 | 0) >> 2] = $0 + 72 | 0;
  HEAP32[($0 + 48 | 0) >> 2] = $0 + 68 | 0;
  HEAP32[($0 + 40 | 0) >> 2] = $0 + 64 | 0;
  HEAP32[($0 + 32 | 0) >> 2] = $0 + 40 | 0;
  std__panicking__begin_panic_fmt__hb7825530f38bd066($0 + 16 | 0 | 0, 1052836 | 0);
  abort();
 }
 
 function core__num__bignum__Big32x40__mul_pow2__h9585b2465912363e($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $5 = 0, $4 = 0, $3 = 0, $2 = 0, $6 = 0, $8 = 0, $7 = 0, $118 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($1 >>> 0 >= 1280 >>> 0) {
      break label$3
     }
     $2 = $1 >>> 5 | 0;
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          $3 = HEAP32[$0 >> 2] | 0;
          if (!$3) {
           break label$8
          }
          $4 = $3 + -1 | 0;
          $5 = $0 + ($3 << 2 | 0) | 0;
          $3 = $0 + (($3 + $2 | 0) << 2 | 0) | 0;
          label$9 : while (1) {
           if ($4 >>> 0 > 39 >>> 0) {
            break label$7
           }
           $6 = $2 + $4 | 0;
           if ($6 >>> 0 > 39 >>> 0) {
            break label$6
           }
           HEAP32[$3 >> 2] = HEAP32[$5 >> 2] | 0;
           $5 = $5 + -4 | 0;
           $3 = $3 + -4 | 0;
           $4 = $4 + -1 | 0;
           if (($4 | 0) != (-1 | 0)) {
            continue label$9
           }
           break label$9;
          };
         }
         label$10 : {
          if (!$2) {
           break label$10
          }
          $4 = $0 + 4 | 0;
          $5 = 0;
          label$11 : while (1) {
           if ($5 >>> 0 > 39 >>> 0) {
            break label$5
           }
           HEAP32[$4 >> 2] = 0;
           $4 = $4 + 4 | 0;
           $5 = $5 + 1 | 0;
           if ($5 >>> 0 < $2 >>> 0) {
            continue label$11
           }
           break label$11;
          };
         }
         $4 = HEAP32[$0 >> 2] | 0;
         $5 = $4 + $2 | 0;
         label$12 : {
          $6 = $1 & 31 | 0;
          if (!$6) {
           break label$12
          }
          $3 = $5 + -1 | 0;
          if ($3 >>> 0 > 39 >>> 0) {
           break label$2
          }
          $7 = $5;
          label$13 : {
           $3 = HEAP32[(($0 + ($3 << 2 | 0) | 0) + 4 | 0) >> 2] | 0;
           $1 = (0 - $1 | 0) & 31 | 0;
           $8 = $3 >>> $1 | 0;
           if (!$8) {
            break label$13
           }
           if ($5 >>> 0 > 39 >>> 0) {
            break label$1
           }
           HEAP32[(($0 + ($5 << 2 | 0) | 0) + 4 | 0) >> 2] = $8;
           $7 = $5 + 1 | 0;
          }
          label$14 : {
           $8 = $2 + 1 | 0;
           if ($8 >>> 0 >= $5 >>> 0) {
            break label$14
           }
           $4 = ($0 + (($4 + $2 | 0) << 2 | 0) | 0) + -4 | 0;
           label$15 : while (1) {
            if (($5 + -2 | 0) >>> 0 > 39 >>> 0) {
             break label$4
            }
            $118 = $3 << $6 | 0;
            $3 = HEAP32[$4 >> 2] | 0;
            HEAP32[($4 + 4 | 0) >> 2] = $118 | ($3 >>> $1 | 0) | 0;
            $4 = $4 + -4 | 0;
            $5 = $5 + -1 | 0;
            if ($8 >>> 0 < $5 >>> 0) {
             continue label$15
            }
            break label$15;
           };
          }
          $4 = ($0 + ($2 << 2 | 0) | 0) + 4 | 0;
          HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) << $6 | 0;
          HEAP32[$0 >> 2] = $7;
          return $0 | 0;
         }
         HEAP32[$0 >> 2] = $5;
         return $0 | 0;
        }
        core__panicking__panic_bounds_check__h0537ade040df571e(1066120 | 0, $4 | 0, 40 | 0);
        abort();
       }
       core__panicking__panic_bounds_check__h0537ade040df571e(1066136 | 0, $6 | 0, 40 | 0);
       abort();
      }
      core__panicking__panic_bounds_check__h0537ade040df571e(1066152 | 0, $5 | 0, 40 | 0);
      abort();
     }
     core__panicking__panic_bounds_check__h0537ade040df571e(1066200 | 0, $5 + -2 | 0 | 0, 40 | 0);
     abort();
    }
    core__panicking__panic__h2d0bc53a963fb996(1066096 | 0);
    abort();
   }
   core__panicking__panic_bounds_check__h0537ade040df571e(1066168 | 0, $3 | 0, 40 | 0);
   abort();
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1066184 | 0, $5 | 0, 40 | 0);
  abort();
 }
 
 function stretch_layout__Layout__new__h8bab3a099279ba8b($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4 = 0, $8 = 0, $5 = 0, $6 = 0, $7 = 0, $36 = 0, $39 = 0, $57 = 0, $60 = 0, $9 = 0, $9$hi = 0, $10 = 0, $10$hi = 0, $11 = 0, $11$hi = 0, $117 = 0, $126 = 0, $148 = 0, $151 = 0, $165 = 0, $168 = 0;
  $3 = global$0 - 64 | 0;
  global$0 = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $1;
  label$1 : {
   label$2 : {
    label$3 : {
     $1 = HEAP32[$1 >> 2] | 0;
     $4 = HEAP32[($1 + 8 | 0) >> 2] | 0;
     if (($4 | 0) < (0 | 0)) {
      break label$3
     }
     if (($4 | 0) == (2147483647 | 0)) {
      break label$3
     }
     HEAP32[($1 + 8 | 0) >> 2] = $4 + 1 | 0;
     $5 = ($3 + 40 | 0) + 8 | 0;
     $6 = $2 + 8 | 0;
     i64toi32_i32$2 = $6;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $36 = i64toi32_i32$0;
     i64toi32_i32$0 = $5;
     HEAP32[i64toi32_i32$0 >> 2] = $36;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $2;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $39 = i64toi32_i32$1;
     i64toi32_i32$1 = $3;
     HEAP32[($3 + 40 | 0) >> 2] = $39;
     HEAP32[($3 + 44 | 0) >> 2] = i64toi32_i32$0;
     $7 = $1 + 16 | 0;
     stretch__node__Stretch__layout__h7b30bb55240d20e5($3 + 16 | 0 | 0, $7 | 0, $3 + 40 | 0 | 0);
     $8 = $3 + 16 | 0 | 4 | 0;
     if ((HEAP32[($3 + 16 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break label$2
     }
     $4 = HEAP32[($3 + 20 | 0) >> 2] | 0;
     i64toi32_i32$2 = $6;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $57 = i64toi32_i32$0;
     i64toi32_i32$0 = $5;
     HEAP32[i64toi32_i32$0 >> 2] = $57;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $2;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $60 = i64toi32_i32$1;
     i64toi32_i32$1 = $3;
     HEAP32[($3 + 40 | 0) >> 2] = $60;
     HEAP32[($3 + 44 | 0) >> 2] = i64toi32_i32$0;
     stretch__node__Stretch__children__had237245dc8cf2db($3 + 16 | 0 | 0, $7 | 0, $3 + 40 | 0 | 0);
     if ((HEAP32[($3 + 16 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break label$1
     }
     i64toi32_i32$2 = $3;
     i64toi32_i32$0 = HEAP32[($3 + 20 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($3 + 24 | 0) >> 2] | 0;
     $9 = i64toi32_i32$0;
     $9$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $4;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
     $10 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
     $11 = i64toi32_i32$0;
     $11$hi = i64toi32_i32$1;
     $4 = HEAP32[($3 + 28 | 0) >> 2] | 0;
     HEAP32[($3 + 24 | 0) >> 2] = $4;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$0 = $3;
     HEAP32[($3 + 16 | 0) >> 2] = $9;
     HEAP32[($3 + 20 | 0) >> 2] = i64toi32_i32$1;
     $2 = alloc__raw_vec__RawVec_T_2cA___ptr__h1142426806da72e9($3 + 16 | 0 | 0) | 0;
     $5 = HEAP32[($3 + 20 | 0) >> 2] | 0;
     $6 = HEAP32[($3 + 24 | 0) >> 2] | 0;
     HEAP32[($3 + 48 | 0) >> 2] = 0;
     i64toi32_i32$0 = $3;
     i64toi32_i32$1 = 0;
     HEAP32[($3 + 40 | 0) >> 2] = 4;
     HEAP32[($3 + 44 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[($3 + 28 | 0) >> 2] = $2 + ($6 << 4 | 0) | 0;
     HEAP32[($3 + 24 | 0) >> 2] = $2;
     HEAP32[($3 + 20 | 0) >> 2] = $5;
     HEAP32[($3 + 16 | 0) >> 2] = $2;
     HEAP32[($3 + 32 | 0) >> 2] = $3 + 12 | 0;
     $alloc__vec__Vec_T__20as_20alloc__vec__SpecExtend_T_2cI____spec_extend__h08bb0c4928940809($3 + 40 | 0 | 0, $3 + 16 | 0 | 0);
     $2 = ($3 + 16 | 0) + 8 | 0;
     HEAP32[$2 >> 2] = HEAP32[($3 + 48 | 0) >> 2] | 0;
     i64toi32_i32$2 = $3;
     i64toi32_i32$1 = HEAP32[($3 + 40 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($3 + 44 | 0) >> 2] | 0;
     $117 = i64toi32_i32$1;
     i64toi32_i32$1 = $3;
     HEAP32[($3 + 16 | 0) >> 2] = $117;
     HEAP32[($3 + 20 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($0 + 16 | 0) >> 2] = $4;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$1 = $0;
     HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $11;
     HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $10$hi;
     HEAP32[i64toi32_i32$1 >> 2] = $10;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $3;
     i64toi32_i32$0 = HEAP32[($3 + 16 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($3 + 20 | 0) >> 2] | 0;
     $126 = i64toi32_i32$0;
     i64toi32_i32$0 = $0;
     HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = $126;
     HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = HEAP32[$2 >> 2] | 0;
     $0 = $1 + 8 | 0;
     HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1 | 0;
     global$0 = $3 + 64 | 0;
     return;
    }
    core__result__unwrap_failed__h617b15fdce22e446(1048592 | 0, 24 | 0);
    abort();
   }
   HEAP32[(($3 + 40 | 0) + 16 | 0) >> 2] = HEAP32[($8 + 16 | 0) >> 2] | 0;
   i64toi32_i32$2 = $8 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $148 = i64toi32_i32$1;
   i64toi32_i32$1 = $5;
   HEAP32[i64toi32_i32$1 >> 2] = $148;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $8;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $151 = i64toi32_i32$0;
   i64toi32_i32$0 = $3;
   HEAP32[($3 + 40 | 0) >> 2] = $151;
   HEAP32[($3 + 44 | 0) >> 2] = i64toi32_i32$1;
   core__result__unwrap_failed__h8a62896efab79dcd(1048696 | 0, 43 | 0, $3 + 40 | 0 | 0);
   abort();
  }
  HEAP32[(($3 + 40 | 0) + 16 | 0) >> 2] = HEAP32[($8 + 16 | 0) >> 2] | 0;
  i64toi32_i32$2 = $8 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $165 = i64toi32_i32$1;
  i64toi32_i32$1 = ($3 + 40 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $165;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $8;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $168 = i64toi32_i32$0;
  i64toi32_i32$0 = $3;
  HEAP32[($3 + 40 | 0) >> 2] = $168;
  HEAP32[($3 + 44 | 0) >> 2] = i64toi32_i32$1;
  core__result__unwrap_failed__h8a62896efab79dcd(1048696 | 0, 43 | 0, $3 + 40 | 0 | 0);
  abort();
 }
 
 function stretch__node__Stretch__with_capacity__hb885f11683370977($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2 = 0, i64toi32_i32$2 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $3 = 0, $7 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $12$hi = 0, $13 = 0, $13$hi = 0, $79 = 0, $82 = 0, $14 = 0, $14$hi = 0, $15 = 0, $15$hi = 0, $103 = 0, $106 = 0, $129 = 0, $133 = 0, $141 = 0, $145 = 0;
  $2 = global$0 - 128 | 0;
  global$0 = $2;
  std__sync__mutex__Mutex_T___lock__h984bbcb1d75d91fd($2 + 88 | 0 | 0, $stretch__node__INSTANCE_ALLOCATOR_20as_20core__ops__deref__Deref___deref__h00b3a6ded40dd9a6($2 | 0) | 0 | 0);
  $3 = HEAPU8[($2 + 96 | 0) >> 0] | 0;
  $4 = HEAP32[($2 + 92 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($2 + 88 | 0) >> 2] | 0 | 0) == (1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $5 = HEAP32[($4 + 20 | 0) >> 2] | 0;
     if (!$5) {
      break label$3
     }
     $5 = $5 + -1 | 0;
     HEAP32[($4 + 20 | 0) >> 2] = $5;
     $6 = (HEAP32[($4 + 12 | 0) >> 2] | 0) + ($5 << 3 | 0) | 0;
     $5 = (HEAP32[($6 + 4 | 0) >> 2] | 0) + 1 | 0;
     $6 = HEAP32[$6 >> 2] | 0;
     break label$2;
    }
    $6 = HEAP32[($4 + 8 | 0) >> 2] | 0;
    HEAP32[($4 + 8 | 0) >> 2] = $6 + 1 | 0;
    $5 = 0;
   }
   std__thread__local__LocalKey_T___with__h38aea667dce004be($2 + 24 | 0 | 0, 1051184 | 0);
   i64toi32_i32$2 = $2;
   i64toi32_i32$0 = HEAP32[($2 + 24 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($2 + 28 | 0) >> 2] | 0;
   $12 = i64toi32_i32$0;
   $12$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = HEAP32[($2 + 32 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($2 + 36 | 0) >> 2] | 0;
   $13 = i64toi32_i32$1;
   $13$hi = i64toi32_i32$0;
   hashbrown__raw__RawTable_T___try_with_capacity__h16a6d2442004a6f3($2 + 88 | 0 | 0, $1 | 0, 1 | 0);
   $7 = ($2 + 40 | 0) + 16 | 0;
   $8 = $2 + 108 | 0;
   HEAP32[$7 >> 2] = HEAP32[$8 >> 2] | 0;
   $9 = ($2 + 40 | 0) + 8 | 0;
   $10 = $2 + 100 | 0;
   i64toi32_i32$2 = $10;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $79 = i64toi32_i32$0;
   i64toi32_i32$0 = $9;
   HEAP32[i64toi32_i32$0 >> 2] = $79;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = HEAP32[($2 + 92 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($2 + 96 | 0) >> 2] | 0;
   $82 = i64toi32_i32$1;
   i64toi32_i32$1 = $2;
   HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = $82;
   HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] = i64toi32_i32$0;
   std__thread__local__LocalKey_T___with__h38aea667dce004be(i64toi32_i32$1 + 8 | 0 | 0, 1051184 | 0);
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
   $14 = i64toi32_i32$0;
   $14$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = HEAP32[($2 + 16 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($2 + 20 | 0) >> 2] | 0;
   $15 = i64toi32_i32$1;
   $15$hi = i64toi32_i32$0;
   hashbrown__raw__RawTable_T___try_with_capacity__h19a7c4ef7e1dd020($2 + 88 | 0 | 0, $1 | 0, 1 | 0);
   $11 = ($2 + 64 | 0) + 16 | 0;
   HEAP32[$11 >> 2] = HEAP32[$8 >> 2] | 0;
   $8 = ($2 + 64 | 0) + 8 | 0;
   i64toi32_i32$2 = $10;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $103 = i64toi32_i32$0;
   i64toi32_i32$0 = $8;
   HEAP32[i64toi32_i32$0 >> 2] = $103;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = HEAP32[($2 + 92 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($2 + 96 | 0) >> 2] | 0;
   $106 = i64toi32_i32$1;
   i64toi32_i32$1 = $2;
   HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = $106;
   HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$0;
   stretch__forest__Forest__with_capacity__h3b0e535e60d1d899(i64toi32_i32$1 + 88 | 0 | 0, $1 | 0);
   i64toi32_i32$1 = $0 + 96 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $0;
   i64toi32_i32$0 = 4;
   HEAP32[(i64toi32_i32$1 + 88 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 92 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] = $5;
   HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] = $6;
   i64toi32_i32$0 = $13$hi;
   HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $13;
   HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $12$hi;
   HEAP32[i64toi32_i32$1 >> 2] = $12;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $15$hi;
   i64toi32_i32$1 = i64toi32_i32$1 + 48 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $15;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $14$hi;
   i64toi32_i32$1 = $0;
   HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = $14;
   HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $2;
   i64toi32_i32$0 = HEAP32[($2 + 40 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($2 + 44 | 0) >> 2] | 0;
   $129 = i64toi32_i32$0;
   i64toi32_i32$0 = $0;
   HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = $129;
   HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $9;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $133 = i64toi32_i32$1;
   i64toi32_i32$1 = $0 + 24 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $133;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0 + 32 | 0) >> 2] = HEAP32[$7 >> 2] | 0;
   i64toi32_i32$2 = $2;
   i64toi32_i32$0 = HEAP32[($2 + 64 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($2 + 68 | 0) >> 2] | 0;
   $141 = i64toi32_i32$0;
   i64toi32_i32$0 = $0 + 56 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $141;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $8;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $145 = i64toi32_i32$1;
   i64toi32_i32$1 = $0 + 64 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $145;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0 + 72 | 0) >> 2] = HEAP32[$11 >> 2] | 0;
   memcpy($0 + 104 | 0 | 0, $2 + 88 | 0 | 0, 36 | 0) | 0;
   label$4 : {
    if ($3 & 255 | 0) {
     break label$4
    }
    if (!(std__panicking__panicking__hf26bc0dde81b7530() | 0)) {
     break label$4
    }
    HEAP8[($4 + 4 | 0) >> 0] = 1;
   }
   HEAP8[(HEAP32[$4 >> 2] | 0) >> 0] = 0;
   global$0 = $2 + 128 | 0;
   return;
  }
  core__result__unwrap_failed__hffb58bc6d500fd56(1051188 | 0, 43 | 0, $4 | 0, ($3 & 255 | 0 | 0) != (0 | 0) | 0);
  abort();
 }
 
 function hashbrown__map__HashMap_K_2cV_2cS___insert___7b_7bclosure_7d_7d__hfac359ccde629c1a($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $7$hi = 0, $6$hi = 0, $6 = 0, $7 = 0, $8$hi = 0, $8 = 0, $9$hi = 0, $9 = 0, $10$hi = 0, $10 = 0, $2 = 0, $11$hi = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $91 = 0, $24 = 0, $29 = 0, $36 = 0, $45 = 0, $67 = 0, $67$hi = 0, $68 = 0, $68$hi = 0, $70$hi = 0, $75 = 0, $75$hi = 0, $81 = 0, $81$hi = 0, $86 = 0, $86$hi = 0, $90 = 0, $90$hi = 0, $93$hi = 0, $100 = 0, $100$hi = 0, $106 = 0, $106$hi = 0, $108 = 0, $108$hi = 0, $110$hi = 0, $116 = 0, $116$hi = 0, $122 = 0, $122$hi = 0, $125 = 0, $125$hi = 0, $126 = 0, $126$hi = 0, $128$hi = 0, $133 = 0, $133$hi = 0, $140 = 0, $140$hi = 0, $141 = 0, $141$hi = 0, $143$hi = 0, $148 = 0, $148$hi = 0, $155 = 0, $155$hi = 0, $156 = 0, $156$hi = 0, $158$hi = 0, $163 = 0, $163$hi = 0, $166$hi = 0, $168 = 0, $168$hi = 0, $170$hi = 0, $175 = 0, $175$hi = 0, $181$hi = 0, $92 = 0, $184 = 0, $184$hi = 0, $185 = 0, $185$hi = 0, $187 = 0, $187$hi = 0, $188 = 0, $188$hi = 0, $190 = 0, $190$hi = 0;
  $2 = global$0 - 80 | 0;
  global$0 = $2;
  $3 = $2 + 48 | 0;
  $0 = HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0;
  i64toi32_i32$2 = $0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $6 = i64toi32_i32$0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = 1952801890;
  i64toi32_i32$3 = 2037671283;
  i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
  $24 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $3;
  HEAP32[i64toi32_i32$2 >> 2] = $24;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
  $4 = $2 + 40 | 0;
  i64toi32_i32$0 = i64toi32_i32$1;
  i64toi32_i32$1 = $6;
  i64toi32_i32$2 = 1685025377;
  i64toi32_i32$3 = 1852075885;
  i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
  $29 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = $4;
  HEAP32[i64toi32_i32$1 >> 2] = $29;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
  $5 = $2 + 32 | 0;
  i64toi32_i32$0 = $0;
  i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
  $7 = i64toi32_i32$2;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$0 = i64toi32_i32$2;
  i64toi32_i32$2 = 1819895653;
  i64toi32_i32$3 = 1852142177;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $36 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $5;
  HEAP32[i64toi32_i32$0 >> 2] = $36;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$0 = $2;
  i64toi32_i32$2 = 0;
  HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 60 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $6$hi;
  HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = $6;
  HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $7;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$1 = $7;
  i64toi32_i32$0 = 1936682341;
  i64toi32_i32$3 = 1886610805;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $45 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = $2;
  HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = $45;
  HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
  $std__collections__hash__map__DefaultHasher_20as_20core__hash__Hasher___write__h7303af2f85960aff(i64toi32_i32$1 + 8 | 0 | 0, i64toi32_i32$1 + 76 | 0 | 0);
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
  i64toi32_i32$1 = 0;
  $7 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 56 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 60 | 0) >> 2] | 0;
  $8 = i64toi32_i32$1;
  $8$hi = i64toi32_i32$0;
  i64toi32_i32$2 = $3;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $9 = i64toi32_i32$0;
  $9$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $5;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $10 = i64toi32_i32$1;
  $10$hi = i64toi32_i32$0;
  i64toi32_i32$2 = $4;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $6 = i64toi32_i32$0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
  $11 = i64toi32_i32$1;
  $11$hi = i64toi32_i32$0;
  global$0 = i64toi32_i32$2 + 80 | 0;
  i64toi32_i32$0 = $9$hi;
  $67 = $9;
  $67$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $8$hi;
  $68 = $8;
  $68$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$2 = $7;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 56;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $91 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $91 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $70$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $68$hi;
  i64toi32_i32$0 = $68;
  i64toi32_i32$2 = $70$hi;
  i64toi32_i32$3 = $91;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $7 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $67$hi;
  i64toi32_i32$1 = $67;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$3 = $7;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $8 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $8$hi = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($8 | 0, i64toi32_i32$0 | 0, 16 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $75 = i64toi32_i32$1;
  $75$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$0 = $10$hi;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$2 = $8;
  i64toi32_i32$1 = $10$hi;
  i64toi32_i32$3 = $10;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $8 = i64toi32_i32$4;
  $8$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $75$hi;
  i64toi32_i32$0 = $75;
  i64toi32_i32$2 = $8$hi;
  i64toi32_i32$3 = i64toi32_i32$4;
  i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
  $9 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
  $9$hi = i64toi32_i32$2;
  $81 = $9;
  $81$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $6$hi;
  i64toi32_i32$2 = $11$hi;
  i64toi32_i32$2 = $6$hi;
  i64toi32_i32$5 = $6;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$3 = $11;
  i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $10 = i64toi32_i32$1;
  $10$hi = i64toi32_i32$4;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64(i64toi32_i32$1 | 0, i64toi32_i32$4 | 0, 32 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $86 = i64toi32_i32$5;
  $86$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $81$hi;
  i64toi32_i32$2 = $81;
  i64toi32_i32$5 = $86$hi;
  i64toi32_i32$3 = $86;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $11 = i64toi32_i32$0;
  $11$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$1 = $11$hi;
  i64toi32_i32$4 = i64toi32_i32$0;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$3 = $7;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $90 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $90$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $8$hi;
  i64toi32_i32$2 = $6$hi;
  i64toi32_i32$4 = 0;
  i64toi32_i32$4 = __wasm_rotl_i64($6 | 0, i64toi32_i32$2 | 0, 13 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $93$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $10$hi;
  i64toi32_i32$2 = $93$hi;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$4 = $10$hi;
  i64toi32_i32$3 = $10;
  i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
  $6 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $8$hi;
  i64toi32_i32$2 = $8;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6;
  i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $7 = i64toi32_i32$5;
  $7$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($6 | 0, i64toi32_i32$0 | 0, 17 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $100 = i64toi32_i32$2;
  $100$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$2 = $100$hi;
  i64toi32_i32$3 = $100;
  i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
  $6 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $90$hi;
  i64toi32_i32$0 = $90;
  i64toi32_i32$4 = $6$hi;
  i64toi32_i32$3 = $6;
  i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $8 = i64toi32_i32$1;
  $8$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = __wasm_rotl_i64($6 | 0, i64toi32_i32$5 | 0, 13 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $106 = i64toi32_i32$0;
  $106$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $8$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$0 = $106$hi;
  i64toi32_i32$3 = $106;
  i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
  $6 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$0;
  $108 = $6;
  $108$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($9 | 0, i64toi32_i32$0 | 0, 21 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $110$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$0 = $110$hi;
  i64toi32_i32$5 = i64toi32_i32$2;
  i64toi32_i32$2 = $11$hi;
  i64toi32_i32$3 = $11;
  i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
  $9 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  $9$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64($7 | 0, i64toi32_i32$2 | 0, 32 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$0 = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 255;
  i64toi32_i32$5 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
  $116 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $116$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $9$hi;
  i64toi32_i32$2 = $9;
  i64toi32_i32$0 = $116$hi;
  i64toi32_i32$3 = $116;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $7 = i64toi32_i32$4;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $108$hi;
  i64toi32_i32$5 = $108;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$3 = i64toi32_i32$4;
  i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
  i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $10 = i64toi32_i32$0;
  $10$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $6$hi;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64($6 | 0, i64toi32_i32$4 | 0, 17 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $122 = i64toi32_i32$5;
  $122$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $10$hi;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$5 = $122$hi;
  i64toi32_i32$3 = $122;
  i64toi32_i32$5 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
  $6 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$5;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($6 | 0, i64toi32_i32$5 | 0, 13 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $125 = i64toi32_i32$1;
  $125$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $6$hi;
  $126 = $6;
  $126$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $9$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($9 | 0, i64toi32_i32$5 | 0, 16 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $128$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $7$hi;
  i64toi32_i32$5 = $128$hi;
  i64toi32_i32$4 = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$3 = $7;
  i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
  $7 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $8$hi;
  i64toi32_i32$4 = 0;
  i64toi32_i32$4 = __wasm_rotl_i64($8 | 0, i64toi32_i32$1 | 0, 32 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $133 = i64toi32_i32$4;
  $133$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$5 = $7;
  i64toi32_i32$4 = $133$hi;
  i64toi32_i32$3 = $133;
  i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $8 = i64toi32_i32$2;
  $8$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $126$hi;
  i64toi32_i32$1 = $126;
  i64toi32_i32$5 = $8$hi;
  i64toi32_i32$3 = i64toi32_i32$2;
  i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
  i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $6 = i64toi32_i32$4;
  $6$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $125$hi;
  i64toi32_i32$0 = $125;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = i64toi32_i32$4;
  i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
  $9 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
  $9$hi = i64toi32_i32$1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = __wasm_rotl_i64($9 | 0, i64toi32_i32$1 | 0, 17 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $140 = i64toi32_i32$0;
  $140$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  $141 = $9;
  $141$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = __wasm_rotl_i64($7 | 0, i64toi32_i32$1 | 0, 21 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $143$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $8$hi;
  i64toi32_i32$1 = $143$hi;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$3 = $8;
  i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
  $7 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $10$hi;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($10 | 0, i64toi32_i32$0 | 0, 32 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $148 = i64toi32_i32$2;
  $148$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$1 = $7;
  i64toi32_i32$2 = $148$hi;
  i64toi32_i32$3 = $148;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $8 = i64toi32_i32$5;
  $8$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $141$hi;
  i64toi32_i32$0 = $141;
  i64toi32_i32$1 = $8$hi;
  i64toi32_i32$3 = i64toi32_i32$5;
  i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $9 = i64toi32_i32$2;
  $9$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $140$hi;
  i64toi32_i32$4 = $140;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$3 = i64toi32_i32$2;
  i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
  $10 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
  $10$hi = i64toi32_i32$0;
  i64toi32_i32$4 = 0;
  i64toi32_i32$4 = __wasm_rotl_i64($10 | 0, i64toi32_i32$0 | 0, 13 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $155 = i64toi32_i32$4;
  $155$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $10$hi;
  $156 = $10;
  $156$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$4 = 0;
  i64toi32_i32$4 = __wasm_rotl_i64($7 | 0, i64toi32_i32$0 | 0, 16 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $158$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$0 = $158$hi;
  i64toi32_i32$5 = i64toi32_i32$4;
  i64toi32_i32$4 = $8$hi;
  i64toi32_i32$3 = $8;
  i64toi32_i32$4 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
  $7 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $6$hi;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64($6 | 0, i64toi32_i32$4 | 0, 32 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $163 = i64toi32_i32$5;
  $163$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $7$hi;
  i64toi32_i32$0 = $7;
  i64toi32_i32$5 = $163$hi;
  i64toi32_i32$3 = $163;
  i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $6 = i64toi32_i32$1;
  $6$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $156$hi;
  i64toi32_i32$4 = $156;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$3 = i64toi32_i32$1;
  i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $166$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $155$hi;
  i64toi32_i32$2 = $155;
  i64toi32_i32$4 = $166$hi;
  i64toi32_i32$3 = i64toi32_i32$5;
  i64toi32_i32$4 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
  $8 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
  $8$hi = i64toi32_i32$4;
  $168 = $8;
  $168$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $7$hi;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($7 | 0, i64toi32_i32$4 | 0, 21 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $170$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $6$hi;
  i64toi32_i32$4 = $170$hi;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = $6$hi;
  i64toi32_i32$3 = $6;
  i64toi32_i32$2 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
  $6 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $9$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($9 | 0, i64toi32_i32$2 | 0, 32 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $175 = i64toi32_i32$1;
  $175$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $6$hi;
  i64toi32_i32$4 = $6;
  i64toi32_i32$1 = $175$hi;
  i64toi32_i32$3 = $175;
  i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $7 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $168$hi;
  i64toi32_i32$2 = $168;
  i64toi32_i32$4 = $7$hi;
  i64toi32_i32$3 = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
  i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $9 = i64toi32_i32$1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($6 | 0, i64toi32_i32$0 | 0, 16 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $181$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$0 = $181$hi;
  i64toi32_i32$5 = i64toi32_i32$2;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$3 = $7;
  i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
  $92 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64($92 | 0, i64toi32_i32$2 | 0, 21 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $184 = i64toi32_i32$5;
  $184$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $9$hi;
  i64toi32_i32$0 = i64toi32_i32$1;
  i64toi32_i32$5 = $184$hi;
  i64toi32_i32$3 = $184;
  i64toi32_i32$5 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
  $185 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $185$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $8$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = __wasm_rotl_i64($8 | 0, i64toi32_i32$5 | 0, 17 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $187 = i64toi32_i32$0;
  $187$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $185$hi;
  i64toi32_i32$2 = $185;
  i64toi32_i32$0 = $187$hi;
  i64toi32_i32$3 = $187;
  i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
  $188 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $188$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64(i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 32 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $190 = i64toi32_i32$2;
  $190$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $188$hi;
  i64toi32_i32$5 = $188;
  i64toi32_i32$2 = $190$hi;
  i64toi32_i32$3 = $190;
  i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
  i64toi32_i32$5 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$5 | 0;
 }
 
 function core__num__dec2flt__parse__parse_decimal__h0e8f7547838b6a7c($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            if (!$2) {
             break label$10
            }
            $3 = 0;
            label$11 : {
             label$12 : while (1) {
              if ((((HEAPU8[($1 + $3 | 0) >> 0] | 0) + -48 | 0) & 255 | 0) >>> 0 > 9 >>> 0) {
               break label$11
              }
              $3 = $3 + 1 | 0;
              if ($3 >>> 0 < $2 >>> 0) {
               continue label$12
              }
              break label$12;
             };
            }
            if ($3 >>> 0 > $2 >>> 0) {
             break label$2
            }
            $4 = $2 - $3 | 0;
            if (!$4) {
             break label$9
            }
            $5 = $1 + $3 | 0;
            $2 = HEAPU8[$5 >> 0] | 0;
            if (($2 | 0) == (46 | 0)) {
             break label$8
            }
            label$13 : {
             if (($2 | 0) == (69 | 0)) {
              break label$13
             }
             if (($2 | 0) != (101 | 0)) {
              break label$7
             }
            }
            if (!$3) {
             break label$6
            }
            core__num__dec2flt__parse__parse_exp__h25cffe421291b6f9($0 | 0, $1 | 0, $3 | 0, 1053644 | 0, 0 | 0, $5 + 1 | 0 | 0, $4 + -1 | 0 | 0);
            return;
           }
           i64toi32_i32$0 = 0;
           HEAP32[$0 >> 2] = 3;
           HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
           return;
          }
          i64toi32_i32$0 = 0;
          HEAP32[($0 + 8 | 0) >> 2] = 0;
          HEAP32[($0 + 12 | 0) >> 2] = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          HEAP32[$0 >> 2] = 0;
          HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[($0 + 28 | 0) >> 2] = 0;
          HEAP32[($0 + 24 | 0) >> 2] = 1053644;
          HEAP32[($0 + 20 | 0) >> 2] = $3;
          HEAP32[($0 + 16 | 0) >> 2] = $1;
          return;
         }
         $5 = $5 + 1 | 0;
         $2 = 0;
         label$14 : {
          $4 = $4 + -1 | 0;
          if (!$4) {
           break label$14
          }
          label$15 : {
           label$16 : while (1) {
            if ((((HEAPU8[($5 + $2 | 0) >> 0] | 0) + -48 | 0) & 255 | 0) >>> 0 > 9 >>> 0) {
             break label$15
            }
            $2 = $2 + 1 | 0;
            if ($2 >>> 0 < $4 >>> 0) {
             continue label$16
            }
            break label$16;
           };
          }
          if ($2 >>> 0 > $4 >>> 0) {
           break label$1
          }
         }
         if (!($2 | $3 | 0)) {
          break label$5
         }
         $4 = $4 - $2 | 0;
         if (!$4) {
          break label$4
         }
         $6 = $5 + $2 | 0;
         if ((HEAPU8[$6 >> 0] | 0 | 32 | 0 | 0) != (101 | 0)) {
          break label$3
         }
         core__num__dec2flt__parse__parse_exp__h25cffe421291b6f9($0 | 0, $1 | 0, $3 | 0, $5 | 0, $2 | 0, $6 + 1 | 0 | 0, $4 + -1 | 0 | 0);
         return;
        }
        i64toi32_i32$0 = 0;
        HEAP32[$0 >> 2] = 3;
        HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
        return;
       }
       i64toi32_i32$0 = 0;
       HEAP32[$0 >> 2] = 3;
       HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
       return;
      }
      i64toi32_i32$0 = 0;
      HEAP32[$0 >> 2] = 3;
      HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
      return;
     }
     i64toi32_i32$0 = 0;
     HEAP32[($0 + 8 | 0) >> 2] = 0;
     HEAP32[($0 + 12 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     HEAP32[$0 >> 2] = 0;
     HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($0 + 28 | 0) >> 2] = $2;
     HEAP32[($0 + 24 | 0) >> 2] = $5;
     HEAP32[($0 + 20 | 0) >> 2] = $3;
     HEAP32[($0 + 16 | 0) >> 2] = $1;
     return;
    }
    i64toi32_i32$0 = 0;
    HEAP32[$0 >> 2] = 3;
    HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   }
   core__slice__slice_index_len_fail__h4544fc57f3d8a7a0($3 | 0, $2 | 0);
   abort();
  }
  core__slice__slice_index_len_fail__h4544fc57f3d8a7a0($2 | 0, $4 | 0);
  abort();
 }
 
 function hashbrown__map__HashMap_K_2cV_2cS___insert___7b_7bclosure_7d_7d__hc370fba381b8e2c7($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $7$hi = 0, $6$hi = 0, $6 = 0, $7 = 0, $8$hi = 0, $8 = 0, $9$hi = 0, $9 = 0, $10$hi = 0, $10 = 0, $2 = 0, $11$hi = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $91 = 0, $24 = 0, $29 = 0, $36 = 0, $45 = 0, $62 = 0, $62$hi = 0, $63 = 0, $63$hi = 0, $65$hi = 0, $70 = 0, $70$hi = 0, $76 = 0, $76$hi = 0, $81 = 0, $81$hi = 0, $85 = 0, $85$hi = 0, $88$hi = 0, $95 = 0, $95$hi = 0, $101 = 0, $101$hi = 0, $103 = 0, $103$hi = 0, $105$hi = 0, $111 = 0, $111$hi = 0, $117 = 0, $117$hi = 0, $120 = 0, $120$hi = 0, $121 = 0, $121$hi = 0, $123$hi = 0, $128 = 0, $128$hi = 0, $135 = 0, $135$hi = 0, $136 = 0, $136$hi = 0, $138$hi = 0, $143 = 0, $143$hi = 0, $150 = 0, $150$hi = 0, $151 = 0, $151$hi = 0, $153$hi = 0, $158 = 0, $158$hi = 0, $161$hi = 0, $163 = 0, $163$hi = 0, $165$hi = 0, $170 = 0, $170$hi = 0, $176$hi = 0, $92 = 0, $179 = 0, $179$hi = 0, $180 = 0, $180$hi = 0, $182 = 0, $182$hi = 0, $183 = 0, $183$hi = 0, $185 = 0, $185$hi = 0;
  $2 = global$0 - 64 | 0;
  global$0 = $2;
  $3 = $2 + 40 | 0;
  $0 = HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0;
  i64toi32_i32$2 = $0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $6 = i64toi32_i32$0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = 1952801890;
  i64toi32_i32$3 = 2037671283;
  i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
  $24 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $3;
  HEAP32[i64toi32_i32$2 >> 2] = $24;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
  $4 = $2 + 32 | 0;
  i64toi32_i32$0 = i64toi32_i32$1;
  i64toi32_i32$1 = $6;
  i64toi32_i32$2 = 1685025377;
  i64toi32_i32$3 = 1852075885;
  i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
  $29 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = $4;
  HEAP32[i64toi32_i32$1 >> 2] = $29;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
  $5 = $2 + 24 | 0;
  i64toi32_i32$0 = $0;
  i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
  $7 = i64toi32_i32$2;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$0 = i64toi32_i32$2;
  i64toi32_i32$2 = 1819895653;
  i64toi32_i32$3 = 1852142177;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $36 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $5;
  HEAP32[i64toi32_i32$0 >> 2] = $36;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $6$hi;
  i64toi32_i32$0 = $2;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $6;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  HEAP32[i64toi32_i32$0 >> 2] = $7;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 60 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$1 = $7;
  i64toi32_i32$0 = 1936682341;
  i64toi32_i32$3 = 1886610805;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $45 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = $2;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $45;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
  $stretch__node__Node_20as_20core__hash__Hash___hash__h845df738266e7e7f($1 | 0, i64toi32_i32$1 | 0);
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 56 | 0) >> 2] | 0;
  i64toi32_i32$1 = 0;
  $7 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
  $8 = i64toi32_i32$1;
  $8$hi = i64toi32_i32$0;
  i64toi32_i32$2 = $3;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $9 = i64toi32_i32$0;
  $9$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $5;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $10 = i64toi32_i32$1;
  $10$hi = i64toi32_i32$0;
  i64toi32_i32$2 = $4;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $6 = i64toi32_i32$0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $11 = i64toi32_i32$1;
  $11$hi = i64toi32_i32$0;
  global$0 = i64toi32_i32$2 + 64 | 0;
  i64toi32_i32$0 = $9$hi;
  $62 = $9;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $8$hi;
  $63 = $8;
  $63$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$2 = $7;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 56;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $91 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $91 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $65$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $63$hi;
  i64toi32_i32$0 = $63;
  i64toi32_i32$2 = $65$hi;
  i64toi32_i32$3 = $91;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $7 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $62$hi;
  i64toi32_i32$1 = $62;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$3 = $7;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $8 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $8$hi = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($8 | 0, i64toi32_i32$0 | 0, 16 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $70 = i64toi32_i32$1;
  $70$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$0 = $10$hi;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$2 = $8;
  i64toi32_i32$1 = $10$hi;
  i64toi32_i32$3 = $10;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $8 = i64toi32_i32$4;
  $8$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $70$hi;
  i64toi32_i32$0 = $70;
  i64toi32_i32$2 = $8$hi;
  i64toi32_i32$3 = i64toi32_i32$4;
  i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
  $9 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
  $9$hi = i64toi32_i32$2;
  $76 = $9;
  $76$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $6$hi;
  i64toi32_i32$2 = $11$hi;
  i64toi32_i32$2 = $6$hi;
  i64toi32_i32$5 = $6;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$3 = $11;
  i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $10 = i64toi32_i32$1;
  $10$hi = i64toi32_i32$4;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64(i64toi32_i32$1 | 0, i64toi32_i32$4 | 0, 32 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $81 = i64toi32_i32$5;
  $81$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $76$hi;
  i64toi32_i32$2 = $76;
  i64toi32_i32$5 = $81$hi;
  i64toi32_i32$3 = $81;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $11 = i64toi32_i32$0;
  $11$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$1 = $11$hi;
  i64toi32_i32$4 = i64toi32_i32$0;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$3 = $7;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $85 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $85$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $8$hi;
  i64toi32_i32$2 = $6$hi;
  i64toi32_i32$4 = 0;
  i64toi32_i32$4 = __wasm_rotl_i64($6 | 0, i64toi32_i32$2 | 0, 13 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $88$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $10$hi;
  i64toi32_i32$2 = $88$hi;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$4 = $10$hi;
  i64toi32_i32$3 = $10;
  i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
  $6 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $8$hi;
  i64toi32_i32$2 = $8;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6;
  i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $7 = i64toi32_i32$5;
  $7$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($6 | 0, i64toi32_i32$0 | 0, 17 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $95 = i64toi32_i32$2;
  $95$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$2 = $95$hi;
  i64toi32_i32$3 = $95;
  i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
  $6 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $85$hi;
  i64toi32_i32$0 = $85;
  i64toi32_i32$4 = $6$hi;
  i64toi32_i32$3 = $6;
  i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $8 = i64toi32_i32$1;
  $8$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = __wasm_rotl_i64($6 | 0, i64toi32_i32$5 | 0, 13 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $101 = i64toi32_i32$0;
  $101$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $8$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$0 = $101$hi;
  i64toi32_i32$3 = $101;
  i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
  $6 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$0;
  $103 = $6;
  $103$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($9 | 0, i64toi32_i32$0 | 0, 21 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $105$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$0 = $105$hi;
  i64toi32_i32$5 = i64toi32_i32$2;
  i64toi32_i32$2 = $11$hi;
  i64toi32_i32$3 = $11;
  i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
  $9 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  $9$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64($7 | 0, i64toi32_i32$2 | 0, 32 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$0 = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 255;
  i64toi32_i32$5 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
  $111 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $111$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $9$hi;
  i64toi32_i32$2 = $9;
  i64toi32_i32$0 = $111$hi;
  i64toi32_i32$3 = $111;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $7 = i64toi32_i32$4;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $103$hi;
  i64toi32_i32$5 = $103;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$3 = i64toi32_i32$4;
  i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
  i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $10 = i64toi32_i32$0;
  $10$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $6$hi;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64($6 | 0, i64toi32_i32$4 | 0, 17 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $117 = i64toi32_i32$5;
  $117$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $10$hi;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$5 = $117$hi;
  i64toi32_i32$3 = $117;
  i64toi32_i32$5 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
  $6 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$5;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($6 | 0, i64toi32_i32$5 | 0, 13 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $120 = i64toi32_i32$1;
  $120$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $6$hi;
  $121 = $6;
  $121$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $9$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($9 | 0, i64toi32_i32$5 | 0, 16 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $123$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $7$hi;
  i64toi32_i32$5 = $123$hi;
  i64toi32_i32$4 = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$3 = $7;
  i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
  $7 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $8$hi;
  i64toi32_i32$4 = 0;
  i64toi32_i32$4 = __wasm_rotl_i64($8 | 0, i64toi32_i32$1 | 0, 32 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $128 = i64toi32_i32$4;
  $128$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$5 = $7;
  i64toi32_i32$4 = $128$hi;
  i64toi32_i32$3 = $128;
  i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $8 = i64toi32_i32$2;
  $8$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $121$hi;
  i64toi32_i32$1 = $121;
  i64toi32_i32$5 = $8$hi;
  i64toi32_i32$3 = i64toi32_i32$2;
  i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
  i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $6 = i64toi32_i32$4;
  $6$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $120$hi;
  i64toi32_i32$0 = $120;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = i64toi32_i32$4;
  i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
  $9 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
  $9$hi = i64toi32_i32$1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = __wasm_rotl_i64($9 | 0, i64toi32_i32$1 | 0, 17 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $135 = i64toi32_i32$0;
  $135$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  $136 = $9;
  $136$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = __wasm_rotl_i64($7 | 0, i64toi32_i32$1 | 0, 21 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $138$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $8$hi;
  i64toi32_i32$1 = $138$hi;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$3 = $8;
  i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
  $7 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $10$hi;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($10 | 0, i64toi32_i32$0 | 0, 32 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $143 = i64toi32_i32$2;
  $143$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$1 = $7;
  i64toi32_i32$2 = $143$hi;
  i64toi32_i32$3 = $143;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $8 = i64toi32_i32$5;
  $8$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $136$hi;
  i64toi32_i32$0 = $136;
  i64toi32_i32$1 = $8$hi;
  i64toi32_i32$3 = i64toi32_i32$5;
  i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $9 = i64toi32_i32$2;
  $9$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $135$hi;
  i64toi32_i32$4 = $135;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$3 = i64toi32_i32$2;
  i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
  $10 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
  $10$hi = i64toi32_i32$0;
  i64toi32_i32$4 = 0;
  i64toi32_i32$4 = __wasm_rotl_i64($10 | 0, i64toi32_i32$0 | 0, 13 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $150 = i64toi32_i32$4;
  $150$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $10$hi;
  $151 = $10;
  $151$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$4 = 0;
  i64toi32_i32$4 = __wasm_rotl_i64($7 | 0, i64toi32_i32$0 | 0, 16 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $153$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$0 = $153$hi;
  i64toi32_i32$5 = i64toi32_i32$4;
  i64toi32_i32$4 = $8$hi;
  i64toi32_i32$3 = $8;
  i64toi32_i32$4 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
  $7 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $6$hi;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64($6 | 0, i64toi32_i32$4 | 0, 32 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $158 = i64toi32_i32$5;
  $158$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $7$hi;
  i64toi32_i32$0 = $7;
  i64toi32_i32$5 = $158$hi;
  i64toi32_i32$3 = $158;
  i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $6 = i64toi32_i32$1;
  $6$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $151$hi;
  i64toi32_i32$4 = $151;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$3 = i64toi32_i32$1;
  i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $161$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $150$hi;
  i64toi32_i32$2 = $150;
  i64toi32_i32$4 = $161$hi;
  i64toi32_i32$3 = i64toi32_i32$5;
  i64toi32_i32$4 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
  $8 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
  $8$hi = i64toi32_i32$4;
  $163 = $8;
  $163$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $7$hi;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($7 | 0, i64toi32_i32$4 | 0, 21 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $165$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $6$hi;
  i64toi32_i32$4 = $165$hi;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = $6$hi;
  i64toi32_i32$3 = $6;
  i64toi32_i32$2 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
  $6 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $9$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($9 | 0, i64toi32_i32$2 | 0, 32 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $170 = i64toi32_i32$1;
  $170$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $6$hi;
  i64toi32_i32$4 = $6;
  i64toi32_i32$1 = $170$hi;
  i64toi32_i32$3 = $170;
  i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $7 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $163$hi;
  i64toi32_i32$2 = $163;
  i64toi32_i32$4 = $7$hi;
  i64toi32_i32$3 = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
  i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $9 = i64toi32_i32$1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($6 | 0, i64toi32_i32$0 | 0, 16 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $176$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$0 = $176$hi;
  i64toi32_i32$5 = i64toi32_i32$2;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$3 = $7;
  i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
  $92 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_rotl_i64($92 | 0, i64toi32_i32$2 | 0, 21 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $179 = i64toi32_i32$5;
  $179$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $9$hi;
  i64toi32_i32$0 = i64toi32_i32$1;
  i64toi32_i32$5 = $179$hi;
  i64toi32_i32$3 = $179;
  i64toi32_i32$5 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
  $180 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $180$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $8$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = __wasm_rotl_i64($8 | 0, i64toi32_i32$5 | 0, 17 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $182 = i64toi32_i32$0;
  $182$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $180$hi;
  i64toi32_i32$2 = $180;
  i64toi32_i32$0 = $182$hi;
  i64toi32_i32$3 = $182;
  i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
  $183 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $183$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64(i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 32 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $185 = i64toi32_i32$2;
  $185$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $183$hi;
  i64toi32_i32$5 = $183;
  i64toi32_i32$2 = $185$hi;
  i64toi32_i32$3 = $185;
  i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
  i64toi32_i32$5 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$5 | 0;
 }
 
 function $core__iter__adapters__Cloned_I__20as_20core__iter__traits__iterator__Iterator___try_fold__hfa9c58aa8ffc7641($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $4 = global$0 - 32 | 0;
  global$0 = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $3;
  HEAP32[($4 + 8 | 0) >> 2] = $2;
  $3 = $1 + 4 | 0;
  $5 = $4 + 24 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : while (1) {
          $6 = HEAP32[$3 >> 2] | 0;
          $2 = HEAP32[$1 >> 2] | 0;
          if (($6 - $2 | 0) >>> 0 <= 12 >>> 0) {
           break label$7
          }
          HEAP32[$1 >> 2] = $2 + 4 | 0;
          $core__iter__adapters__Cloned_I__20as_20core__iter__traits__iterator__Iterator___try_fold___7b_7bclosure_7d_7d__h972932b113c9ba33($4 + 16 | 0 | 0, $4 + 8 | 0 | 0, $2 | 0);
          if ((HEAP32[($4 + 16 | 0) >> 2] | 0 | 0) == (1 | 0)) {
           break label$6
          }
          $2 = HEAP32[$1 >> 2] | 0;
          HEAP32[$1 >> 2] = $2 + 4 | 0;
          $core__iter__adapters__Cloned_I__20as_20core__iter__traits__iterator__Iterator___try_fold___7b_7bclosure_7d_7d__h972932b113c9ba33($4 + 16 | 0 | 0, $4 + 8 | 0 | 0, $2 | 0);
          if ((HEAP32[($4 + 16 | 0) >> 2] | 0 | 0) == (1 | 0)) {
           break label$5
          }
          $2 = HEAP32[$1 >> 2] | 0;
          HEAP32[$1 >> 2] = $2 + 4 | 0;
          $core__iter__adapters__Cloned_I__20as_20core__iter__traits__iterator__Iterator___try_fold___7b_7bclosure_7d_7d__h972932b113c9ba33($4 + 16 | 0 | 0, $4 + 8 | 0 | 0, $2 | 0);
          if ((HEAP32[($4 + 16 | 0) >> 2] | 0 | 0) == (1 | 0)) {
           break label$4
          }
          $2 = HEAP32[$1 >> 2] | 0;
          HEAP32[$1 >> 2] = $2 + 4 | 0;
          $core__iter__adapters__Cloned_I__20as_20core__iter__traits__iterator__Iterator___try_fold___7b_7bclosure_7d_7d__h972932b113c9ba33($4 + 16 | 0 | 0, $4 + 8 | 0 | 0, $2 | 0);
          if ((HEAP32[($4 + 16 | 0) >> 2] | 0 | 0) != (1 | 0)) {
           continue label$8
          }
          break label$8;
         };
         $1 = HEAP32[$5 >> 2] | 0;
         HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($4 + 20 | 0) >> 2] | 0;
         HEAP32[($0 + 8 | 0) >> 2] = $1;
         break label$2;
        }
        $3 = 0;
        if (($2 | 0) == ($6 | 0)) {
         break label$1
        }
        $6 = $4 + 24 | 0;
        label$9 : while (1) {
         HEAP32[$1 >> 2] = $2 + 4 | 0;
         $core__iter__adapters__Cloned_I__20as_20core__iter__traits__iterator__Iterator___try_fold___7b_7bclosure_7d_7d__h972932b113c9ba33($4 + 16 | 0 | 0, $4 + 8 | 0 | 0, $2 | 0);
         if ((HEAP32[($4 + 16 | 0) >> 2] | 0 | 0) == (1 | 0)) {
          break label$3
         }
         $2 = HEAP32[$1 >> 2] | 0;
         if (($2 | 0) != (HEAP32[($1 + 4 | 0) >> 2] | 0 | 0)) {
          continue label$9
         }
         break label$1;
        };
       }
       $1 = HEAP32[$5 >> 2] | 0;
       HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($4 + 20 | 0) >> 2] | 0;
       HEAP32[($0 + 8 | 0) >> 2] = $1;
       break label$2;
      }
      $1 = HEAP32[$5 >> 2] | 0;
      HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($4 + 20 | 0) >> 2] | 0;
      HEAP32[($0 + 8 | 0) >> 2] = $1;
      break label$2;
     }
     $1 = HEAP32[$5 >> 2] | 0;
     HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($4 + 20 | 0) >> 2] | 0;
     HEAP32[($0 + 8 | 0) >> 2] = $1;
     break label$2;
    }
    $1 = HEAP32[$6 >> 2] | 0;
    HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($4 + 20 | 0) >> 2] | 0;
    HEAP32[($0 + 8 | 0) >> 2] = $1;
   }
   $3 = 1;
  }
  HEAP32[$0 >> 2] = $3;
  global$0 = $4 + 32 | 0;
 }
 
 function stretch_layout__Node__set_measure___7b_7bclosure_7d_7d__h217e1cfe54b26aef($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0);
  $3 = global$0 - 48 | 0;
  global$0 = $3;
  $4 = 32;
  $5 = 32;
  label$1 : {
   if (HEAP32[$2 >> 2] | 0) {
    break label$1
   }
   $5 = __wbindgen_number_new(+(+Math_fround(HEAPF32[($2 + 4 | 0) >> 2]))) | 0;
  }
  HEAP32[($3 + 32 | 0) >> 2] = $5;
  label$2 : {
   if (HEAP32[($2 + 8 | 0) >> 2] | 0) {
    break label$2
   }
   $4 = __wbindgen_number_new(+(+Math_fround(HEAPF32[($2 + 12 | 0) >> 2]))) | 0;
  }
  HEAP32[($3 + 36 | 0) >> 2] = $4;
  HEAP32[($3 + 40 | 0) >> 2] = 32;
  js_sys__Function__call2__h532ca4f329161b65($3 + 24 | 0 | 0, $1 | 0, $3 + 40 | 0 | 0, $3 + 32 | 0 | 0, $3 + 36 | 0 | 0);
  $2 = HEAP32[($3 + 28 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if (!(HEAP32[($3 + 24 | 0) >> 2] | 0)) {
       break label$6
      }
      if ($2 >>> 0 < 36 >>> 0) {
       break label$5
      }
      __wbindgen_object_drop_ref($2 | 0);
      break label$5;
     }
     HEAP32[($3 + 44 | 0) >> 2] = $2;
     stretch_layout__get_f32__h0d76de51d01f671a($3 + 16 | 0 | 0, $3 + 44 | 0 | 0, 1049029 | 0, 5 | 0);
     $6 = Math_fround(HEAPF32[($3 + 20 | 0) >> 2]);
     $2 = HEAP32[($3 + 16 | 0) >> 2] | 0;
     stretch_layout__get_f32__h0d76de51d01f671a($3 + 8 | 0 | 0, $3 + 44 | 0 | 0, 1049034 | 0, 6 | 0);
     label$7 : {
      if (($2 | 0) != (1 | 0)) {
       break label$7
      }
      if ((HEAP32[($3 + 8 | 0) >> 2] | 0 | 0) != (1 | 0)) {
       break label$7
      }
      $7 = Math_fround(HEAPF32[($3 + 12 | 0) >> 2]);
      HEAP32[$0 >> 2] = 0;
      HEAPF32[($0 + 8 | 0) >> 2] = $7;
      HEAPF32[($0 + 4 | 0) >> 2] = $6;
      label$8 : {
       $0 = HEAP32[($3 + 44 | 0) >> 2] | 0;
       if ($0 >>> 0 < 36 >>> 0) {
        break label$8
       }
       __wbindgen_object_drop_ref($0 | 0);
      }
      label$9 : {
       $0 = HEAP32[($3 + 40 | 0) >> 2] | 0;
       if ($0 >>> 0 < 36 >>> 0) {
        break label$9
       }
       __wbindgen_object_drop_ref($0 | 0);
      }
      label$10 : {
       $0 = HEAP32[($3 + 36 | 0) >> 2] | 0;
       if ($0 >>> 0 < 36 >>> 0) {
        break label$10
       }
       __wbindgen_object_drop_ref($0 | 0);
      }
      $0 = HEAP32[($3 + 32 | 0) >> 2] | 0;
      if ($0 >>> 0 < 36 >>> 0) {
       break label$4
      }
      __wbindgen_object_drop_ref($0 | 0);
      break label$4;
     }
     $2 = HEAP32[($3 + 44 | 0) >> 2] | 0;
     if ($2 >>> 0 < 36 >>> 0) {
      break label$5
     }
     __wbindgen_object_drop_ref($2 | 0);
    }
    label$11 : {
     $2 = HEAP32[($3 + 40 | 0) >> 2] | 0;
     if ($2 >>> 0 < 36 >>> 0) {
      break label$11
     }
     __wbindgen_object_drop_ref($2 | 0);
    }
    $2 = __rust_alloc(8 | 0, 4 | 0) | 0;
    if (!$2) {
     break label$3
    }
    HEAP32[($2 + 4 | 0) >> 2] = 20;
    HEAP32[$2 >> 2] = 1049116;
    HEAP32[($0 + 4 | 0) >> 2] = $2;
    HEAP32[$0 >> 2] = 1;
    HEAP32[($0 + 8 | 0) >> 2] = 1049136;
    label$12 : {
     $0 = HEAP32[($3 + 36 | 0) >> 2] | 0;
     if ($0 >>> 0 < 36 >>> 0) {
      break label$12
     }
     __wbindgen_object_drop_ref($0 | 0);
    }
    $0 = HEAP32[($3 + 32 | 0) >> 2] | 0;
    if ($0 >>> 0 < 36 >>> 0) {
     break label$4
    }
    __wbindgen_object_drop_ref($0 | 0);
   }
   global$0 = $3 + 48 | 0;
   return;
  }
  alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83(8 | 0, 4 | 0);
  abort();
 }
 
 function core__num__dec2flt__algorithm__algorithm_r__hc78fd1e69554e0fc($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  var $3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $5 = 0, i64toi32_i32$4 = 0, $6 = 0, $6$hi = 0, $14 = 0, $4 = 0, $30 = 0;
  $3 = global$0 - 864 | 0;
  global$0 = $3;
  $4 = $3 + 356 | 0;
  label$1 : while (1) {
   $f32_20as_20core__num__dec2flt__rawfp__RawFloat___unpack__haddc0a4db1e502dc($3 | 0, Math_fround($2));
   $5 = HEAPU16[($3 + 8 | 0) >> 1] | 0;
   i64toi32_i32$2 = $3;
   i64toi32_i32$0 = HEAP32[$3 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($3 + 4 | 0) >> 2] | 0;
   $6 = i64toi32_i32$0;
   $6$hi = i64toi32_i32$1;
   $core__num__bignum__Big32x40_20as_20core__clone__Clone___clone__h6d9ab1cb70598592($3 + 16 | 0 | 0, $0 | 0);
   core__num__bignum__Big32x40__from_u64__hb47af5bbea157ebc($3 + 184 | 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0);
   core__num__dec2flt__algorithm__make_ratio__h003a9dbef8c19d2f($3 + 16 | 0 | 0, $3 + 184 | 0 | 0, $1 | 0, $5 | 0);
   $30 = $4;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $14 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $14 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   HEAP32[$30 >> 2] = $14;
   i64toi32_i32$0 = $6$hi;
   HEAP32[($3 + 352 | 0) >> 2] = $6;
   label$2 : {
    label$3 : {
     if ((($core__num__bignum__Big32x40_20as_20core__cmp__Ord___cmp__h9d6c8e8935c913cf($3 + 16 | 0 | 0, $3 + 184 | 0 | 0) | 0) & 255 | 0) >>> 0 >= 2 >>> 0) {
      break label$3
     }
     core__num__bignum__Big32x40__mul_digits__h7d68f43b76f883f5(core__num__bignum__Big32x40__mul_pow2__h9585b2465912363e(core__num__bignum__Big32x40__sub__ha94c81ecf8eacd8a($3 + 16 | 0 | 0, $3 + 184 | 0 | 0) | 0 | 0, 1 | 0) | 0 | 0, $3 + 352 | 0 | 0, 2 | 0) | 0;
     memcpy($3 + 528 | 0 | 0, $3 + 16 | 0 | 0, 164 | 0) | 0;
     $5 = 0;
     break label$2;
    }
    $core__num__bignum__Big32x40_20as_20core__clone__Clone___clone__h6d9ab1cb70598592($3 + 696 | 0 | 0, $3 + 184 | 0 | 0);
    $5 = 1;
    core__num__bignum__Big32x40__mul_digits__h7d68f43b76f883f5(core__num__bignum__Big32x40__mul_pow2__h9585b2465912363e(core__num__bignum__Big32x40__sub__ha94c81ecf8eacd8a($3 + 696 | 0 | 0, $3 + 16 | 0 | 0) | 0 | 0, 1 | 0) | 0 | 0, $3 + 352 | 0 | 0, 2 | 0) | 0;
    memcpy($3 + 528 | 0 | 0, $3 + 696 | 0 | 0, 164 | 0) | 0;
   }
   memcpy($3 + 360 | 0 | 0, $3 + 528 | 0 | 0, 164 | 0) | 0;
   label$4 : {
    label$5 : {
     label$6 : {
      if ((($core__num__bignum__Big32x40_20as_20core__cmp__Ord___cmp__h9d6c8e8935c913cf($3 + 360 | 0 | 0, $3 + 184 | 0 | 0) | 0) & 255 | 0 | 0) == (255 | 0)) {
       break label$6
      }
      label$7 : {
       if (!($core__num__bignum__Big32x40_20as_20core__cmp__PartialEq___eq__h59a6aa076884368c($3 + 360 | 0 | 0, $3 + 184 | 0 | 0) | 0)) {
        break label$7
       }
       i64toi32_i32$0 = $6$hi;
       i64toi32_i32$1 = $6;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 1;
       i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
       if (!!(i64toi32_i32$1 & i64toi32_i32$3 | 0 | i64toi32_i32$2 | 0)) {
        break label$7
       }
       i64toi32_i32$2 = $6$hi;
       i64toi32_i32$0 = $6;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 8388608;
       if (!((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0 | ($5 ^ 1 | 0) | 0)) {
        break label$5
       }
       break label$4;
      }
      if ($5) {
       break label$5
      }
      $2 = Math_fround(core__num__dec2flt__rawfp__next_float__h96c2fc47f7b351c4(Math_fround($2)));
      continue label$1;
     }
     memcpy($3 + 696 | 0 | 0, $3 + 360 | 0 | 0, 164 | 0) | 0;
     core__num__bignum__Big32x40__mul_pow2__h9585b2465912363e($3 + 696 | 0 | 0, 1 | 0) | 0;
     i64toi32_i32$0 = $6$hi;
     i64toi32_i32$3 = $6;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 8388608;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0 | ($5 ^ 1 | 0) | 0) {
      break label$4
     }
     if ((($core__num__bignum__Big32x40_20as_20core__cmp__Ord___cmp__h9d6c8e8935c913cf($3 + 696 | 0 | 0, $3 + 184 | 0 | 0) | 0) & 255 | 0 | 0) != (1 | 0)) {
      break label$4
     }
    }
    $2 = Math_fround(core__num__dec2flt__rawfp__prev_float__h84a9ca750e8146ac(Math_fround($2)));
    continue label$1;
   }
   break label$1;
  };
  global$0 = $3 + 864 | 0;
  return Math_fround($2);
 }
 
 function $std__sync__once__Finish_20as_20core__ops__drop__Drop___drop__h1e616a02947bc277($0) {
  $0 = $0 | 0;
  var $1 = 0, $3 = 0, $4 = 0, $2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $67 = 0;
  $1 = global$0 - 64 | 0;
  global$0 = $1;
  $2 = HEAP32[$0 >> 2] | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  HEAP32[$2 >> 2] = HEAPU8[($0 + 4 | 0) >> 0] | 0 ? 1 : 3;
  $0 = $3 & 3 | 0;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  label$1 : {
   if (($0 | 0) != (2 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        $0 = $3 & -4 | 0;
        if (!$0) {
         break label$6
        }
        label$7 : while (1) {
         $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
         $3 = HEAP32[$0 >> 2] | 0;
         HEAP32[$0 >> 2] = 0;
         if (!$3) {
          break label$5
         }
         HEAP8[($0 + 8 | 0) >> 0] = 1;
         HEAP32[($1 + 16 | 0) >> 2] = $3;
         $3 = $3 + 24 | 0;
         $0 = HEAP32[$3 >> 2] | 0;
         HEAP32[$3 >> 2] = 2;
         label$8 : {
          if (!$0) {
           break label$8
          }
          label$9 : {
           if (($0 | 0) == (1 | 0)) {
            break label$9
           }
           if (($0 | 0) == (2 | 0)) {
            break label$8
           }
           break label$4;
          }
          $0 = HEAP32[($1 + 16 | 0) >> 2] | 0;
          $3 = $0 + 28 | 0;
          $4 = HEAP32[$3 >> 2] | 0;
          if (HEAPU8[$4 >> 0] | 0) {
           break label$3
          }
          HEAP8[$4 >> 0] = 1;
          label$10 : {
           label$11 : {
            if ((HEAP32[(0 + 1066864 | 0) >> 2] | 0 | 0) != (1 | 0)) {
             break label$11
            }
            $4 = HEAP32[(0 + 1066868 | 0) >> 2] | 0;
            break label$10;
           }
           $4 = 0;
           i64toi32_i32$1 = 0;
           i64toi32_i32$0 = 0;
           HEAP32[(i64toi32_i32$1 + 1066864 | 0) >> 2] = 1;
           HEAP32[(i64toi32_i32$1 + 1066868 | 0) >> 2] = i64toi32_i32$0;
          }
          HEAP32[(0 + 1066868 | 0) >> 2] = $4;
          if (HEAPU8[($0 + 32 | 0) >> 0] | 0) {
           break label$2
          }
          HEAP8[(HEAP32[$3 >> 2] | 0) >> 0] = 0;
         }
         $0 = HEAP32[($1 + 16 | 0) >> 2] | 0;
         $67 = $0;
         $0 = HEAP32[$0 >> 2] | 0;
         HEAP32[$67 >> 2] = $0 + -1 | 0;
         label$12 : {
          if (($0 | 0) != (1 | 0)) {
           break label$12
          }
          alloc__sync__Arc_T___drop_slow__h51a4fa13661dd7d4($1 + 16 | 0 | 0);
         }
         $0 = $2;
         if ($0) {
          continue label$7
         }
         break label$7;
        };
       }
       global$0 = $1 + 64 | 0;
       return;
      }
      core__panicking__panic__h2d0bc53a963fb996(1052488 | 0);
      abort();
     }
     std__panicking__begin_panic__haa7e8f73e4c17ace(1052988 | 0, 28 | 0, 1052972 | 0);
     abort();
    }
    std__panicking__begin_panic__haa7e8f73e4c17ace(1053544 | 0, 32 | 0, 1053528 | 0);
    abort();
   }
   core__result__unwrap_failed__hf393a2f4cae996d3($0 + 28 | 0 | 0, ($4 | 0) != (0 | 0) | 0);
   abort();
  }
  HEAP32[($1 + 56 | 0) >> 2] = $1 + 12 | 0;
  HEAP32[($1 + 52 | 0) >> 2] = 55;
  HEAP32[($1 + 36 | 0) >> 2] = 2;
  HEAP32[($1 + 44 | 0) >> 2] = 55;
  HEAP32[($1 + 60 | 0) >> 2] = 1052792;
  i64toi32_i32$1 = $1;
  i64toi32_i32$0 = 0;
  HEAP32[($1 + 20 | 0) >> 2] = 3;
  HEAP32[($1 + 24 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1 + 16 | 0) >> 2] = 1052356;
  HEAP32[($1 + 48 | 0) >> 2] = $1 + 60 | 0;
  HEAP32[($1 + 40 | 0) >> 2] = $1 + 56 | 0;
  HEAP32[($1 + 32 | 0) >> 2] = $1 + 40 | 0;
  std__panicking__begin_panic_fmt__hb7825530f38bd066($1 + 16 | 0 | 0, 1053264 | 0);
  abort();
 }
 
 function $core__iter__adapters__Map_I_2cF__20as_20core__iter__traits__iterator__Iterator___fold__h910bc72f9b4fd482($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $10 = 0, $11 = 0, $9 = 0, $12 = Math_fround(0), $2 = 0, $7 = 0, $3 = 0, $5 = 0, $8 = 0, $13 = Math_fround(0), $4 = 0, $6 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $2 = HEAP32[$0 >> 2] | 0;
     $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if (($2 | 0) == ($3 | 0)) {
      break label$3
     }
     $4 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     $5 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     $6 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     $0 = HEAP32[(HEAP32[($0 + 8 | 0) >> 2] | 0) >> 2] | 0;
     $7 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     $8 = HEAP32[$0 >> 2] | 0;
     label$4 : while (1) {
      $0 = $2;
      $10 = HEAP32[$0 >> 2] | 0;
      if ($7 >>> 0 <= $10 >>> 0) {
       break label$2
      }
      $11 = HEAP32[$6 >> 2] | 0;
      if ($7 >>> 0 <= $11 >>> 0) {
       break label$1
      }
      $2 = $0 + 192 | 0;
      label$5 : {
       label$6 : {
        label$7 : {
         $10 = $8 + Math_imul($10, 288) | 0;
         $9 = HEAPU8[($10 + 207 | 0) >> 0] | 0;
         if (($9 & 7 | 0 | 0) == (4 | 0)) {
          break label$7
         }
         if ($9) {
          break label$6
         }
         if ((HEAPU8[(($8 + Math_imul($11, 288) | 0) + 206 | 0) >> 0] | 0 | 0) != (3 | 0)) {
          break label$6
         }
        }
        label$8 : {
         label$9 : {
          $11 = HEAPU8[$5 >> 0] | 0 | 2 | 0;
          if (($11 | 0) == (3 | 0)) {
           break label$9
          }
          $9 = $10 + 48 | 0;
          break label$8;
         }
         $9 = $10 + 32 | 0;
        }
        if ((HEAP32[$9 >> 2] | 0 | 0) == (1 | 0)) {
         break label$6
        }
        label$10 : {
         label$11 : {
          $11 = ($11 & 3 | 0 | 0) == (3 | 0);
          if ($11) {
           break label$11
          }
          $9 = $10 + 56 | 0;
          break label$10;
         }
         $9 = $10 + 40 | 0;
        }
        if ((HEAP32[$9 >> 2] | 0 | 0) == (1 | 0)) {
         break label$6
        }
        label$12 : {
         label$13 : {
          if ($11) {
           break label$13
          }
          $10 = $10 + 152 | 0;
          break label$12;
         }
         $10 = $10 + 144 | 0;
        }
        if ((HEAP32[$10 >> 2] | 0 | 0) != (1 | 0)) {
         break label$6
        }
        $12 = Math_fround(Math_fround(HEAPF32[$4 >> 2]) - Math_fround(HEAPF32[($0 + 176 | 0) >> 2]));
        label$14 : {
         label$15 : {
          if ($11) {
           break label$15
          }
          $13 = Math_fround(HEAPF32[($0 + 156 | 0) >> 2]);
          break label$14;
         }
         $13 = Math_fround(HEAPF32[($0 + 152 | 0) >> 2]);
        }
        $12 = Math_fround($12 + $13);
        break label$5;
       }
       label$16 : {
        if ((HEAPU8[$5 >> 0] | 0 | 2 | 0 | 0) == (3 | 0)) {
         break label$16
        }
        $12 = Math_fround(HEAPF32[($0 + 156 | 0) >> 2]);
        break label$5;
       }
       $12 = Math_fround(HEAPF32[($0 + 152 | 0) >> 2]);
      }
      $1 = Math_fround(fmaxf(Math_fround($1), Math_fround($12)));
      if (($3 | 0) != ($2 | 0)) {
       continue label$4
      }
      break label$4;
     };
    }
    return Math_fround($1);
   }
   core__panicking__panic_bounds_check__h0537ade040df571e(1051560 | 0, $10 | 0, $7 | 0);
   abort();
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1051560 | 0, $11 | 0, $7 | 0);
  abort();
 }
 
 function hashbrown__raw__RawTable_T___try_with_capacity__h19a7c4ef7e1dd020($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $7 = 0, $3 = 0, $7$hi = 0, $4 = 0, $5 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $8 = 0, $24 = 0, $6 = 0, $25 = 0, $8$hi = 0, $9 = 0, $9$hi = 0, $95 = 0, $96 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         if (!$1) {
          break label$7
         }
         if ($1 >>> 0 >= 8 >>> 0) {
          break label$6
         }
         $1 = $1 + 1 | 0;
         break label$5;
        }
        $1 = 0;
        HEAP32[($0 + 20 | 0) >> 2] = 0;
        i64toi32_i32$1 = $0 + 12 | 0;
        i64toi32_i32$0 = 0;
        HEAP32[i64toi32_i32$1 >> 2] = 4;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[($0 + 8 | 0) >> 2] = 1050920;
        HEAP32[($0 + 4 | 0) >> 2] = 0;
        break label$2;
       }
       label$8 : {
        label$9 : {
         i64toi32_i32$0 = 0;
         i64toi32_i32$2 = $1;
         i64toi32_i32$1 = 0;
         i64toi32_i32$3 = 3;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
          $20 = 0;
         } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
          $20 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         }
         $7 = $20;
         $7$hi = i64toi32_i32$1;
         i64toi32_i32$0 = $7;
         i64toi32_i32$2 = 0;
         i64toi32_i32$3 = 32;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$2 = 0;
          $21 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
         } else {
          i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
          $21 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
         }
         if (!$21) {
          break label$9
         }
         if ($2) {
          break label$8
         }
         HEAP8[($0 + 1 | 0) >> 0] = 0;
         break label$3;
        }
        i64toi32_i32$2 = $7$hi;
        $3 = $7;
        $1 = ($3 >>> 0) / (7 >>> 0) | 0;
        i64toi32_i32$2 = 1;
        $7 = 0;
        $7$hi = i64toi32_i32$2;
        if ($3 >>> 0 >= 14 >>> 0) {
         break label$5
        }
        break label$4;
       }
       core__panicking__panic__h2d0bc53a963fb996(1050896 | 0);
       abort();
      }
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = (-1 >>> Math_clz32($1 + -1 | 0) | 0) + 1 | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $22 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
       $22 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $7 = $22;
      $7$hi = i64toi32_i32$0;
     }
     label$10 : {
      label$11 : {
       i64toi32_i32$0 = $7$hi;
       i64toi32_i32$2 = $7;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 32;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $23 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
        $23 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
       }
       $8 = $23;
       $8$hi = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$2 = __wasm_i64_mul($8 | 0, i64toi32_i32$1 | 0, 20 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $9 = i64toi32_i32$2;
       $9$hi = i64toi32_i32$1;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 32;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $24 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
        $24 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
       }
       if ($24) {
        break label$11
       }
       i64toi32_i32$2 = $8$hi;
       $3 = $8;
       $4 = ($3 + 7 | 0) & -4 | 0;
       $1 = $3 + 4 | 0;
       if ($4 >>> 0 < $1 >>> 0) {
        break label$11
       }
       i64toi32_i32$2 = $9$hi;
       $5 = $4 + $9 | 0;
       if ($5 >>> 0 < $4 >>> 0) {
        break label$11
       }
       if ($5 >>> 0 >= -3 >>> 0) {
        break label$11
       }
       label$12 : {
        $6 = __rust_alloc($5 | 0, 4 | 0) | 0;
        if (!$6) {
         break label$12
        }
        $2 = memset($6 | 0, 255 | 0, $1 | 0) | 0;
        $1 = 0;
        HEAP32[($0 + 20 | 0) >> 2] = 0;
        HEAP32[($0 + 12 | 0) >> 2] = $2 + $4 | 0;
        HEAP32[($0 + 8 | 0) >> 2] = $2;
        $2 = $3 + -1 | 0;
        HEAP32[($0 + 4 | 0) >> 2] = $2;
        $95 = $0 + 16 | 0;
        $96 = $2;
        i64toi32_i32$2 = $7$hi;
        i64toi32_i32$1 = $7;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 35;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$0 = 0;
         $25 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
        } else {
         i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
         $25 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
        }
        HEAP32[$95 >> 2] = $2 >>> 0 < 8 >>> 0 ? $96 : Math_imul($25, 7);
        break label$2;
       }
       $1 = 1;
       if (!$2) {
        break label$10
       }
       alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83($5 | 0, 4 | 0);
       abort();
      }
      $1 = 0;
      if ($2) {
       break label$1
      }
     }
     HEAP8[($0 + 1 | 0) >> 0] = $1;
    }
    $1 = 1;
   }
   HEAP8[$0 >> 0] = $1;
   return;
  }
  core__panicking__panic__h2d0bc53a963fb996(1050896 | 0);
  abort();
 }
 
 function hashbrown__raw__RawTable_T___try_with_capacity__h16a6d2442004a6f3($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $7 = 0, $3 = 0, $7$hi = 0, $4 = 0, $5 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $8 = 0, $24 = 0, $6 = 0, $25 = 0, $8$hi = 0, $9 = 0, $9$hi = 0, $95 = 0, $96 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         if (!$1) {
          break label$7
         }
         if ($1 >>> 0 >= 8 >>> 0) {
          break label$6
         }
         $1 = $1 + 1 | 0;
         break label$5;
        }
        $1 = 0;
        HEAP32[($0 + 20 | 0) >> 2] = 0;
        i64toi32_i32$1 = $0 + 12 | 0;
        i64toi32_i32$0 = 0;
        HEAP32[i64toi32_i32$1 >> 2] = 4;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[($0 + 8 | 0) >> 2] = 1050920;
        HEAP32[($0 + 4 | 0) >> 2] = 0;
        break label$2;
       }
       label$8 : {
        label$9 : {
         i64toi32_i32$0 = 0;
         i64toi32_i32$2 = $1;
         i64toi32_i32$1 = 0;
         i64toi32_i32$3 = 3;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
          $20 = 0;
         } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
          $20 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         }
         $7 = $20;
         $7$hi = i64toi32_i32$1;
         i64toi32_i32$0 = $7;
         i64toi32_i32$2 = 0;
         i64toi32_i32$3 = 32;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$2 = 0;
          $21 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
         } else {
          i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
          $21 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
         }
         if (!$21) {
          break label$9
         }
         if ($2) {
          break label$8
         }
         HEAP8[($0 + 1 | 0) >> 0] = 0;
         break label$3;
        }
        i64toi32_i32$2 = $7$hi;
        $3 = $7;
        $1 = ($3 >>> 0) / (7 >>> 0) | 0;
        i64toi32_i32$2 = 1;
        $7 = 0;
        $7$hi = i64toi32_i32$2;
        if ($3 >>> 0 >= 14 >>> 0) {
         break label$5
        }
        break label$4;
       }
       core__panicking__panic__h2d0bc53a963fb996(1050896 | 0);
       abort();
      }
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = (-1 >>> Math_clz32($1 + -1 | 0) | 0) + 1 | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $22 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
       $22 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $7 = $22;
      $7$hi = i64toi32_i32$0;
     }
     label$10 : {
      label$11 : {
       i64toi32_i32$0 = $7$hi;
       i64toi32_i32$2 = $7;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 32;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $23 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
        $23 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
       }
       $8 = $23;
       $8$hi = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$2 = __wasm_i64_mul($8 | 0, i64toi32_i32$1 | 0, 20 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $9 = i64toi32_i32$2;
       $9$hi = i64toi32_i32$1;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 32;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $24 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
        $24 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
       }
       if ($24) {
        break label$11
       }
       i64toi32_i32$2 = $8$hi;
       $3 = $8;
       $4 = ($3 + 7 | 0) & -4 | 0;
       $1 = $3 + 4 | 0;
       if ($4 >>> 0 < $1 >>> 0) {
        break label$11
       }
       i64toi32_i32$2 = $9$hi;
       $5 = $4 + $9 | 0;
       if ($5 >>> 0 < $4 >>> 0) {
        break label$11
       }
       if ($5 >>> 0 >= -3 >>> 0) {
        break label$11
       }
       label$12 : {
        $6 = __rust_alloc($5 | 0, 4 | 0) | 0;
        if (!$6) {
         break label$12
        }
        $2 = memset($6 | 0, 255 | 0, $1 | 0) | 0;
        $1 = 0;
        HEAP32[($0 + 20 | 0) >> 2] = 0;
        HEAP32[($0 + 12 | 0) >> 2] = $2 + $4 | 0;
        HEAP32[($0 + 8 | 0) >> 2] = $2;
        $2 = $3 + -1 | 0;
        HEAP32[($0 + 4 | 0) >> 2] = $2;
        $95 = $0 + 16 | 0;
        $96 = $2;
        i64toi32_i32$2 = $7$hi;
        i64toi32_i32$1 = $7;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 35;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$0 = 0;
         $25 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
        } else {
         i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
         $25 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
        }
        HEAP32[$95 >> 2] = $2 >>> 0 < 8 >>> 0 ? $96 : Math_imul($25, 7);
        break label$2;
       }
       $1 = 1;
       if (!$2) {
        break label$10
       }
       alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83($5 | 0, 4 | 0);
       abort();
      }
      $1 = 0;
      if ($2) {
       break label$1
      }
     }
     HEAP8[($0 + 1 | 0) >> 0] = $1;
    }
    $1 = 1;
   }
   HEAP8[$0 >> 0] = $1;
   return;
  }
  core__panicking__panic__h2d0bc53a963fb996(1050896 | 0);
  abort();
 }
 
 function core__num__bignum__Big32x40__mul_pow5__h5aa98cad29f0d9cf($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$2 = 0, $3 = 0, i64toi32_i32$0 = 0, $6 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $7 = 0, $7$hi = 0, i64toi32_i32$4 = 0, $4 = 0, i64toi32_i32$3 = 0, $8$hi = 0, $23 = 0, $8 = 0, $24 = 0, $2 = 0, $5 = 0, $26 = 0, $25 = 0, $29$hi = 0, $79 = 0, $82 = 0, $82$hi = 0, $83$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if ($1 >>> 0 < 13 >>> 0) {
        break label$5
       }
       $2 = $0 + 4 | 0;
       $3 = HEAP32[$0 >> 2] | 0;
       label$6 : while (1) {
        if ($3 >>> 0 >= 41 >>> 0) {
         break label$4
        }
        label$7 : {
         label$8 : {
          if (!$3) {
           break label$8
          }
          $4 = $3 << 2 | 0;
          $5 = ($0 + $4 | 0) + 4 | 0;
          i64toi32_i32$0 = 0;
          $7 = 0;
          $7$hi = i64toi32_i32$0;
          $6 = $2;
          label$9 : while (1) {
           $26 = $6;
           i64toi32_i32$2 = $6;
           i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
           i64toi32_i32$1 = 0;
           $25 = i64toi32_i32$0;
           i64toi32_i32$0 = 0;
           i64toi32_i32$0 = __wasm_i64_mul($25 | 0, i64toi32_i32$1 | 0, 1220703125 | 0, i64toi32_i32$0 | 0) | 0;
           i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
           $29$hi = i64toi32_i32$1;
           i64toi32_i32$1 = $7$hi;
           i64toi32_i32$1 = $29$hi;
           i64toi32_i32$2 = i64toi32_i32$0;
           i64toi32_i32$0 = $7$hi;
           i64toi32_i32$3 = $7;
           i64toi32_i32$4 = i64toi32_i32$2 + $7 | 0;
           i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
           if (i64toi32_i32$4 >>> 0 < $7 >>> 0) {
            i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
           }
           $7 = i64toi32_i32$4;
           $7$hi = i64toi32_i32$5;
           HEAP32[$26 >> 2] = i64toi32_i32$4;
           $6 = $6 + 4 | 0;
           i64toi32_i32$1 = i64toi32_i32$4;
           i64toi32_i32$2 = 0;
           i64toi32_i32$3 = 32;
           i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$2 = 0;
            $23 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
           } else {
            i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
            $23 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
           }
           $7 = $23;
           $7$hi = i64toi32_i32$2;
           $4 = $4 + -4 | 0;
           if ($4) {
            continue label$9
           }
           break label$9;
          };
          i64toi32_i32$2 = $7$hi;
          $6 = $7;
          if (!$6) {
           break label$7
          }
          if ($3 >>> 0 > 39 >>> 0) {
           break label$3
          }
          HEAP32[$5 >> 2] = $6;
          $3 = $3 + 1 | 0;
          break label$7;
         }
         $3 = 0;
        }
        HEAP32[$0 >> 2] = $3;
        $1 = $1 + -13 | 0;
        if ($1 >>> 0 >= 13 >>> 0) {
         continue label$6
        }
        break label$6;
       };
      }
      label$10 : {
       label$11 : {
        if (!$1) {
         break label$11
        }
        $6 = 1;
        label$12 : while (1) {
         $6 = Math_imul($6, 5);
         $1 = $1 + -1 | 0;
         if ($1) {
          continue label$12
         }
         break label$12;
        };
        i64toi32_i32$2 = 0;
        $8 = $6;
        $8$hi = i64toi32_i32$2;
        break label$10;
       }
       i64toi32_i32$2 = 0;
       $8 = 1;
       $8$hi = i64toi32_i32$2;
      }
      $3 = HEAP32[$0 >> 2] | 0;
      if ($3 >>> 0 >= 41 >>> 0) {
       break label$2
      }
      label$13 : {
       if (!$3) {
        break label$13
       }
       $4 = $3 << 2 | 0;
       $1 = ($0 + $4 | 0) + 4 | 0;
       $6 = $0 + 4 | 0;
       i64toi32_i32$2 = 0;
       $7 = 0;
       $7$hi = i64toi32_i32$2;
       label$14 : while (1) {
        $79 = $6;
        i64toi32_i32$2 = $8$hi;
        i64toi32_i32$5 = $6;
        i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
        i64toi32_i32$1 = 0;
        $82 = i64toi32_i32$2;
        $82$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $8$hi;
        i64toi32_i32$2 = $82$hi;
        i64toi32_i32$2 = __wasm_i64_mul($8 | 0, i64toi32_i32$1 | 0, $82 | 0, i64toi32_i32$2 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $83$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $7$hi;
        i64toi32_i32$1 = $83$hi;
        i64toi32_i32$5 = i64toi32_i32$2;
        i64toi32_i32$2 = $7$hi;
        i64toi32_i32$3 = $7;
        i64toi32_i32$0 = i64toi32_i32$5 + $7 | 0;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$0 >>> 0 < $7 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $7 = i64toi32_i32$0;
        $7$hi = i64toi32_i32$4;
        HEAP32[$79 >> 2] = i64toi32_i32$0;
        $6 = $6 + 4 | 0;
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$5 = 0;
        i64toi32_i32$3 = 32;
        i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$5 = 0;
         $24 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
        } else {
         i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
         $24 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
        }
        $7 = $24;
        $7$hi = i64toi32_i32$5;
        $4 = $4 + -4 | 0;
        if ($4) {
         continue label$14
        }
        break label$14;
       };
       label$15 : {
        i64toi32_i32$5 = $7$hi;
        $6 = $7;
        if (!$6) {
         break label$15
        }
        if ($3 >>> 0 > 39 >>> 0) {
         break label$1
        }
        HEAP32[$1 >> 2] = $6;
        $3 = $3 + 1 | 0;
       }
       HEAP32[$0 >> 2] = $3;
       return $0 | 0;
      }
      HEAP32[$0 >> 2] = 0;
      return $0 | 0;
     }
     core__slice__slice_index_len_fail__h4544fc57f3d8a7a0($3 | 0, 40 | 0);
     abort();
    }
    core__panicking__panic_bounds_check__h0537ade040df571e(1066048 | 0, $3 | 0, 40 | 0);
    abort();
   }
   core__slice__slice_index_len_fail__h4544fc57f3d8a7a0($3 | 0, 40 | 0);
   abort();
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1066048 | 0, $3 | 0, 40 | 0);
  abort();
 }
 
 function core__fmt__builders__DebugStruct__field__hab3f8a77cf8c4394($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $8 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $9$hi = 0, $10 = 0, $10$hi = 0, $85 = 0, $11 = 0, $11$hi = 0, $12 = 0, $12$hi = 0, $13 = 0, $13$hi = 0;
  $5 = global$0 - 80 | 0;
  global$0 = $5;
  $6 = 1;
  label$1 : {
   if (HEAPU8[($0 + 4 | 0) >> 0] | 0) {
    break label$1
   }
   $7 = HEAPU8[($0 + 5 | 0) >> 0] | 0;
   label$2 : {
    $8 = HEAP32[$0 >> 2] | 0;
    if ((HEAPU8[$8 >> 0] | 0) & 4 | 0) {
     break label$2
    }
    $6 = 1;
    $7 = $7 & 255 | 0;
    if (FUNCTION_TABLE[HEAP32[((HEAP32[($8 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[($8 + 24 | 0) >> 2] | 0, $7 ? 1061285 : 1061287, $7 ? 2 : 3) | 0) {
     break label$1
    }
    $6 = 1;
    $8 = HEAP32[$0 >> 2] | 0;
    if (FUNCTION_TABLE[HEAP32[((HEAP32[($8 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[($8 + 24 | 0) >> 2] | 0, $1, $2) | 0) {
     break label$1
    }
    $6 = 1;
    $8 = HEAP32[$0 >> 2] | 0;
    if (FUNCTION_TABLE[HEAP32[((HEAP32[($8 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[($8 + 24 | 0) >> 2] | 0, 1060588, 2) | 0) {
     break label$1
    }
    $6 = FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0]($3, HEAP32[$0 >> 2] | 0) | 0;
    break label$1;
   }
   label$3 : {
    if ($7 & 255 | 0) {
     break label$3
    }
    $6 = 1;
    if (FUNCTION_TABLE[HEAP32[((HEAP32[($8 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[($8 + 24 | 0) >> 2] | 0, 1061280, 3) | 0) {
     break label$1
    }
    $8 = HEAP32[$0 >> 2] | 0;
   }
   $6 = 1;
   HEAP8[($5 + 16 | 0) >> 0] = 1;
   i64toi32_i32$0 = HEAP32[($8 + 16 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($8 + 20 | 0) >> 2] | 0;
   $9 = i64toi32_i32$0;
   $9$hi = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[($8 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($8 + 12 | 0) >> 2] | 0;
   $10 = i64toi32_i32$1;
   $10$hi = i64toi32_i32$0;
   HEAP32[($5 + 52 | 0) >> 2] = 1061252;
   i64toi32_i32$0 = HEAP32[($8 + 24 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($8 + 28 | 0) >> 2] | 0;
   $85 = i64toi32_i32$0;
   i64toi32_i32$0 = $5;
   HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $85;
   HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[($8 + 32 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($8 + 36 | 0) >> 2] | 0;
   $11 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$0 = HEAP32[($8 + 40 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($8 + 44 | 0) >> 2] | 0;
   $12 = i64toi32_i32$0;
   $12$hi = i64toi32_i32$1;
   HEAP8[($5 + 72 | 0) >> 0] = HEAPU8[($8 + 48 | 0) >> 0] | 0;
   i64toi32_i32$1 = HEAP32[$8 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($8 + 4 | 0) >> 2] | 0;
   $13 = i64toi32_i32$1;
   $13$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $10$hi;
   i64toi32_i32$1 = $5;
   HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = $10;
   HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $9$hi;
   HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = $9;
   HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $12$hi;
   HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = $12;
   HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $11$hi;
   HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] = $11;
   HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $13$hi;
   HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = $13;
   HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = i64toi32_i32$1 + 8 | 0;
   if ($core__fmt__builders__PadAdapter_20as_20core__fmt__Write___write_str__h09f53eef721a952f(i64toi32_i32$1 + 8 | 0 | 0, $1 | 0, $2 | 0) | 0) {
    break label$1
   }
   if ($core__fmt__builders__PadAdapter_20as_20core__fmt__Write___write_str__h09f53eef721a952f($5 + 8 | 0 | 0, 1060588 | 0, 2 | 0) | 0) {
    break label$1
   }
   if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0]($3, $5 + 24 | 0) | 0) {
    break label$1
   }
   $6 = FUNCTION_TABLE[HEAP32[((HEAP32[($5 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[($5 + 48 | 0) >> 2] | 0, 1061283, 2) | 0;
  }
  HEAP8[($0 + 5 | 0) >> 0] = 1;
  HEAP8[($0 + 4 | 0) >> 0] = $6;
  global$0 = $5 + 80 | 0;
  return $0 | 0;
 }
 
 function dlmalloc__dlmalloc__Dlmalloc__memalign__he461fff21ac8d1e2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $5 = 0, $4 = 0, $6 = 0, $7 = 0;
  $3 = 0;
  label$1 : {
   $1 = $1 >>> 0 > 16 >>> 0 ? $1 : 16;
   if ((-65587 - $1 | 0) >>> 0 <= $2 >>> 0) {
    break label$1
   }
   $4 = $2 >>> 0 < 11 >>> 0 ? 16 : ($2 + 11 | 0) & -8 | 0;
   $2 = dlmalloc__dlmalloc__Dlmalloc__malloc__haa66310b00a7bd6b($0 | 0, ($1 + $4 | 0) + 12 | 0 | 0) | 0;
   if (!$2) {
    break label$1
   }
   $3 = $2 + -8 | 0;
   label$2 : {
    label$3 : {
     label$4 : {
      $5 = $1 + -1 | 0;
      if (!($5 & $2 | 0)) {
       break label$4
      }
      $6 = $2 + -4 | 0;
      $7 = HEAP32[$6 >> 2] | 0;
      $2 = (($5 + $2 | 0) & (0 - $1 | 0) | 0) + -8 | 0;
      $1 = ($2 - $3 | 0) >>> 0 > 16 >>> 0 ? $2 : $2 + $1 | 0;
      $2 = $1 - $3 | 0;
      $5 = ($7 & -8 | 0) - $2 | 0;
      if (!($7 & 3 | 0)) {
       break label$3
      }
      HEAP32[($1 + 4 | 0) >> 2] = $5 | ((HEAP32[($1 + 4 | 0) >> 2] | 0) & 1 | 0) | 0 | 2 | 0;
      $5 = $1 + $5 | 0;
      HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($5 + 4 | 0) >> 2] | 0 | 1 | 0;
      HEAP32[$6 >> 2] = $2 | ((HEAP32[$6 >> 2] | 0) & 1 | 0) | 0 | 2 | 0;
      HEAP32[($1 + 4 | 0) >> 2] = HEAP32[($1 + 4 | 0) >> 2] | 0 | 1 | 0;
      dlmalloc__dlmalloc__Dlmalloc__dispose_chunk__h6f59f1d81bec5e46($0 | 0, $3 | 0, $2 | 0);
      break label$2;
     }
     $1 = $3;
     break label$2;
    }
    $3 = HEAP32[$3 >> 2] | 0;
    HEAP32[($1 + 4 | 0) >> 2] = $5;
    HEAP32[$1 >> 2] = $3 + $2 | 0;
   }
   label$5 : {
    $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    if (!($2 & 3 | 0)) {
     break label$5
    }
    $3 = $2 & -8 | 0;
    if ($3 >>> 0 <= ($4 + 16 | 0) >>> 0) {
     break label$5
    }
    HEAP32[($1 + 4 | 0) >> 2] = $4 | ($2 & 1 | 0) | 0 | 2 | 0;
    $2 = $1 + $4 | 0;
    $4 = $3 - $4 | 0;
    HEAP32[($2 + 4 | 0) >> 2] = $4 | 3 | 0;
    $3 = $1 + $3 | 0;
    HEAP32[($3 + 4 | 0) >> 2] = HEAP32[($3 + 4 | 0) >> 2] | 0 | 1 | 0;
    dlmalloc__dlmalloc__Dlmalloc__dispose_chunk__h6f59f1d81bec5e46($0 | 0, $2 | 0, $4 | 0);
   }
   $3 = $1 + 8 | 0;
  }
  return $3 | 0;
 }
 
 function std__sync__once__Once__call_inner__h49bf6a110bd0c1f8($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $8 = 0, $4 = 0, $6 = 0, $9 = 0, $7 = 0, i64toi32_i32$1 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  global$0 = $4;
  $5 = $4 | 2 | 0;
  $6 = HEAP32[$0 >> 2] | 0;
  $7 = $4 + 8 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : while (1) {
       label$6 : {
        label$7 : {
         $8 = $6;
         if (!$8) {
          break label$7
         }
         label$8 : {
          if (($8 | 0) == (1 | 0)) {
           break label$8
          }
          if (($8 | 0) == (3 | 0)) {
           break label$3
          }
          if (($8 & 3 | 0 | 0) != (2 | 0)) {
           break label$2
          }
          label$9 : {
           if ((HEAP32[(0 + 1066400 | 0) >> 2] | 0 | 0) == (1 | 0)) {
            break label$9
           }
           i64toi32_i32$1 = 0;
           HEAP32[(i64toi32_i32$1 + 1066400 | 0) >> 2] = 1;
           HEAP32[(i64toi32_i32$1 + 1066404 | 0) >> 2] = 0;
           HEAP32[(0 + 1066408 | 0) >> 2] = 0;
          }
          $6 = std__sys_common__thread_info__ThreadInfo__with___7b_7bclosure_7d_7d__hb699849b36c0e1da(1066404 | 0) | 0;
          HEAP8[$7 >> 0] = 0;
          HEAP32[$4 >> 2] = $6;
          HEAP32[($4 + 4 | 0) >> 2] = 0;
          $6 = $8;
          label$10 : while (1) {
           if (($6 & 3 | 0 | 0) != (2 | 0)) {
            break label$6
           }
           $8 = HEAP32[$0 >> 2] | 0;
           HEAP32[$0 >> 2] = ($8 | 0) == ($6 | 0) ? $5 : $8;
           HEAP32[($4 + 4 | 0) >> 2] = $6 & -4 | 0;
           $9 = ($8 | 0) != ($6 | 0);
           $6 = $8;
           if ($9) {
            continue label$10
           }
           break label$10;
          };
          label$11 : {
           if (HEAPU8[$7 >> 0] | 0) {
            break label$11
           }
           label$12 : while (1) {
            std__thread__park__h8c2d8fb1038e650a();
            if (!(HEAPU8[$7 >> 0] | 0)) {
             continue label$12
            }
            break label$12;
           };
          }
          $6 = HEAP32[$0 >> 2] | 0;
          $8 = HEAP32[$4 >> 2] | 0;
          if (!$8) {
           continue label$5
          }
          $9 = HEAP32[$8 >> 2] | 0;
          HEAP32[$8 >> 2] = $9 + -1 | 0;
          if (($9 | 0) != (1 | 0)) {
           continue label$5
          }
          alloc__sync__Arc_T___drop_slow__h51a4fa13661dd7d4($4 | 0);
          continue label$5;
         }
         if (!$1) {
          break label$1
         }
        }
        $6 = HEAP32[$0 >> 2] | 0;
        HEAP32[$0 >> 2] = ($6 | 0) == ($8 | 0) ? 2 : $6;
        if (($6 | 0) != ($8 | 0)) {
         continue label$5
        }
        break label$4;
       }
       $8 = HEAP32[$4 >> 2] | 0;
       if (!$8) {
        continue label$5
       }
       $9 = HEAP32[$8 >> 2] | 0;
       HEAP32[$8 >> 2] = $9 + -1 | 0;
       if (($9 | 0) != (1 | 0)) {
        continue label$5
       }
       alloc__sync__Arc_T___drop_slow__h51a4fa13661dd7d4($4 | 0);
       continue label$5;
      };
     }
     HEAP32[$4 >> 2] = $0;
     FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0]($2, ($8 | 0) == (1 | 0));
     HEAP8[($4 + 4 | 0) >> 0] = 0;
     $std__sync__once__Finish_20as_20core__ops__drop__Drop___drop__h1e616a02947bc277($4 | 0);
    }
    global$0 = $4 + 16 | 0;
    return;
   }
   std__panicking__begin_panic__haa7e8f73e4c17ace(1053156 | 0, 47 | 0, 1053140 | 0);
   abort();
  }
  std__panicking__begin_panic__haa7e8f73e4c17ace(1053220 | 0, 42 | 0, 1053204 | 0);
  abort();
 }
 
 function core__num__bignum__Big32x40__bit_length__h13ff63659f8edff3($0) {
  $0 = $0 | 0;
  var $2 = 0, $4 = 0, $1 = 0, $3 = 0, $5 = 0, $6 = 0;
  label$1 : {
   label$2 : {
    $1 = HEAP32[$0 >> 2] | 0;
    if ($1 >>> 0 >= 41 >>> 0) {
     break label$2
    }
    $2 = $1 << 2 | 0;
    $3 = $0 + 4 | 0;
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          if ($1 >>> 0 < 4 >>> 0) {
           break label$8
          }
          $2 = ($0 + $2 | 0) + -12 | 0;
          $4 = 0;
          label$9 : while (1) {
           if (HEAP32[($2 + 12 | 0) >> 2] | 0) {
            break label$3
           }
           if (HEAP32[($2 + 8 | 0) >> 2] | 0) {
            break label$6
           }
           if (HEAP32[($2 + 4 | 0) >> 2] | 0) {
            break label$5
           }
           if (HEAP32[$2 >> 2] | 0) {
            break label$4
           }
           $4 = $4 + 4 | 0;
           $5 = $2 - $3 | 0;
           $6 = $2 + -16 | 0;
           $2 = $6;
           if ($5 >>> 0 > 12 >>> 0) {
            continue label$9
           }
           break label$9;
          };
          $2 = $6 + 16 | 0;
          if (($2 | 0) != ($3 | 0)) {
           break label$7
          }
          break label$3;
         }
         $4 = 0;
         $2 = $3 + $2 | 0;
         if (($2 | 0) == ($3 | 0)) {
          break label$3
         }
        }
        $2 = $2 + -4 | 0;
        label$10 : while (1) {
         if (HEAP32[$2 >> 2] | 0) {
          break label$3
         }
         $4 = $4 + 1 | 0;
         $2 = $2 + -4 | 0;
         if (($0 | 0) != ($2 | 0)) {
          continue label$10
         }
         break label$3;
        };
       }
       $4 = $4 + 1 | 0;
       break label$3;
      }
      $4 = $4 + 2 | 0;
      break label$3;
     }
     $4 = $4 + 3 | 0;
    }
    $2 = $1 - $4 | 0;
    if ($1 >>> 0 < $4 >>> 0) {
     break label$1
    }
    label$11 : {
     label$12 : {
      if (!$2) {
       break label$12
      }
      $2 = ($1 << 5 | 0 | 1 | 0) - ($4 << 5 | 0) | 0;
      label$13 : while (1) {
       $4 = $2 + -2 | 0;
       $5 = $4 >>> 5 | 0;
       if ($4 >>> 0 >= 1280 >>> 0) {
        break label$11
       }
       $2 = $2 + -1 | 0;
       if (!((HEAP32[(($0 + ($5 << 2 | 0) | 0) + 4 | 0) >> 2] | 0) & (1 << ($4 & 31 | 0) | 0) | 0)) {
        continue label$13
       }
       break label$13;
      };
      return $2 | 0;
     }
     return 0 | 0;
    }
    core__panicking__panic_bounds_check__h0537ade040df571e(1065964 | 0, $5 | 0, 40 | 0);
    abort();
   }
   core__slice__slice_index_len_fail__h4544fc57f3d8a7a0($1 | 0, 40 | 0);
   abort();
  }
  core__slice__slice_index_len_fail__h4544fc57f3d8a7a0($2 | 0, $1 | 0);
  abort();
 }
 
 function std__thread__Thread__new__h5b15730e54159bdd($0) {
  $0 = $0 | 0;
  var $1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, $2 = 0, i64toi32_i32$3 = 0, $5 = 0, $5$hi = 0, $4 = 0, i64toi32_i32$4 = 0, $15 = 0, $40 = 0, $3 = 0, $56 = 0;
  $1 = global$0 - 48 | 0;
  global$0 = $1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $2 = HEAP32[$0 >> 2] | 0;
      if (!$2) {
       break label$4
      }
      i64toi32_i32$2 = $0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
      $15 = i64toi32_i32$0;
      i64toi32_i32$0 = $1;
      HEAP32[($1 + 36 | 0) >> 2] = $15;
      HEAP32[($1 + 40 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[($1 + 32 | 0) >> 2] = $2;
      alloc__string___impl_20core__convert__From_alloc__string__String__20for_20alloc__vec__Vec_u8____from__hc4f5d128a3241ca2($1 + 16 | 0 | 0, $1 + 32 | 0 | 0);
      $0 = HEAP32[($1 + 16 | 0) >> 2] | 0;
      core__slice__memchr__memchr__h7af23d5070345c6c($1 + 8 | 0 | 0, 0 | 0, $0 | 0, HEAP32[($1 + 24 | 0) >> 2] | 0 | 0);
      if (HEAP32[($1 + 8 | 0) >> 2] | 0) {
       break label$2
      }
      HEAP32[(($1 + 32 | 0) + 8 | 0) >> 2] = HEAP32[(($1 + 16 | 0) + 8 | 0) >> 2] | 0;
      i64toi32_i32$2 = $1;
      i64toi32_i32$1 = HEAP32[($1 + 16 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($1 + 20 | 0) >> 2] | 0;
      $40 = i64toi32_i32$1;
      i64toi32_i32$1 = $1;
      HEAP32[($1 + 32 | 0) >> 2] = $40;
      HEAP32[($1 + 36 | 0) >> 2] = i64toi32_i32$0;
      std__ffi__c_str__CString__from_vec_unchecked__hd801b68fb97cc939($1 | 0, $1 + 32 | 0 | 0);
      $3 = HEAP32[($1 + 4 | 0) >> 2] | 0;
      $4 = HEAP32[$1 >> 2] | 0;
      if (HEAPU8[(0 + 1066872 | 0) >> 0] | 0) {
       break label$3
      }
      break label$1;
     }
     $4 = 0;
     if (!(HEAPU8[(0 + 1066872 | 0) >> 0] | 0)) {
      break label$1
     }
    }
    std__panicking__begin_panic__haa7e8f73e4c17ace(1053544 | 0, 32 | 0, 1053528 | 0);
    abort();
   }
   $2 = HEAP32[($1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$2 = $1;
   i64toi32_i32$0 = HEAP32[($1 + 20 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1 + 24 | 0) >> 2] | 0;
   $56 = i64toi32_i32$0;
   i64toi32_i32$0 = $1 + 40 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $56;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($1 + 36 | 0) >> 2] = $0;
   HEAP32[($1 + 32 | 0) >> 2] = $2;
   core__result__unwrap_failed__hae3003d4eb6b7de1($1 + 32 | 0 | 0);
   abort();
  }
  HEAP8[(0 + 1066872 | 0) >> 0] = 1;
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 1066880 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 1066884 | 0) >> 2] | 0;
      $5 = i64toi32_i32$1;
      $5$hi = i64toi32_i32$0;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$1 = -1;
      i64toi32_i32$3 = -1;
      if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0) {
       break label$8
      }
      i64toi32_i32$2 = $5$hi;
      i64toi32_i32$3 = $5;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = 1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      i64toi32_i32$3 = 0;
      HEAP32[(i64toi32_i32$3 + 1066880 | 0) >> 2] = i64toi32_i32$4;
      HEAP32[(i64toi32_i32$3 + 1066884 | 0) >> 2] = i64toi32_i32$5;
      i64toi32_i32$5 = $5$hi;
      i64toi32_i32$2 = $5;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 0;
      if ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) | 0) {
       break label$7
      }
      HEAP8[(0 + 1066872 | 0) >> 0] = 0;
      $2 = __rust_alloc(1 | 0, 1 | 0) | 0;
      if (!$2) {
       break label$6
      }
      HEAP8[$2 >> 0] = 0;
      $0 = __rust_alloc(48 | 0, 8 | 0) | 0;
      if (!$0) {
       break label$5
      }
      i64toi32_i32$5 = $0;
      i64toi32_i32$2 = 0;
      HEAP32[($0 + 36 | 0) >> 2] = 1;
      HEAP32[($0 + 40 | 0) >> 2] = i64toi32_i32$2;
      HEAP32[($0 + 24 | 0) >> 2] = 0;
      HEAP32[($0 + 20 | 0) >> 2] = $3;
      HEAP32[($0 + 16 | 0) >> 2] = $4;
      i64toi32_i32$2 = $5$hi;
      i64toi32_i32$5 = $0;
      HEAP32[($0 + 8 | 0) >> 2] = $5;
      HEAP32[($0 + 12 | 0) >> 2] = i64toi32_i32$2;
      i64toi32_i32$5 = $0;
      i64toi32_i32$2 = 1;
      HEAP32[$0 >> 2] = 1;
      HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = $0;
      HEAP32[($0 + 28 | 0) >> 2] = $2;
      HEAP32[($0 + 32 | 0) >> 2] = i64toi32_i32$2;
      global$0 = $1 + 48 | 0;
      return $0 | 0;
     }
     std__panicking__begin_panic__haa7e8f73e4c17ace(1052868 | 0, 55 | 0, 1052852 | 0);
     abort();
    }
    core__panicking__panic__h2d0bc53a963fb996(1052488 | 0);
    abort();
   }
   alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83(1 | 0, 1 | 0);
   abort();
  }
  alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83(48 | 0, 8 | 0);
  abort();
 }
 
 function core__unicode__printable__check__h1e7c010e493ddb3e($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $10 = 0, $13 = 0, $7 = 0, $11 = 0, $8 = 0, $9 = 0, $12 = 0;
  $7 = 1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (!$2) {
         break label$6
        }
        $8 = $1 + ($2 << 1 | 0) | 0;
        $9 = ($0 & 65280 | 0) >>> 8 | 0;
        $10 = 0;
        $11 = $0 & 255 | 0;
        label$7 : while (1) {
         $12 = $1 + 2 | 0;
         $2 = HEAPU8[($1 + 1 | 0) >> 0] | 0;
         $13 = $10 + $2 | 0;
         label$8 : {
          label$9 : {
           $1 = HEAPU8[$1 >> 0] | 0;
           if (($1 | 0) != ($9 | 0)) {
            break label$9
           }
           if ($13 >>> 0 < $10 >>> 0) {
            break label$2
           }
           if ($13 >>> 0 > $4 >>> 0) {
            break label$1
           }
           $1 = $3 + $10 | 0;
           label$10 : while (1) {
            if (!$2) {
             break label$8
            }
            $2 = $2 + -1 | 0;
            $10 = HEAPU8[$1 >> 0] | 0;
            $1 = $1 + 1 | 0;
            if (($10 | 0) != ($11 | 0)) {
             continue label$10
            }
            break label$5;
           };
          }
          if ($1 >>> 0 > $9 >>> 0) {
           break label$6
          }
          $10 = $13;
          $1 = $12;
          if (($1 | 0) != ($8 | 0)) {
           continue label$7
          }
          break label$6;
         }
         $10 = $13;
         $1 = $12;
         if (($1 | 0) != ($8 | 0)) {
          continue label$7
         }
         break label$7;
        };
       }
       if (!$6) {
        break label$4
       }
       $11 = $5 + $6 | 0;
       $1 = $0 & 65535 | 0;
       $7 = 1;
       label$11 : while (1) {
        $10 = $5 + 1 | 0;
        label$12 : {
         label$13 : {
          $2 = HEAPU8[$5 >> 0] | 0;
          $13 = ($2 << 24 | 0) >> 24 | 0;
          if (($13 | 0) < (0 | 0)) {
           break label$13
          }
          $5 = $10;
          break label$12;
         }
         if (($10 | 0) == ($11 | 0)) {
          break label$3
         }
         $2 = ($13 & 127 | 0) << 8 | 0 | (HEAPU8[($5 + 1 | 0) >> 0] | 0) | 0;
         $5 = $5 + 2 | 0;
        }
        $1 = $1 - $2 | 0;
        if (($1 | 0) < (0 | 0)) {
         break label$4
        }
        $7 = $7 ^ 1 | 0;
        if (($5 | 0) != ($11 | 0)) {
         continue label$11
        }
        break label$4;
       };
      }
      $7 = 0;
     }
     return $7 & 1 | 0 | 0;
    }
    core__panicking__panic__h2d0bc53a963fb996(1060540 | 0);
    abort();
   }
   core__slice__slice_index_order_fail__ha75fa70416d3bc2f($10 | 0, $13 | 0);
   abort();
  }
  core__slice__slice_index_len_fail__h4544fc57f3d8a7a0($13 | 0, $4 | 0);
  abort();
 }
 
 function $core__iter__adapters__Map_I_2cF__20as_20core__iter__traits__iterator__Iterator___try_fold__hbea087a41bcf2d67($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $6 = 0, $5 = 0;
  $4 = global$0 - 64 | 0;
  global$0 = $4;
  HEAP32[($4 + 56 | 0) >> 2] = $1 + 8 | 0;
  HEAP32[($4 + 52 | 0) >> 2] = $3;
  HEAP32[($4 + 48 | 0) >> 2] = $2;
  $5 = $1 + 4 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : while (1) {
         $6 = HEAP32[$5 >> 2] | 0;
         $2 = HEAP32[$1 >> 2] | 0;
         if (($6 - $2 | 0) >>> 0 <= 12 >>> 0) {
          break label$6
         }
         HEAP32[$1 >> 2] = $2 + 4 | 0;
         $core__iter__adapters__Map_I_2cF__20as_20core__iter__traits__iterator__Iterator___try_fold___7b_7bclosure_7d_7d__he68c2ecc31764948($4 + 32 | 0 | 0, $4 + 48 | 0 | 0, $2 | 0);
         $3 = HEAP32[($4 + 32 | 0) >> 2] | 0;
         if ($3) {
          break label$5
         }
         $2 = HEAP32[$1 >> 2] | 0;
         HEAP32[$1 >> 2] = $2 + 4 | 0;
         $core__iter__adapters__Map_I_2cF__20as_20core__iter__traits__iterator__Iterator___try_fold___7b_7bclosure_7d_7d__he68c2ecc31764948($4 + 24 | 0 | 0, $4 + 48 | 0 | 0, $2 | 0);
         $3 = HEAP32[($4 + 24 | 0) >> 2] | 0;
         if ($3) {
          break label$4
         }
         $2 = HEAP32[$1 >> 2] | 0;
         HEAP32[$1 >> 2] = $2 + 4 | 0;
         $core__iter__adapters__Map_I_2cF__20as_20core__iter__traits__iterator__Iterator___try_fold___7b_7bclosure_7d_7d__he68c2ecc31764948($4 + 16 | 0 | 0, $4 + 48 | 0 | 0, $2 | 0);
         $3 = HEAP32[($4 + 16 | 0) >> 2] | 0;
         if ($3) {
          break label$3
         }
         $2 = HEAP32[$1 >> 2] | 0;
         HEAP32[$1 >> 2] = $2 + 4 | 0;
         $core__iter__adapters__Map_I_2cF__20as_20core__iter__traits__iterator__Iterator___try_fold___7b_7bclosure_7d_7d__he68c2ecc31764948($4 + 8 | 0 | 0, $4 + 48 | 0 | 0, $2 | 0);
         $3 = HEAP32[($4 + 8 | 0) >> 2] | 0;
         if (!$3) {
          continue label$7
         }
         break label$7;
        };
        $1 = HEAP32[($4 + 12 | 0) >> 2] | 0;
        break label$1;
       }
       $3 = 0;
       label$8 : {
        if (($2 | 0) == ($6 | 0)) {
         break label$8
        }
        label$9 : while (1) {
         HEAP32[$1 >> 2] = $2 + 4 | 0;
         $core__iter__adapters__Map_I_2cF__20as_20core__iter__traits__iterator__Iterator___try_fold___7b_7bclosure_7d_7d__he68c2ecc31764948($4 + 40 | 0 | 0, $4 + 48 | 0 | 0, $2 | 0);
         $2 = HEAP32[($4 + 40 | 0) >> 2] | 0;
         if ($2) {
          break label$2
         }
         $2 = HEAP32[$1 >> 2] | 0;
         if (($2 | 0) != (HEAP32[($1 + 4 | 0) >> 2] | 0 | 0)) {
          continue label$9
         }
         break label$9;
        };
       }
       break label$1;
      }
      $1 = HEAP32[($4 + 36 | 0) >> 2] | 0;
      break label$1;
     }
     $1 = HEAP32[($4 + 28 | 0) >> 2] | 0;
     break label$1;
    }
    $1 = HEAP32[($4 + 20 | 0) >> 2] | 0;
    break label$1;
   }
   $1 = HEAP32[($4 + 44 | 0) >> 2] | 0;
   $3 = $2;
  }
  HEAP32[($0 + 4 | 0) >> 2] = $1;
  HEAP32[$0 >> 2] = $3;
  global$0 = $4 + 64 | 0;
 }
 
 function $core__iter__adapters__Rev_I__20as_20core__iter__traits__iterator__Iterator___try_fold__hdc43748b75452749($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $9 = 0, $5 = 0, $7 = 0, $10 = 0, $8 = 0, $6 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        $5 = HEAP32[($1 + 4 | 0) >> 2] | 0;
        $6 = HEAP32[$1 >> 2] | 0;
        if (($5 - $6 | 0) >>> 0 < 4 >>> 0) {
         break label$6
        }
        $7 = 0;
        $8 = $1 + 4 | 0;
        label$7 : while (1) {
         $9 = $5 + $7 | 0;
         $10 = $9 + -1 | 0;
         HEAP32[$8 >> 2] = $10;
         if ((HEAPU8[$10 >> 0] | 0 | 0) != (48 | 0)) {
          break label$5
         }
         $10 = $9 + -2 | 0;
         HEAP32[$8 >> 2] = $10;
         if ((HEAPU8[$10 >> 0] | 0 | 0) != (48 | 0)) {
          break label$4
         }
         $10 = $9 + -3 | 0;
         HEAP32[$8 >> 2] = $10;
         if ((HEAPU8[$10 >> 0] | 0 | 0) != (48 | 0)) {
          break label$3
         }
         $9 = $9 + -4 | 0;
         HEAP32[$8 >> 2] = $9;
         if ((HEAPU8[$9 >> 0] | 0 | 0) != (48 | 0)) {
          break label$2
         }
         $7 = $7 + -4 | 0;
         if (($9 - $6 | 0) >>> 0 > 3 >>> 0) {
          continue label$7
         }
         break label$7;
        };
        $2 = $2 - $7 | 0;
        $5 = $5 + $7 | 0;
       }
       $9 = 0;
       if (($5 | 0) == ($6 | 0)) {
        break label$1
       }
       $8 = $1 + 4 | 0;
       label$8 : {
        label$9 : while (1) {
         $5 = $5 + -1 | 0;
         HEAP32[$8 >> 2] = $5;
         if ((HEAPU8[$5 >> 0] | 0 | 0) != (48 | 0)) {
          break label$8
         }
         $2 = $2 + 1 | 0;
         if (($6 | 0) != ($5 | 0)) {
          continue label$9
         }
         break label$1;
        };
       }
       $9 = 1;
       HEAP8[$4 >> 0] = 1;
       break label$1;
      }
      $9 = 1;
      HEAP8[$4 >> 0] = 1;
      $2 = $2 - $7 | 0;
      break label$1;
     }
     $9 = 1;
     HEAP8[$4 >> 0] = 1;
     $2 = ($2 - $7 | 0) + 1 | 0;
     break label$1;
    }
    $9 = 1;
    HEAP8[$4 >> 0] = 1;
    $2 = ($2 - $7 | 0) + 2 | 0;
    break label$1;
   }
   $9 = 1;
   HEAP8[$4 >> 0] = 1;
   $2 = ($2 - $7 | 0) + 3 | 0;
  }
  HEAP32[($0 + 4 | 0) >> 2] = $2;
  HEAP32[$0 >> 2] = $9;
 }
 
 function $core__iter__adapters__Rev_I__20as_20core__iter__traits__iterator__Iterator___try_fold__h59c037ba67c62cca($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $6 = 0, $4 = 0, $5 = 0;
  $3 = global$0 - 80 | 0;
  global$0 = $3;
  memcpy($3 + 40 | 0 | 0, $2 | 0, 36 | 0) | 0;
  $2 = $1 + 4 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : while (1) {
         $4 = HEAP32[$2 >> 2] | 0;
         $5 = HEAP32[$1 >> 2] | 0;
         if (($4 - $5 | 0) >>> 0 <= 576 >>> 0) {
          break label$6
         }
         $6 = $4 + -192 | 0;
         HEAP32[$2 >> 2] = $6;
         stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h95e6f43759c26b3c_1($3 + 24 | 0 | 0, $3 + 40 | 0 | 0, $6 | 0);
         $6 = HEAP32[($3 + 24 | 0) >> 2] | 0;
         if ($6) {
          break label$5
         }
         $6 = (HEAP32[$2 >> 2] | 0) + -192 | 0;
         HEAP32[$2 >> 2] = $6;
         stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h95e6f43759c26b3c_1($3 + 16 | 0 | 0, $3 + 40 | 0 | 0, $6 | 0);
         $6 = HEAP32[($3 + 16 | 0) >> 2] | 0;
         if ($6) {
          break label$4
         }
         $6 = (HEAP32[$2 >> 2] | 0) + -192 | 0;
         HEAP32[$2 >> 2] = $6;
         stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h95e6f43759c26b3c_1($3 + 8 | 0 | 0, $3 + 40 | 0 | 0, $6 | 0);
         $6 = HEAP32[($3 + 8 | 0) >> 2] | 0;
         if ($6) {
          break label$3
         }
         $6 = (HEAP32[$2 >> 2] | 0) + -192 | 0;
         HEAP32[$2 >> 2] = $6;
         stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h95e6f43759c26b3c_1($3 | 0, $3 + 40 | 0 | 0, $6 | 0);
         $6 = HEAP32[$3 >> 2] | 0;
         if (!$6) {
          continue label$7
         }
         break label$7;
        };
        $2 = HEAP32[($3 + 4 | 0) >> 2] | 0;
        break label$1;
       }
       $6 = 0;
       label$8 : {
        if (($5 | 0) == ($4 | 0)) {
         break label$8
        }
        $2 = $1 + 4 | 0;
        label$9 : while (1) {
         $4 = $4 + -192 | 0;
         HEAP32[$2 >> 2] = $4;
         stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h95e6f43759c26b3c_1($3 + 32 | 0 | 0, $3 + 40 | 0 | 0, $4 | 0);
         $4 = HEAP32[($3 + 32 | 0) >> 2] | 0;
         if ($4) {
          break label$2
         }
         $4 = HEAP32[$2 >> 2] | 0;
         if ((HEAP32[$1 >> 2] | 0 | 0) != ($4 | 0)) {
          continue label$9
         }
         break label$9;
        };
       }
       break label$1;
      }
      $2 = HEAP32[($3 + 28 | 0) >> 2] | 0;
      break label$1;
     }
     $2 = HEAP32[($3 + 20 | 0) >> 2] | 0;
     break label$1;
    }
    $2 = HEAP32[($3 + 12 | 0) >> 2] | 0;
    break label$1;
   }
   $2 = HEAP32[($3 + 36 | 0) >> 2] | 0;
   $6 = $4;
  }
  HEAP32[($0 + 4 | 0) >> 2] = $2;
  HEAP32[$0 >> 2] = $6;
  global$0 = $3 + 80 | 0;
 }
 
 function $core__iter__adapters__Rev_I__20as_20core__iter__traits__iterator__Iterator___try_fold__h7ee2ccd872470a9d($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $6 = 0, $4 = 0, $5 = 0;
  $3 = global$0 - 80 | 0;
  global$0 = $3;
  memcpy($3 + 40 | 0 | 0, $2 | 0, 36 | 0) | 0;
  $2 = $1 + 4 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : while (1) {
         $4 = HEAP32[$2 >> 2] | 0;
         $5 = HEAP32[$1 >> 2] | 0;
         if (($4 - $5 | 0) >>> 0 <= 60 >>> 0) {
          break label$6
         }
         $6 = $4 + -20 | 0;
         HEAP32[$2 >> 2] = $6;
         core__iter__traits__iterator__Iterator__try_for_each___7b_7bclosure_7d_7d__h579f9fc6382fbf1f($3 + 24 | 0 | 0, $3 + 40 | 0 | 0, $6 | 0);
         $6 = HEAP32[($3 + 24 | 0) >> 2] | 0;
         if ($6) {
          break label$5
         }
         $6 = (HEAP32[$2 >> 2] | 0) + -20 | 0;
         HEAP32[$2 >> 2] = $6;
         core__iter__traits__iterator__Iterator__try_for_each___7b_7bclosure_7d_7d__h579f9fc6382fbf1f($3 + 16 | 0 | 0, $3 + 40 | 0 | 0, $6 | 0);
         $6 = HEAP32[($3 + 16 | 0) >> 2] | 0;
         if ($6) {
          break label$4
         }
         $6 = (HEAP32[$2 >> 2] | 0) + -20 | 0;
         HEAP32[$2 >> 2] = $6;
         core__iter__traits__iterator__Iterator__try_for_each___7b_7bclosure_7d_7d__h579f9fc6382fbf1f($3 + 8 | 0 | 0, $3 + 40 | 0 | 0, $6 | 0);
         $6 = HEAP32[($3 + 8 | 0) >> 2] | 0;
         if ($6) {
          break label$3
         }
         $6 = (HEAP32[$2 >> 2] | 0) + -20 | 0;
         HEAP32[$2 >> 2] = $6;
         core__iter__traits__iterator__Iterator__try_for_each___7b_7bclosure_7d_7d__h579f9fc6382fbf1f($3 | 0, $3 + 40 | 0 | 0, $6 | 0);
         $6 = HEAP32[$3 >> 2] | 0;
         if (!$6) {
          continue label$7
         }
         break label$7;
        };
        $2 = HEAP32[($3 + 4 | 0) >> 2] | 0;
        break label$1;
       }
       $6 = 0;
       label$8 : {
        if (($5 | 0) == ($4 | 0)) {
         break label$8
        }
        $2 = $1 + 4 | 0;
        label$9 : while (1) {
         $4 = $4 + -20 | 0;
         HEAP32[$2 >> 2] = $4;
         core__iter__traits__iterator__Iterator__try_for_each___7b_7bclosure_7d_7d__h579f9fc6382fbf1f($3 + 32 | 0 | 0, $3 + 40 | 0 | 0, $4 | 0);
         $4 = HEAP32[($3 + 32 | 0) >> 2] | 0;
         if ($4) {
          break label$2
         }
         $4 = HEAP32[$2 >> 2] | 0;
         if ((HEAP32[$1 >> 2] | 0 | 0) != ($4 | 0)) {
          continue label$9
         }
         break label$9;
        };
       }
       break label$1;
      }
      $2 = HEAP32[($3 + 28 | 0) >> 2] | 0;
      break label$1;
     }
     $2 = HEAP32[($3 + 20 | 0) >> 2] | 0;
     break label$1;
    }
    $2 = HEAP32[($3 + 12 | 0) >> 2] | 0;
    break label$1;
   }
   $2 = HEAP32[($3 + 36 | 0) >> 2] | 0;
   $6 = $4;
  }
  HEAP32[($0 + 4 | 0) >> 2] = $2;
  HEAP32[$0 >> 2] = $6;
  global$0 = $3 + 80 | 0;
 }
 
 function core__num__dec2flt__parse__parse_exp__h25cffe421291b6f9($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $7 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $9$hi = 0, i64toi32_i32$2 = 0, $8 = 0, $9 = 0, $58 = 0, $58$hi = 0, $65 = 0, $65$hi = 0, $87$hi = 0, $90 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (!$6) {
         break label$6
        }
        label$7 : {
         label$8 : {
          label$9 : {
           $7 = HEAPU8[$5 >> 0] | 0;
           if (($7 | 0) == (43 | 0)) {
            break label$9
           }
           $8 = 1;
           if (($7 | 0) == (45 | 0)) {
            break label$8
           }
           $8 = 0;
           break label$7;
          }
          $8 = 0;
         }
         $6 = $6 + -1 | 0;
         if (!$6) {
          break label$6
         }
         $5 = $5 + 1 | 0;
        }
        $7 = 0;
        label$10 : {
         label$11 : while (1) {
          if ((((HEAPU8[($5 + $7 | 0) >> 0] | 0) + -48 | 0) & 255 | 0) >>> 0 > 9 >>> 0) {
           break label$10
          }
          $7 = $7 + 1 | 0;
          if ($7 >>> 0 < $6 >>> 0) {
           continue label$11
          }
          break label$11;
         };
        }
        if ($7 >>> 0 > $6 >>> 0) {
         break label$1
        }
        if (($6 | 0) != ($7 | 0)) {
         break label$5
        }
        label$12 : while (1) {
         if ((HEAPU8[$5 >> 0] | 0 | 0) != (48 | 0)) {
          break label$4
         }
         $5 = $5 + 1 | 0;
         $6 = $6 + -1 | 0;
         if ($6) {
          continue label$12
         }
         break label$12;
        };
        i64toi32_i32$0 = 0;
        $9 = 0;
        $9$hi = i64toi32_i32$0;
        break label$3;
       }
       i64toi32_i32$1 = $0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 3;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       return;
      }
      i64toi32_i32$1 = $0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 3;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      return;
     }
     label$13 : {
      if ($6 >>> 0 <= 17 >>> 0) {
       break label$13
      }
      if (!$8) {
       break label$2
      }
      i64toi32_i32$1 = $0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 2;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      return;
     }
     i64toi32_i32$0 = 0;
     $9 = 0;
     $9$hi = i64toi32_i32$0;
     $7 = 0;
     label$14 : while (1) {
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$1 = __wasm_i64_mul($9 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $58 = i64toi32_i32$1;
      $58$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = (HEAPU8[($5 + $7 | 0) >> 0] | 0) + -48 | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 255;
      i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      $65 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $65$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $58$hi;
      i64toi32_i32$0 = $58;
      i64toi32_i32$2 = $65$hi;
      i64toi32_i32$3 = $65;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $9 = i64toi32_i32$4;
      $9$hi = i64toi32_i32$5;
      $7 = $7 + 1 | 0;
      if (($6 | 0) != ($7 | 0)) {
       continue label$14
      }
      break label$14;
     };
    }
    i64toi32_i32$0 = $0;
    i64toi32_i32$5 = 0;
    HEAP32[i64toi32_i32$0 >> 2] = 0;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$5;
    HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = $4;
    HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = $3;
    HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = $2;
    HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = $1;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$3 = $9;
    i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
    i64toi32_i32$4 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$0 = $8;
    i64toi32_i32$4 = $87$hi;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$3 = i64toi32_i32$0 ? i64toi32_i32$2 : i64toi32_i32$3;
    i64toi32_i32$5 = i64toi32_i32$0 ? i64toi32_i32$4 : i64toi32_i32$1;
    $90 = i64toi32_i32$3;
    i64toi32_i32$3 = $0;
    HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $90;
    HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$5;
    return;
   }
   i64toi32_i32$3 = $0;
   i64toi32_i32$5 = 0;
   HEAP32[i64toi32_i32$3 >> 2] = 1;
   HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$5;
   return;
  }
  core__slice__slice_index_len_fail__h4544fc57f3d8a7a0($7 | 0, $6 | 0);
  abort();
 }
 
 function $_mut_20W_20as_20core__fmt__Write___write_char__h1c21fdd05686cba7($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  global$0 = $2;
  $0 = HEAP32[$0 >> 2] | 0;
  label$1 : {
   label$2 : {
    if ($1 >>> 0 >= 128 >>> 0) {
     break label$2
    }
    label$3 : {
     $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     if (($3 | 0) != (HEAP32[($0 + 4 | 0) >> 2] | 0 | 0)) {
      break label$3
     }
     alloc__vec__Vec_T___reserve__hc0f95e3f359a8226($0 | 0, 1 | 0);
     $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    }
    HEAP8[((HEAP32[$0 >> 2] | 0) + $3 | 0) >> 0] = $1;
    $0 = $0 + 8 | 0;
    HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1 | 0;
    break label$1;
   }
   HEAP32[($2 + 12 | 0) >> 2] = 0;
   label$4 : {
    label$5 : {
     if ($1 >>> 0 >= 2048 >>> 0) {
      break label$5
     }
     HEAP8[($2 + 13 | 0) >> 0] = $1 & 63 | 0 | 128 | 0;
     HEAP8[($2 + 12 | 0) >> 0] = ($1 >>> 6 | 0) & 31 | 0 | 192 | 0;
     $1 = 2;
     break label$4;
    }
    label$6 : {
     if ($1 >>> 0 >= 65536 >>> 0) {
      break label$6
     }
     HEAP8[($2 + 14 | 0) >> 0] = $1 & 63 | 0 | 128 | 0;
     HEAP8[($2 + 13 | 0) >> 0] = ($1 >>> 6 | 0) & 63 | 0 | 128 | 0;
     HEAP8[($2 + 12 | 0) >> 0] = ($1 >>> 12 | 0) & 15 | 0 | 224 | 0;
     $1 = 3;
     break label$4;
    }
    HEAP8[($2 + 15 | 0) >> 0] = $1 & 63 | 0 | 128 | 0;
    HEAP8[($2 + 12 | 0) >> 0] = $1 >>> 18 | 0 | 240 | 0;
    HEAP8[($2 + 14 | 0) >> 0] = ($1 >>> 6 | 0) & 63 | 0 | 128 | 0;
    HEAP8[($2 + 13 | 0) >> 0] = ($1 >>> 12 | 0) & 63 | 0 | 128 | 0;
    $1 = 4;
   }
   alloc__vec__Vec_T___reserve__hc0f95e3f359a8226($0 | 0, $1 | 0);
   $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   HEAP32[($0 + 8 | 0) >> 2] = $3 + $1 | 0;
   memcpy($3 + (HEAP32[$0 >> 2] | 0) | 0 | 0, $2 + 12 | 0 | 0, $1 | 0) | 0;
  }
  global$0 = $2 + 16 | 0;
  return 0 | 0;
 }
 
 function stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__hb58137c1aa969abc($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4 = 0, $6 = 0, $5 = 0, $7 = 0, $7$hi = 0, $24 = 0;
  $3 = global$0 - 64 | 0;
  global$0 = $3;
  $4 = HEAP32[$2 >> 2] | 0;
  $5 = HEAP32[($2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
  $7 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1 + 12 | 0) >> 2] | 0;
  HEAP32[($3 + 56 | 0) >> 2] = HEAP32[($1 + 16 | 0) >> 2] | 0;
  $24 = i64toi32_i32$1;
  i64toi32_i32$1 = $3;
  HEAP32[($3 + 48 | 0) >> 2] = $24;
  HEAP32[($3 + 52 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$1 = $3;
  HEAP32[($3 + 40 | 0) >> 2] = $7;
  HEAP32[($3 + 44 | 0) >> 2] = i64toi32_i32$0;
  $6 = $4 + Math_imul($5, 192) | 0;
  $1 = $4;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : while (1) {
         if (($6 - $1 | 0) >>> 0 <= 576 >>> 0) {
          break label$6
         }
         stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h4070443ad7cd95b9($3 + 24 | 0 | 0, $3 + 40 | 0 | 0, $1 | 0);
         $2 = HEAP32[($3 + 24 | 0) >> 2] | 0;
         if ($2) {
          break label$5
         }
         stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h4070443ad7cd95b9($3 + 16 | 0 | 0, $3 + 40 | 0 | 0, $1 + 192 | 0 | 0);
         $2 = HEAP32[($3 + 16 | 0) >> 2] | 0;
         if ($2) {
          break label$4
         }
         stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h4070443ad7cd95b9($3 + 8 | 0 | 0, $3 + 40 | 0 | 0, $1 + 384 | 0 | 0);
         $2 = HEAP32[($3 + 8 | 0) >> 2] | 0;
         if ($2) {
          break label$3
         }
         stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h4070443ad7cd95b9($3 | 0, $3 + 40 | 0 | 0, $1 + 576 | 0 | 0);
         $1 = $1 + 768 | 0;
         $2 = HEAP32[$3 >> 2] | 0;
         if (!$2) {
          continue label$7
         }
         break label$7;
        };
        $1 = HEAP32[($3 + 4 | 0) >> 2] | 0;
        break label$1;
       }
       $6 = $4 + Math_imul($5, 192) | 0;
       label$8 : while (1) {
        if (($6 | 0) == ($1 | 0)) {
         break label$2
        }
        stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__h4070443ad7cd95b9($3 + 32 | 0 | 0, $3 + 40 | 0 | 0, $1 | 0);
        $1 = $1 + 192 | 0;
        $2 = HEAP32[($3 + 32 | 0) >> 2] | 0;
        if (!$2) {
         continue label$8
        }
        break label$8;
       };
       $1 = HEAP32[($3 + 36 | 0) >> 2] | 0;
       break label$1;
      }
      $1 = HEAP32[($3 + 28 | 0) >> 2] | 0;
      break label$1;
     }
     $1 = HEAP32[($3 + 20 | 0) >> 2] | 0;
     break label$1;
    }
    $1 = HEAP32[($3 + 12 | 0) >> 2] | 0;
    break label$1;
   }
   $2 = 0;
  }
  HEAP32[($0 + 4 | 0) >> 2] = $1;
  HEAP32[$0 >> 2] = $2;
  global$0 = $3 + 64 | 0;
 }
 
 function stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d__h26cc7e6a0697da95($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4 = 0, $6 = 0, $5 = 0, $7 = 0, $7$hi = 0, $24 = 0;
  $3 = global$0 - 64 | 0;
  global$0 = $3;
  $4 = HEAP32[$2 >> 2] | 0;
  $5 = HEAP32[($2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
  $7 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1 + 12 | 0) >> 2] | 0;
  HEAP32[($3 + 56 | 0) >> 2] = HEAP32[($1 + 16 | 0) >> 2] | 0;
  $24 = i64toi32_i32$1;
  i64toi32_i32$1 = $3;
  HEAP32[($3 + 48 | 0) >> 2] = $24;
  HEAP32[($3 + 52 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$1 = $3;
  HEAP32[($3 + 40 | 0) >> 2] = $7;
  HEAP32[($3 + 44 | 0) >> 2] = i64toi32_i32$0;
  $6 = $4 + Math_imul($5, 192) | 0;
  $1 = $4;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : while (1) {
         if (($6 - $1 | 0) >>> 0 <= 576 >>> 0) {
          break label$6
         }
         stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__hcb4d614610713971($3 + 24 | 0 | 0, $3 + 40 | 0 | 0, $1 | 0);
         $2 = HEAP32[($3 + 24 | 0) >> 2] | 0;
         if ($2) {
          break label$5
         }
         stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__hcb4d614610713971($3 + 16 | 0 | 0, $3 + 40 | 0 | 0, $1 + 192 | 0 | 0);
         $2 = HEAP32[($3 + 16 | 0) >> 2] | 0;
         if ($2) {
          break label$4
         }
         stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__hcb4d614610713971($3 + 8 | 0 | 0, $3 + 40 | 0 | 0, $1 + 384 | 0 | 0);
         $2 = HEAP32[($3 + 8 | 0) >> 2] | 0;
         if ($2) {
          break label$3
         }
         stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__hcb4d614610713971($3 | 0, $3 + 40 | 0 | 0, $1 + 576 | 0 | 0);
         $1 = $1 + 768 | 0;
         $2 = HEAP32[$3 >> 2] | 0;
         if (!$2) {
          continue label$7
         }
         break label$7;
        };
        $1 = HEAP32[($3 + 4 | 0) >> 2] | 0;
        break label$1;
       }
       $6 = $4 + Math_imul($5, 192) | 0;
       label$8 : while (1) {
        if (($6 | 0) == ($1 | 0)) {
         break label$2
        }
        stretch__algo___impl_20stretch__forest__Forest___compute_internal___7b_7bclosure_7d_7d___7b_7bclosure_7d_7d__hcb4d614610713971($3 + 32 | 0 | 0, $3 + 40 | 0 | 0, $1 | 0);
        $1 = $1 + 192 | 0;
        $2 = HEAP32[($3 + 32 | 0) >> 2] | 0;
        if (!$2) {
         continue label$8
        }
        break label$8;
       };
       $1 = HEAP32[($3 + 36 | 0) >> 2] | 0;
       break label$1;
      }
      $1 = HEAP32[($3 + 28 | 0) >> 2] | 0;
      break label$1;
     }
     $1 = HEAP32[($3 + 20 | 0) >> 2] | 0;
     break label$1;
    }
    $1 = HEAP32[($3 + 12 | 0) >> 2] | 0;
    break label$1;
   }
   $2 = 0;
  }
  HEAP32[($0 + 4 | 0) >> 2] = $1;
  HEAP32[$0 >> 2] = $2;
  global$0 = $3 + 64 | 0;
 }
 
 function dlmalloc__dlmalloc__Dlmalloc__insert_large_chunk__h2b5800089452f7a4($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0, $6 = 0;
  label$1 : {
   label$2 : {
    $3 = $2 >>> 8 | 0;
    if (!$3) {
     break label$2
    }
    $4 = 31;
    if ($2 >>> 0 > 16777215 >>> 0) {
     break label$1
    }
    $4 = Math_clz32($3);
    $4 = ($2 >>> ((38 - $4 | 0) & 31 | 0) | 0) & 1 | 0 | ((31 - $4 | 0) << 1 | 0) | 0;
    break label$1;
   }
   $4 = 0;
  }
  HEAP32[($1 + 16 | 0) >> 2] = 0;
  HEAP32[($1 + 20 | 0) >> 2] = 0;
  HEAP32[($1 + 28 | 0) >> 2] = $4;
  $3 = ($0 + ($4 << 2 | 0) | 0) + 272 | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       $6 = 1 << ($4 & 31 | 0) | 0;
       if (!($5 & $6 | 0)) {
        break label$7
       }
       $3 = HEAP32[$3 >> 2] | 0;
       if (((HEAP32[($3 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) != ($2 | 0)) {
        break label$6
       }
       $4 = $3;
       break label$5;
      }
      HEAP32[($0 + 4 | 0) >> 2] = $5 | $6 | 0;
      HEAP32[$3 >> 2] = $1;
      HEAP32[($1 + 24 | 0) >> 2] = $3;
      break label$3;
     }
     $0 = $2 << (($4 | 0) == (31 | 0) ? 0 : (25 - ($4 >>> 1 | 0) | 0) & 31 | 0) | 0;
     label$8 : while (1) {
      $5 = ($3 + (($0 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0;
      $4 = HEAP32[$5 >> 2] | 0;
      if (!$4) {
       break label$4
      }
      $0 = $0 << 1 | 0;
      $3 = $4;
      if (((HEAP32[($4 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) != ($2 | 0)) {
       continue label$8
      }
      break label$8;
     };
    }
    $0 = HEAP32[($4 + 8 | 0) >> 2] | 0;
    HEAP32[($0 + 12 | 0) >> 2] = $1;
    HEAP32[($4 + 8 | 0) >> 2] = $1;
    HEAP32[($1 + 24 | 0) >> 2] = 0;
    HEAP32[($1 + 12 | 0) >> 2] = $4;
    HEAP32[($1 + 8 | 0) >> 2] = $0;
    return;
   }
   HEAP32[$5 >> 2] = $1;
   HEAP32[($1 + 24 | 0) >> 2] = $3;
  }
  HEAP32[($1 + 12 | 0) >> 2] = $1;
  HEAP32[($1 + 8 | 0) >> 2] = $1;
 }
 
 function stretch_layout__Node__compute_layout__h482197764c8e34d4($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $4 = 0, $5 = 0, $23 = 0, $26 = 0, $6 = 0, $7 = Math_fround(0), $72 = 0, $75 = 0, $95 = 0, $98 = 0;
  $3 = global$0 - 80 | 0;
  global$0 = $3;
  label$1 : {
   label$2 : {
    $4 = HEAP32[$1 >> 2] | 0;
    if (HEAP32[($4 + 8 | 0) >> 2] | 0) {
     break label$2
    }
    $5 = $4 + 8 | 0;
    HEAP32[$5 >> 2] = -1;
    i64toi32_i32$2 = $1 + 12 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $23 = i64toi32_i32$0;
    i64toi32_i32$0 = ($3 + 40 | 0) + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $23;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    $26 = i64toi32_i32$1;
    i64toi32_i32$1 = $3;
    HEAP32[($3 + 40 | 0) >> 2] = $26;
    HEAP32[($3 + 44 | 0) >> 2] = i64toi32_i32$0;
    stretch_layout__get_f32__h0d76de51d01f671a($3 + 8 | 0 | 0, $2 | 0, 1049029 | 0, 5 | 0);
    $6 = HEAP32[($3 + 8 | 0) >> 2] | 0;
    $7 = Math_fround(HEAPF32[($3 + 12 | 0) >> 2]);
    stretch_layout__get_f32__h0d76de51d01f671a($3 | 0, $2 | 0, 1049034 | 0, 6 | 0);
    HEAPF32[(($3 + 56 | 0) + 12 | 0) >> 2] = Math_fround(HEAPF32[($3 + 4 | 0) >> 2]);
    HEAPF32[($3 + 60 | 0) >> 2] = $7;
    HEAP32[($3 + 56 | 0) >> 2] = ($6 | 0) != (1 | 0);
    HEAP32[($3 + 64 | 0) >> 2] = (HEAP32[$3 >> 2] | 0 | 0) != (1 | 0);
    stretch__node__Stretch__compute_layout__h7ee17343a79460e6($3 + 16 | 0 | 0, $4 + 16 | 0 | 0, $3 + 40 | 0 | 0, $3 + 56 | 0 | 0);
    if ((HEAP32[($3 + 16 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$1
    }
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1 | 0;
    $2 = $1 + 4 | 0;
    i64toi32_i32$2 = $2 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $72 = i64toi32_i32$0;
    i64toi32_i32$0 = ($3 + 56 | 0) + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $72;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $75 = i64toi32_i32$1;
    i64toi32_i32$1 = $3;
    HEAP32[($3 + 56 | 0) >> 2] = $75;
    HEAP32[($3 + 60 | 0) >> 2] = i64toi32_i32$0;
    stretch_layout__Layout__new__h8bab3a099279ba8b($0 | 0, $1 | 0, $3 + 56 | 0 | 0);
    global$0 = $3 + 80 | 0;
    return;
   }
   core__result__unwrap_failed__h2450ec3de4884319(1048576 | 0, 16 | 0);
   abort();
  }
  HEAP32[(($3 + 56 | 0) + 16 | 0) >> 2] = HEAP32[(($3 + 16 | 0) + 16 | 0) >> 2] | 0;
  i64toi32_i32$2 = ($3 + 16 | 0) + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $95 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3 + 56 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $95;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = HEAP32[($3 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3 + 20 | 0) >> 2] | 0;
  $98 = i64toi32_i32$1;
  i64toi32_i32$1 = $3;
  HEAP32[($3 + 56 | 0) >> 2] = $98;
  HEAP32[($3 + 60 | 0) >> 2] = i64toi32_i32$0;
  core__result__unwrap_failed__h8a62896efab79dcd(1048696 | 0, 43 | 0, $3 + 56 | 0 | 0);
  abort();
 }
 
 function core__num__bignum__Big32x40__mul_digits__mul_inner__h022b103c0ead7ba4($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $12 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $11 = 0, $13 = 0, $15$hi = 0, $9 = 0, $10 = 0, $15 = 0, $8 = 0, $14$hi = 0, $31 = 0, $5 = 0, $6 = 0, $7 = 0, $14 = 0, $54 = 0, $57 = 0, $57$hi = 0, $58$hi = 0, $60$hi = 0, $32 = 0, $62 = 0, $62$hi = 0;
  $5 = $4 << 2 | 0;
  $6 = $4 + 1 | 0;
  $7 = $1 + ($2 << 2 | 0) | 0;
  $8 = 0;
  $9 = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     $11 = $0 + ($8 << 2 | 0) | 0;
     $12 = $1;
     label$4 : {
      label$5 : while (1) {
       $10 = $8;
       $2 = $11;
       if (($12 | 0) == ($7 | 0)) {
        break label$4
       }
       $11 = $2 + 4 | 0;
       $8 = $10 + 1 | 0;
       $13 = HEAP32[$12 >> 2] | 0;
       $1 = $12 + 4 | 0;
       $12 = $1;
       if (!$13) {
        continue label$5
       }
       break label$5;
      };
      label$6 : {
       label$7 : {
        if (!$4) {
         break label$7
        }
        i64toi32_i32$0 = 0;
        $14 = $13;
        $14$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        $15 = 0;
        $15$hi = i64toi32_i32$0;
        $13 = $5;
        $12 = $10;
        $11 = $3;
        label$8 : while (1) {
         if ($12 >>> 0 > 39 >>> 0) {
          break label$2
         }
         $54 = $2;
         i64toi32_i32$0 = $15$hi;
         i64toi32_i32$2 = $2;
         i64toi32_i32$0 = HEAP32[$2 >> 2] | 0;
         i64toi32_i32$1 = 0;
         $57 = i64toi32_i32$0;
         $57$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $15$hi;
         i64toi32_i32$2 = $15;
         i64toi32_i32$0 = $57$hi;
         i64toi32_i32$3 = $57;
         i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
         i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
         if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
         }
         $58$hi = i64toi32_i32$5;
         i64toi32_i32$1 = $11;
         i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
         i64toi32_i32$2 = 0;
         $60$hi = i64toi32_i32$2;
         i64toi32_i32$2 = $14$hi;
         i64toi32_i32$2 = $60$hi;
         $32 = i64toi32_i32$5;
         i64toi32_i32$5 = $14$hi;
         i64toi32_i32$5 = __wasm_i64_mul($32 | 0, i64toi32_i32$2 | 0, $14 | 0, i64toi32_i32$5 | 0) | 0;
         i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
         $62 = i64toi32_i32$5;
         $62$hi = i64toi32_i32$2;
         i64toi32_i32$2 = $58$hi;
         i64toi32_i32$1 = i64toi32_i32$4;
         i64toi32_i32$5 = $62$hi;
         i64toi32_i32$3 = $62;
         i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
         i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
         if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
         }
         $15 = i64toi32_i32$0;
         $15$hi = i64toi32_i32$4;
         HEAP32[$54 >> 2] = i64toi32_i32$0;
         i64toi32_i32$2 = i64toi32_i32$0;
         i64toi32_i32$1 = 0;
         i64toi32_i32$3 = 32;
         i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = 0;
          $31 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
         } else {
          i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
          $31 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
         }
         $15 = $31;
         $15$hi = i64toi32_i32$1;
         $2 = $2 + 4 | 0;
         $12 = $12 + 1 | 0;
         $11 = $11 + 4 | 0;
         $13 = $13 + -4 | 0;
         if ($13) {
          continue label$8
         }
         break label$8;
        };
        $2 = $4;
        i64toi32_i32$1 = $15$hi;
        $12 = $15;
        if (!$12) {
         break label$6
        }
        $2 = $10 + $4 | 0;
        if ($2 >>> 0 > 39 >>> 0) {
         break label$1
        }
        HEAP32[($0 + ($2 << 2 | 0) | 0) >> 2] = $12;
        $2 = $6;
        break label$6;
       }
       $2 = 0;
      }
      $2 = $2 + $10 | 0;
      $9 = $9 >>> 0 < $2 >>> 0 ? $2 : $9;
      continue label$3;
     }
     break label$3;
    };
    return $9 | 0;
   }
   core__panicking__panic_bounds_check__h0537ade040df571e(1066216 | 0, $12 | 0, 40 | 0);
   abort();
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1066232 | 0, $2 | 0, 40 | 0);
  abort();
 }
 
 function dlmalloc__dlmalloc__Dlmalloc__unlink_large_chunk__h173f6e2d56218081($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $3 = 0, $5 = 0, $2 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = HEAP32[($1 + 24 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $3 = HEAP32[($1 + 12 | 0) >> 2] | 0;
      if (($3 | 0) == ($1 | 0)) {
       break label$4
      }
      $4 = HEAP32[($1 + 8 | 0) >> 2] | 0;
      HEAP32[($4 + 12 | 0) >> 2] = $3;
      HEAP32[($3 + 8 | 0) >> 2] = $4;
      if ($2) {
       break label$3
      }
      break label$2;
     }
     label$5 : {
      $3 = $1 + 20 | 0;
      $5 = HEAP32[$3 >> 2] | 0;
      $4 = HEAP32[($1 + ($5 ? 20 : 16) | 0) >> 2] | 0;
      if (!$4) {
       break label$5
      }
      $5 = $5 ? $3 : $1 + 16 | 0;
      label$6 : {
       label$7 : while (1) {
        $6 = $5;
        label$8 : {
         $3 = $4;
         $5 = $3 + 20 | 0;
         $4 = HEAP32[$5 >> 2] | 0;
         if (!$4) {
          break label$8
         }
         if ($4) {
          continue label$7
         }
         break label$6;
        }
        $5 = $3 + 16 | 0;
        $4 = HEAP32[($3 + 16 | 0) >> 2] | 0;
        if ($4) {
         continue label$7
        }
        break label$7;
       };
      }
      HEAP32[$6 >> 2] = 0;
      if ($2) {
       break label$3
      }
      break label$2;
     }
     $3 = 0;
     if (!$2) {
      break label$2
     }
    }
    label$9 : {
     label$10 : {
      $4 = ($0 + ((HEAP32[($1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) + 272 | 0;
      if ((HEAP32[$4 >> 2] | 0 | 0) == ($1 | 0)) {
       break label$10
      }
      HEAP32[($2 + ((HEAP32[($2 + 16 | 0) >> 2] | 0 | 0) == ($1 | 0) ? 16 : 20) | 0) >> 2] = $3;
      if ($3) {
       break label$9
      }
      break label$2;
     }
     HEAP32[$4 >> 2] = $3;
     if (!$3) {
      break label$1
     }
    }
    HEAP32[($3 + 24 | 0) >> 2] = $2;
    label$11 : {
     $4 = HEAP32[($1 + 16 | 0) >> 2] | 0;
     if (!$4) {
      break label$11
     }
     HEAP32[($3 + 16 | 0) >> 2] = $4;
     HEAP32[($4 + 24 | 0) >> 2] = $3;
    }
    $4 = HEAP32[($1 + 20 | 0) >> 2] | 0;
    if (!$4) {
     break label$2
    }
    HEAP32[($3 + 20 | 0) >> 2] = $4;
    HEAP32[($4 + 24 | 0) >> 2] = $3;
   }
   return;
  }
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = (HEAP32[($0 + 4 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, HEAP32[($1 + 28 | 0) >> 2] | 0 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
 }
 
 function core__fmt__num__imp__fmt_u64__h529ebc247831d1ee($0, $0$hi, $1, $2) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$2 = 0, $4 = 0, $5 = 0, i64toi32_i32$0 = 0, $3 = 0, i64toi32_i32$1 = 0, $8 = 0, i64toi32_i32$3 = 0, $8$hi = 0, i64toi32_i32$5 = 0, $6 = 0, $7 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $24 = 0, $24$hi = 0;
  $3 = global$0 - 48 | 0;
  global$0 = $3;
  $4 = 39;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 1e4;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    $4 = 39;
    label$3 : while (1) {
     $5 = ($3 + 9 | 0) + $4 | 0;
     i64toi32_i32$2 = $0$hi;
     i64toi32_i32$0 = 0;
     i64toi32_i32$0 = __wasm_i64_udiv($0 | 0, i64toi32_i32$2 | 0, 1e4 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $8 = i64toi32_i32$0;
     $8$hi = i64toi32_i32$2;
     i64toi32_i32$0 = 0;
     i64toi32_i32$0 = __wasm_i64_mul($8 | 0, i64toi32_i32$2 | 0, 1e4 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $24 = i64toi32_i32$0;
     $24$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $0$hi;
     i64toi32_i32$3 = $0;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$1 = $24;
     i64toi32_i32$5 = ($0 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
     $6 = $0 - i64toi32_i32$1 | 0;
     $7 = ($6 >>> 0) / (100 >>> 0) | 0;
     $18 = ($7 << 1 | 0) + 1061050 | 0;
     $19 = $5 + -4 | 0;
     $20 = HEAPU8[$18 >> 0] | 0 | ((HEAPU8[($18 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
     HEAP8[$19 >> 0] = $20;
     HEAP8[($19 + 1 | 0) >> 0] = $20 >>> 8 | 0;
     $21 = (($6 - Math_imul($7, 100) | 0) << 1 | 0) + 1061050 | 0;
     $22 = $5 + -2 | 0;
     $23 = HEAPU8[$21 >> 0] | 0 | ((HEAPU8[($21 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
     HEAP8[$22 >> 0] = $23;
     HEAP8[($22 + 1 | 0) >> 0] = $23 >>> 8 | 0;
     $4 = $4 + -4 | 0;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$2 = $0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 99999999;
     $5 = $0$hi >>> 0 > i64toi32_i32$3 >>> 0 | (($0$hi | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = $8$hi;
     $0 = $8;
     $0$hi = i64toi32_i32$2;
     if ($5) {
      continue label$3
     }
     break label$1;
    };
   }
   i64toi32_i32$2 = $0$hi;
   $8 = $0;
   $8$hi = i64toi32_i32$2;
  }
  label$4 : {
   i64toi32_i32$2 = $8$hi;
   $5 = $8;
   if (($5 | 0) < (100 | 0)) {
    break label$4
   }
   $4 = $4 + -2 | 0;
   i64toi32_i32$2 = $8$hi;
   $5 = $8;
   $5 = (($5 & 65535 | 0) >>> 0) / (100 >>> 0) | 0;
   $25 = ((($8 - Math_imul($5, 100) | 0) & 65535 | 0) << 1 | 0) + 1061050 | 0;
   $26 = ($3 + 9 | 0) + $4 | 0;
   $27 = HEAPU8[$25 >> 0] | 0 | ((HEAPU8[($25 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
   HEAP8[$26 >> 0] = $27;
   HEAP8[($26 + 1 | 0) >> 0] = $27 >>> 8 | 0;
  }
  label$5 : {
   label$6 : {
    if (($5 | 0) >= (10 | 0)) {
     break label$6
    }
    $4 = $4 + -1 | 0;
    HEAP8[(($3 + 9 | 0) + $4 | 0) >> 0] = $5 + 48 | 0;
    break label$5;
   }
   $4 = $4 + -2 | 0;
   $28 = ($5 << 1 | 0) + 1061050 | 0;
   $29 = ($3 + 9 | 0) + $4 | 0;
   $30 = HEAPU8[$28 >> 0] | 0 | ((HEAPU8[($28 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
   HEAP8[$29 >> 0] = $30;
   HEAP8[($29 + 1 | 0) >> 0] = $30 >>> 8 | 0;
  }
  $4 = core__fmt__Formatter__pad_integral__h253f31941eb77fc7($2 | 0, $1 | 0, 1053644 | 0, 0 | 0, ($3 + 9 | 0) + $4 | 0 | 0, 39 - $4 | 0 | 0) | 0;
  global$0 = $3 + 48 | 0;
  return $4 | 0;
 }
 
 function core__num__dec2flt__dec2flt__h61a64678c8bb0200($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $6 = Math_fround(0), $4 = 0, $5 = 0, $49 = 0, $54 = 0, $57 = 0;
  $3 = global$0 - 64 | 0;
  global$0 = $3;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         if (!$2) {
          break label$7
         }
         core__num__dec2flt__extract_sign__hcb13026d4c78d8d0($3 | 0, $1 | 0, $2 | 0);
         $1 = HEAPU8[$3 >> 0] | 0;
         $4 = HEAP32[($3 + 4 | 0) >> 2] | 0;
         $5 = HEAP32[($3 + 8 | 0) >> 2] | 0;
         core__num__dec2flt__parse__parse_decimal__h0e8f7547838b6a7c($3 | 0, $4 | 0, $5 | 0);
         $6 = Math_fround(infinity);
         $2 = HEAP32[$3 >> 2] | 0;
         if (($2 | 0) == (1 | 0)) {
          break label$2
         }
         if (($2 | 0) == (2 | 0)) {
          break label$6
         }
         if (($2 | 0) != (3 | 0)) {
          break label$5
         }
         if (core__slice___impl_20core__cmp__PartialEq__5bB_5d__20for_20_5bA_5d___eq__hd7ee0fb818c13258($4 | 0, $5 | 0, 1049868 | 0, 3 | 0) | 0) {
          break label$2
         }
         $6 = Math_fround(nan);
         if (core__slice___impl_20core__cmp__PartialEq__5bB_5d__20for_20_5bA_5d___eq__hd7ee0fb818c13258($4 | 0, $5 | 0, 1049871 | 0, 3 | 0) | 0) {
          break label$2
         }
         $2 = core__num__dec2flt__pfe_invalid__h9f0729b42d956f16() | 0;
         break label$4;
        }
        $2 = core__num__dec2flt__pfe_empty__h086deb8fdff83edd() | 0;
        HEAP8[$0 >> 0] = 1;
        HEAP8[($0 + 1 | 0) >> 0] = $2;
        break label$1;
       }
       $6 = Math_fround(0.0);
       break label$2;
      }
      i64toi32_i32$2 = $3 + 24 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $49 = i64toi32_i32$0;
      i64toi32_i32$0 = ($3 + 40 | 0) + 16 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $49;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $3 + 16 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $54 = i64toi32_i32$1;
      i64toi32_i32$1 = $3 + 48 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $54;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $3;
      i64toi32_i32$0 = HEAP32[($3 + 8 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($3 + 12 | 0) >> 2] | 0;
      $57 = i64toi32_i32$0;
      i64toi32_i32$0 = $3;
      HEAP32[($3 + 40 | 0) >> 2] = $57;
      HEAP32[($3 + 44 | 0) >> 2] = i64toi32_i32$1;
      core__num__dec2flt__convert__h66adbcaef35cbf62($3 + 32 | 0 | 0, $3 + 40 | 0 | 0);
      $2 = HEAP32[($3 + 32 | 0) >> 2] | 0;
      if (($2 & 255 | 0 | 0) != (1 | 0)) {
       break label$3
      }
      $2 = ($2 & 65280 | 0 | 0) != (0 | 0);
     }
     HEAP8[$0 >> 0] = 1;
     HEAP8[($0 + 1 | 0) >> 0] = $2;
     break label$1;
    }
    $6 = Math_fround(HEAPF32[($3 + 36 | 0) >> 2]);
   }
   label$8 : {
    if (($1 & 255 | 0 | 0) != (1 | 0)) {
     break label$8
    }
    HEAP8[$0 >> 0] = 0;
    HEAPF32[($0 + 4 | 0) >> 2] = Math_fround(-$6);
    break label$1;
   }
   HEAP8[$0 >> 0] = 0;
   HEAPF32[($0 + 4 | 0) >> 2] = $6;
  }
  global$0 = $3 + 64 | 0;
 }
 
 function core__fmt__builders__DebugTuple__field__hb9640642e98eeefe($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $6 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $7$hi = 0, $8 = 0, $8$hi = 0, $61 = 0, $9 = 0, $9$hi = 0, $10 = 0, $10$hi = 0, $11 = 0, $11$hi = 0;
  $3 = global$0 - 80 | 0;
  global$0 = $3;
  $4 = 1;
  label$1 : {
   if (HEAPU8[($0 + 8 | 0) >> 0] | 0) {
    break label$1
   }
   $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   label$2 : {
    $6 = HEAP32[$0 >> 2] | 0;
    if ((HEAPU8[$6 >> 0] | 0) & 4 | 0) {
     break label$2
    }
    $4 = 1;
    if (FUNCTION_TABLE[HEAP32[((HEAP32[($6 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[($6 + 24 | 0) >> 2] | 0, $5 ? 1061285 : 1061295, $5 ? 2 : 1) | 0) {
     break label$1
    }
    $4 = FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0]($1, HEAP32[$0 >> 2] | 0) | 0;
    break label$1;
   }
   label$3 : {
    if ($5) {
     break label$3
    }
    $4 = 1;
    if (FUNCTION_TABLE[HEAP32[((HEAP32[($6 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[($6 + 24 | 0) >> 2] | 0, 1061293, 2) | 0) {
     break label$1
    }
    $6 = HEAP32[$0 >> 2] | 0;
   }
   $4 = 1;
   HEAP8[($3 + 16 | 0) >> 0] = 1;
   i64toi32_i32$0 = HEAP32[($6 + 16 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($6 + 20 | 0) >> 2] | 0;
   $7 = i64toi32_i32$0;
   $7$hi = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[($6 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($6 + 12 | 0) >> 2] | 0;
   $8 = i64toi32_i32$1;
   $8$hi = i64toi32_i32$0;
   $5 = $3 + 52 | 0;
   HEAP32[$5 >> 2] = 1061252;
   i64toi32_i32$0 = HEAP32[($6 + 24 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($6 + 28 | 0) >> 2] | 0;
   $61 = i64toi32_i32$0;
   i64toi32_i32$0 = $3;
   HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $61;
   HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[($6 + 32 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($6 + 36 | 0) >> 2] | 0;
   $9 = i64toi32_i32$1;
   $9$hi = i64toi32_i32$0;
   i64toi32_i32$0 = HEAP32[($6 + 40 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($6 + 44 | 0) >> 2] | 0;
   $10 = i64toi32_i32$0;
   $10$hi = i64toi32_i32$1;
   HEAP8[($3 + 72 | 0) >> 0] = HEAPU8[($6 + 48 | 0) >> 0] | 0;
   i64toi32_i32$1 = HEAP32[$6 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($6 + 4 | 0) >> 2] | 0;
   $11 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $8$hi;
   i64toi32_i32$1 = $3;
   HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = $8;
   HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $7$hi;
   HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = $7;
   HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $10$hi;
   HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = $10;
   HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $9$hi;
   HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] = $9;
   HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $11$hi;
   HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = $11;
   HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = i64toi32_i32$1 + 8 | 0;
   if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0]($1, i64toi32_i32$1 + 24 | 0) | 0) {
    break label$1
   }
   $4 = FUNCTION_TABLE[HEAP32[((HEAP32[$5 >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[($3 + 48 | 0) >> 2] | 0, 1061283, 2) | 0;
  }
  HEAP8[($0 + 8 | 0) >> 0] = $4;
  HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + 1 | 0;
  global$0 = $3 + 80 | 0;
  return $0 | 0;
 }
 
 function core__fmt__builders__DebugInner__entry__h37ef1f566aaa9690($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5 = 0, $4 = 0, $3 = 0, $6 = 0, $7 = 0, $7$hi = 0, $8 = 0, $8$hi = 0, $62 = 0, $9 = 0, $9$hi = 0, $10 = 0, $10$hi = 0, $11 = 0, $11$hi = 0;
  $3 = global$0 - 80 | 0;
  global$0 = $3;
  $4 = 1;
  label$1 : {
   if (HEAPU8[($0 + 4 | 0) >> 0] | 0) {
    break label$1
   }
   $4 = HEAPU8[($0 + 5 | 0) >> 0] | 0;
   label$2 : {
    $5 = HEAP32[$0 >> 2] | 0;
    if ((HEAPU8[$5 >> 0] | 0) & 4 | 0) {
     break label$2
    }
    label$3 : {
     if (!($4 & 255 | 0)) {
      break label$3
     }
     $4 = 1;
     if (FUNCTION_TABLE[HEAP32[((HEAP32[($5 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[($5 + 24 | 0) >> 2] | 0, 1061285, 2) | 0) {
      break label$1
     }
     $5 = HEAP32[$0 >> 2] | 0;
    }
    $4 = FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0]($1, $5) | 0;
    break label$1;
   }
   label$4 : {
    if ($4 & 255 | 0) {
     break label$4
    }
    $4 = 1;
    if (FUNCTION_TABLE[HEAP32[((HEAP32[($5 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[($5 + 24 | 0) >> 2] | 0, 1061298, 1) | 0) {
     break label$1
    }
    $5 = HEAP32[$0 >> 2] | 0;
   }
   $4 = 1;
   HEAP8[($3 + 16 | 0) >> 0] = 1;
   i64toi32_i32$0 = HEAP32[($5 + 16 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($5 + 20 | 0) >> 2] | 0;
   $7 = i64toi32_i32$0;
   $7$hi = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[($5 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($5 + 12 | 0) >> 2] | 0;
   $8 = i64toi32_i32$1;
   $8$hi = i64toi32_i32$0;
   $6 = $3 + 52 | 0;
   HEAP32[$6 >> 2] = 1061252;
   i64toi32_i32$0 = HEAP32[($5 + 24 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($5 + 28 | 0) >> 2] | 0;
   $62 = i64toi32_i32$0;
   i64toi32_i32$0 = $3;
   HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $62;
   HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[($5 + 32 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($5 + 36 | 0) >> 2] | 0;
   $9 = i64toi32_i32$1;
   $9$hi = i64toi32_i32$0;
   i64toi32_i32$0 = HEAP32[($5 + 40 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($5 + 44 | 0) >> 2] | 0;
   $10 = i64toi32_i32$0;
   $10$hi = i64toi32_i32$1;
   HEAP8[($3 + 72 | 0) >> 0] = HEAPU8[($5 + 48 | 0) >> 0] | 0;
   i64toi32_i32$1 = HEAP32[$5 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($5 + 4 | 0) >> 2] | 0;
   $11 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $8$hi;
   i64toi32_i32$1 = $3;
   HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = $8;
   HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $7$hi;
   HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = $7;
   HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $10$hi;
   HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = $10;
   HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $9$hi;
   HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] = $9;
   HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $11$hi;
   HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = $11;
   HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = i64toi32_i32$1 + 8 | 0;
   if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0]($1, i64toi32_i32$1 + 24 | 0) | 0) {
    break label$1
   }
   $4 = FUNCTION_TABLE[HEAP32[((HEAP32[$6 >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[($3 + 48 | 0) >> 2] | 0, 1061283, 2) | 0;
  }
  HEAP8[($0 + 5 | 0) >> 0] = 1;
  HEAP8[($0 + 4 | 0) >> 0] = $4;
  global$0 = $3 + 80 | 0;
 }
 
 function $core__iter__adapters__Rev_I__20as_20core__iter__traits__iterator__Iterator___fold__h254b68e93beaeb79($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $11 = Math_fround(0), $3 = 0, $5 = 0, $9 = 0, $4 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0;
  label$1 : {
   label$2 : {
    if (($1 | 0) == ($0 | 0)) {
     break label$2
    }
    $3 = HEAP32[($2 + 20 | 0) >> 2] | 0;
    $4 = HEAP32[($2 + 16 | 0) >> 2] | 0;
    $5 = HEAP32[($2 + 12 | 0) >> 2] | 0;
    $6 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    $7 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    $8 = HEAP32[$2 >> 2] | 0;
    label$3 : while (1) {
     $2 = $1;
     $9 = HEAP32[$8 >> 2] | 0;
     $1 = HEAP32[($9 + 8 | 0) >> 2] | 0;
     $10 = HEAP32[$7 >> 2] | 0;
     if ($1 >>> 0 <= $10 >>> 0) {
      break label$1
     }
     $1 = $2 + -192 | 0;
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         $9 = (HEAPU8[(((HEAP32[$9 >> 2] | 0) + Math_imul($10, 288) | 0) + 209 | 0) >> 0] | 0) + -1 | 0;
         if ($9 >>> 0 > 4 >>> 0) {
          break label$7
         }
         label$8 : {
          switch ($9 | 0) {
          default:
           $11 = Math_fround(0.0);
           if ($3) {
            break label$4
           }
           if (HEAPU8[$6 >> 0] | 0) {
            break label$4
           }
           break label$6;
          case 4:
           $11 = Math_fround(Math_fround(HEAPF32[$5 >> 2]) / Math_fround(((HEAP32[$4 >> 2] | 0) + 1 | 0) >>> 0));
           break label$4;
          case 2:
           if (!$3) {
            break label$5
           }
           $11 = Math_fround(Math_fround(HEAPF32[$5 >> 2]) / Math_fround(((HEAP32[$4 >> 2] | 0) + -1 | 0) >>> 0));
           break label$4;
          case 1:
           $11 = Math_fround(0.0);
           if ($3) {
            break label$4
           }
           $11 = Math_fround(Math_fround(HEAPF32[$5 >> 2]) * Math_fround(.5));
           break label$4;
          case 3:
           break label$8;
          };
         }
         $11 = Math_fround(Math_fround(HEAPF32[$5 >> 2]) / Math_fround((HEAP32[$4 >> 2] | 0) >>> 0));
         $11 = $3 ? $11 : Math_fround($11 * Math_fround(.5));
         break label$4;
        }
        $11 = Math_fround(0.0);
        if ($3) {
         break label$4
        }
        if (!((HEAPU8[$6 >> 0] | 0) & 255 | 0)) {
         break label$4
        }
       }
       $11 = Math_fround(HEAPF32[$5 >> 2]);
       break label$4;
      }
      $11 = Math_fround(0.0);
     }
     HEAPF32[($2 + -12 | 0) >> 2] = $11;
     $3 = $3 + 1 | 0;
     if (($0 | 0) != ($1 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   return;
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1051560 | 0, $10 | 0, $1 | 0);
  abort();
 }
 
 function stretch__node__Stretch__remove_child__h6fb0a3a71f44d38e($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4 = 0, $5 = 0, $15 = 0, $18 = 0, $29 = 0, $42 = 0, $48 = 0, $51 = 0, $62 = 0, $75 = 0, $91 = 0, $96 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4 = global$0 - 48 | 0;
  global$0 = $4;
  $5 = ($4 + 32 | 0) + 8 | 0;
  i64toi32_i32$2 = $2 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $15 = i64toi32_i32$0;
  i64toi32_i32$0 = $5;
  HEAP32[i64toi32_i32$0 >> 2] = $15;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $18 = i64toi32_i32$1;
  i64toi32_i32$1 = $4;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = $18;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
  stretch__node__Stretch__find_node__h5d72b27b054a57c0(i64toi32_i32$1 + 8 | 0 | 0, $1 | 0, i64toi32_i32$1 + 32 | 0 | 0);
  label$1 : {
   label$2 : {
    if ((HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    i64toi32_i32$2 = $4;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    $29 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = $29;
    HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[i64toi32_i32$0 >> 2] = 1;
    HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = HEAP32[((i64toi32_i32$2 + 8 | 0) + 20 | 0) >> 2] | 0;
    i64toi32_i32$2 = (i64toi32_i32$2 + 8 | 0) + 12 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $42 = i64toi32_i32$1;
    i64toi32_i32$1 = $0 + 12 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $42;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    break label$1;
   }
   $2 = HEAP32[($4 + 12 | 0) >> 2] | 0;
   i64toi32_i32$2 = $3 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $48 = i64toi32_i32$0;
   i64toi32_i32$0 = $5;
   HEAP32[i64toi32_i32$0 >> 2] = $48;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $3;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $51 = i64toi32_i32$1;
   i64toi32_i32$1 = $4;
   HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = $51;
   HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
   stretch__node__Stretch__find_node__h5d72b27b054a57c0(i64toi32_i32$1 + 8 | 0 | 0, $1 | 0, i64toi32_i32$1 + 32 | 0 | 0);
   label$3 : {
    if ((HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$3
    }
    i64toi32_i32$2 = $4;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    $62 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = $62;
    HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[i64toi32_i32$0 >> 2] = 1;
    HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = HEAP32[((i64toi32_i32$2 + 8 | 0) + 20 | 0) >> 2] | 0;
    i64toi32_i32$2 = (i64toi32_i32$2 + 8 | 0) + 12 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $75 = i64toi32_i32$1;
    i64toi32_i32$1 = $0 + 12 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $75;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    break label$1;
   }
   (wasm2js_i32$0 = $4, wasm2js_i32$1 = stretch__forest__Forest__remove_child__h8fc3b159326f9c33($1 + 104 | 0 | 0, $2 | 0, HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
   $1 = $std__collections__hash__map__HashMap_K_2cV_2cS__20as_20core__ops__index__Index__Q____index__hc585c3a6d029245c($1 + 40 | 0 | 0, $4 + 8 | 0 | 0) | 0;
   HEAP32[$0 >> 2] = 0;
   i64toi32_i32$2 = $1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $91 = i64toi32_i32$0;
   i64toi32_i32$0 = $0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = $91;
   HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $96 = i64toi32_i32$1;
   i64toi32_i32$1 = $0 + 12 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $96;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
  global$0 = $4 + 48 | 0;
 }
 
 function stretch__forest__Forest__remove_child__h8fc3b159326f9c33($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $7 = 0, $3 = 0, $5 = 0, $8 = 0, $6 = 0;
  label$1 : {
   $3 = HEAP32[($0 + 20 | 0) >> 2] | 0;
   if ($3 >>> 0 <= $1 >>> 0) {
    break label$1
   }
   $4 = (HEAP32[($0 + 12 | 0) >> 2] | 0) + Math_imul($1, 12) | 0;
   $3 = HEAP32[$4 >> 2] | 0;
   $5 = (HEAP32[($4 + 8 | 0) >> 2] | 0) << 2 | 0;
   $6 = $3 + $5 | 0;
   $4 = 0;
   $7 = $3;
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : while (1) {
       if (($6 - $7 | 0) >>> 0 <= 12 >>> 0) {
        break label$4
       }
       $7 = HEAP32[$3 >> 2] | 0;
       $4 = $4 + (($7 | 0) != ($2 | 0)) | 0;
       if (($7 | 0) == ($2 | 0)) {
        break label$3
       }
       $7 = HEAP32[($3 + 4 | 0) >> 2] | 0;
       $4 = $4 + (($7 | 0) != ($2 | 0)) | 0;
       if (($7 | 0) == ($2 | 0)) {
        break label$3
       }
       $7 = HEAP32[($3 + 8 | 0) >> 2] | 0;
       $4 = $4 + (($7 | 0) != ($2 | 0)) | 0;
       if (($7 | 0) == ($2 | 0)) {
        break label$3
       }
       $5 = $5 + -16 | 0;
       $8 = HEAP32[($3 + 12 | 0) >> 2] | 0;
       $4 = $4 + (($8 | 0) != ($2 | 0)) | 0;
       $7 = $3 + 16 | 0;
       $3 = $7;
       if (($8 | 0) != ($2 | 0)) {
        continue label$5
       }
       break label$3;
      };
     }
     $4 = 1 - $4 | 0;
     label$6 : while (1) {
      if (!$5) {
       break label$2
      }
      $4 = $4 + -1 | 0;
      $5 = $5 + -4 | 0;
      $7 = HEAP32[$3 >> 2] | 0;
      $3 = $3 + 4 | 0;
      $7 = ($7 | 0) == ($2 | 0);
      if (!$7) {
       continue label$6
      }
      break label$6;
     };
     $4 = (($7 + 1 | 0) & 1 | 0) - $4 | 0;
    }
    return stretch__forest__Forest__remove_child_at_index__hff5aa0cd5d9356b3($0 | 0, $1 | 0, $4 | 0) | 0 | 0;
   }
   core__panicking__panic__h2d0bc53a963fb996(1050988 | 0);
   abort();
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $1 | 0, $3 | 0);
  abort();
 }
 
 function stretch__node__Stretch__children__had237245dc8cf2db($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4 = 0, $15 = 0, $18 = 0, $29 = 0, $42 = 0, $84 = 0, $92 = 0;
  $3 = global$0 - 48 | 0;
  global$0 = $3;
  HEAP32[($3 + 4 | 0) >> 2] = $1;
  i64toi32_i32$2 = $2 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $15 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3 + 32 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $15;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $18 = i64toi32_i32$1;
  i64toi32_i32$1 = $3;
  HEAP32[($3 + 32 | 0) >> 2] = $18;
  HEAP32[($3 + 36 | 0) >> 2] = i64toi32_i32$0;
  stretch__node__Stretch__find_node__h5d72b27b054a57c0($3 + 8 | 0 | 0, $1 | 0, $3 + 32 | 0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[($3 + 8 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $3;
     i64toi32_i32$0 = HEAP32[($3 + 12 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($3 + 16 | 0) >> 2] | 0;
     $29 = i64toi32_i32$0;
     i64toi32_i32$0 = $0;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = $29;
     HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[i64toi32_i32$0 >> 2] = 1;
     HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = HEAP32[(($3 + 8 | 0) + 20 | 0) >> 2] | 0;
     i64toi32_i32$2 = ($3 + 8 | 0) + 12 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $42 = i64toi32_i32$1;
     i64toi32_i32$1 = $0 + 12 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $42;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     break label$2;
    }
    $4 = HEAP32[($1 + 124 | 0) >> 2] | 0;
    $2 = HEAP32[($3 + 12 | 0) >> 2] | 0;
    if ($4 >>> 0 <= $2 >>> 0) {
     break label$1
    }
    $2 = (HEAP32[($1 + 116 | 0) >> 2] | 0) + Math_imul($2, 12) | 0;
    $1 = HEAP32[$2 >> 2] | 0;
    $2 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    HEAP32[($3 + 40 | 0) >> 2] = 0;
    i64toi32_i32$1 = $3;
    i64toi32_i32$0 = 0;
    HEAP32[($3 + 32 | 0) >> 2] = 4;
    HEAP32[($3 + 36 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($3 + 12 | 0) >> 2] = $1 + ($2 << 2 | 0) | 0;
    HEAP32[($3 + 8 | 0) >> 2] = $1;
    HEAP32[($3 + 16 | 0) >> 2] = $3 + 4 | 0;
    $alloc__vec__Vec_T__20as_20alloc__vec__SpecExtend_T_2cI____spec_extend__hf07ee803e22a6ba7($3 + 32 | 0 | 0, $3 + 8 | 0 | 0);
    $1 = $3 + 16 | 0;
    HEAP32[$1 >> 2] = HEAP32[($3 + 40 | 0) >> 2] | 0;
    i64toi32_i32$2 = $3;
    i64toi32_i32$0 = HEAP32[($3 + 32 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($3 + 36 | 0) >> 2] | 0;
    $84 = i64toi32_i32$0;
    i64toi32_i32$0 = $3;
    HEAP32[($3 + 8 | 0) >> 2] = $84;
    HEAP32[($3 + 12 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[$0 >> 2] = 0;
    HEAP32[($0 + 12 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$2 = $3;
    i64toi32_i32$1 = HEAP32[($3 + 8 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($3 + 12 | 0) >> 2] | 0;
    $92 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $92;
    HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
   }
   global$0 = $3 + 48 | 0;
   return;
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1051304 | 0, $2 | 0, $4 | 0);
  abort();
 }
 
 function stretch__geometry__Rect_T___map__h2333f270d1aed74b($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0);
  $6 = Math_fround(HEAPF32[($2 + 4 | 0) >> 2]);
  $2 = HEAP32[$2 >> 2] | 0;
  $7 = Math_fround(HEAPF32[($1 + 4 | 0) >> 2]);
  label$1 : {
   label$2 : {
    label$3 : {
     $3 = HEAP32[$1 >> 2] | 0;
     if (($3 | 0) == (3 | 0)) {
      break label$3
     }
     if (($3 | 0) != (2 | 0)) {
      break label$2
     }
     $3 = 0;
     break label$1;
    }
    $7 = Math_fround($7 * $6);
    $3 = $2;
    break label$1;
   }
   $3 = 1;
  }
  $8 = Math_fround(HEAPF32[($1 + 12 | 0) >> 2]);
  label$4 : {
   label$5 : {
    label$6 : {
     $4 = HEAP32[($1 + 8 | 0) >> 2] | 0;
     if (($4 | 0) == (3 | 0)) {
      break label$6
     }
     if (($4 | 0) != (2 | 0)) {
      break label$5
     }
     $4 = 0;
     break label$4;
    }
    $8 = Math_fround($6 * $8);
    $4 = $2;
    break label$4;
   }
   $4 = 1;
  }
  $9 = Math_fround(HEAPF32[($1 + 20 | 0) >> 2]);
  label$7 : {
   label$8 : {
    label$9 : {
     $5 = HEAP32[($1 + 16 | 0) >> 2] | 0;
     if (($5 | 0) == (3 | 0)) {
      break label$9
     }
     if (($5 | 0) != (2 | 0)) {
      break label$8
     }
     $5 = 0;
     break label$7;
    }
    $9 = Math_fround($6 * $9);
    $5 = $2;
    break label$7;
   }
   $5 = 1;
  }
  $10 = Math_fround(HEAPF32[($1 + 28 | 0) >> 2]);
  label$10 : {
   label$11 : {
    label$12 : {
     $1 = HEAP32[($1 + 24 | 0) >> 2] | 0;
     if (($1 | 0) == (3 | 0)) {
      break label$12
     }
     if (($1 | 0) != (2 | 0)) {
      break label$11
     }
     $2 = 0;
     break label$10;
    }
    $10 = Math_fround($6 * $10);
    break label$10;
   }
   $2 = 1;
  }
  HEAP32[($0 + 24 | 0) >> 2] = $2;
  HEAP32[($0 + 16 | 0) >> 2] = $5;
  HEAP32[($0 + 8 | 0) >> 2] = $4;
  HEAPF32[($0 + 4 | 0) >> 2] = $7;
  HEAP32[$0 >> 2] = $3;
  HEAPF32[($0 + 28 | 0) >> 2] = $10;
  HEAPF32[($0 + 20 | 0) >> 2] = $9;
  HEAPF32[($0 + 12 | 0) >> 2] = $8;
 }
 
 function core__fmt__num___impl_20core__fmt__Debug_20for_20usize___fmt__h02e757fe1749b44e($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $3 = 0, $2 = 0, i64toi32_i32$0 = 0;
  $2 = global$0 - 128 | 0;
  global$0 = $2;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       $3 = HEAP32[$1 >> 2] | 0;
       if ($3 & 16 | 0) {
        break label$5
       }
       $4 = HEAP32[$0 >> 2] | 0;
       if ($3 & 32 | 0) {
        break label$4
       }
       i64toi32_i32$0 = 0;
       $0 = core__fmt__num__imp__fmt_u64__h529ebc247831d1ee($4 | 0, i64toi32_i32$0 | 0, 1 | 0, $1 | 0) | 0;
       break label$3;
      }
      $4 = HEAP32[$0 >> 2] | 0;
      $0 = 0;
      label$6 : while (1) {
       $3 = $4 & 15 | 0;
       HEAP8[(($2 + $0 | 0) + 127 | 0) >> 0] = $3 >>> 0 < 10 >>> 0 ? $3 | 48 | 0 : $3 + 87 | 0;
       $0 = $0 + -1 | 0;
       $4 = $4 >>> 4 | 0;
       if ($4) {
        continue label$6
       }
       break label$6;
      };
      $4 = $0 + 128 | 0;
      if ($4 >>> 0 >= 129 >>> 0) {
       break label$2
      }
      $0 = core__fmt__Formatter__pad_integral__h253f31941eb77fc7($1 | 0, 1 | 0, 1061048 | 0, 2 | 0, ($2 + $0 | 0) + 128 | 0 | 0, 0 - $0 | 0 | 0) | 0;
      break label$3;
     }
     $0 = 0;
     label$7 : while (1) {
      $3 = $4 & 15 | 0;
      HEAP8[(($2 + $0 | 0) + 127 | 0) >> 0] = $3 >>> 0 < 10 >>> 0 ? $3 | 48 | 0 : $3 + 55 | 0;
      $0 = $0 + -1 | 0;
      $4 = $4 >>> 4 | 0;
      if ($4) {
       continue label$7
      }
      break label$7;
     };
     $4 = $0 + 128 | 0;
     if ($4 >>> 0 >= 129 >>> 0) {
      break label$1
     }
     $0 = core__fmt__Formatter__pad_integral__h253f31941eb77fc7($1 | 0, 1 | 0, 1061048 | 0, 2 | 0, ($2 + $0 | 0) + 128 | 0 | 0, 0 - $0 | 0 | 0) | 0;
    }
    global$0 = $2 + 128 | 0;
    return $0 | 0;
   }
   core__slice__slice_index_order_fail__ha75fa70416d3bc2f($4 | 0, 128 | 0);
   abort();
  }
  core__slice__slice_index_order_fail__ha75fa70416d3bc2f($4 | 0, 128 | 0);
  abort();
 }
 
 function $std__panicking__continue_panic_fmt__PanicPayload_20as_20core__panic__BoxMeUp___box_me_up__h8011f8530b5a8041($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3 = 0, i64toi32_i32$2 = 0, $4 = 0, $5 = 0, $6 = 0, $25 = 0, $32 = 0, $35 = 0, $46 = 0, $62 = 0;
  $2 = global$0 - 48 | 0;
  global$0 = $2;
  label$1 : {
   $3 = HEAP32[($1 + 4 | 0) >> 2] | 0;
   if ($3) {
    break label$1
   }
   $3 = HEAP32[$1 >> 2] | 0;
   HEAP32[($2 + 16 | 0) >> 2] = 0;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = 0;
   HEAP32[($2 + 8 | 0) >> 2] = 1;
   HEAP32[($2 + 12 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($2 + 20 | 0) >> 2] = $2 + 8 | 0;
   i64toi32_i32$2 = $3 + 16 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $25 = i64toi32_i32$0;
   i64toi32_i32$0 = ($2 + 24 | 0) + 16 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $25;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $4 = ($2 + 24 | 0) + 8 | 0;
   i64toi32_i32$2 = $3 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $32 = i64toi32_i32$1;
   i64toi32_i32$1 = $4;
   HEAP32[i64toi32_i32$1 >> 2] = $32;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $3;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $35 = i64toi32_i32$0;
   i64toi32_i32$0 = $2;
   HEAP32[($2 + 24 | 0) >> 2] = $35;
   HEAP32[($2 + 28 | 0) >> 2] = i64toi32_i32$1;
   core__fmt__write__h85435378f7fd6609($2 + 20 | 0 | 0, 1052216 | 0, $2 + 24 | 0 | 0) | 0;
   HEAP32[$4 >> 2] = HEAP32[($2 + 16 | 0) >> 2] | 0;
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = HEAP32[($2 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($2 + 12 | 0) >> 2] | 0;
   $46 = i64toi32_i32$1;
   i64toi32_i32$1 = $2;
   HEAP32[($2 + 24 | 0) >> 2] = $46;
   HEAP32[($2 + 28 | 0) >> 2] = i64toi32_i32$0;
   label$2 : {
    $3 = $1 + 4 | 0;
    $5 = HEAP32[$3 >> 2] | 0;
    if (!$5) {
     break label$2
    }
    $6 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    if (!$6) {
     break label$2
    }
    __rust_dealloc($5 | 0, $6 | 0, 1 | 0);
   }
   i64toi32_i32$2 = $2;
   i64toi32_i32$0 = HEAP32[($2 + 24 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($2 + 28 | 0) >> 2] | 0;
   $62 = i64toi32_i32$0;
   i64toi32_i32$0 = $3;
   HEAP32[i64toi32_i32$0 >> 2] = $62;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = HEAP32[$4 >> 2] | 0;
   $3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
  }
  HEAP32[($1 + 4 | 0) >> 2] = 1;
  $4 = HEAP32[($1 + 12 | 0) >> 2] | 0;
  $1 = $1 + 8 | 0;
  $5 = HEAP32[$1 >> 2] | 0;
  i64toi32_i32$0 = $1;
  i64toi32_i32$1 = 0;
  HEAP32[i64toi32_i32$0 >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  label$3 : {
   $1 = __rust_alloc(12 | 0, 4 | 0) | 0;
   if (!$1) {
    break label$3
   }
   HEAP32[($1 + 8 | 0) >> 2] = $4;
   HEAP32[($1 + 4 | 0) >> 2] = $5;
   HEAP32[$1 >> 2] = $3;
   HEAP32[($0 + 4 | 0) >> 2] = 1053328;
   HEAP32[$0 >> 2] = $1;
   global$0 = $2 + 48 | 0;
   return;
  }
  alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83(12 | 0, 4 | 0);
  abort();
 }
 
 function stretch_layout__Node__new__hf871c77bd8368dee($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4 = 0, $5 = 0, $6 = 0, $47 = 0, $50 = 0, $61 = 0, $65 = 0, $83 = 0, $86 = 0;
  $3 = global$0 - 256 | 0;
  global$0 = $3;
  label$1 : {
   label$2 : {
    label$3 : {
     $1 = HEAP32[$1 >> 2] | 0;
     $4 = (HEAP32[$1 >> 2] | 0) + 1 | 0;
     if ($4 >>> 0 <= 1 >>> 0) {
      break label$3
     }
     HEAP32[$1 >> 2] = $4;
     if (HEAP32[($1 + 8 | 0) >> 2] | 0) {
      break label$2
     }
     $4 = $1 + 8 | 0;
     HEAP32[$4 >> 2] = -1;
     stretch_layout__parse_style__h91b82fac5ad97f80($3 + 24 | 0 | 0, $2 | 0);
     HEAP32[($3 + 248 | 0) >> 2] = 0;
     i64toi32_i32$1 = $3;
     i64toi32_i32$0 = 0;
     HEAP32[($3 + 240 | 0) >> 2] = 4;
     HEAP32[($3 + 244 | 0) >> 2] = i64toi32_i32$0;
     stretch__node__Stretch__new_node__h9cb7c16f25561bf6($3 | 0, $1 + 16 | 0 | 0, $3 + 24 | 0 | 0, $3 + 240 | 0 | 0);
     $5 = $3 | 4 | 0;
     if ((HEAP32[$3 >> 2] | 0 | 0) == (1 | 0)) {
      break label$1
     }
     $6 = ($3 + 24 | 0) + 8 | 0;
     i64toi32_i32$2 = $5 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $47 = i64toi32_i32$0;
     i64toi32_i32$0 = $6;
     HEAP32[i64toi32_i32$0 >> 2] = $47;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $5;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $50 = i64toi32_i32$1;
     i64toi32_i32$1 = $3;
     HEAP32[($3 + 24 | 0) >> 2] = $50;
     HEAP32[($3 + 28 | 0) >> 2] = i64toi32_i32$0;
     $2 = __wbindgen_object_clone_ref(HEAP32[$2 >> 2] | 0 | 0) | 0;
     HEAP32[$0 >> 2] = $1;
     HEAP32[($0 + 24 | 0) >> 2] = 0;
     HEAP32[($0 + 20 | 0) >> 2] = $2;
     i64toi32_i32$2 = $3;
     i64toi32_i32$0 = HEAP32[($3 + 24 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($3 + 28 | 0) >> 2] | 0;
     $61 = i64toi32_i32$0;
     i64toi32_i32$0 = $0;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = $61;
     HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $6;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $65 = i64toi32_i32$1;
     i64toi32_i32$1 = $0 + 12 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $65;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
     global$0 = $3 + 256 | 0;
     return;
    }
    abort();
   }
   core__result__unwrap_failed__h2450ec3de4884319(1048576 | 0, 16 | 0);
   abort();
  }
  HEAP32[(($3 + 24 | 0) + 16 | 0) >> 2] = HEAP32[($5 + 16 | 0) >> 2] | 0;
  i64toi32_i32$2 = $5 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $83 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3 + 24 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $83;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $5;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $86 = i64toi32_i32$1;
  i64toi32_i32$1 = $3;
  HEAP32[($3 + 24 | 0) >> 2] = $86;
  HEAP32[($3 + 28 | 0) >> 2] = i64toi32_i32$0;
  core__result__unwrap_failed__h8a62896efab79dcd(1048696 | 0, 43 | 0, $3 + 24 | 0 | 0);
  abort();
 }
 
 function core__unicode__bool_trie__BoolTrie__lookup__h31c9aa57385fbd21($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $13 = 0, $72 = 0, $72$hi = 0, $75$hi = 0, $76$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         if ($1 >>> 0 >= 2048 >>> 0) {
          break label$7
         }
         $0 = $0 + (($1 >>> 3 | 0) & 536870904 | 0) | 0;
         break label$6;
        }
        label$8 : {
         if ($1 >>> 0 >= 65536 >>> 0) {
          break label$8
         }
         $2 = ($1 >>> 6 | 0) + -32 | 0;
         if ($2 >>> 0 > 991 >>> 0) {
          break label$5
         }
         $3 = HEAP32[($0 + 260 | 0) >> 2] | 0;
         $2 = HEAPU8[(($0 + $2 | 0) + 280 | 0) >> 0] | 0;
         if ($3 >>> 0 <= $2 >>> 0) {
          break label$4
         }
         $0 = (HEAP32[($0 + 256 | 0) >> 2] | 0) + ($2 << 3 | 0) | 0;
         break label$6;
        }
        $2 = ($1 >>> 12 | 0) + -16 | 0;
        if ($2 >>> 0 >= 256 >>> 0) {
         break label$3
        }
        $2 = (HEAPU8[(($0 + $2 | 0) + 1272 | 0) >> 0] | 0) << 6 | 0 | (($1 >>> 6 | 0) & 63 | 0) | 0;
        $3 = HEAP32[($0 + 268 | 0) >> 2] | 0;
        if ($2 >>> 0 >= $3 >>> 0) {
         break label$2
        }
        $3 = HEAP32[($0 + 276 | 0) >> 2] | 0;
        $2 = HEAPU8[((HEAP32[($0 + 264 | 0) >> 2] | 0) + $2 | 0) >> 0] | 0;
        if ($3 >>> 0 <= $2 >>> 0) {
         break label$1
        }
        $0 = (HEAP32[($0 + 272 | 0) >> 2] | 0) + ($2 << 3 | 0) | 0;
       }
       i64toi32_i32$2 = $0;
       i64toi32_i32$0 = HEAP32[$0 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       $72 = i64toi32_i32$0;
       $72$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $75$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 1;
       i64toi32_i32$0 = $75$hi;
       i64toi32_i32$3 = $1 & 63 | 0;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        $13 = 0;
       } else {
        i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
        $13 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       }
       $76$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $72$hi;
       i64toi32_i32$1 = $72;
       i64toi32_i32$2 = $76$hi;
       i64toi32_i32$3 = $13;
       i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
       i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 0;
       return (i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0 | 0;
      }
      core__panicking__panic_bounds_check__h0537ade040df571e(1061424 | 0, $2 | 0, 992 | 0);
      abort();
     }
     core__panicking__panic_bounds_check__h0537ade040df571e(1061440 | 0, $2 | 0, $3 | 0);
     abort();
    }
    core__panicking__panic_bounds_check__h0537ade040df571e(1061456 | 0, $2 | 0, 256 | 0);
    abort();
   }
   core__panicking__panic_bounds_check__h0537ade040df571e(1061472 | 0, $2 | 0, $3 | 0);
   abort();
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1061488 | 0, $2 | 0, $3 | 0);
  abort();
 }
 
 function core__num__dec2flt__algorithm__bellerophon__h0c5b0e70784f3385($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $4$hi = 0, $5 = 0, $6 = Math_fround(0), $3 = 0, $4 = 0, $5$hi = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $42 = 0, $51 = 0, $63 = 0, $77 = 0, $77$hi = 0, $80 = 0, $80$hi = 0, $83$hi = 0;
  $2 = global$0 - 272 | 0;
  global$0 = $2;
  i64toi32_i32$0 = 0;
  core__num__bignum__Big32x40__from_u64__hb47af5bbea157ebc($2 + 72 | 0 | 0, 16777215 | 0, i64toi32_i32$0 | 0);
  label$1 : {
   label$2 : {
    $3 = $core__num__bignum__Big32x40_20as_20core__cmp__Ord___cmp__h9d6c8e8935c913cf($0 | 0, $2 + 72 | 0 | 0) | 0;
    if (($3 & 255 | 0 | 0) == (2 | 0)) {
     break label$2
    }
    if (((($3 << 24 | 0) >> 24 | 0) + 1 | 0) >>> 0 >= 2 >>> 0) {
     break label$2
    }
    i64toi32_i32$4 = (($1 << 16 | 0) >> 16 | 0 | 0) > (-1 | 0);
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = i64toi32_i32$4 ? 0 : 3;
    i64toi32_i32$2 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$1;
    $4 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$1 = (($1 << 16 | 0) >> 16 | 0 | 0) > (-1 | 0);
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 ? 1 : 4;
   i64toi32_i32$4 = i64toi32_i32$1 ? i64toi32_i32$2 : i64toi32_i32$3;
   $4 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$4;
  }
  core__num__dec2flt__rawfp__big_to_fp__h3ecadc46bb8700fe($2 + 56 | 0 | 0, $0 | 0);
  HEAP16[($2 + 264 | 0) >> 1] = HEAPU16[($2 + 64 | 0) >> 1] | 0;
  i64toi32_i32$1 = $2;
  i64toi32_i32$4 = HEAP32[($2 + 56 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2 + 60 | 0) >> 2] | 0;
  $42 = i64toi32_i32$4;
  i64toi32_i32$4 = $2;
  HEAP32[($2 + 256 | 0) >> 2] = $42;
  HEAP32[($2 + 260 | 0) >> 2] = i64toi32_i32$0;
  core__num__dec2flt__algorithm__power_of_ten__habacea71fff464e2($2 + 40 | 0 | 0, $1 | 0);
  HEAP16[($2 + 80 | 0) >> 1] = HEAPU16[($2 + 48 | 0) >> 1] | 0;
  i64toi32_i32$1 = $2;
  i64toi32_i32$0 = HEAP32[($2 + 40 | 0) >> 2] | 0;
  i64toi32_i32$4 = HEAP32[($2 + 44 | 0) >> 2] | 0;
  $51 = i64toi32_i32$0;
  i64toi32_i32$0 = $2;
  HEAP32[($2 + 72 | 0) >> 2] = $51;
  HEAP32[($2 + 76 | 0) >> 2] = i64toi32_i32$4;
  core__num__diy_float__Fp__mul__ha783f4c77c52b6c1($2 + 24 | 0 | 0, $2 + 256 | 0 | 0, $2 + 72 | 0 | 0);
  HEAP16[($2 + 248 | 0) >> 1] = HEAPU16[($2 + 32 | 0) >> 1] | 0;
  i64toi32_i32$1 = $2;
  i64toi32_i32$4 = HEAP32[($2 + 24 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2 + 28 | 0) >> 2] | 0;
  $63 = i64toi32_i32$4;
  i64toi32_i32$4 = $2;
  HEAP32[($2 + 240 | 0) >> 2] = $63;
  HEAP32[($2 + 244 | 0) >> 2] = i64toi32_i32$0;
  core__num__diy_float__Fp__normalize__h3de17146ae536bff($2 + 8 | 0 | 0, $2 + 240 | 0 | 0);
  i64toi32_i32$1 = $2;
  i64toi32_i32$0 = HEAP32[($2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$4 = HEAP32[($2 + 12 | 0) >> 2] | 0;
  $5 = i64toi32_i32$0;
  $6 = Math_fround(core__num__dec2flt__rawfp__fp_to_float__hfb005cc21d1c97fe(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, HEAPU16[($2 + 16 | 0) >> 1] | 0 | 0));
  label$3 : {
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$0 = 255;
   i64toi32_i32$2 = -1;
   i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
   $5 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 128;
   i64toi32_i32$4 = 0;
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$2 = $5;
   i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$2 | 0;
   i64toi32_i32$5 = (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
   $77 = i64toi32_i32$3;
   $77$hi = i64toi32_i32$5;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$4 = -128;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $5 = i64toi32_i32$1;
   $5$hi = i64toi32_i32$3;
   $80 = i64toi32_i32$1;
   $80$hi = i64toi32_i32$3;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = 0;
   if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
    $23 = 1
   } else {
    if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$2 >>> 0) {
      $24 = 0
     } else {
      $24 = 1
     }
     $25 = $24;
    } else {
     $25 = 0
    }
    $23 = $25;
   }
   i64toi32_i32$4 = $23;
   i64toi32_i32$5 = $77$hi;
   i64toi32_i32$3 = $80$hi;
   i64toi32_i32$0 = i64toi32_i32$4 ? $77 : $80;
   i64toi32_i32$2 = i64toi32_i32$4 ? i64toi32_i32$5 : i64toi32_i32$3;
   $83$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $83$hi;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4;
   if ((i64toi32_i32$2 | 0) > (i64toi32_i32$0 | 0)) {
    $26 = 1
   } else {
    if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$4 >>> 0 <= i64toi32_i32$5 >>> 0) {
      $27 = 0
     } else {
      $27 = 1
     }
     $28 = $27;
    } else {
     $28 = 0
    }
    $26 = $28;
   }
   if ($26) {
    break label$3
   }
   $6 = Math_fround(core__num__dec2flt__algorithm__algorithm_r__hc78fd1e69554e0fc($0 | 0, $1 | 0, Math_fround($6)));
  }
  global$0 = $2 + 272 | 0;
  return Math_fround($6);
 }
 
 function std__ffi__c_str__CString__from_vec_unchecked__hd801b68fb97cc939($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $4 = 0, $3 = 0, $5 = 0;
  label$1 : {
   $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
   $3 = HEAP32[($1 + 8 | 0) >> 2] | 0;
   if (($2 | 0) != ($3 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $2 = $3 + 1 | 0;
     if (($2 | 0) < (0 | 0)) {
      break label$3
     }
     if ($2 >>> 0 < $3 >>> 0) {
      break label$3
     }
     label$4 : {
      label$5 : {
       if (!$3) {
        break label$5
       }
       $4 = __rust_realloc(HEAP32[$1 >> 2] | 0 | 0, $3 | 0, 1 | 0, $2 | 0) | 0;
       if (!$4) {
        break label$4
       }
       break label$2;
      }
      $4 = __rust_alloc($2 | 0, 1 | 0) | 0;
      if ($4) {
       break label$2
      }
     }
     alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83($2 | 0, 1 | 0);
     abort();
    }
    alloc__raw_vec__capacity_overflow__he79b434a8a95c170();
    abort();
   }
   HEAP32[$1 >> 2] = $4;
   HEAP32[($1 + 4 | 0) >> 2] = $2;
  }
  label$6 : {
   if (($3 | 0) != ($2 | 0)) {
    break label$6
   }
   alloc__vec__Vec_T___reserve__hc0f95e3f359a8226($1 | 0, 1 | 0);
   $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
   $3 = HEAP32[($1 + 8 | 0) >> 2] | 0;
  }
  $4 = $3 + 1 | 0;
  HEAP32[($1 + 8 | 0) >> 2] = $4;
  $5 = HEAP32[$1 >> 2] | 0;
  HEAP8[($5 + $3 | 0) >> 0] = 0;
  label$7 : {
   label$8 : {
    label$9 : {
     if (($2 | 0) != ($4 | 0)) {
      break label$9
     }
     $1 = $5;
     $4 = $2;
     break label$8;
    }
    if ($2 >>> 0 < $4 >>> 0) {
     break label$7
    }
    label$10 : {
     if (!$4) {
      break label$10
     }
     $1 = __rust_realloc($5 | 0, $2 | 0, 1 | 0, $4 | 0) | 0;
     if ($1) {
      break label$8
     }
     alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83($4 | 0, 1 | 0);
     abort();
    }
    $4 = 0;
    $1 = 1;
    if (!$2) {
     break label$8
    }
    __rust_dealloc($5 | 0, $2 | 0, 1 | 0);
   }
   HEAP32[($0 + 4 | 0) >> 2] = $4;
   HEAP32[$0 >> 2] = $1;
   return;
  }
  core__panicking__panic__h2d0bc53a963fb996(1052676 | 0);
  abort();
 }
 
 function $_mut_20I_20as_20core__iter__traits__iterator__Iterator___next__hbdeccbe24581e7c4($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $3 = 0, $4 = 0, $5 = 0, $29 = 0, $32 = 0, $55 = 0, $58 = 0, $67 = 0, $79 = 0;
  $2 = global$0 - 48 | 0;
  global$0 = $2;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $1 = HEAP32[$1 >> 2] | 0;
      $3 = HEAP32[$1 >> 2] | 0;
      if (($3 | 0) == (HEAP32[($1 + 4 | 0) >> 2] | 0 | 0)) {
       break label$4
      }
      HEAP32[$1 >> 2] = $3 + 16 | 0;
      $4 = HEAP32[(HEAP32[($1 + 8 | 0) >> 2] | 0) >> 2] | 0;
      $5 = ($2 + 24 | 0) + 8 | 0;
      i64toi32_i32$2 = $3 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $29 = i64toi32_i32$0;
      i64toi32_i32$0 = $5;
      HEAP32[i64toi32_i32$0 >> 2] = $29;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $3;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $32 = i64toi32_i32$1;
      i64toi32_i32$1 = $2;
      HEAP32[($2 + 24 | 0) >> 2] = $32;
      HEAP32[($2 + 28 | 0) >> 2] = i64toi32_i32$0;
      stretch__node__Stretch__find_node__h5d72b27b054a57c0($2 | 0, $4 | 0, $2 + 24 | 0 | 0);
      $3 = 0;
      $4 = HEAP32[$2 >> 2] | 0;
      if (($4 | 0) == (1 | 0)) {
       break label$3
      }
      if (($4 | 0) == (2 | 0)) {
       break label$1
      }
      $3 = 1;
      $1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
      break label$1;
     }
     HEAP32[$2 >> 2] = 2;
     $3 = 0;
     break label$2;
    }
    HEAP32[(($2 + 24 | 0) + 16 | 0) >> 2] = HEAP32[($2 + 20 | 0) >> 2] | 0;
    i64toi32_i32$2 = $2 + 12 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $55 = i64toi32_i32$0;
    i64toi32_i32$0 = $5;
    HEAP32[i64toi32_i32$0 >> 2] = $55;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2;
    i64toi32_i32$1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    $58 = i64toi32_i32$1;
    i64toi32_i32$1 = $2;
    HEAP32[($2 + 24 | 0) >> 2] = $58;
    HEAP32[($2 + 28 | 0) >> 2] = i64toi32_i32$0;
    $4 = $1 + 12 | 0;
    label$5 : {
     if ((HEAP32[($1 + 12 | 0) >> 2] | 0 | 0) == (2 | 0)) {
      break label$5
     }
     core__ptr__real_drop_in_place__h140ac43c00bb796c($4 | 0);
    }
    i64toi32_i32$2 = $2;
    i64toi32_i32$0 = HEAP32[($2 + 24 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($2 + 28 | 0) >> 2] | 0;
    $67 = i64toi32_i32$0;
    i64toi32_i32$0 = $4;
    HEAP32[i64toi32_i32$0 >> 2] = $67;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = HEAP32[(($2 + 24 | 0) + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = ($2 + 24 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $79 = i64toi32_i32$1;
    i64toi32_i32$1 = $4 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $79;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   }
  }
  HEAP32[($0 + 4 | 0) >> 2] = $1;
  HEAP32[$0 >> 2] = $3;
  global$0 = $2 + 48 | 0;
 }
 
 function $core__iter__adapters__Map_I_2cF__20as_20core__iter__traits__iterator__Iterator___fold__hebf69c30ff63ca48($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $2 = 0, $7 = 0, $3 = 0, $8 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $39 = 0, $42 = 0, $10 = 0, $49 = 0, $52 = 0, $63 = 0, $69 = 0, $75 = 0, $78 = 0;
  $2 = global$0 - 64 | 0;
  global$0 = $2;
  $3 = HEAP32[($1 + 8 | 0) >> 2] | 0;
  $4 = HEAP32[($1 + 4 | 0) >> 2] | 0;
  $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  $6 = HEAP32[$0 >> 2] | 0;
  label$1 : {
   $7 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   $8 = HEAP32[($0 + 12 | 0) >> 2] | 0;
   if (($7 | 0) == ($8 | 0)) {
    break label$1
   }
   $9 = HEAP32[($0 + 16 | 0) >> 2] | 0;
   $0 = HEAP32[$1 >> 2] | 0;
   label$2 : while (1) {
    $1 = $2 + 8 | 0;
    i64toi32_i32$2 = $7 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $39 = i64toi32_i32$0;
    i64toi32_i32$0 = $1;
    HEAP32[i64toi32_i32$0 >> 2] = $39;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $7;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $42 = i64toi32_i32$1;
    i64toi32_i32$1 = $2;
    HEAP32[i64toi32_i32$1 >> 2] = $42;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $10 = HEAP32[$9 >> 2] | 0;
    i64toi32_i32$2 = $1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $49 = i64toi32_i32$0;
    i64toi32_i32$0 = ($2 + 48 | 0) + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $49;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2;
    i64toi32_i32$1 = HEAP32[$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    $52 = i64toi32_i32$1;
    i64toi32_i32$1 = $2;
    HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = $52;
    HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = i64toi32_i32$0;
    stretch_layout__Layout__new__h8bab3a099279ba8b(i64toi32_i32$1 + 16 | 0 | 0, $10 | 0, i64toi32_i32$1 + 48 | 0 | 0);
    i64toi32_i32$2 = (i64toi32_i32$1 + 16 | 0) + 24 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $63 = i64toi32_i32$0;
    i64toi32_i32$0 = $0 + 24 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $63;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = ($2 + 16 | 0) + 16 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $69 = i64toi32_i32$1;
    i64toi32_i32$1 = $0 + 16 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $69;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = ($2 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $75 = i64toi32_i32$0;
    i64toi32_i32$0 = $0 + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $75;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2;
    i64toi32_i32$1 = HEAP32[($2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($2 + 20 | 0) >> 2] | 0;
    $78 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[i64toi32_i32$1 >> 2] = $78;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $3 = $3 + 1 | 0;
    $0 = i64toi32_i32$1 + 32 | 0;
    $7 = $7 + 16 | 0;
    if (($8 | 0) != ($7 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  HEAP32[$4 >> 2] = $3;
  HEAP32[($2 + 20 | 0) >> 2] = $5;
  HEAP32[($2 + 16 | 0) >> 2] = $6;
  $alloc__raw_vec__RawVec_T_2cA__20as_20core__ops__drop__Drop___drop__h499bd611a2c02584($2 + 16 | 0 | 0);
  global$0 = $2 + 64 | 0;
 }
 
 function $core__iter__adapters__Rev_I__20as_20core__iter__traits__iterator__Iterator___fold__h86579460e92560cc($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $11 = Math_fround(0), $3 = 0, $9 = 0, $5 = 0, $10 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0;
  label$1 : {
   label$2 : {
    if (($1 | 0) == ($0 | 0)) {
     break label$2
    }
    $3 = HEAP32[($2 + 20 | 0) >> 2] | 0;
    $4 = HEAP32[($2 + 16 | 0) >> 2] | 0;
    $5 = HEAP32[($2 + 12 | 0) >> 2] | 0;
    $6 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    $7 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    $8 = HEAP32[$2 >> 2] | 0;
    label$3 : while (1) {
     $2 = $1;
     $9 = HEAP32[$8 >> 2] | 0;
     $1 = HEAP32[($9 + 8 | 0) >> 2] | 0;
     $10 = HEAP32[$7 >> 2] | 0;
     if ($1 >>> 0 <= $10 >>> 0) {
      break label$1
     }
     $1 = $2 + -20 | 0;
     $11 = Math_fround(0.0);
     label$4 : {
      label$5 : {
       label$6 : {
        $9 = (HEAPU8[(((HEAP32[$9 >> 2] | 0) + Math_imul($10, 288) | 0) + 208 | 0) >> 0] | 0) + -1 | 0;
        if ($9 >>> 0 > 4 >>> 0) {
         break label$6
        }
        label$7 : {
         switch ($9 | 0) {
         default:
          if ($3) {
           break label$4
          }
          if (HEAPU8[$6 >> 0] | 0) {
           break label$4
          }
          break label$5;
         case 4:
          $11 = Math_fround(Math_fround(HEAPF32[$5 >> 2]) / Math_fround((HEAP32[$4 >> 2] | 0) >>> 0));
          $11 = $3 ? $11 : Math_fround($11 * Math_fround(.5));
          break label$4;
         case 1:
          if ($3) {
           break label$4
          }
          $11 = Math_fround(Math_fround(HEAPF32[$5 >> 2]) * Math_fround(.5));
          break label$4;
         case 2:
          break label$4;
         case 3:
          break label$7;
         };
        }
        if (!$3) {
         break label$4
        }
        $11 = Math_fround(Math_fround(HEAPF32[$5 >> 2]) / Math_fround(((HEAP32[$4 >> 2] | 0) + -1 | 0) >>> 0));
        break label$4;
       }
       if ($3) {
        break label$4
       }
       if (!(HEAPU8[$6 >> 0] | 0)) {
        break label$4
       }
      }
      $11 = Math_fround(HEAPF32[$5 >> 2]);
     }
     HEAPF32[($2 + -4 | 0) >> 2] = $11;
     $3 = $3 + 1 | 0;
     if (($0 | 0) != ($1 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   return;
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1051560 | 0, $10 | 0, $1 | 0);
  abort();
 }
 
 function core__str___impl_20str___ends_with__h5d6bb4579d889be6($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $5 = 0, $4 = 0, $6 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (!$1) {
       break label$4
      }
      $3 = 0;
      $4 = $0 + $1 | 0;
      $5 = $4 + -1 | 0;
      $1 = HEAPU8[$5 >> 0] | 0;
      $6 = ($1 << 24 | 0) >> 24 | 0;
      if (($6 | 0) < (0 | 0)) {
       break label$3
      }
      return ($1 | 0) == ($2 | 0) | 0;
     }
     $T_20as_20core__convert__From_T____from__h3208874747cb8368();
     break label$2;
    }
    label$5 : {
     if (($0 | 0) == ($5 | 0)) {
      break label$5
     }
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           $3 = $4 + -2 | 0;
           $1 = HEAPU8[$3 >> 0] | 0;
           if (($1 & 192 | 0 | 0) != (128 | 0)) {
            break label$11
           }
           if (($0 | 0) == ($3 | 0)) {
            break label$10
           }
           $5 = $4 + -3 | 0;
           $3 = HEAPU8[$5 >> 0] | 0;
           if (($3 & 192 | 0 | 0) != (128 | 0)) {
            break label$9
           }
           if (($0 | 0) == ($5 | 0)) {
            break label$8
           }
           $0 = ((HEAPU8[($4 + -4 | 0) >> 0] | 0) & 7 | 0) << 6 | 0;
           break label$7;
          }
          $3 = $1 & 31 | 0;
          break label$5;
         }
         $0 = 0;
         break label$6;
        }
        $0 = $3 & 15 | 0;
        break label$6;
       }
       $0 = 0;
      }
      $0 = $0 | ($3 & 63 | 0) | 0;
     }
     $3 = $0 << 6 | 0 | ($1 & 63 | 0) | 0;
    }
    $1 = $3 << 6 | 0 | ($6 & 63 | 0) | 0;
    if (($1 | 0) != (1114112 | 0)) {
     break label$1
    }
   }
   return 0 | 0;
  }
  return ($1 | 0) == ($2 | 0) | 0;
 }
 
 function stretch__geometry__Rect_T___map__h45e68c610a717c7a($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $5 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $4 = Math_fround(0), $6 = Math_fround(0), $9 = Math_fround(0);
  $4 = Math_fround(HEAPF32[($2 + 4 | 0) >> 2]);
  $2 = HEAP32[$2 >> 2] | 0;
  $5 = Math_fround(HEAPF32[($1 + 4 | 0) >> 2]);
  label$1 : {
   label$2 : {
    $3 = HEAP32[$1 >> 2] | 0;
    if (($3 | 0) == (2 | 0)) {
     break label$2
    }
    $6 = Math_fround(0.0);
    if (($3 | 0) != (3 | 0)) {
     break label$1
    }
    if ($2) {
     break label$1
    }
    $6 = Math_fround($5 * $4);
    break label$1;
   }
   $6 = $5;
  }
  $7 = Math_fround(HEAPF32[($1 + 12 | 0) >> 2]);
  label$3 : {
   label$4 : {
    $3 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    if (($3 | 0) == (2 | 0)) {
     break label$4
    }
    $5 = Math_fround(0.0);
    if (($3 | 0) != (3 | 0)) {
     break label$3
    }
    if ($2) {
     break label$3
    }
    $5 = Math_fround($4 * $7);
    break label$3;
   }
   $5 = $7;
  }
  $8 = Math_fround(HEAPF32[($1 + 20 | 0) >> 2]);
  label$5 : {
   label$6 : {
    $3 = HEAP32[($1 + 16 | 0) >> 2] | 0;
    if (($3 | 0) == (2 | 0)) {
     break label$6
    }
    $7 = Math_fround(0.0);
    if (($3 | 0) != (3 | 0)) {
     break label$5
    }
    if ($2) {
     break label$5
    }
    $7 = Math_fround($4 * $8);
    break label$5;
   }
   $7 = $8;
  }
  $9 = Math_fround(HEAPF32[($1 + 28 | 0) >> 2]);
  label$7 : {
   label$8 : {
    $1 = HEAP32[($1 + 24 | 0) >> 2] | 0;
    if (($1 | 0) == (2 | 0)) {
     break label$8
    }
    $8 = Math_fround(0.0);
    if (($1 | 0) != (3 | 0)) {
     break label$7
    }
    if ($2) {
     break label$7
    }
    $8 = Math_fround($4 * $9);
    break label$7;
   }
   $8 = $9;
  }
  HEAPF32[($0 + 12 | 0) >> 2] = $8;
  HEAPF32[($0 + 8 | 0) >> 2] = $7;
  HEAPF32[($0 + 4 | 0) >> 2] = $5;
  HEAPF32[$0 >> 2] = $6;
 }
 
 function stretch__geometry__Rect_T___map__h4e1d5c4c643a6680($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $5 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $4 = Math_fround(0), $6 = Math_fround(0), $9 = Math_fround(0);
  $4 = Math_fround(HEAPF32[($2 + 4 | 0) >> 2]);
  $2 = HEAP32[$2 >> 2] | 0;
  $5 = Math_fround(HEAPF32[($1 + 4 | 0) >> 2]);
  label$1 : {
   label$2 : {
    $3 = HEAP32[$1 >> 2] | 0;
    if (($3 | 0) == (2 | 0)) {
     break label$2
    }
    $6 = Math_fround(0.0);
    if (($3 | 0) != (3 | 0)) {
     break label$1
    }
    if ($2) {
     break label$1
    }
    $6 = Math_fround($5 * $4);
    break label$1;
   }
   $6 = $5;
  }
  $7 = Math_fround(HEAPF32[($1 + 12 | 0) >> 2]);
  label$3 : {
   label$4 : {
    $3 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    if (($3 | 0) == (2 | 0)) {
     break label$4
    }
    $5 = Math_fround(0.0);
    if (($3 | 0) != (3 | 0)) {
     break label$3
    }
    if ($2) {
     break label$3
    }
    $5 = Math_fround($4 * $7);
    break label$3;
   }
   $5 = $7;
  }
  $8 = Math_fround(HEAPF32[($1 + 20 | 0) >> 2]);
  label$5 : {
   label$6 : {
    $3 = HEAP32[($1 + 16 | 0) >> 2] | 0;
    if (($3 | 0) == (2 | 0)) {
     break label$6
    }
    $7 = Math_fround(0.0);
    if (($3 | 0) != (3 | 0)) {
     break label$5
    }
    if ($2) {
     break label$5
    }
    $7 = Math_fround($4 * $8);
    break label$5;
   }
   $7 = $8;
  }
  $9 = Math_fround(HEAPF32[($1 + 28 | 0) >> 2]);
  label$7 : {
   label$8 : {
    $1 = HEAP32[($1 + 24 | 0) >> 2] | 0;
    if (($1 | 0) == (2 | 0)) {
     break label$8
    }
    $8 = Math_fround(0.0);
    if (($1 | 0) != (3 | 0)) {
     break label$7
    }
    if ($2) {
     break label$7
    }
    $8 = Math_fround($4 * $9);
    break label$7;
   }
   $8 = $9;
  }
  HEAPF32[($0 + 12 | 0) >> 2] = $8;
  HEAPF32[($0 + 8 | 0) >> 2] = $7;
  HEAPF32[($0 + 4 | 0) >> 2] = $5;
  HEAPF32[$0 >> 2] = $6;
 }
 
 function stretch__geometry__Rect_T___map__h6b5345e2e524cf6c($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $5 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $4 = Math_fround(0), $6 = Math_fround(0), $9 = Math_fround(0);
  $4 = Math_fround(HEAPF32[($2 + 4 | 0) >> 2]);
  $2 = HEAP32[$2 >> 2] | 0;
  $5 = Math_fround(HEAPF32[($1 + 4 | 0) >> 2]);
  label$1 : {
   label$2 : {
    $3 = HEAP32[$1 >> 2] | 0;
    if (($3 | 0) == (2 | 0)) {
     break label$2
    }
    $6 = Math_fround(0.0);
    if (($3 | 0) != (3 | 0)) {
     break label$1
    }
    if ($2) {
     break label$1
    }
    $6 = Math_fround($5 * $4);
    break label$1;
   }
   $6 = $5;
  }
  $7 = Math_fround(HEAPF32[($1 + 12 | 0) >> 2]);
  label$3 : {
   label$4 : {
    $3 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    if (($3 | 0) == (2 | 0)) {
     break label$4
    }
    $5 = Math_fround(0.0);
    if (($3 | 0) != (3 | 0)) {
     break label$3
    }
    if ($2) {
     break label$3
    }
    $5 = Math_fround($4 * $7);
    break label$3;
   }
   $5 = $7;
  }
  $8 = Math_fround(HEAPF32[($1 + 20 | 0) >> 2]);
  label$5 : {
   label$6 : {
    $3 = HEAP32[($1 + 16 | 0) >> 2] | 0;
    if (($3 | 0) == (2 | 0)) {
     break label$6
    }
    $7 = Math_fround(0.0);
    if (($3 | 0) != (3 | 0)) {
     break label$5
    }
    if ($2) {
     break label$5
    }
    $7 = Math_fround($4 * $8);
    break label$5;
   }
   $7 = $8;
  }
  $9 = Math_fround(HEAPF32[($1 + 28 | 0) >> 2]);
  label$7 : {
   label$8 : {
    $1 = HEAP32[($1 + 24 | 0) >> 2] | 0;
    if (($1 | 0) == (2 | 0)) {
     break label$8
    }
    $8 = Math_fround(0.0);
    if (($1 | 0) != (3 | 0)) {
     break label$7
    }
    if ($2) {
     break label$7
    }
    $8 = Math_fround($4 * $9);
    break label$7;
   }
   $8 = $9;
  }
  HEAPF32[($0 + 12 | 0) >> 2] = $8;
  HEAPF32[($0 + 8 | 0) >> 2] = $7;
  HEAPF32[($0 + 4 | 0) >> 2] = $5;
  HEAPF32[$0 >> 2] = $6;
 }
 
 function stretch__geometry__Rect_T___map__h857c4b6fe1834629($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $5 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $4 = Math_fround(0), $6 = Math_fround(0), $9 = Math_fround(0);
  $4 = Math_fround(HEAPF32[($2 + 4 | 0) >> 2]);
  $2 = HEAP32[$2 >> 2] | 0;
  $5 = Math_fround(HEAPF32[($1 + 4 | 0) >> 2]);
  label$1 : {
   label$2 : {
    $3 = HEAP32[$1 >> 2] | 0;
    if (($3 | 0) == (2 | 0)) {
     break label$2
    }
    $6 = Math_fround(0.0);
    if (($3 | 0) != (3 | 0)) {
     break label$1
    }
    if ($2) {
     break label$1
    }
    $6 = Math_fround($5 * $4);
    break label$1;
   }
   $6 = $5;
  }
  $7 = Math_fround(HEAPF32[($1 + 12 | 0) >> 2]);
  label$3 : {
   label$4 : {
    $3 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    if (($3 | 0) == (2 | 0)) {
     break label$4
    }
    $5 = Math_fround(0.0);
    if (($3 | 0) != (3 | 0)) {
     break label$3
    }
    if ($2) {
     break label$3
    }
    $5 = Math_fround($4 * $7);
    break label$3;
   }
   $5 = $7;
  }
  $8 = Math_fround(HEAPF32[($1 + 20 | 0) >> 2]);
  label$5 : {
   label$6 : {
    $3 = HEAP32[($1 + 16 | 0) >> 2] | 0;
    if (($3 | 0) == (2 | 0)) {
     break label$6
    }
    $7 = Math_fround(0.0);
    if (($3 | 0) != (3 | 0)) {
     break label$5
    }
    if ($2) {
     break label$5
    }
    $7 = Math_fround($4 * $8);
    break label$5;
   }
   $7 = $8;
  }
  $9 = Math_fround(HEAPF32[($1 + 28 | 0) >> 2]);
  label$7 : {
   label$8 : {
    $1 = HEAP32[($1 + 24 | 0) >> 2] | 0;
    if (($1 | 0) == (2 | 0)) {
     break label$8
    }
    $8 = Math_fround(0.0);
    if (($1 | 0) != (3 | 0)) {
     break label$7
    }
    if ($2) {
     break label$7
    }
    $8 = Math_fround($4 * $9);
    break label$7;
   }
   $8 = $9;
  }
  HEAPF32[($0 + 12 | 0) >> 2] = $8;
  HEAPF32[($0 + 8 | 0) >> 2] = $7;
  HEAPF32[($0 + 4 | 0) >> 2] = $5;
  HEAPF32[$0 >> 2] = $6;
 }
 
 function stretch__geometry__Rect_T___map__hd04920c0441c8325($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $5 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $4 = Math_fround(0), $6 = Math_fround(0), $9 = Math_fround(0);
  $4 = Math_fround(HEAPF32[($2 + 4 | 0) >> 2]);
  $2 = HEAP32[$2 >> 2] | 0;
  $5 = Math_fround(HEAPF32[($1 + 4 | 0) >> 2]);
  label$1 : {
   label$2 : {
    $3 = HEAP32[$1 >> 2] | 0;
    if (($3 | 0) == (2 | 0)) {
     break label$2
    }
    $6 = Math_fround(0.0);
    if (($3 | 0) != (3 | 0)) {
     break label$1
    }
    if ($2) {
     break label$1
    }
    $6 = Math_fround($5 * $4);
    break label$1;
   }
   $6 = $5;
  }
  $7 = Math_fround(HEAPF32[($1 + 12 | 0) >> 2]);
  label$3 : {
   label$4 : {
    $3 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    if (($3 | 0) == (2 | 0)) {
     break label$4
    }
    $5 = Math_fround(0.0);
    if (($3 | 0) != (3 | 0)) {
     break label$3
    }
    if ($2) {
     break label$3
    }
    $5 = Math_fround($4 * $7);
    break label$3;
   }
   $5 = $7;
  }
  $8 = Math_fround(HEAPF32[($1 + 20 | 0) >> 2]);
  label$5 : {
   label$6 : {
    $3 = HEAP32[($1 + 16 | 0) >> 2] | 0;
    if (($3 | 0) == (2 | 0)) {
     break label$6
    }
    $7 = Math_fround(0.0);
    if (($3 | 0) != (3 | 0)) {
     break label$5
    }
    if ($2) {
     break label$5
    }
    $7 = Math_fround($4 * $8);
    break label$5;
   }
   $7 = $8;
  }
  $9 = Math_fround(HEAPF32[($1 + 28 | 0) >> 2]);
  label$7 : {
   label$8 : {
    $1 = HEAP32[($1 + 24 | 0) >> 2] | 0;
    if (($1 | 0) == (2 | 0)) {
     break label$8
    }
    $8 = Math_fround(0.0);
    if (($1 | 0) != (3 | 0)) {
     break label$7
    }
    if ($2) {
     break label$7
    }
    $8 = Math_fround($4 * $9);
    break label$7;
   }
   $8 = $9;
  }
  HEAPF32[($0 + 12 | 0) >> 2] = $8;
  HEAPF32[($0 + 8 | 0) >> 2] = $7;
  HEAPF32[($0 + 4 | 0) >> 2] = $5;
  HEAPF32[$0 >> 2] = $6;
 }
 
 function stretch__geometry__Rect_T___map__hd80eeaf84de33a80($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $5 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $4 = Math_fround(0), $6 = Math_fround(0), $9 = Math_fround(0);
  $4 = Math_fround(HEAPF32[($2 + 4 | 0) >> 2]);
  $2 = HEAP32[$2 >> 2] | 0;
  $5 = Math_fround(HEAPF32[($1 + 4 | 0) >> 2]);
  label$1 : {
   label$2 : {
    $3 = HEAP32[$1 >> 2] | 0;
    if (($3 | 0) == (2 | 0)) {
     break label$2
    }
    $6 = Math_fround(0.0);
    if (($3 | 0) != (3 | 0)) {
     break label$1
    }
    if ($2) {
     break label$1
    }
    $6 = Math_fround($5 * $4);
    break label$1;
   }
   $6 = $5;
  }
  $7 = Math_fround(HEAPF32[($1 + 12 | 0) >> 2]);
  label$3 : {
   label$4 : {
    $3 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    if (($3 | 0) == (2 | 0)) {
     break label$4
    }
    $5 = Math_fround(0.0);
    if (($3 | 0) != (3 | 0)) {
     break label$3
    }
    if ($2) {
     break label$3
    }
    $5 = Math_fround($4 * $7);
    break label$3;
   }
   $5 = $7;
  }
  $8 = Math_fround(HEAPF32[($1 + 20 | 0) >> 2]);
  label$5 : {
   label$6 : {
    $3 = HEAP32[($1 + 16 | 0) >> 2] | 0;
    if (($3 | 0) == (2 | 0)) {
     break label$6
    }
    $7 = Math_fround(0.0);
    if (($3 | 0) != (3 | 0)) {
     break label$5
    }
    if ($2) {
     break label$5
    }
    $7 = Math_fround($4 * $8);
    break label$5;
   }
   $7 = $8;
  }
  $9 = Math_fround(HEAPF32[($1 + 28 | 0) >> 2]);
  label$7 : {
   label$8 : {
    $1 = HEAP32[($1 + 24 | 0) >> 2] | 0;
    if (($1 | 0) == (2 | 0)) {
     break label$8
    }
    $8 = Math_fround(0.0);
    if (($1 | 0) != (3 | 0)) {
     break label$7
    }
    if ($2) {
     break label$7
    }
    $8 = Math_fround($4 * $9);
    break label$7;
   }
   $8 = $9;
  }
  HEAPF32[($0 + 12 | 0) >> 2] = $8;
  HEAPF32[($0 + 8 | 0) >> 2] = $7;
  HEAPF32[($0 + 4 | 0) >> 2] = $5;
  HEAPF32[$0 >> 2] = $6;
 }
 
 function std__panicking__rust_panic_with_hook__h6fe9d3817474ba5a($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5 = 0, i64toi32_i32$2 = 0, $6 = 0, $7 = 0, $8 = 0, $37 = 0, $44 = 0, $62 = 0;
  $4 = global$0 - 64 | 0;
  global$0 = $4;
  $5 = 1;
  $6 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  $7 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  $8 = HEAP32[($3 + 4 | 0) >> 2] | 0;
  $3 = HEAP32[$3 >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ((HEAP32[(0 + 1066864 | 0) >> 2] | 0 | 0) != (1 | 0)) {
       break label$4
      }
      $5 = (HEAP32[(0 + 1066868 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[(0 + 1066868 | 0) >> 2] = $5;
      if ($5 >>> 0 <= 2 >>> 0) {
       break label$3
      }
      break label$2;
     }
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 1;
     HEAP32[(i64toi32_i32$1 + 1066864 | 0) >> 2] = 1;
     HEAP32[(i64toi32_i32$1 + 1066868 | 0) >> 2] = i64toi32_i32$0;
    }
    core__panic__Location__internal_constructor__h8fe3cc265367b40f($4 + 48 | 0 | 0, $3 | 0, $8 | 0, $7 | 0, $6 | 0);
    i64toi32_i32$2 = $4 + 56 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $37 = i64toi32_i32$0;
    i64toi32_i32$0 = $4 + 36 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $37;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[($4 + 24 | 0) >> 2] = $2;
    HEAP32[($4 + 20 | 0) >> 2] = 1052380;
    HEAP32[($4 + 16 | 0) >> 2] = 1052380;
    i64toi32_i32$2 = $4;
    i64toi32_i32$1 = HEAP32[($4 + 48 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($4 + 52 | 0) >> 2] | 0;
    $44 = i64toi32_i32$1;
    i64toi32_i32$1 = $4;
    HEAP32[($4 + 28 | 0) >> 2] = $44;
    HEAP32[($4 + 32 | 0) >> 2] = i64toi32_i32$0;
    $3 = HEAP32[(0 + 1066364 | 0) >> 2] | 0;
    if (($3 | 0) <= (-1 | 0)) {
     break label$2
    }
    $3 = $3 + 1 | 0;
    HEAP32[(0 + 1066364 | 0) >> 2] = $3;
    label$5 : {
     $2 = HEAP32[(0 + 1066372 | 0) >> 2] | 0;
     if (!$2) {
      break label$5
     }
     $3 = HEAP32[(0 + 1066368 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[($1 + 16 | 0) >> 2] | 0]($4 + 8 | 0, $0);
     i64toi32_i32$2 = $4;
     i64toi32_i32$0 = HEAP32[($4 + 8 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($4 + 12 | 0) >> 2] | 0;
     $62 = i64toi32_i32$0;
     i64toi32_i32$0 = $4;
     HEAP32[($4 + 16 | 0) >> 2] = $62;
     HEAP32[($4 + 20 | 0) >> 2] = i64toi32_i32$1;
     FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0]($3, $4 + 16 | 0);
     $3 = HEAP32[(0 + 1066364 | 0) >> 2] | 0;
    }
    HEAP32[(0 + 1066364 | 0) >> 2] = $3 + -1 | 0;
    if ($5 >>> 0 <= 1 >>> 0) {
     break label$1
    }
   }
   abort();
  }
  rust_panic($0 | 0, $1 | 0);
  abort();
 }
 
 function $alloc__vec__DrainFilter_T_2cF__20as_20core__iter__traits__iterator__Iterator___next__hd9d9de247aab59e2($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $4 = 0, $10 = 0, $2 = 0, $5 = 0, $9 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0;
  $2 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       $3 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       $4 = HEAP32[($1 + 12 | 0) >> 2] | 0;
       if (($3 | 0) == ($4 | 0)) {
        break label$5
       }
       $5 = $1 + 4 | 0;
       $6 = $1 + 16 | 0;
       $7 = $1 + 8 | 0;
       $8 = $1 + 12 | 0;
       label$6 : while (1) {
        $9 = $3 + 1 | 0;
        HEAP32[$5 >> 2] = $9;
        if ($3 >>> 0 >= $4 >>> 0) {
         break label$2
        }
        $10 = HEAP32[$7 >> 2] | 0;
        $11 = HEAP32[(HEAP32[$1 >> 2] | 0) >> 2] | 0;
        $12 = $11 + ($3 << 2 | 0) | 0;
        $13 = HEAP32[$12 >> 2] | 0;
        if (($13 | 0) == (HEAP32[(HEAP32[(HEAP32[$6 >> 2] | 0) >> 2] | 0) >> 2] | 0 | 0)) {
         break label$4
        }
        label$7 : {
         label$8 : {
          if (!$10) {
           break label$8
          }
          $3 = $3 - $10 | 0;
          if ($3 >>> 0 >= $4 >>> 0) {
           break label$1
          }
          HEAP32[($11 + ($3 << 2 | 0) | 0) >> 2] = $13;
          $3 = HEAP32[$5 >> 2] | 0;
          $4 = HEAP32[$8 >> 2] | 0;
          break label$7;
         }
         $3 = $9;
        }
        if (($3 | 0) != ($4 | 0)) {
         continue label$6
        }
        break label$6;
       };
      }
      break label$3;
     }
     $2 = 1;
     HEAP32[($1 + 8 | 0) >> 2] = $10 + 1 | 0;
     $3 = HEAP32[$12 >> 2] | 0;
    }
    HEAP32[($0 + 4 | 0) >> 2] = $3;
    HEAP32[$0 >> 2] = $2;
    return;
   }
   core__panicking__panic_bounds_check__h0537ade040df571e(1050756 | 0, $3 | 0, $4 | 0);
   abort();
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1050772 | 0, $3 | 0, $4 | 0);
  abort();
 }
 
 function $alloc__vec__DrainFilter_T_2cF__20as_20core__iter__traits__iterator__Iterator___next__h9e77575c80659de1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $4 = 0, $10 = 0, $2 = 0, $5 = 0, $9 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0;
  $2 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       $3 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       $4 = HEAP32[($1 + 12 | 0) >> 2] | 0;
       if (($3 | 0) == ($4 | 0)) {
        break label$5
       }
       $5 = $1 + 4 | 0;
       $6 = $1 + 16 | 0;
       $7 = $1 + 8 | 0;
       $8 = $1 + 12 | 0;
       label$6 : while (1) {
        $9 = $3 + 1 | 0;
        HEAP32[$5 >> 2] = $9;
        if ($3 >>> 0 >= $4 >>> 0) {
         break label$2
        }
        $10 = HEAP32[$7 >> 2] | 0;
        $11 = HEAP32[(HEAP32[$1 >> 2] | 0) >> 2] | 0;
        $12 = $11 + ($3 << 2 | 0) | 0;
        $13 = HEAP32[$12 >> 2] | 0;
        if (($13 | 0) == (HEAP32[(HEAP32[(HEAP32[$6 >> 2] | 0) >> 2] | 0) >> 2] | 0 | 0)) {
         break label$4
        }
        label$7 : {
         label$8 : {
          if (!$10) {
           break label$8
          }
          $3 = $3 - $10 | 0;
          if ($3 >>> 0 >= $4 >>> 0) {
           break label$1
          }
          HEAP32[($11 + ($3 << 2 | 0) | 0) >> 2] = $13;
          $3 = HEAP32[$5 >> 2] | 0;
          $4 = HEAP32[$8 >> 2] | 0;
          break label$7;
         }
         $3 = $9;
        }
        if (($3 | 0) != ($4 | 0)) {
         continue label$6
        }
        break label$6;
       };
      }
      break label$3;
     }
     $2 = 1;
     HEAP32[($1 + 8 | 0) >> 2] = $10 + 1 | 0;
     $3 = HEAP32[$12 >> 2] | 0;
    }
    HEAP32[($0 + 4 | 0) >> 2] = $3;
    HEAP32[$0 >> 2] = $2;
    return;
   }
   core__panicking__panic_bounds_check__h0537ade040df571e(1050756 | 0, $3 | 0, $4 | 0);
   abort();
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1050772 | 0, $3 | 0, $4 | 0);
  abort();
 }
 
 function core__fmt__Write__write_char__h3c3cb45a8d017382($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = global$0 - 16 | 0;
  global$0 = $2;
  HEAP32[($2 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if ($1 >>> 0 >= 128 >>> 0) {
     break label$2
    }
    HEAP8[($2 + 12 | 0) >> 0] = $1;
    $1 = 1;
    break label$1;
   }
   label$3 : {
    if ($1 >>> 0 >= 2048 >>> 0) {
     break label$3
    }
    HEAP8[($2 + 13 | 0) >> 0] = $1 & 63 | 0 | 128 | 0;
    HEAP8[($2 + 12 | 0) >> 0] = ($1 >>> 6 | 0) & 31 | 0 | 192 | 0;
    $1 = 2;
    break label$1;
   }
   label$4 : {
    if ($1 >>> 0 >= 65536 >>> 0) {
     break label$4
    }
    HEAP8[($2 + 14 | 0) >> 0] = $1 & 63 | 0 | 128 | 0;
    HEAP8[($2 + 13 | 0) >> 0] = ($1 >>> 6 | 0) & 63 | 0 | 128 | 0;
    HEAP8[($2 + 12 | 0) >> 0] = ($1 >>> 12 | 0) & 15 | 0 | 224 | 0;
    $1 = 3;
    break label$1;
   }
   HEAP8[($2 + 15 | 0) >> 0] = $1 & 63 | 0 | 128 | 0;
   HEAP8[($2 + 12 | 0) >> 0] = $1 >>> 18 | 0 | 240 | 0;
   HEAP8[($2 + 14 | 0) >> 0] = ($1 >>> 6 | 0) & 63 | 0 | 128 | 0;
   HEAP8[($2 + 13 | 0) >> 0] = ($1 >>> 12 | 0) & 63 | 0 | 128 | 0;
   $1 = 4;
  }
  $1 = $core__fmt__builders__PadAdapter_20as_20core__fmt__Write___write_str__h09f53eef721a952f($0 | 0, $2 + 12 | 0 | 0, $1 | 0) | 0;
  global$0 = $2 + 16 | 0;
  return $1 | 0;
 }
 
 function core__num__dec2flt__rawfp__fp_to_float__hfb005cc21d1c97fe($0, $0$hi, $1) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3 = 0, $4 = Math_fround(0);
  $2 = global$0 - 96 | 0;
  global$0 = $2;
  HEAP16[($2 + 48 | 0) >> 1] = $1;
  i64toi32_i32$0 = $0$hi;
  i64toi32_i32$1 = $2;
  HEAP32[($2 + 40 | 0) >> 2] = $0;
  HEAP32[($2 + 44 | 0) >> 2] = i64toi32_i32$0;
  core__num__diy_float__Fp__normalize__h3de17146ae536bff($2 + 24 | 0 | 0, $2 + 40 | 0 | 0);
  i64toi32_i32$0 = HEAP32[($2 + 24 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2 + 28 | 0) >> 2] | 0;
  $0 = i64toi32_i32$0;
  $0$hi = i64toi32_i32$1;
  $1 = HEAPU16[($2 + 32 | 0) >> 1] | 0;
  $3 = $1 + 63 | 0;
  HEAP16[($2 + 62 | 0) >> 1] = $3;
  label$1 : {
   label$2 : {
    $3 = ($3 << 16 | 0) >> 16 | 0;
    if (($3 | 0) > (127 | 0)) {
     break label$2
    }
    if (($3 | 0) <= (-126 | 0)) {
     break label$1
    }
    i64toi32_i32$1 = $0$hi;
    core__num__dec2flt__rawfp__round_normal__ha876a267818aec99($2 + 8 | 0 | 0, $0 | 0, i64toi32_i32$1 | 0, $1 | 0);
    i64toi32_i32$1 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($2 + 12 | 0) >> 2] | 0;
    $4 = Math_fround(core__num__dec2flt__rawfp__encode_normal__h79788dc1a919ce5b(i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, HEAPU16[($2 + 16 | 0) >> 1] | 0 | 0));
    global$0 = $2 + 96 | 0;
    return Math_fround($4);
   }
   HEAP32[($2 + 84 | 0) >> 2] = 1;
   HEAP32[($2 + 92 | 0) >> 2] = 6;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = 0;
   HEAP32[($2 + 68 | 0) >> 2] = 2;
   HEAP32[($2 + 72 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($2 + 64 | 0) >> 2] = 1049664;
   HEAP32[($2 + 88 | 0) >> 2] = $2 + 62 | 0;
   HEAP32[($2 + 80 | 0) >> 2] = $2 + 88 | 0;
   core__panicking__panic_fmt__h2daf88b2616ca2b2($2 + 64 | 0 | 0, 1049680 | 0);
   abort();
  }
  HEAP32[($2 + 84 | 0) >> 2] = 1;
  HEAP32[($2 + 92 | 0) >> 2] = 6;
  i64toi32_i32$1 = $2;
  i64toi32_i32$0 = 0;
  HEAP32[($2 + 68 | 0) >> 2] = 2;
  HEAP32[($2 + 72 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($2 + 64 | 0) >> 2] = 1049708;
  HEAP32[($2 + 88 | 0) >> 2] = $2 + 62 | 0;
  HEAP32[($2 + 80 | 0) >> 2] = $2 + 88 | 0;
  core__panicking__panic_fmt__h2daf88b2616ca2b2($2 + 64 | 0 | 0, 1049724 | 0);
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___reserve_internal__h8d71322955e7b7f1($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var i64toi32_i32$4 = 0, $5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $6 = 0, i64toi32_i32$0 = 0, $14 = 0, $7 = 0, $15 = 0, $7$hi = 0;
  $5 = 2;
  label$1 : {
   label$2 : {
    label$3 : {
     $6 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if (($6 - $1 | 0) >>> 0 >= $2 >>> 0) {
      break label$3
     }
     $2 = $1 + $2 | 0;
     $1 = $2 >>> 0 < $1 >>> 0;
     label$4 : {
      if (!$4) {
       break label$4
      }
      if (!$1) {
       break label$2
      }
      return $T_20as_20core__convert__From_T____from__hc75af0282ff5d0c6($T_20as_20core__convert__From_T____from__hc75af0282ff5d0c6(0 | 0) | 0 | 0) | 0 | 0;
     }
     if (!$1) {
      break label$1
     }
     $5 = $T_20as_20core__convert__From_T____from__hc75af0282ff5d0c6(0 | 0) | 0;
    }
    return $5 | 0;
   }
   $1 = $6 << 1 | 0;
   $2 = $2 >>> 0 < $1 >>> 0 ? $1 : $2;
  }
  label$5 : {
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 5;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $14 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $14 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $7 = $14;
   $7$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $7;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $15 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $15 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   if (!$15) {
    break label$5
   }
   $T_20as_20core__convert__From_T____from__h197a9b5075e87dfb();
   return $T_20as_20core__convert__From_T____from__hc75af0282ff5d0c6(0 | 0) | 0 | 0;
  }
  label$6 : {
   label$7 : {
    label$8 : {
     label$9 : {
      label$10 : {
       i64toi32_i32$2 = $7$hi;
       $5 = $7;
       if (($5 | 0) <= (-1 | 0)) {
        break label$10
       }
       if (!$6) {
        break label$9
       }
       $1 = __rust_realloc(HEAP32[$0 >> 2] | 0 | 0, $6 << 5 | 0 | 0, 4 | 0, $5 | 0) | 0;
       if (!$1) {
        break label$8
       }
       break label$7;
      }
      return $T_20as_20core__convert__From_T____from__hc75af0282ff5d0c6(0 | 0) | 0 | 0;
     }
     $1 = __rust_alloc($5 | 0, 4 | 0) | 0;
     if ($1) {
      break label$7
     }
    }
    if ($3) {
     break label$6
    }
   }
   label$11 : {
    if (!$1) {
     break label$11
    }
    HEAP32[$0 >> 2] = $1;
    HEAP32[($0 + 4 | 0) >> 2] = $2;
    return 2 | 0;
   }
   return 1 | 0;
  }
  alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83($5 | 0, 4 | 0);
  abort();
 }
 
 function stretch__node__Stretch__add_child__h533b171a96a977a0($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4 = 0, $5 = 0, $15 = 0, $18 = 0, $29 = 0, $39 = 0, $45 = 0, $48 = 0, $59 = 0, $69 = 0;
  $4 = global$0 - 48 | 0;
  global$0 = $4;
  $5 = ($4 + 32 | 0) + 8 | 0;
  i64toi32_i32$2 = $2 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $15 = i64toi32_i32$0;
  i64toi32_i32$0 = $5;
  HEAP32[i64toi32_i32$0 >> 2] = $15;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $18 = i64toi32_i32$1;
  i64toi32_i32$1 = $4;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = $18;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
  stretch__node__Stretch__find_node__h5d72b27b054a57c0(i64toi32_i32$1 + 8 | 0 | 0, $1 | 0, i64toi32_i32$1 + 32 | 0 | 0);
  label$1 : {
   label$2 : {
    if ((HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    i64toi32_i32$2 = $4;
    i64toi32_i32$0 = HEAP32[($4 + 12 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($4 + 16 | 0) >> 2] | 0;
    $29 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $29;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = HEAP32[($4 + 28 | 0) >> 2] | 0;
    i64toi32_i32$2 = $4 + 20 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $39 = i64toi32_i32$1;
    i64toi32_i32$1 = $0 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $39;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    break label$1;
   }
   $2 = HEAP32[($4 + 12 | 0) >> 2] | 0;
   i64toi32_i32$2 = $3 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $45 = i64toi32_i32$0;
   i64toi32_i32$0 = $5;
   HEAP32[i64toi32_i32$0 >> 2] = $45;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $3;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $48 = i64toi32_i32$1;
   i64toi32_i32$1 = $4;
   HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = $48;
   HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
   stretch__node__Stretch__find_node__h5d72b27b054a57c0(i64toi32_i32$1 + 8 | 0 | 0, $1 | 0, i64toi32_i32$1 + 32 | 0 | 0);
   label$3 : {
    if ((HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$3
    }
    i64toi32_i32$2 = $4;
    i64toi32_i32$0 = HEAP32[($4 + 12 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($4 + 16 | 0) >> 2] | 0;
    $59 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $59;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = HEAP32[($4 + 28 | 0) >> 2] | 0;
    i64toi32_i32$2 = $4 + 20 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $69 = i64toi32_i32$1;
    i64toi32_i32$1 = $0 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $69;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    break label$1;
   }
   stretch__forest__Forest__add_child__h691459057d0acfe1($1 + 104 | 0 | 0, $2 | 0, HEAP32[($4 + 12 | 0) >> 2] | 0 | 0);
   HEAP32[$0 >> 2] = 2;
  }
  global$0 = $4 + 48 | 0;
 }
 
 function stretch_layout__Node__set_style__h6b4c38002d33c7fa($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $3 = 0, $4 = 0, $20 = 0, $23 = 0, $65 = 0, $68 = 0;
  $2 = global$0 - 256 | 0;
  global$0 = $2;
  label$1 : {
   label$2 : {
    $3 = HEAP32[$0 >> 2] | 0;
    if (HEAP32[($3 + 8 | 0) >> 2] | 0) {
     break label$2
    }
    $4 = $3 + 8 | 0;
    HEAP32[$4 >> 2] = -1;
    i64toi32_i32$2 = $0 + 12 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $20 = i64toi32_i32$0;
    i64toi32_i32$0 = ($2 + 24 | 0) + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $20;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    $23 = i64toi32_i32$1;
    i64toi32_i32$1 = $2;
    HEAP32[($2 + 24 | 0) >> 2] = $23;
    HEAP32[($2 + 28 | 0) >> 2] = i64toi32_i32$0;
    stretch_layout__parse_style__h91b82fac5ad97f80($2 + 40 | 0 | 0, $1 | 0);
    stretch__node__Stretch__set_style__hf875cf3b2c93c539($2 | 0, $3 + 16 | 0 | 0, $2 + 24 | 0 | 0, $2 + 40 | 0 | 0);
    if ((HEAP32[$2 >> 2] | 0 | 0) != (2 | 0)) {
     break label$1
    }
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
    $1 = __wbindgen_object_clone_ref(HEAP32[$1 >> 2] | 0 | 0) | 0;
    label$3 : {
     $3 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     if ($3 >>> 0 < 36 >>> 0) {
      break label$3
     }
     __wbindgen_object_drop_ref($3 | 0);
    }
    HEAP32[($0 + 20 | 0) >> 2] = $1;
    global$0 = $2 + 256 | 0;
    return;
   }
   core__result__unwrap_failed__h2450ec3de4884319(1048576 | 0, 16 | 0);
   abort();
  }
  HEAP32[(($2 + 40 | 0) + 16 | 0) >> 2] = HEAP32[($2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$2 = $2 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $65 = i64toi32_i32$0;
  i64toi32_i32$0 = ($2 + 40 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $65;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = HEAP32[$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2 + 4 | 0) >> 2] | 0;
  $68 = i64toi32_i32$1;
  i64toi32_i32$1 = $2;
  HEAP32[($2 + 40 | 0) >> 2] = $68;
  HEAP32[($2 + 44 | 0) >> 2] = i64toi32_i32$0;
  core__result__unwrap_failed__h8a62896efab79dcd(1048696 | 0, 43 | 0, $2 + 40 | 0 | 0);
  abort();
 }
 
 function stretch__algo___impl_20stretch__forest__Forest___round_layout__hb419edbcacf68d87($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  $4 = Math_fround($4);
  var $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  label$1 : {
   label$2 : {
    $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    if ($5 >>> 0 <= $2 >>> 0) {
     break label$2
    }
    $5 = (HEAP32[$0 >> 2] | 0) + Math_imul($2, 288) | 0;
    $6 = $5 + 236 | 0;
    $7 = Math_fround(HEAPF32[$6 >> 2]);
    (wasm2js_i32$0 = $6, wasm2js_f32$0 = Math_fround(roundf(Math_fround($7)))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $6 = $5 + 232 | 0;
    $8 = Math_fround(HEAPF32[$6 >> 2]);
    (wasm2js_i32$0 = $6, wasm2js_f32$0 = Math_fround(roundf(Math_fround($8)))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $6 = $5 + 224 | 0;
    $3 = Math_fround($8 + $3);
    (wasm2js_i32$0 = $6, wasm2js_f32$0 = Math_fround(Math_fround(roundf(Math_fround(Math_fround($3 + Math_fround(HEAPF32[$6 >> 2]))))) - Math_fround(roundf(Math_fround($3))))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $5 = $5 + 228 | 0;
    $4 = Math_fround($7 + $4);
    (wasm2js_i32$0 = $5, wasm2js_f32$0 = Math_fround(Math_fround(roundf(Math_fround(Math_fround($4 + Math_fround(HEAPF32[$5 >> 2]))))) - Math_fround(roundf(Math_fround($4))))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $5 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    if ($5 >>> 0 <= $2 >>> 0) {
     break label$1
    }
    label$3 : {
     $2 = (HEAP32[$1 >> 2] | 0) + Math_imul($2, 12) | 0;
     $5 = HEAP32[($2 + 8 | 0) >> 2] | 0;
     if (!$5) {
      break label$3
     }
     $2 = HEAP32[$2 >> 2] | 0;
     $5 = $5 << 2 | 0;
     label$4 : while (1) {
      stretch__algo___impl_20stretch__forest__Forest___round_layout__hb419edbcacf68d87($0 | 0, $1 | 0, HEAP32[$2 >> 2] | 0 | 0, Math_fround($3), Math_fround($4));
      $2 = $2 + 4 | 0;
      $5 = $5 + -4 | 0;
      if ($5) {
       continue label$4
      }
      break label$4;
     };
    }
    return;
   }
   core__panicking__panic_bounds_check__h0537ade040df571e(1051112 | 0, $2 | 0, $5 | 0);
   abort();
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $2 | 0, $5 | 0);
  abort();
 }
 
 function stretch_layout__get_i32__h4e130a2f15705d8c($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4 = global$0 - 32 | 0;
  global$0 = $4;
  $5 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!(stretch_layout__has_key__h3ec688104a7b111a($1 | 0, $2 | 0, $3 | 0) | 0)) {
      break label$3
     }
     (wasm2js_i32$0 = $4, wasm2js_i32$1 = __wbindgen_string_new($2 | 0, $3 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
     js_sys__Reflect__get__hb202a761aaf27873($4 + 16 | 0 | 0, $1 | 0, $4 + 24 | 0 | 0);
     $1 = HEAP32[($4 + 20 | 0) >> 2] | 0;
     if (!(HEAP32[($4 + 16 | 0) >> 2] | 0)) {
      break label$2
     }
     label$4 : {
      if ($1 >>> 0 < 36 >>> 0) {
       break label$4
      }
      __wbindgen_object_drop_ref($1 | 0);
     }
     $1 = HEAP32[($4 + 24 | 0) >> 2] | 0;
     if ($1 >>> 0 < 36 >>> 0) {
      break label$3
     }
     __wbindgen_object_drop_ref($1 | 0);
    }
    break label$1;
   }
   HEAP32[($4 + 28 | 0) >> 2] = $1;
   wasm_bindgen__JsValue__as_f64__h7e1a5be5cc4fe0a8($4 | 0, $4 + 28 | 0 | 0);
   $3 = HEAP32[$4 >> 2] | 0;
   $5 = HEAP32[($4 + 28 | 0) >> 2] | 0;
   $2 = $5 >>> 0 < 36 >>> 0;
   label$5 : {
    label$6 : {
     label$7 : {
      $6 = +HEAPF64[($4 + 8 | 0) >> 3];
      if (Math_abs($6) < 2147483648.0) {
       break label$7
      }
      $1 = -2147483648;
      if (!$2) {
       break label$6
      }
      break label$5;
     }
     $1 = ~~$6;
     if ($2) {
      break label$5
     }
    }
    __wbindgen_object_drop_ref($5 | 0);
   }
   label$8 : {
    $2 = HEAP32[($4 + 24 | 0) >> 2] | 0;
    if ($2 >>> 0 < 36 >>> 0) {
     break label$8
    }
    __wbindgen_object_drop_ref($2 | 0);
   }
   $5 = ($3 | 0) != (0 | 0);
  }
  HEAP32[($0 + 4 | 0) >> 2] = $1;
  HEAP32[$0 >> 2] = $5;
  global$0 = $4 + 32 | 0;
 }
 
 function stretch__forest__Forest__add_child__h691459057d0acfe1($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $5 = 0, $4 = 0, $6 = 0;
  label$1 : {
   label$2 : {
    $3 = HEAP32[($0 + 32 | 0) >> 2] | 0;
    if ($3 >>> 0 <= $2 >>> 0) {
     break label$2
    }
    $3 = (HEAP32[($0 + 24 | 0) >> 2] | 0) + Math_imul($2, 12) | 0;
    $4 = $3 + 8 | 0;
    label$3 : {
     $5 = HEAP32[($3 + 8 | 0) >> 2] | 0;
     if (($5 | 0) != (HEAP32[($3 + 4 | 0) >> 2] | 0 | 0)) {
      break label$3
     }
     alloc__raw_vec__RawVec_T_2cA___reserve__h04586cd83aef0f94($3 | 0, $5 | 0, 1 | 0);
     $5 = HEAP32[$4 >> 2] | 0;
    }
    HEAP32[((HEAP32[$3 >> 2] | 0) + ($5 << 2 | 0) | 0) >> 2] = $1;
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
    $3 = HEAP32[($0 + 20 | 0) >> 2] | 0;
    if ($3 >>> 0 <= $1 >>> 0) {
     break label$1
    }
    $6 = $0 + 24 | 0;
    $3 = (HEAP32[($0 + 12 | 0) >> 2] | 0) + Math_imul($1, 12) | 0;
    $4 = $3 + 8 | 0;
    label$4 : {
     $5 = HEAP32[($3 + 8 | 0) >> 2] | 0;
     if (($5 | 0) != (HEAP32[($3 + 4 | 0) >> 2] | 0 | 0)) {
      break label$4
     }
     alloc__raw_vec__RawVec_T_2cA___reserve__h04586cd83aef0f94($3 | 0, $5 | 0, 1 | 0);
     $5 = HEAP32[$4 >> 2] | 0;
    }
    HEAP32[((HEAP32[$3 >> 2] | 0) + ($5 << 2 | 0) | 0) >> 2] = $2;
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
    stretch__forest__Forest__mark_dirty__mark_dirty_impl__hafdb374afea4365e($0 | 0, $6 | 0, $1 | 0);
    return;
   }
   core__panicking__panic_bounds_check__h0537ade040df571e(1051112 | 0, $2 | 0, $3 | 0);
   abort();
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1051112 | 0, $1 | 0, $3 | 0);
  abort();
 }
 
 function stretch_layout__Node__set_measure__h762a5139f9ec7582($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $3 = 0, $22 = 0, $25 = 0, $59 = 0, $62 = 0;
  $2 = global$0 - 48 | 0;
  global$0 = $2;
  $3 = $T_20as_20core__convert__Into_U____into__h82cecd98d3867363(__wbindgen_object_clone_ref(HEAP32[$1 >> 2] | 0 | 0) | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $1 = HEAP32[$0 >> 2] | 0;
     if (HEAP32[($1 + 8 | 0) >> 2] | 0) {
      break label$3
     }
     HEAP32[($1 + 8 | 0) >> 2] = -1;
     i64toi32_i32$2 = $0 + 12 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $22 = i64toi32_i32$0;
     i64toi32_i32$0 = ($2 + 24 | 0) + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $22;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0;
     i64toi32_i32$1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     $25 = i64toi32_i32$1;
     i64toi32_i32$1 = $2;
     HEAP32[($2 + 24 | 0) >> 2] = $25;
     HEAP32[($2 + 28 | 0) >> 2] = i64toi32_i32$0;
     $0 = __rust_alloc(4 | 0, 4 | 0) | 0;
     if (!$0) {
      break label$2
     }
     HEAP32[$0 >> 2] = $3;
     stretch__node__Stretch__set_measure__h61f9e6963dd2ae20($2 | 0, $1 + 16 | 0 | 0, $2 + 24 | 0 | 0, $0 | 0, 1049092 | 0);
     if ((HEAP32[$2 >> 2] | 0 | 0) != (2 | 0)) {
      break label$1
     }
     $0 = $1 + 8 | 0;
     HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1 | 0;
     global$0 = $2 + 48 | 0;
     return;
    }
    core__result__unwrap_failed__h2450ec3de4884319(1048576 | 0, 16 | 0);
    abort();
   }
   alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83(4 | 0, 4 | 0);
   abort();
  }
  HEAP32[(($2 + 24 | 0) + 16 | 0) >> 2] = HEAP32[($2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$2 = $2 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $59 = i64toi32_i32$0;
  i64toi32_i32$0 = ($2 + 24 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $59;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = HEAP32[$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2 + 4 | 0) >> 2] | 0;
  $62 = i64toi32_i32$1;
  i64toi32_i32$1 = $2;
  HEAP32[($2 + 24 | 0) >> 2] = $62;
  HEAP32[($2 + 28 | 0) >> 2] = i64toi32_i32$0;
  core__result__unwrap_failed__h8a62896efab79dcd(1048696 | 0, 43 | 0, $2 + 24 | 0 | 0);
  abort();
 }
 
 function stretch__node__Stretch__set_measure__h61f9e6963dd2ae20($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $6 = 0, $19 = 0, $22 = 0, $33 = 0, $43 = 0;
  $5 = global$0 - 48 | 0;
  global$0 = $5;
  HEAP32[($5 + 4 | 0) >> 2] = $4;
  HEAP32[$5 >> 2] = $3;
  i64toi32_i32$2 = $2 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $19 = i64toi32_i32$0;
  i64toi32_i32$0 = ($5 + 32 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $19;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $22 = i64toi32_i32$1;
  i64toi32_i32$1 = $5;
  HEAP32[($5 + 32 | 0) >> 2] = $22;
  HEAP32[($5 + 36 | 0) >> 2] = i64toi32_i32$0;
  stretch__node__Stretch__find_node__h5d72b27b054a57c0($5 + 8 | 0 | 0, $1 | 0, $5 + 32 | 0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $5;
     i64toi32_i32$0 = HEAP32[($5 + 12 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($5 + 16 | 0) >> 2] | 0;
     $33 = i64toi32_i32$0;
     i64toi32_i32$0 = $0;
     HEAP32[i64toi32_i32$0 >> 2] = $33;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = HEAP32[($5 + 28 | 0) >> 2] | 0;
     i64toi32_i32$2 = $5 + 20 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $43 = i64toi32_i32$1;
     i64toi32_i32$1 = $0 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $43;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     core__ptr__real_drop_in_place__hd96d6eb7b4e9ed5f($5 | 0);
     break label$2;
    }
    $6 = HEAP32[($1 + 112 | 0) >> 2] | 0;
    $2 = HEAP32[($5 + 12 | 0) >> 2] | 0;
    if ($6 >>> 0 <= $2 >>> 0) {
     break label$1
    }
    $6 = (HEAP32[($1 + 104 | 0) >> 2] | 0) + Math_imul($2, 288) | 0;
    core__ptr__real_drop_in_place__hd96d6eb7b4e9ed5f($6 + 212 | 0 | 0);
    HEAP32[($6 + 216 | 0) >> 2] = $4;
    HEAP32[($6 + 212 | 0) >> 2] = $3;
    stretch__forest__Forest__mark_dirty__mark_dirty_impl__hafdb374afea4365e($1 + 104 | 0 | 0, $1 + 128 | 0 | 0, $2 | 0);
    HEAP32[$0 >> 2] = 2;
   }
   global$0 = $5 + 48 | 0;
   return;
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1051320 | 0, $2 | 0, $6 | 0);
  abort();
 }
 
 function std__sys_common__thread_info__ThreadInfo__with___7b_7bclosure_7d_7d__hb699849b36c0e1da($0) {
  $0 = $0 | 0;
  var $2 = 0, $3 = 0, $1 = 0, $4 = 0, $5 = 0;
  $1 = global$0 - 16 | 0;
  global$0 = $1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $2 = HEAP32[$0 >> 2] | 0;
      if (($2 | 0) < (0 | 0)) {
       break label$4
      }
      if (($2 | 0) == (2147483647 | 0)) {
       break label$4
      }
      HEAP32[$0 >> 2] = $2;
      label$5 : {
       $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       if ($3) {
        break label$5
       }
       HEAP32[$1 >> 2] = 0;
       $3 = std__thread__Thread__new__h5b15730e54159bdd($1 | 0) | 0;
       if (HEAP32[$0 >> 2] | 0) {
        break label$3
       }
       HEAP32[$0 >> 2] = -1;
       label$6 : {
        $4 = $0 + 4 | 0;
        $2 = HEAP32[$4 >> 2] | 0;
        if (!$2) {
         break label$6
        }
        $5 = HEAP32[$2 >> 2] | 0;
        HEAP32[$2 >> 2] = $5 + -1 | 0;
        if (($5 | 0) != (1 | 0)) {
         break label$6
        }
        alloc__sync__Arc_T___drop_slow__h51a4fa13661dd7d4($0 + 4 | 0 | 0);
       }
       HEAP32[$4 >> 2] = $3;
       $2 = (HEAP32[$0 >> 2] | 0) + 1 | 0;
       HEAP32[$0 >> 2] = $2;
      }
      if ($2) {
       break label$3
      }
      HEAP32[$0 >> 2] = -1;
      if (!$3) {
       break label$2
      }
      $2 = HEAP32[$3 >> 2] | 0;
      HEAP32[$3 >> 2] = $2 + 1 | 0;
      if (($2 | 0) <= (-1 | 0)) {
       break label$1
      }
      HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1 | 0;
      global$0 = $1 + 16 | 0;
      return $3 | 0;
     }
     core__result__unwrap_failed__hf5e9b5ec58b89940();
     abort();
    }
    core__result__unwrap_failed__hdc9bb8ca94a20a33();
    abort();
   }
   core__panicking__panic__h2d0bc53a963fb996(1052488 | 0);
   abort();
  }
  abort();
 }
 
 function core__num__dec2flt__algorithm__make_ratio__h003a9dbef8c19d2f($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $4 = $3 << 16 | 0;
  $5 = $4 >> 31 | 0;
  $3 = ((($3 + $5 | 0) ^ $5 | 0) << 16 | 0) >> 16 | 0;
  $5 = $2 << 16 | 0;
  $6 = $5 >> 31 | 0;
  $2 = ((($2 + $6 | 0) ^ $6 | 0) << 16 | 0) >> 16 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($5 >> 16 | 0 | 0) <= (-1 | 0)) {
      break label$3
     }
     if (($4 >> 16 | 0 | 0) <= (-1 | 0)) {
      break label$2
     }
     $4 = $2 >>> 0 > $3 >>> 0 ? $3 : $2;
     core__num__bignum__Big32x40__mul_pow2__h9585b2465912363e(core__num__bignum__Big32x40__mul_pow5__h5aa98cad29f0d9cf($0 | 0, $2 | 0) | 0 | 0, $2 - $4 | 0 | 0) | 0;
     core__num__bignum__Big32x40__mul_pow2__h9585b2465912363e($1 | 0, $3 - $4 | 0 | 0) | 0;
     return;
    }
    if (($4 >> 16 | 0 | 0) <= (-1 | 0)) {
     break label$1
    }
    core__num__bignum__Big32x40__mul_pow2__h9585b2465912363e(core__num__bignum__Big32x40__mul_pow5__h5aa98cad29f0d9cf($1 | 0, $2 | 0) | 0 | 0, $3 + $2 | 0 | 0) | 0;
    return;
   }
   core__num__bignum__Big32x40__mul_pow2__h9585b2465912363e(core__num__bignum__Big32x40__mul_pow5__h5aa98cad29f0d9cf($0 | 0, $2 | 0) | 0 | 0, $3 + $2 | 0 | 0) | 0;
   return;
  }
  $4 = $2 >>> 0 > $3 >>> 0 ? $3 : $2;
  core__num__bignum__Big32x40__mul_pow2__h9585b2465912363e($0 | 0, $3 - $4 | 0 | 0) | 0;
  core__num__bignum__Big32x40__mul_pow2__h9585b2465912363e(core__num__bignum__Big32x40__mul_pow5__h5aa98cad29f0d9cf($1 | 0, $2 | 0) | 0 | 0, $2 - $4 | 0 | 0) | 0;
 }
 
 function stretch_layout__Node__add_child__h24958c907242c3db($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $3 = 0, $4 = 0, $5 = 0, $21 = 0, $24 = 0, $31 = 0, $34 = 0, $64 = 0, $67 = 0;
  $2 = global$0 - 64 | 0;
  global$0 = $2;
  label$1 : {
   label$2 : {
    $3 = HEAP32[$0 >> 2] | 0;
    if (HEAP32[($3 + 8 | 0) >> 2] | 0) {
     break label$2
    }
    $4 = $3 + 8 | 0;
    HEAP32[$4 >> 2] = -1;
    i64toi32_i32$2 = $0 + 12 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $21 = i64toi32_i32$0;
    i64toi32_i32$0 = ($2 + 24 | 0) + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $21;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    $24 = i64toi32_i32$1;
    i64toi32_i32$1 = $2;
    HEAP32[($2 + 24 | 0) >> 2] = $24;
    HEAP32[($2 + 28 | 0) >> 2] = i64toi32_i32$0;
    $5 = ($2 + 40 | 0) + 8 | 0;
    i64toi32_i32$2 = $1 + 12 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $31 = i64toi32_i32$0;
    i64toi32_i32$0 = $5;
    HEAP32[i64toi32_i32$0 >> 2] = $31;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    $34 = i64toi32_i32$1;
    i64toi32_i32$1 = $2;
    HEAP32[($2 + 40 | 0) >> 2] = $34;
    HEAP32[($2 + 44 | 0) >> 2] = i64toi32_i32$0;
    stretch__node__Stretch__add_child__h533b171a96a977a0($2 | 0, $3 + 16 | 0 | 0, $2 + 24 | 0 | 0, $2 + 40 | 0 | 0);
    if ((HEAP32[$2 >> 2] | 0 | 0) != (2 | 0)) {
     break label$1
    }
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
    HEAP32[($0 + 24 | 0) >> 2] = (HEAP32[($0 + 24 | 0) >> 2] | 0) + 1 | 0;
    global$0 = $2 + 64 | 0;
    return;
   }
   core__result__unwrap_failed__h2450ec3de4884319(1048576 | 0, 16 | 0);
   abort();
  }
  HEAP32[(($2 + 40 | 0) + 16 | 0) >> 2] = HEAP32[($2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$2 = $2 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $64 = i64toi32_i32$0;
  i64toi32_i32$0 = $5;
  HEAP32[i64toi32_i32$0 >> 2] = $64;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = HEAP32[$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2 + 4 | 0) >> 2] | 0;
  $67 = i64toi32_i32$1;
  i64toi32_i32$1 = $2;
  HEAP32[($2 + 40 | 0) >> 2] = $67;
  HEAP32[($2 + 44 | 0) >> 2] = i64toi32_i32$0;
  core__result__unwrap_failed__h8a62896efab79dcd(1048696 | 0, 43 | 0, $2 + 40 | 0 | 0);
  abort();
 }
 
 function stretch_layout__Node__remove_child__h5ac3490bdd08e8f4($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $3 = 0, $4 = 0, $5 = 0, $21 = 0, $24 = 0, $31 = 0, $34 = 0, $64 = 0, $67 = 0;
  $2 = global$0 - 64 | 0;
  global$0 = $2;
  label$1 : {
   label$2 : {
    $3 = HEAP32[$0 >> 2] | 0;
    if (HEAP32[($3 + 8 | 0) >> 2] | 0) {
     break label$2
    }
    $4 = $3 + 8 | 0;
    HEAP32[$4 >> 2] = -1;
    i64toi32_i32$2 = $0 + 12 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $21 = i64toi32_i32$0;
    i64toi32_i32$0 = ($2 + 24 | 0) + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $21;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    $24 = i64toi32_i32$1;
    i64toi32_i32$1 = $2;
    HEAP32[($2 + 24 | 0) >> 2] = $24;
    HEAP32[($2 + 28 | 0) >> 2] = i64toi32_i32$0;
    $5 = ($2 + 40 | 0) + 8 | 0;
    i64toi32_i32$2 = $1 + 12 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $31 = i64toi32_i32$0;
    i64toi32_i32$0 = $5;
    HEAP32[i64toi32_i32$0 >> 2] = $31;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    $34 = i64toi32_i32$1;
    i64toi32_i32$1 = $2;
    HEAP32[($2 + 40 | 0) >> 2] = $34;
    HEAP32[($2 + 44 | 0) >> 2] = i64toi32_i32$0;
    stretch__node__Stretch__remove_child__h6fb0a3a71f44d38e($2 | 0, $3 + 16 | 0 | 0, $2 + 24 | 0 | 0, $2 + 40 | 0 | 0);
    if ((HEAP32[$2 >> 2] | 0 | 0) == (1 | 0)) {
     break label$1
    }
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
    HEAP32[($0 + 24 | 0) >> 2] = (HEAP32[($0 + 24 | 0) >> 2] | 0) + -1 | 0;
    global$0 = $2 + 64 | 0;
    return;
   }
   core__result__unwrap_failed__h2450ec3de4884319(1048576 | 0, 16 | 0);
   abort();
  }
  HEAP32[(($2 + 40 | 0) + 16 | 0) >> 2] = HEAP32[($2 + 20 | 0) >> 2] | 0;
  i64toi32_i32$2 = $2 + 12 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $64 = i64toi32_i32$0;
  i64toi32_i32$0 = $5;
  HEAP32[i64toi32_i32$0 >> 2] = $64;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2 + 8 | 0) >> 2] | 0;
  $67 = i64toi32_i32$1;
  i64toi32_i32$1 = $2;
  HEAP32[($2 + 40 | 0) >> 2] = $67;
  HEAP32[($2 + 44 | 0) >> 2] = i64toi32_i32$0;
  core__result__unwrap_failed__h8a62896efab79dcd(1048696 | 0, 43 | 0, $2 + 40 | 0 | 0);
  abort();
 }
 
 function core__num__dec2flt__algorithm__underflow__hf0cfbbd4e5bacbdb($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6 = Math_fround(0), $4 = 0, $5 = 0, $5$hi = 0;
  $3 = global$0 - 352 | 0;
  global$0 = $3;
  i64toi32_i32$0 = 0;
  core__num__bignum__Big32x40__from_u64__hb47af5bbea157ebc($3 + 184 | 0 | 0, 8388608 | 0, i64toi32_i32$0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ((($core__num__bignum__Big32x40_20as_20core__cmp__Ord___cmp__h9d6c8e8935c913cf($0 | 0, $3 + 184 | 0 | 0) | 0) & 255 | 0 | 0) == (255 | 0)) {
       break label$4
      }
      $1 = core__num__bignum__Big32x40__bit_length__h13ff63659f8edff3($0 | 0) | 0;
      $4 = $1 + -24 | 0;
      i64toi32_i32$0 = core__num__dec2flt__num__get_bits__h41e84022231dc9df($0 | 0, $4 | 0, $1 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $5 = i64toi32_i32$0;
      $5$hi = i64toi32_i32$1;
      core__num__dec2flt__rawfp__Unpacked__new__h5fa9d5bfbc21692b($3 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $1 + -173 | 0 | 0);
      i64toi32_i32$1 = HEAP32[$3 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($3 + 4 | 0) >> 2] | 0;
      $6 = Math_fround(core__num__dec2flt__rawfp__encode_normal__h79788dc1a919ce5b(i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, HEAPU16[($3 + 8 | 0) >> 1] | 0 | 0));
      $0 = core__num__dec2flt__num__compare_with_half_ulp__he9852dcf9bb66aab($0 | 0, $4 | 0) | 0;
      if (!($0 & 255 | 0)) {
       break label$3
      }
      if ((($0 << 24 | 0) >> 24 | 0 | 0) != (1 | 0)) {
       break label$1
      }
      break label$2;
     }
     i64toi32_i32$0 = core__num__dec2flt__num__to_u64__h5d5282c7dcdcfd3f($0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $5 = i64toi32_i32$0;
     $5$hi = i64toi32_i32$1;
     $6 = Math_fround(core__num__dec2flt__rawfp__encode_subnormal__h6cdda8501f4182df(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0));
     memcpy($3 + 16 | 0 | 0, $1 | 0, 164 | 0) | 0;
     memcpy($3 + 184 | 0 | 0, $2 | 0, 164 | 0) | 0;
     $6 = Math_fround(core__num__dec2flt__algorithm__round_by_remainder__h3d86a91325e59e59($3 + 16 | 0 | 0, $3 + 184 | 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, Math_fround($6)));
     break label$1;
    }
    $0 = core__num__bignum__Big32x40__is_zero__hfabaf882dfbca75e($2 | 0) | 0;
    i64toi32_i32$1 = $5$hi;
    if ($5 & 1 | 0) {
     break label$2
    }
    if ($0) {
     break label$1
    }
   }
   $6 = Math_fround(core__num__dec2flt__rawfp__next_float__h96c2fc47f7b351c4(Math_fround($6)));
  }
  global$0 = $3 + 352 | 0;
  return Math_fround($6);
 }
 
 function alloc__raw_vec__RawVec_T_2cA___reserve_internal__h23e69790bdb54470($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var i64toi32_i32$1 = 0, $5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $6 = 0, i64toi32_i32$3 = 0, $14 = 0, $7 = 0, $7$hi = 0, i64toi32_i32$2 = 0;
  $5 = 2;
  label$1 : {
   label$2 : {
    label$3 : {
     $6 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if (($6 - $1 | 0) >>> 0 >= $2 >>> 0) {
      break label$3
     }
     $2 = $1 + $2 | 0;
     $1 = $2 >>> 0 < $1 >>> 0;
     label$4 : {
      label$5 : {
       if (!$4) {
        break label$5
       }
       $5 = 0;
       if ($1) {
        break label$3
       }
       $1 = $6 << 1 | 0;
       $2 = $2 >>> 0 < $1 >>> 0 ? $1 : $2;
       break label$4;
      }
      $5 = 0;
      if ($1) {
       break label$3
      }
     }
     $5 = 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$1 = __wasm_i64_mul($2 | 0, i64toi32_i32$0 | 0, 192 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $7 = i64toi32_i32$1;
     $7$hi = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $14 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $14 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     if ($14) {
      break label$3
     }
     $5 = 0;
     i64toi32_i32$1 = $7$hi;
     $4 = $7;
     if (($4 | 0) < (0 | 0)) {
      break label$3
     }
     label$6 : {
      label$7 : {
       label$8 : {
        if (!$6) {
         break label$8
        }
        $1 = __rust_realloc(HEAP32[$0 >> 2] | 0 | 0, Math_imul($6, 192) | 0, 4 | 0, $4 | 0) | 0;
        if (!$1) {
         break label$7
        }
        break label$6;
       }
       $1 = __rust_alloc($4 | 0, 4 | 0) | 0;
       if ($1) {
        break label$6
       }
      }
      if ($3) {
       break label$1
      }
     }
     if (!$1) {
      break label$2
     }
     HEAP32[$0 >> 2] = $1;
     HEAP32[($0 + 4 | 0) >> 2] = $2;
     $5 = 2;
    }
    return $5 | 0;
   }
   return 1 | 0;
  }
  alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83($4 | 0, 4 | 0);
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___reserve_internal__h34e7ba366acde3b7($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, $5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $6 = 0, i64toi32_i32$0 = 0, $14 = 0, $7 = 0, $15 = 0, $7$hi = 0;
  $5 = 2;
  label$1 : {
   label$2 : {
    label$3 : {
     $6 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if (($6 - $1 | 0) >>> 0 >= $2 >>> 0) {
      break label$3
     }
     $2 = $1 + $2 | 0;
     $1 = $2 >>> 0 < $1 >>> 0;
     label$4 : {
      label$5 : {
       if (!$4) {
        break label$5
       }
       $5 = 0;
       if ($1) {
        break label$3
       }
       $1 = $6 << 1 | 0;
       $2 = $2 >>> 0 < $1 >>> 0 ? $1 : $2;
       break label$4;
      }
      $5 = 0;
      if ($1) {
       break label$3
      }
     }
     $5 = 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = $2;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 3;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $14 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $14 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $7 = $14;
     $7$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $7;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $15 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $15 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     if ($15) {
      break label$3
     }
     $5 = 0;
     i64toi32_i32$2 = $7$hi;
     $4 = $7;
     if (($4 | 0) < (0 | 0)) {
      break label$3
     }
     label$6 : {
      label$7 : {
       label$8 : {
        if (!$6) {
         break label$8
        }
        $1 = __rust_realloc(HEAP32[$0 >> 2] | 0 | 0, $6 << 3 | 0 | 0, 4 | 0, $4 | 0) | 0;
        if (!$1) {
         break label$7
        }
        break label$6;
       }
       $1 = __rust_alloc($4 | 0, 4 | 0) | 0;
       if ($1) {
        break label$6
       }
      }
      if ($3) {
       break label$1
      }
     }
     if (!$1) {
      break label$2
     }
     HEAP32[$0 >> 2] = $1;
     HEAP32[($0 + 4 | 0) >> 2] = $2;
     $5 = 2;
    }
    return $5 | 0;
   }
   return 1 | 0;
  }
  alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83($4 | 0, 4 | 0);
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___reserve_internal__h38be8ea75ce775a9($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, $5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $6 = 0, i64toi32_i32$0 = 0, $14 = 0, $7 = 0, $15 = 0, $7$hi = 0;
  $5 = 2;
  label$1 : {
   label$2 : {
    label$3 : {
     $6 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if (($6 - $1 | 0) >>> 0 >= $2 >>> 0) {
      break label$3
     }
     $2 = $1 + $2 | 0;
     $1 = $2 >>> 0 < $1 >>> 0;
     label$4 : {
      label$5 : {
       if (!$4) {
        break label$5
       }
       $5 = 0;
       if ($1) {
        break label$3
       }
       $1 = $6 << 1 | 0;
       $2 = $2 >>> 0 < $1 >>> 0 ? $1 : $2;
       break label$4;
      }
      $5 = 0;
      if ($1) {
       break label$3
      }
     }
     $5 = 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = $2;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 2;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $14 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $14 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $7 = $14;
     $7$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $7;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $15 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $15 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     if ($15) {
      break label$3
     }
     $5 = 0;
     i64toi32_i32$2 = $7$hi;
     $4 = $7;
     if (($4 | 0) < (0 | 0)) {
      break label$3
     }
     label$6 : {
      label$7 : {
       label$8 : {
        if (!$6) {
         break label$8
        }
        $1 = __rust_realloc(HEAP32[$0 >> 2] | 0 | 0, $6 << 2 | 0 | 0, 4 | 0, $4 | 0) | 0;
        if (!$1) {
         break label$7
        }
        break label$6;
       }
       $1 = __rust_alloc($4 | 0, 4 | 0) | 0;
       if ($1) {
        break label$6
       }
      }
      if ($3) {
       break label$1
      }
     }
     if (!$1) {
      break label$2
     }
     HEAP32[$0 >> 2] = $1;
     HEAP32[($0 + 4 | 0) >> 2] = $2;
     $5 = 2;
    }
    return $5 | 0;
   }
   return 1 | 0;
  }
  alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83($4 | 0, 4 | 0);
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___reserve_internal__h57ea287696751fc9($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var i64toi32_i32$1 = 0, $5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $6 = 0, i64toi32_i32$3 = 0, $14 = 0, $7 = 0, $7$hi = 0, i64toi32_i32$2 = 0;
  $5 = 2;
  label$1 : {
   label$2 : {
    label$3 : {
     $6 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if (($6 - $1 | 0) >>> 0 >= $2 >>> 0) {
      break label$3
     }
     $2 = $1 + $2 | 0;
     $1 = $2 >>> 0 < $1 >>> 0;
     label$4 : {
      label$5 : {
       if (!$4) {
        break label$5
       }
       $5 = 0;
       if ($1) {
        break label$3
       }
       $1 = $6 << 1 | 0;
       $2 = $2 >>> 0 < $1 >>> 0 ? $1 : $2;
       break label$4;
      }
      $5 = 0;
      if ($1) {
       break label$3
      }
     }
     $5 = 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$1 = __wasm_i64_mul($2 | 0, i64toi32_i32$0 | 0, 20 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $7 = i64toi32_i32$1;
     $7$hi = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $14 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $14 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     if ($14) {
      break label$3
     }
     $5 = 0;
     i64toi32_i32$1 = $7$hi;
     $4 = $7;
     if (($4 | 0) < (0 | 0)) {
      break label$3
     }
     label$6 : {
      label$7 : {
       label$8 : {
        if (!$6) {
         break label$8
        }
        $1 = __rust_realloc(HEAP32[$0 >> 2] | 0 | 0, Math_imul($6, 20) | 0, 4 | 0, $4 | 0) | 0;
        if (!$1) {
         break label$7
        }
        break label$6;
       }
       $1 = __rust_alloc($4 | 0, 4 | 0) | 0;
       if ($1) {
        break label$6
       }
      }
      if ($3) {
       break label$1
      }
     }
     if (!$1) {
      break label$2
     }
     HEAP32[$0 >> 2] = $1;
     HEAP32[($0 + 4 | 0) >> 2] = $2;
     $5 = 2;
    }
    return $5 | 0;
   }
   return 1 | 0;
  }
  alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83($4 | 0, 4 | 0);
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___reserve_internal__ha90229295c720c3a($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var i64toi32_i32$1 = 0, $5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $6 = 0, i64toi32_i32$3 = 0, $14 = 0, $7 = 0, $7$hi = 0, i64toi32_i32$2 = 0;
  $5 = 2;
  label$1 : {
   label$2 : {
    label$3 : {
     $6 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if (($6 - $1 | 0) >>> 0 >= $2 >>> 0) {
      break label$3
     }
     $2 = $1 + $2 | 0;
     $1 = $2 >>> 0 < $1 >>> 0;
     label$4 : {
      label$5 : {
       if (!$4) {
        break label$5
       }
       $5 = 0;
       if ($1) {
        break label$3
       }
       $1 = $6 << 1 | 0;
       $2 = $2 >>> 0 < $1 >>> 0 ? $1 : $2;
       break label$4;
      }
      $5 = 0;
      if ($1) {
       break label$3
      }
     }
     $5 = 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$1 = __wasm_i64_mul($2 | 0, i64toi32_i32$0 | 0, 12 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $7 = i64toi32_i32$1;
     $7$hi = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $14 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $14 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     if ($14) {
      break label$3
     }
     $5 = 0;
     i64toi32_i32$1 = $7$hi;
     $4 = $7;
     if (($4 | 0) < (0 | 0)) {
      break label$3
     }
     label$6 : {
      label$7 : {
       label$8 : {
        if (!$6) {
         break label$8
        }
        $1 = __rust_realloc(HEAP32[$0 >> 2] | 0 | 0, Math_imul($6, 12) | 0, 4 | 0, $4 | 0) | 0;
        if (!$1) {
         break label$7
        }
        break label$6;
       }
       $1 = __rust_alloc($4 | 0, 4 | 0) | 0;
       if ($1) {
        break label$6
       }
      }
      if ($3) {
       break label$1
      }
     }
     if (!$1) {
      break label$2
     }
     HEAP32[$0 >> 2] = $1;
     HEAP32[($0 + 4 | 0) >> 2] = $2;
     $5 = 2;
    }
    return $5 | 0;
   }
   return 1 | 0;
  }
  alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83($4 | 0, 4 | 0);
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___reserve_internal__hb5d6fb65190ec48a($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var i64toi32_i32$1 = 0, $5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $6 = 0, i64toi32_i32$3 = 0, $14 = 0, $7 = 0, $7$hi = 0, i64toi32_i32$2 = 0;
  $5 = 2;
  label$1 : {
   label$2 : {
    label$3 : {
     $6 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if (($6 - $1 | 0) >>> 0 >= $2 >>> 0) {
      break label$3
     }
     $2 = $1 + $2 | 0;
     $1 = $2 >>> 0 < $1 >>> 0;
     label$4 : {
      label$5 : {
       if (!$4) {
        break label$5
       }
       $5 = 0;
       if ($1) {
        break label$3
       }
       $1 = $6 << 1 | 0;
       $2 = $2 >>> 0 < $1 >>> 0 ? $1 : $2;
       break label$4;
      }
      $5 = 0;
      if ($1) {
       break label$3
      }
     }
     $5 = 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$1 = __wasm_i64_mul($2 | 0, i64toi32_i32$0 | 0, 288 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $7 = i64toi32_i32$1;
     $7$hi = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $14 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $14 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     if ($14) {
      break label$3
     }
     $5 = 0;
     i64toi32_i32$1 = $7$hi;
     $4 = $7;
     if (($4 | 0) < (0 | 0)) {
      break label$3
     }
     label$6 : {
      label$7 : {
       label$8 : {
        if (!$6) {
         break label$8
        }
        $1 = __rust_realloc(HEAP32[$0 >> 2] | 0 | 0, Math_imul($6, 288) | 0, 4 | 0, $4 | 0) | 0;
        if (!$1) {
         break label$7
        }
        break label$6;
       }
       $1 = __rust_alloc($4 | 0, 4 | 0) | 0;
       if ($1) {
        break label$6
       }
      }
      if ($3) {
       break label$1
      }
     }
     if (!$1) {
      break label$2
     }
     HEAP32[$0 >> 2] = $1;
     HEAP32[($0 + 4 | 0) >> 2] = $2;
     $5 = 2;
    }
    return $5 | 0;
   }
   return 1 | 0;
  }
  alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83($4 | 0, 4 | 0);
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___reserve_internal__hc24c156880a121cf($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, $5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $6 = 0, i64toi32_i32$0 = 0, $14 = 0, $7 = 0, $15 = 0, $7$hi = 0;
  $5 = 2;
  label$1 : {
   label$2 : {
    label$3 : {
     $6 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if (($6 - $1 | 0) >>> 0 >= $2 >>> 0) {
      break label$3
     }
     $2 = $1 + $2 | 0;
     $1 = $2 >>> 0 < $1 >>> 0;
     label$4 : {
      label$5 : {
       if (!$4) {
        break label$5
       }
       $5 = 0;
       if ($1) {
        break label$3
       }
       $1 = $6 << 1 | 0;
       $2 = $2 >>> 0 < $1 >>> 0 ? $1 : $2;
       break label$4;
      }
      $5 = 0;
      if ($1) {
       break label$3
      }
     }
     $5 = 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = $2;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 4;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $14 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $14 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $7 = $14;
     $7$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $7;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $15 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $15 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     if ($15) {
      break label$3
     }
     $5 = 0;
     i64toi32_i32$2 = $7$hi;
     $4 = $7;
     if (($4 | 0) < (0 | 0)) {
      break label$3
     }
     label$6 : {
      label$7 : {
       label$8 : {
        if (!$6) {
         break label$8
        }
        $1 = __rust_realloc(HEAP32[$0 >> 2] | 0 | 0, $6 << 4 | 0 | 0, 4 | 0, $4 | 0) | 0;
        if (!$1) {
         break label$7
        }
        break label$6;
       }
       $1 = __rust_alloc($4 | 0, 4 | 0) | 0;
       if ($1) {
        break label$6
       }
      }
      if ($3) {
       break label$1
      }
     }
     if (!$1) {
      break label$2
     }
     HEAP32[$0 >> 2] = $1;
     HEAP32[($0 + 4 | 0) >> 2] = $2;
     $5 = 2;
    }
    return $5 | 0;
   }
   return 1 | 0;
  }
  alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83($4 | 0, 4 | 0);
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___reserve_internal__hd2bb2e4f3ce060f5($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var i64toi32_i32$1 = 0, $5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $6 = 0, i64toi32_i32$3 = 0, $14 = 0, $7 = 0, $7$hi = 0, i64toi32_i32$2 = 0;
  $5 = 2;
  label$1 : {
   label$2 : {
    label$3 : {
     $6 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if (($6 - $1 | 0) >>> 0 >= $2 >>> 0) {
      break label$3
     }
     $2 = $1 + $2 | 0;
     $1 = $2 >>> 0 < $1 >>> 0;
     label$4 : {
      label$5 : {
       if (!$4) {
        break label$5
       }
       $5 = 0;
       if ($1) {
        break label$3
       }
       $1 = $6 << 1 | 0;
       $2 = $2 >>> 0 < $1 >>> 0 ? $1 : $2;
       break label$4;
      }
      $5 = 0;
      if ($1) {
       break label$3
      }
     }
     $5 = 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$1 = __wasm_i64_mul($2 | 0, i64toi32_i32$0 | 0, 12 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $7 = i64toi32_i32$1;
     $7$hi = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $14 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $14 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     if ($14) {
      break label$3
     }
     $5 = 0;
     i64toi32_i32$1 = $7$hi;
     $4 = $7;
     if (($4 | 0) < (0 | 0)) {
      break label$3
     }
     label$6 : {
      label$7 : {
       label$8 : {
        if (!$6) {
         break label$8
        }
        $1 = __rust_realloc(HEAP32[$0 >> 2] | 0 | 0, Math_imul($6, 12) | 0, 4 | 0, $4 | 0) | 0;
        if (!$1) {
         break label$7
        }
        break label$6;
       }
       $1 = __rust_alloc($4 | 0, 4 | 0) | 0;
       if ($1) {
        break label$6
       }
      }
      if ($3) {
       break label$1
      }
     }
     if (!$1) {
      break label$2
     }
     HEAP32[$0 >> 2] = $1;
     HEAP32[($0 + 4 | 0) >> 2] = $2;
     $5 = 2;
    }
    return $5 | 0;
   }
   return 1 | 0;
  }
  alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83($4 | 0, 4 | 0);
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___reserve_internal__hd3d9b523fde6f58f($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, $5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $6 = 0, i64toi32_i32$0 = 0, $14 = 0, $7 = 0, $15 = 0, $7$hi = 0;
  $5 = 2;
  label$1 : {
   label$2 : {
    label$3 : {
     $6 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if (($6 - $1 | 0) >>> 0 >= $2 >>> 0) {
      break label$3
     }
     $2 = $1 + $2 | 0;
     $1 = $2 >>> 0 < $1 >>> 0;
     label$4 : {
      label$5 : {
       if (!$4) {
        break label$5
       }
       $5 = 0;
       if ($1) {
        break label$3
       }
       $1 = $6 << 1 | 0;
       $2 = $2 >>> 0 < $1 >>> 0 ? $1 : $2;
       break label$4;
      }
      $5 = 0;
      if ($1) {
       break label$3
      }
     }
     $5 = 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = $2;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 3;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $14 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $14 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $7 = $14;
     $7$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $7;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $15 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $15 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     if ($15) {
      break label$3
     }
     $5 = 0;
     i64toi32_i32$2 = $7$hi;
     $4 = $7;
     if (($4 | 0) < (0 | 0)) {
      break label$3
     }
     label$6 : {
      label$7 : {
       label$8 : {
        if (!$6) {
         break label$8
        }
        $1 = __rust_realloc(HEAP32[$0 >> 2] | 0 | 0, $6 << 3 | 0 | 0, 4 | 0, $4 | 0) | 0;
        if (!$1) {
         break label$7
        }
        break label$6;
       }
       $1 = __rust_alloc($4 | 0, 4 | 0) | 0;
       if ($1) {
        break label$6
       }
      }
      if ($3) {
       break label$1
      }
     }
     if (!$1) {
      break label$2
     }
     HEAP32[$0 >> 2] = $1;
     HEAP32[($0 + 4 | 0) >> 2] = $2;
     $5 = 2;
    }
    return $5 | 0;
   }
   return 1 | 0;
  }
  alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83($4 | 0, 4 | 0);
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___reserve_internal__hf7d6cad4b7752ba5($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, $5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $6 = 0, i64toi32_i32$0 = 0, $14 = 0, $7 = 0, $15 = 0, $7$hi = 0;
  $5 = 2;
  label$1 : {
   label$2 : {
    label$3 : {
     $6 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if (($6 - $1 | 0) >>> 0 >= $2 >>> 0) {
      break label$3
     }
     $2 = $1 + $2 | 0;
     $1 = $2 >>> 0 < $1 >>> 0;
     label$4 : {
      label$5 : {
       if (!$4) {
        break label$5
       }
       $5 = 0;
       if ($1) {
        break label$3
       }
       $1 = $6 << 1 | 0;
       $2 = $2 >>> 0 < $1 >>> 0 ? $1 : $2;
       break label$4;
      }
      $5 = 0;
      if ($1) {
       break label$3
      }
     }
     $5 = 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = $2;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 2;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $14 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $14 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $7 = $14;
     $7$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $7;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $15 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $15 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     if ($15) {
      break label$3
     }
     $5 = 0;
     i64toi32_i32$2 = $7$hi;
     $4 = $7;
     if (($4 | 0) < (0 | 0)) {
      break label$3
     }
     label$6 : {
      label$7 : {
       label$8 : {
        if (!$6) {
         break label$8
        }
        $1 = __rust_realloc(HEAP32[$0 >> 2] | 0 | 0, $6 << 2 | 0 | 0, 4 | 0, $4 | 0) | 0;
        if (!$1) {
         break label$7
        }
        break label$6;
       }
       $1 = __rust_alloc($4 | 0, 4 | 0) | 0;
       if ($1) {
        break label$6
       }
      }
      if ($3) {
       break label$1
      }
     }
     if (!$1) {
      break label$2
     }
     HEAP32[$0 >> 2] = $1;
     HEAP32[($0 + 4 | 0) >> 2] = $2;
     $5 = 2;
    }
    return $5 | 0;
   }
   return 1 | 0;
  }
  alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83($4 | 0, 4 | 0);
  abort();
 }
 
 function core__num__dec2flt__num__from_str_unchecked__hceac95e679e8304a($0) {
  $0 = $0 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2 = 0, $6 = 0, $5 = 0, $3 = 0, i64toi32_i32$3 = 0, $4 = 0, $7 = 0, $7$hi = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $1 = 0, i64toi32_i32$4 = 0, $53 = 0, $53$hi = 0, $58 = 0, $58$hi = 0;
  $1 = HEAP32[($0 + 12 | 0) >> 2] | 0;
  $2 = HEAPU8[($0 + 16 | 0) >> 0] | 0;
  $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  $5 = HEAP32[$0 >> 2] | 0;
  i64toi32_i32$0 = 0;
  $7 = 0;
  $7$hi = i64toi32_i32$0;
  label$1 : while (1) {
   $6 = $5;
   $0 = $3;
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         $2 = $2 & 255 | 0;
         if (($2 | 0) == (1 | 0)) {
          break label$7
         }
         if (($2 | 0) != (2 | 0)) {
          break label$6
         }
         if (($0 | 0) == ($1 | 0)) {
          break label$3
         }
         $3 = $0 + 1 | 0;
         $2 = 2;
         $5 = $6;
         break label$2;
        }
        if (($6 | 0) == ($4 | 0)) {
         break label$3
        }
        $2 = 1;
        $5 = $6 + 1 | 0;
        break label$5;
       }
       if (($6 | 0) == ($4 | 0)) {
        break label$4
       }
       $5 = $6 + 1 | 0;
       $2 = 0;
      }
      $3 = $0;
      $0 = $6;
      break label$2;
     }
     if (($0 | 0) == ($1 | 0)) {
      break label$3
     }
     $3 = $0 + 1 | 0;
     $2 = 2;
     $5 = $4;
     break label$2;
    }
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$1 = $7;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
    return i64toi32_i32$1 | 0;
   }
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$0 = __wasm_i64_mul($7 | 0, i64toi32_i32$1 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $53 = i64toi32_i32$0;
   $53$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = (HEAPU8[$0 >> 0] | 0) + -48 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 255;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $58 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   $58$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $53$hi;
   i64toi32_i32$1 = $53;
   i64toi32_i32$2 = $58$hi;
   i64toi32_i32$3 = $58;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $7 = i64toi32_i32$4;
   $7$hi = i64toi32_i32$5;
   continue label$1;
  };
 }
 
 function core__slice___impl_20_5bT_5d___copy_from_slice__h42e988566def9c96($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, i64toi32_i32$0 = 0;
  $4 = global$0 - 96 | 0;
  global$0 = $4;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[($4 + 12 | 0) >> 2] = $3;
  label$1 : {
   if (($1 | 0) != ($3 | 0)) {
    break label$1
   }
   memcpy($0 | 0, $2 | 0, $1 << 3 | 0 | 0) | 0;
   global$0 = $4 + 96 | 0;
   return;
  }
  HEAP32[($4 + 64 | 0) >> 2] = $4 + 8 | 0;
  HEAP32[($4 + 68 | 0) >> 2] = $4 + 12 | 0;
  HEAP32[(($4 + 72 | 0) + 20 | 0) >> 2] = 0;
  HEAP32[(($4 + 40 | 0) + 20 | 0) >> 2] = 22;
  HEAP32[($4 + 52 | 0) >> 2] = 23;
  HEAP32[(($4 + 16 | 0) + 20 | 0) >> 2] = 3;
  HEAP32[($4 + 88 | 0) >> 2] = 1050544;
  i64toi32_i32$0 = 0;
  HEAP32[($4 + 76 | 0) >> 2] = 1;
  HEAP32[($4 + 80 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4 + 72 | 0) >> 2] = 1050536;
  HEAP32[($4 + 44 | 0) >> 2] = 23;
  i64toi32_i32$0 = 0;
  HEAP32[($4 + 20 | 0) >> 2] = 3;
  HEAP32[($4 + 24 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4 + 16 | 0) >> 2] = 1050460;
  HEAP32[($4 + 56 | 0) >> 2] = $4 + 72 | 0;
  HEAP32[($4 + 48 | 0) >> 2] = $4 + 68 | 0;
  HEAP32[($4 + 40 | 0) >> 2] = $4 + 64 | 0;
  HEAP32[($4 + 32 | 0) >> 2] = $4 + 40 | 0;
  core__panicking__panic_fmt__h2daf88b2616ca2b2($4 + 16 | 0 | 0, 1050568 | 0);
  abort();
 }
 
 function stretch__node__Stretch__set_style__hf875cf3b2c93c539($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $13 = 0, $16 = 0, $27 = 0, $37 = 0;
  $4 = global$0 - 240 | 0;
  global$0 = $4;
  i64toi32_i32$2 = $2 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $13 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4 + 8 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $13;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $16 = i64toi32_i32$1;
  i64toi32_i32$1 = $4;
  HEAP32[($4 + 8 | 0) >> 2] = $16;
  HEAP32[($4 + 12 | 0) >> 2] = i64toi32_i32$0;
  stretch__node__Stretch__find_node__h5d72b27b054a57c0($4 + 24 | 0 | 0, $1 | 0, $4 + 8 | 0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[($4 + 24 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $4;
     i64toi32_i32$0 = HEAP32[($4 + 28 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($4 + 32 | 0) >> 2] | 0;
     $27 = i64toi32_i32$0;
     i64toi32_i32$0 = $0;
     HEAP32[i64toi32_i32$0 >> 2] = $27;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = HEAP32[($4 + 44 | 0) >> 2] | 0;
     i64toi32_i32$2 = $4 + 36 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $37 = i64toi32_i32$1;
     i64toi32_i32$1 = $0 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $37;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     break label$2;
    }
    $2 = HEAP32[($4 + 28 | 0) >> 2] | 0;
    memcpy($4 + 24 | 0 | 0, $3 | 0, 212 | 0) | 0;
    $3 = HEAP32[($1 + 112 | 0) >> 2] | 0;
    if ($3 >>> 0 <= $2 >>> 0) {
     break label$1
    }
    $3 = $1 + 104 | 0;
    memcpy((HEAP32[$3 >> 2] | 0) + Math_imul($2, 288) | 0 | 0, $4 + 24 | 0 | 0, 212 | 0) | 0;
    stretch__forest__Forest__mark_dirty__mark_dirty_impl__hafdb374afea4365e($3 | 0, $1 + 128 | 0 | 0, $2 | 0);
    HEAP32[$0 >> 2] = 2;
   }
   global$0 = $4 + 240 | 0;
   return;
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1051320 | 0, $2 | 0, $3 | 0);
  abort();
 }
 
 function stretch_layout__Node__replace_child_at_index__h2a6d31954cfde073($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $4 = 0, $5 = 0, $21 = 0, $24 = 0, $31 = 0, $34 = 0, $61 = 0, $64 = 0;
  $3 = global$0 - 64 | 0;
  global$0 = $3;
  label$1 : {
   label$2 : {
    $4 = HEAP32[$0 >> 2] | 0;
    if (HEAP32[($4 + 8 | 0) >> 2] | 0) {
     break label$2
    }
    $5 = $4 + 8 | 0;
    HEAP32[$5 >> 2] = -1;
    i64toi32_i32$2 = $0 + 12 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $21 = i64toi32_i32$0;
    i64toi32_i32$0 = ($3 + 24 | 0) + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $21;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    $24 = i64toi32_i32$1;
    i64toi32_i32$1 = $3;
    HEAP32[($3 + 24 | 0) >> 2] = $24;
    HEAP32[($3 + 28 | 0) >> 2] = i64toi32_i32$0;
    $0 = ($3 + 40 | 0) + 8 | 0;
    i64toi32_i32$2 = $2 + 12 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $31 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $31;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    $34 = i64toi32_i32$1;
    i64toi32_i32$1 = $3;
    HEAP32[($3 + 40 | 0) >> 2] = $34;
    HEAP32[($3 + 44 | 0) >> 2] = i64toi32_i32$0;
    stretch__node__Stretch__replace_child_at_index__h3fce858c1abc4355($3 | 0, $4 + 16 | 0 | 0, $3 + 24 | 0 | 0, $1 | 0, $3 + 40 | 0 | 0);
    if ((HEAP32[$3 >> 2] | 0 | 0) == (1 | 0)) {
     break label$1
    }
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1 | 0;
    global$0 = $3 + 64 | 0;
    return;
   }
   core__result__unwrap_failed__h2450ec3de4884319(1048576 | 0, 16 | 0);
   abort();
  }
  HEAP32[(($3 + 40 | 0) + 16 | 0) >> 2] = HEAP32[($3 + 20 | 0) >> 2] | 0;
  i64toi32_i32$2 = $3 + 12 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $61 = i64toi32_i32$0;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $61;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = HEAP32[($3 + 4 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  $64 = i64toi32_i32$1;
  i64toi32_i32$1 = $3;
  HEAP32[($3 + 40 | 0) >> 2] = $64;
  HEAP32[($3 + 44 | 0) >> 2] = i64toi32_i32$0;
  core__result__unwrap_failed__h8a62896efab79dcd(1048696 | 0, 43 | 0, $3 + 40 | 0 | 0);
  abort();
 }
 
 function $std__panicking__continue_panic_fmt__PanicPayload_20as_20core__panic__BoxMeUp___get__h10b76064b0aa5d4d($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4 = 0, $3 = 0, $5 = 0, $25 = 0, $32 = 0, $35 = 0, $46 = 0, $60 = 0;
  $2 = global$0 - 48 | 0;
  global$0 = $2;
  $3 = $1 + 4 | 0;
  label$1 : {
   if (HEAP32[($1 + 4 | 0) >> 2] | 0) {
    break label$1
   }
   $4 = HEAP32[$1 >> 2] | 0;
   HEAP32[($2 + 16 | 0) >> 2] = 0;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = 0;
   HEAP32[($2 + 8 | 0) >> 2] = 1;
   HEAP32[($2 + 12 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($2 + 20 | 0) >> 2] = $2 + 8 | 0;
   i64toi32_i32$2 = $4 + 16 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $25 = i64toi32_i32$0;
   i64toi32_i32$0 = ($2 + 24 | 0) + 16 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $25;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $5 = ($2 + 24 | 0) + 8 | 0;
   i64toi32_i32$2 = $4 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $32 = i64toi32_i32$1;
   i64toi32_i32$1 = $5;
   HEAP32[i64toi32_i32$1 >> 2] = $32;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $4;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $35 = i64toi32_i32$0;
   i64toi32_i32$0 = $2;
   HEAP32[($2 + 24 | 0) >> 2] = $35;
   HEAP32[($2 + 28 | 0) >> 2] = i64toi32_i32$1;
   core__fmt__write__h85435378f7fd6609($2 + 20 | 0 | 0, 1052216 | 0, $2 + 24 | 0 | 0) | 0;
   HEAP32[$5 >> 2] = HEAP32[($2 + 16 | 0) >> 2] | 0;
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = HEAP32[($2 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($2 + 12 | 0) >> 2] | 0;
   $46 = i64toi32_i32$1;
   i64toi32_i32$1 = $2;
   HEAP32[($2 + 24 | 0) >> 2] = $46;
   HEAP32[($2 + 28 | 0) >> 2] = i64toi32_i32$0;
   label$2 : {
    $4 = HEAP32[$3 >> 2] | 0;
    if (!$4) {
     break label$2
    }
    $1 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    if (!$1) {
     break label$2
    }
    __rust_dealloc($4 | 0, $1 | 0, 1 | 0);
   }
   i64toi32_i32$2 = $2;
   i64toi32_i32$0 = HEAP32[($2 + 24 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($2 + 28 | 0) >> 2] | 0;
   $60 = i64toi32_i32$0;
   i64toi32_i32$0 = $3;
   HEAP32[i64toi32_i32$0 >> 2] = $60;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = HEAP32[$5 >> 2] | 0;
  }
  HEAP32[($0 + 4 | 0) >> 2] = 1053328;
  HEAP32[$0 >> 2] = $3;
  global$0 = $2 + 48 | 0;
 }
 
 function alloc__vec__Vec_T___extend_desugared__h1da10472d45717ac($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $5 = 0, $7 = 0, $4 = 0, $6 = 0;
  $2 = global$0 - 400 | 0;
  global$0 = $2;
  $core__iter__adapters__Map_I_2cF__20as_20core__iter__traits__iterator__Iterator___try_fold__hbea087a41bcf2d67($2 + 8 | 0 | 0, $1 | 0, $1 | 0, $1 | 0);
  label$1 : {
   label$2 : {
    $3 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    if (!$3) {
     break label$2
    }
    $4 = $1 + 12 | 0;
    $5 = HEAP32[($2 + 12 | 0) >> 2] | 0;
    $6 = $0 + 4 | 0;
    $7 = $0 + 8 | 0;
    label$3 : while (1) {
     core__ops__function__impls___impl_20core__ops__function__FnOnce_A__20for_20_mut_20F___call_once__h496367f6f69950fa($2 + 16 | 0 | 0, $4 | 0, $3 | 0, $5 | 0);
     if ((HEAP32[($2 + 20 | 0) >> 2] | 0 | 0) == (2 | 0)) {
      break label$1
     }
     memcpy($2 + 208 | 0 | 0, $2 + 16 | 0 | 0, 192 | 0) | 0;
     label$4 : {
      $3 = HEAP32[$7 >> 2] | 0;
      if (($3 | 0) != (HEAP32[$6 >> 2] | 0 | 0)) {
       break label$4
      }
      alloc__raw_vec__RawVec_T_2cA___reserve__h47fecbc084037479($0 | 0, $3 | 0, 1 | 0);
     }
     memcpy((HEAP32[$0 >> 2] | 0) + Math_imul($3, 192) | 0 | 0, $2 + 208 | 0 | 0, 192 | 0) | 0;
     HEAP32[$7 >> 2] = $3 + 1 | 0;
     $core__iter__adapters__Map_I_2cF__20as_20core__iter__traits__iterator__Iterator___try_fold__hbea087a41bcf2d67($2 | 0, $1 | 0, $1 | 0, $1 | 0);
     $5 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     $3 = HEAP32[$2 >> 2] | 0;
     if ($3) {
      continue label$3
     }
     break label$3;
    };
   }
   HEAP32[($2 + 20 | 0) >> 2] = 2;
  }
  global$0 = $2 + 400 | 0;
 }
 
 function $alloc__vec__Vec_T__20as_20alloc__vec__SpecExtend_T_2cI____from_iter__h07c3f21f9acaec5e($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3 = 0, i64toi32_i32$2 = 0, $4 = 0, $45 = 0, $48 = 0, $59 = 0;
  $2 = global$0 - 224 | 0;
  global$0 = $2;
  $core__iter__adapters__Map_I_2cF__20as_20core__iter__traits__iterator__Iterator___try_fold__hbea087a41bcf2d67($2 + 8 | 0 | 0, $1 | 0, $1 | 0, $1 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     $3 = HEAP32[($2 + 8 | 0) >> 2] | 0;
     if (!$3) {
      break label$3
     }
     core__ops__function__impls___impl_20core__ops__function__FnOnce_A__20for_20_mut_20F___call_once__h496367f6f69950fa($2 + 32 | 0 | 0, $1 + 12 | 0 | 0, $3 | 0, HEAP32[($2 + 12 | 0) >> 2] | 0 | 0);
     if ((HEAP32[($2 + 36 | 0) >> 2] | 0 | 0) == (2 | 0)) {
      break label$2
     }
     alloc__raw_vec__RawVec_T_2cA___allocate_in__hf6b775b2673f3460($2 | 0, 1 | 0, 0 | 0);
     $3 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     $4 = memcpy(HEAP32[$2 >> 2] | 0 | 0, $2 + 32 | 0 | 0, 192 | 0) | 0;
     HEAP32[($2 + 24 | 0) >> 2] = 1;
     HEAP32[($2 + 20 | 0) >> 2] = $3;
     HEAP32[($2 + 16 | 0) >> 2] = $4;
     i64toi32_i32$2 = $1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $45 = i64toi32_i32$0;
     i64toi32_i32$0 = ($2 + 32 | 0) + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $45;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $1;
     i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($1 + 4 | 0) >> 2] | 0;
     $48 = i64toi32_i32$1;
     i64toi32_i32$1 = $2;
     HEAP32[($2 + 32 | 0) >> 2] = $48;
     HEAP32[($2 + 36 | 0) >> 2] = i64toi32_i32$0;
     alloc__vec__Vec_T___extend_desugared__h1da10472d45717ac($2 + 16 | 0 | 0, $2 + 32 | 0 | 0);
     HEAP32[($0 + 8 | 0) >> 2] = HEAP32[($2 + 24 | 0) >> 2] | 0;
     i64toi32_i32$2 = $2;
     i64toi32_i32$0 = HEAP32[($2 + 16 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($2 + 20 | 0) >> 2] | 0;
     $59 = i64toi32_i32$0;
     i64toi32_i32$0 = $0;
     HEAP32[i64toi32_i32$0 >> 2] = $59;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     break label$1;
    }
    HEAP32[($2 + 36 | 0) >> 2] = 2;
   }
   HEAP32[($0 + 8 | 0) >> 2] = 0;
   i64toi32_i32$0 = $0;
   i64toi32_i32$1 = 0;
   HEAP32[i64toi32_i32$0 >> 2] = 4;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  }
  global$0 = $2 + 224 | 0;
 }
 
 function stretch_layout__get_f32__h0d76de51d01f671a($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $7 = 0.0, $6 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4 = global$0 - 32 | 0;
  global$0 = $4;
  $5 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!(stretch_layout__has_key__h3ec688104a7b111a($1 | 0, $2 | 0, $3 | 0) | 0)) {
      break label$3
     }
     (wasm2js_i32$0 = $4, wasm2js_i32$1 = __wbindgen_string_new($2 | 0, $3 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
     js_sys__Reflect__get__hb202a761aaf27873($4 + 16 | 0 | 0, $1 | 0, $4 + 24 | 0 | 0);
     $1 = HEAP32[($4 + 20 | 0) >> 2] | 0;
     if (!(HEAP32[($4 + 16 | 0) >> 2] | 0)) {
      break label$2
     }
     label$4 : {
      if ($1 >>> 0 < 36 >>> 0) {
       break label$4
      }
      __wbindgen_object_drop_ref($1 | 0);
     }
     $1 = HEAP32[($4 + 24 | 0) >> 2] | 0;
     if ($1 >>> 0 < 36 >>> 0) {
      break label$3
     }
     __wbindgen_object_drop_ref($1 | 0);
    }
    break label$1;
   }
   HEAP32[($4 + 28 | 0) >> 2] = $1;
   wasm_bindgen__JsValue__as_f64__h7e1a5be5cc4fe0a8($4 | 0, $4 + 28 | 0 | 0);
   $1 = HEAP32[$4 >> 2] | 0;
   $7 = +HEAPF64[($4 + 8 | 0) >> 3];
   label$5 : {
    $2 = HEAP32[($4 + 28 | 0) >> 2] | 0;
    if ($2 >>> 0 < 36 >>> 0) {
     break label$5
    }
    __wbindgen_object_drop_ref($2 | 0);
   }
   label$6 : {
    $2 = HEAP32[($4 + 24 | 0) >> 2] | 0;
    if ($2 >>> 0 < 36 >>> 0) {
     break label$6
    }
    __wbindgen_object_drop_ref($2 | 0);
   }
   $5 = ($1 | 0) != (0 | 0);
   $6 = Math_fround($7);
  }
  HEAPF32[($0 + 4 | 0) >> 2] = $6;
  HEAP32[$0 >> 2] = $5;
  global$0 = $4 + 32 | 0;
 }
 
 function stretch_layout__Node__is_dirty__h3755578e1850a7bb($0) {
  $0 = $0 | 0;
  var $1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $3 = 0, $2 = 0, $4 = 0, $27 = 0, $30 = 0, $57 = 0, $60 = 0;
  $1 = global$0 - 48 | 0;
  global$0 = $1;
  label$1 : {
   label$2 : {
    $2 = HEAP32[$0 >> 2] | 0;
    $3 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    if (($3 | 0) < (0 | 0)) {
     break label$2
    }
    if (($3 | 0) == (2147483647 | 0)) {
     break label$2
    }
    $4 = $2 + 8 | 0;
    HEAP32[$4 >> 2] = $3 + 1 | 0;
    $3 = ($1 + 24 | 0) + 8 | 0;
    i64toi32_i32$2 = $0 + 12 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $27 = i64toi32_i32$0;
    i64toi32_i32$0 = $3;
    HEAP32[i64toi32_i32$0 >> 2] = $27;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    $30 = i64toi32_i32$1;
    i64toi32_i32$1 = $1;
    HEAP32[($1 + 24 | 0) >> 2] = $30;
    HEAP32[($1 + 28 | 0) >> 2] = i64toi32_i32$0;
    stretch__node__Stretch__dirty__h84cf9ddc5af80366($1 | 0, $2 + 16 | 0 | 0, $1 + 24 | 0 | 0);
    if ((HEAPU8[$1 >> 0] | 0 | 0) == (1 | 0)) {
     break label$1
    }
    $0 = HEAPU8[($1 + 1 | 0) >> 0] | 0;
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + -1 | 0;
    global$0 = $1 + 48 | 0;
    return $0 | 0;
   }
   core__result__unwrap_failed__h617b15fdce22e446(1048592 | 0, 24 | 0);
   abort();
  }
  HEAP32[(($1 + 24 | 0) + 16 | 0) >> 2] = HEAP32[($1 + 20 | 0) >> 2] | 0;
  i64toi32_i32$2 = $1 + 12 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $57 = i64toi32_i32$0;
  i64toi32_i32$0 = $3;
  HEAP32[i64toi32_i32$0 >> 2] = $57;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1 + 8 | 0) >> 2] | 0;
  $60 = i64toi32_i32$1;
  i64toi32_i32$1 = $1;
  HEAP32[($1 + 24 | 0) >> 2] = $60;
  HEAP32[($1 + 28 | 0) >> 2] = i64toi32_i32$0;
  core__result__unwrap_failed__h8a62896efab79dcd(1048696 | 0, 43 | 0, $1 + 24 | 0 | 0);
  abort();
 }
 
 function stretch__node__Stretch__remove_child_at_index__hecb04eb816d3aaf7($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4 = 0, $13 = 0, $16 = 0, $27 = 0, $39 = 0, $54 = 0, $59 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4 = global$0 - 48 | 0;
  global$0 = $4;
  i64toi32_i32$2 = $2 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $13 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4 + 32 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $13;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $16 = i64toi32_i32$1;
  i64toi32_i32$1 = $4;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = $16;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
  stretch__node__Stretch__find_node__h5d72b27b054a57c0(i64toi32_i32$1 + 8 | 0 | 0, $1 | 0, i64toi32_i32$1 + 32 | 0 | 0);
  $2 = 1;
  label$1 : {
   label$2 : {
    if ((HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    i64toi32_i32$2 = $4;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    $27 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = $27;
    HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = HEAP32[((i64toi32_i32$2 + 8 | 0) + 20 | 0) >> 2] | 0;
    i64toi32_i32$2 = (i64toi32_i32$2 + 8 | 0) + 12 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $39 = i64toi32_i32$1;
    i64toi32_i32$1 = $0 + 12 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $39;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    break label$1;
   }
   (wasm2js_i32$0 = $4, wasm2js_i32$1 = stretch__forest__Forest__remove_child_at_index__hff5aa0cd5d9356b3($1 + 104 | 0 | 0, HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, $3 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
   $1 = $std__collections__hash__map__HashMap_K_2cV_2cS__20as_20core__ops__index__Index__Q____index__hc585c3a6d029245c($1 + 40 | 0 | 0, $4 + 8 | 0 | 0) | 0;
   i64toi32_i32$2 = $1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $54 = i64toi32_i32$0;
   i64toi32_i32$0 = $0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = $54;
   HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $59 = i64toi32_i32$1;
   i64toi32_i32$1 = $0 + 12 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $59;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $2 = 0;
  }
  HEAP32[$0 >> 2] = $2;
  global$0 = $4 + 48 | 0;
 }
 
 function core__num__bignum__Big32x40__is_zero__hfabaf882dfbca75e($0) {
  $0 = $0 | 0;
  var $1 = 0, $5 = 0, $2 = 0, $3 = 0, $4 = 0;
  label$1 : {
   $1 = HEAP32[$0 >> 2] | 0;
   if ($1 >>> 0 >= 41 >>> 0) {
    break label$1
   }
   $2 = $0 + 4 | 0;
   $3 = $1 << 2 | 0;
   $4 = $2 + $3 | 0;
   $5 = 0;
   label$2 : {
    label$3 : while (1) {
     $1 = $0 + $5 | 0;
     if (($4 - $2 | 0) >>> 0 <= 12 >>> 0) {
      break label$2
     }
     label$4 : {
      if (HEAP32[($1 + 4 | 0) >> 2] | 0) {
       break label$4
      }
      if (HEAP32[($1 + 8 | 0) >> 2] | 0) {
       break label$4
      }
      if (HEAP32[($1 + 12 | 0) >> 2] | 0) {
       break label$4
      }
      $5 = $5 + 16 | 0;
      $2 = $1 + 20 | 0;
      if (!(HEAP32[($1 + 16 | 0) >> 2] | 0)) {
       continue label$3
      }
     }
     break label$3;
    };
    return 0 | 0;
   }
   $5 = $3 - $5 | 0;
   $1 = $1 + 4 | 0;
   label$5 : {
    label$6 : while (1) {
     if (!$5) {
      break label$5
     }
     $5 = $5 + -4 | 0;
     $2 = HEAP32[$1 >> 2] | 0;
     $1 = $1 + 4 | 0;
     if (!$2) {
      continue label$6
     }
     break label$6;
    };
    return 0 | 0;
   }
   return 1 | 0;
  }
  core__slice__slice_index_len_fail__h4544fc57f3d8a7a0($1 | 0, 40 | 0);
  abort();
 }
 
 function stretch__node__Stretch__dirty__h84cf9ddc5af80366($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4 = 0, $13 = 0, $16 = 0, $29 = 0, $41 = 0;
  $3 = global$0 - 48 | 0;
  global$0 = $3;
  i64toi32_i32$2 = $2 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $13 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3 + 32 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $13;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $16 = i64toi32_i32$1;
  i64toi32_i32$1 = $3;
  HEAP32[($3 + 32 | 0) >> 2] = $16;
  HEAP32[($3 + 36 | 0) >> 2] = i64toi32_i32$0;
  stretch__node__Stretch__find_node__h5d72b27b054a57c0($3 + 8 | 0 | 0, $1 | 0, $3 + 32 | 0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[($3 + 8 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$3
     }
     HEAP8[$0 >> 0] = 1;
     i64toi32_i32$2 = $3;
     i64toi32_i32$0 = HEAP32[($3 + 12 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($3 + 16 | 0) >> 2] | 0;
     $29 = i64toi32_i32$0;
     i64toi32_i32$0 = $0 + 4 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $29;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[($0 + 20 | 0) >> 2] = HEAP32[(($3 + 8 | 0) + 20 | 0) >> 2] | 0;
     i64toi32_i32$2 = ($3 + 8 | 0) + 12 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $41 = i64toi32_i32$1;
     i64toi32_i32$1 = $0 + 12 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $41;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     break label$2;
    }
    $4 = HEAP32[($1 + 112 | 0) >> 2] | 0;
    $2 = HEAP32[($3 + 12 | 0) >> 2] | 0;
    if ($4 >>> 0 <= $2 >>> 0) {
     break label$1
    }
    HEAP8[$0 >> 0] = 0;
    HEAP8[($0 + 1 | 0) >> 0] = HEAPU8[(((HEAP32[($1 + 104 | 0) >> 2] | 0) + Math_imul($2, 288) | 0) + 284 | 0) >> 0] | 0;
   }
   global$0 = $3 + 48 | 0;
   return;
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1051304 | 0, $2 | 0, $4 | 0);
  abort();
 }
 
 function core__num__diy_float__Fp__normalize__h3de17146ae536bff($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $7 = 0, $7$hi = 0, $25 = 0, $2 = 0, $26 = 0, $3 = 0, $27 = 0, $4 = 0, $28 = 0, $5 = 0, $29 = 0, $6 = 0, $30 = 0, $31 = 0, $32 = 0, $8 = 0, $12$hi = 0, $19$hi = 0, $26$hi = 0, $33$hi = 0, $40$hi = 0, $46 = 0, $46$hi = 0, $49$hi = 0, $51 = 0, $78 = 0;
  $8 = $0;
  i64toi32_i32$2 = $1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $7 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $25 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $25 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $12$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$1 = $7;
  i64toi32_i32$2 = 1;
  i64toi32_i32$3 = 0;
  $2 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
  i64toi32_i32$4 = $2;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$2 = i64toi32_i32$4 ? $25 : $7;
  i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$0;
  $7 = i64toi32_i32$2;
  $7$hi = i64toi32_i32$3;
  i64toi32_i32$4 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = 16;
  i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
   $26 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
   $26 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
  }
  $19$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$3 = $7;
  i64toi32_i32$4 = 65536;
  i64toi32_i32$1 = 0;
  $3 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
  i64toi32_i32$0 = $3;
  i64toi32_i32$3 = $19$hi;
  i64toi32_i32$4 = i64toi32_i32$0 ? $26 : $7;
  i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$3 : i64toi32_i32$2;
  $7 = i64toi32_i32$4;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$0 = i64toi32_i32$4;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 8;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   $27 = 0;
  } else {
   i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
   $27 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
  }
  $26$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $7$hi;
  i64toi32_i32$1 = $7;
  i64toi32_i32$0 = 16777216;
  i64toi32_i32$3 = 0;
  $4 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = $26$hi;
  i64toi32_i32$0 = i64toi32_i32$2 ? $27 : $7;
  i64toi32_i32$3 = i64toi32_i32$2 ? i64toi32_i32$1 : i64toi32_i32$4;
  $7 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$3;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = 4;
  i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $28 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
   $28 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $33$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$3 = $7;
  i64toi32_i32$2 = 268435456;
  i64toi32_i32$1 = 0;
  $5 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
  i64toi32_i32$4 = $5;
  i64toi32_i32$3 = $33$hi;
  i64toi32_i32$2 = i64toi32_i32$4 ? $28 : $7;
  i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$3 : i64toi32_i32$0;
  $7 = i64toi32_i32$2;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 2;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
   $29 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
   $29 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
  }
  $40$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$1 = $7;
  i64toi32_i32$4 = 1073741824;
  i64toi32_i32$3 = 0;
  $6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
  i64toi32_i32$0 = $6;
  i64toi32_i32$1 = $40$hi;
  i64toi32_i32$4 = i64toi32_i32$0 ? $29 : $7;
  i64toi32_i32$3 = i64toi32_i32$0 ? i64toi32_i32$1 : i64toi32_i32$2;
  $7 = i64toi32_i32$4;
  $7$hi = i64toi32_i32$3;
  $46 = i64toi32_i32$4;
  $46$hi = i64toi32_i32$3;
  i64toi32_i32$0 = i64toi32_i32$4;
  i64toi32_i32$4 = -1;
  i64toi32_i32$1 = -1;
  i64toi32_i32$4 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
  i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = 63;
  i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $30 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
   $30 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
  }
  $49$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $46$hi;
  i64toi32_i32$4 = $46;
  i64toi32_i32$3 = $49$hi;
  i64toi32_i32$1 = $30;
  i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
   i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
   $31 = 0;
  } else {
   i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
   $31 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
  }
  i64toi32_i32$4 = $8;
  HEAP32[i64toi32_i32$4 >> 2] = $31;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$3;
  $51 = $0;
  $1 = HEAPU16[($1 + 8 | 0) >> 1] | 0;
  $1 = $2 ? $1 + -32 | 0 : $1;
  $1 = $3 ? $1 + -16 | 0 : $1;
  $1 = $4 ? $1 + -8 | 0 : $1;
  $1 = $5 ? $1 + -4 | 0 : $1;
  $78 = $6 ? $1 + -2 | 0 : $1;
  i64toi32_i32$3 = $7$hi;
  i64toi32_i32$0 = $7;
  i64toi32_i32$4 = 0;
  i64toi32_i32$1 = 63;
  i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$3 >> 31 | 0;
   $32 = i64toi32_i32$3 >> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$3 >> i64toi32_i32$2 | 0;
   $32 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
  }
  HEAP16[($51 + 8 | 0) >> 1] = $78 + ($32 ^ -1 | 0) | 0;
 }
 
 function core__num__dec2flt__rawfp__round_normal__ha876a267818aec99($0, $1, $1$hi, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $5 = 0, $5$hi = 0, $4 = 0, $15 = 0, $46 = 0;
  $3 = global$0 - 64 | 0;
  global$0 = $3;
  $4 = $2 + 40 | 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 40;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $15 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $15 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $5 = $15;
  $5$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1;
    i64toi32_i32$2 = 128;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$0 & i64toi32_i32$3 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    i64toi32_i32$2 = $5$hi;
    core__num__dec2flt__rawfp__Unpacked__new__h5fa9d5bfbc21692b($3 | 0, $5 | 0, i64toi32_i32$2 | 0, $4 | 0);
    $2 = HEAPU16[($3 + 8 | 0) >> 1] | 0;
    i64toi32_i32$1 = $3;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$0;
    break label$1;
   }
   label$3 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$2 = 511;
    i64toi32_i32$3 = -1;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    i64toi32_i32$1 = 128;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
     break label$3
    }
    i64toi32_i32$0 = $5$hi;
    core__num__dec2flt__rawfp__Unpacked__new__h5fa9d5bfbc21692b($3 + 16 | 0 | 0, $5 | 0, i64toi32_i32$0 | 0, $4 | 0);
    $2 = HEAPU16[($3 + 24 | 0) >> 1] | 0;
    i64toi32_i32$3 = $3;
    i64toi32_i32$0 = HEAP32[($3 + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($3 + 20 | 0) >> 2] | 0;
    $1 = i64toi32_i32$0;
    $1$hi = i64toi32_i32$2;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$2 = $5$hi;
    i64toi32_i32$3 = $5;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 16777215;
    if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0) {
     break label$4
    }
    i64toi32_i32$3 = 0;
    core__num__dec2flt__rawfp__Unpacked__new__h5fa9d5bfbc21692b($3 + 32 | 0 | 0, 8388608 | 0, i64toi32_i32$3 | 0, $2 + 41 | 0 | 0);
    $2 = HEAPU16[($3 + 40 | 0) >> 1] | 0;
    i64toi32_i32$1 = $3;
    i64toi32_i32$3 = HEAP32[($3 + 32 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($3 + 36 | 0) >> 2] | 0;
    $1 = i64toi32_i32$3;
    $1$hi = i64toi32_i32$2;
    break label$1;
   }
   $46 = $3 + 48 | 0;
   i64toi32_i32$2 = $5$hi;
   i64toi32_i32$1 = $5;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = 1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   core__num__dec2flt__rawfp__Unpacked__new__h5fa9d5bfbc21692b($46 | 0, i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, $4 | 0);
   $2 = HEAPU16[($3 + 56 | 0) >> 1] | 0;
   i64toi32_i32$2 = $3;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $1 = i64toi32_i32$5;
   $1$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$5 = $0;
  HEAP32[i64toi32_i32$5 >> 2] = $1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP16[(i64toi32_i32$5 + 8 | 0) >> 1] = $2;
  global$0 = $3 + 64 | 0;
 }
 
 function stretch__node__Stretch__layout__h7b30bb55240d20e5($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4 = 0, $13 = 0, $16 = 0, $27 = 0, $40 = 0;
  $3 = global$0 - 48 | 0;
  global$0 = $3;
  i64toi32_i32$2 = $2 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $13 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3 + 32 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $13;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $16 = i64toi32_i32$1;
  i64toi32_i32$1 = $3;
  HEAP32[($3 + 32 | 0) >> 2] = $16;
  HEAP32[($3 + 36 | 0) >> 2] = i64toi32_i32$0;
  stretch__node__Stretch__find_node__h5d72b27b054a57c0($3 + 8 | 0 | 0, $1 | 0, $3 + 32 | 0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[($3 + 8 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $3;
     i64toi32_i32$0 = HEAP32[($3 + 12 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($3 + 16 | 0) >> 2] | 0;
     $27 = i64toi32_i32$0;
     i64toi32_i32$0 = $0;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = $27;
     HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[i64toi32_i32$0 >> 2] = 1;
     HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = HEAP32[(($3 + 8 | 0) + 20 | 0) >> 2] | 0;
     i64toi32_i32$2 = ($3 + 8 | 0) + 12 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $40 = i64toi32_i32$1;
     i64toi32_i32$1 = $0 + 12 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $40;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     break label$2;
    }
    $4 = HEAP32[($1 + 112 | 0) >> 2] | 0;
    $2 = HEAP32[($3 + 12 | 0) >> 2] | 0;
    if ($4 >>> 0 <= $2 >>> 0) {
     break label$1
    }
    HEAP32[$0 >> 2] = 0;
    HEAP32[($0 + 4 | 0) >> 2] = ((HEAP32[($1 + 104 | 0) >> 2] | 0) + Math_imul($2, 288) | 0) + 220 | 0;
   }
   global$0 = $3 + 48 | 0;
   return;
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1051304 | 0, $2 | 0, $4 | 0);
  abort();
 }
 
 function stretch_layout__Node__remove_child_at_index__h2afdb0fdce240969($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $3 = 0, $4 = 0, $5 = 0, $22 = 0, $25 = 0, $54 = 0, $57 = 0;
  $2 = global$0 - 48 | 0;
  global$0 = $2;
  label$1 : {
   label$2 : {
    $3 = HEAP32[$0 >> 2] | 0;
    if (HEAP32[($3 + 8 | 0) >> 2] | 0) {
     break label$2
    }
    $4 = $3 + 8 | 0;
    HEAP32[$4 >> 2] = -1;
    $5 = ($2 + 24 | 0) + 8 | 0;
    i64toi32_i32$2 = $0 + 12 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $22 = i64toi32_i32$0;
    i64toi32_i32$0 = $5;
    HEAP32[i64toi32_i32$0 >> 2] = $22;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    $25 = i64toi32_i32$1;
    i64toi32_i32$1 = $2;
    HEAP32[($2 + 24 | 0) >> 2] = $25;
    HEAP32[($2 + 28 | 0) >> 2] = i64toi32_i32$0;
    stretch__node__Stretch__remove_child_at_index__hecb04eb816d3aaf7($2 | 0, $3 + 16 | 0 | 0, $2 + 24 | 0 | 0, $1 | 0);
    if ((HEAP32[$2 >> 2] | 0 | 0) == (1 | 0)) {
     break label$1
    }
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
    HEAP32[($0 + 24 | 0) >> 2] = (HEAP32[($0 + 24 | 0) >> 2] | 0) + -1 | 0;
    global$0 = $2 + 48 | 0;
    return;
   }
   core__result__unwrap_failed__h2450ec3de4884319(1048576 | 0, 16 | 0);
   abort();
  }
  HEAP32[(($2 + 24 | 0) + 16 | 0) >> 2] = HEAP32[($2 + 20 | 0) >> 2] | 0;
  i64toi32_i32$2 = $2 + 12 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $54 = i64toi32_i32$0;
  i64toi32_i32$0 = $5;
  HEAP32[i64toi32_i32$0 >> 2] = $54;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2 + 8 | 0) >> 2] | 0;
  $57 = i64toi32_i32$1;
  i64toi32_i32$1 = $2;
  HEAP32[($2 + 24 | 0) >> 2] = $57;
  HEAP32[($2 + 28 | 0) >> 2] = i64toi32_i32$0;
  core__result__unwrap_failed__h8a62896efab79dcd(1048696 | 0, 43 | 0, $2 + 24 | 0 | 0);
  abort();
 }
 
 function core__num__dec2flt__algorithm__fast_path__h475be7bf8e084dd6($0, $1, $2, $3, $4, $5, $5$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $5$hi = $5$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $6 = 0, $8$hi = 0, $9 = Math_fround(0), i64toi32_i32$2 = 0, $8 = 0, $7 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $17 = 0, $17$hi = 0, $21$hi = 0;
  $6 = global$0 - 32 | 0;
  global$0 = $6;
  $7 = 0;
  label$1 : {
   label$2 : {
    if (($4 + $2 | 0) >>> 0 <= 16 >>> 0) {
     break label$2
    }
    break label$1;
   }
   i64toi32_i32$0 = $5$hi;
   $17 = $5;
   $17$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 63;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $21 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
    $21 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $8 = $21;
   $8$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $17$hi;
   i64toi32_i32$0 = $17;
   i64toi32_i32$2 = $8$hi;
   i64toi32_i32$3 = $8;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + $8$hi | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $21$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$5 = $21$hi;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$0 = $8$hi;
   i64toi32_i32$3 = $8;
   i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 11;
   if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
    $22 = 1
   } else {
    if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      $23 = 0
     } else {
      $23 = 1
     }
     $24 = $23;
    } else {
     $24 = 0
    }
    $22 = $24;
   }
   if ($22) {
    break label$1
   }
   HEAP32[($6 + 16 | 0) >> 2] = $3;
   HEAP32[($6 + 20 | 0) >> 2] = $3 + $4 | 0;
   $7 = 0;
   HEAP8[($6 + 24 | 0) >> 0] = 0;
   HEAP32[($6 + 8 | 0) >> 2] = $1;
   HEAP32[($6 + 12 | 0) >> 2] = $1 + $2 | 0;
   i64toi32_i32$5 = core__num__dec2flt__num__from_str_unchecked__hceac95e679e8304a($6 + 8 | 0 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $8 = i64toi32_i32$5;
   $8$hi = i64toi32_i32$0;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 16777215;
   if (i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$3 = $8$hi;
   $9 = Math_fround($f32_20as_20core__num__dec2flt__rawfp__RawFloat___from_int__h7099f68af288fb2c($8 | 0, i64toi32_i32$3 | 0));
   label$3 : {
    label$4 : {
     i64toi32_i32$3 = $5$hi;
     i64toi32_i32$1 = $5;
     i64toi32_i32$0 = -1;
     i64toi32_i32$5 = -1;
     if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
      $25 = 1
     } else {
      if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$1 >>> 0 > i64toi32_i32$5 >>> 0) {
        $26 = 0
       } else {
        $26 = 1
       }
       $27 = $26;
      } else {
       $27 = 0
      }
      $25 = $27;
     }
     if ($25) {
      break label$4
     }
     i64toi32_i32$1 = $5$hi;
     $9 = Math_fround($9 * Math_fround($f32_20as_20core__num__dec2flt__rawfp__RawFloat___short_fast_pow10__h2cbe7cd7345f7d25($5 | 0)));
     break label$3;
    }
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$0 = $5;
    i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
    i64toi32_i32$4 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
    $9 = Math_fround($9 / Math_fround($f32_20as_20core__num__dec2flt__rawfp__RawFloat___short_fast_pow10__h2cbe7cd7345f7d25(i64toi32_i32$2 | 0)));
   }
   $7 = 1;
  }
  HEAPF32[($0 + 4 | 0) >> 2] = $9;
  HEAP32[$0 >> 2] = $7;
  global$0 = $6 + 32 | 0;
 }
 
 function core__num__dec2flt__rawfp__prev_float__h84a9ca750e8146ac($0) {
  $0 = Math_fround($0);
  var $1 = 0, $2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $3 = 0, $3$hi = 0, i64toi32_i32$4 = 0, $29 = 0;
  $1 = global$0 - 48 | 0;
  global$0 = $1;
  label$1 : {
   $2 = (core__f32___impl_20f32___classify__h2cc2893972a149fc(Math_fround($0)) | 0) & 255 | 0;
   if (($2 | 0) != (4 | 0)) {
    break label$1
   }
   $f32_20as_20core__num__dec2flt__rawfp__RawFloat___unpack__haddc0a4db1e502dc($1 + 32 | 0 | 0, Math_fround($0));
   $2 = HEAPU16[($1 + 40 | 0) >> 1] | 0;
   label$2 : {
    label$3 : {
     i64toi32_i32$2 = $1;
     i64toi32_i32$0 = HEAP32[($1 + 32 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1 + 36 | 0) >> 2] | 0;
     $3 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 8388608;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$3
     }
     i64toi32_i32$2 = 0;
     core__num__dec2flt__rawfp__Unpacked__new__h5fa9d5bfbc21692b($1 | 0, 16777215 | 0, i64toi32_i32$2 | 0, $2 + -1 | 0 | 0);
     $2 = HEAPU16[($1 + 8 | 0) >> 1] | 0;
     i64toi32_i32$3 = $1;
     i64toi32_i32$2 = HEAP32[$1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
     $3 = i64toi32_i32$2;
     $3$hi = i64toi32_i32$1;
     break label$2;
    }
    $29 = $1 + 16 | 0;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$3 = $3;
    i64toi32_i32$2 = -1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    core__num__dec2flt__rawfp__Unpacked__new__h5fa9d5bfbc21692b($29 | 0, i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, $2 | 0);
    $2 = HEAPU16[($1 + 24 | 0) >> 1] | 0;
    i64toi32_i32$1 = $1;
    i64toi32_i32$5 = HEAP32[($1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($1 + 20 | 0) >> 2] | 0;
    $3 = i64toi32_i32$5;
    $3$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $3$hi;
   $0 = Math_fround(core__num__dec2flt__rawfp__encode_normal__h79788dc1a919ce5b($3 | 0, i64toi32_i32$3 | 0, $2 | 0));
   global$0 = $1 + 48 | 0;
   return Math_fround($0);
  }
  label$4 : {
   label$5 : {
    if (($2 | 0) == (1 | 0)) {
     break label$5
    }
    label$6 : {
     if (($2 | 0) == (2 | 0)) {
      break label$6
     }
     if (($2 | 0) != (3 | 0)) {
      break label$4
     }
     core__panicking__panic__h2d0bc53a963fb996(1049448 | 0);
     abort();
    }
    core__panicking__panic__h2d0bc53a963fb996(1049500 | 0);
    abort();
   }
   core__panicking__panic__h2d0bc53a963fb996(1049556 | 0);
   abort();
  }
  core__panicking__panic__h2d0bc53a963fb996(1049608 | 0);
  abort();
 }
 
 function core__num__dec2flt__extract_sign__hcb13026d4c78d8d0($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$2) {
      break label$3
     }
     label$4 : {
      label$5 : {
       label$6 : {
        $3 = HEAPU8[$1 >> 0] | 0;
        if (($3 | 0) == (43 | 0)) {
         break label$6
        }
        if (($3 | 0) != (45 | 0)) {
         break label$5
        }
        label$7 : {
         if (($2 | 0) == (1 | 0)) {
          break label$7
         }
         if ((HEAP8[($1 + 1 | 0) >> 0] | 0 | 0) <= (-65 | 0)) {
          break label$2
         }
        }
        HEAP8[$0 >> 0] = 1;
        HEAP32[($0 + 4 | 0) >> 2] = $1 + 1 | 0;
        $2 = $2 + -1 | 0;
        break label$4;
       }
       label$8 : {
        if (($2 | 0) == (1 | 0)) {
         break label$8
        }
        if ((HEAP8[($1 + 1 | 0) >> 0] | 0 | 0) <= (-65 | 0)) {
         break label$1
        }
       }
       HEAP8[$0 >> 0] = 0;
       HEAP32[($0 + 4 | 0) >> 2] = $1 + 1 | 0;
       $2 = $2 + -1 | 0;
       break label$4;
      }
      HEAP32[($0 + 4 | 0) >> 2] = $1;
      HEAP8[$0 >> 0] = 0;
     }
     HEAP32[($0 + 8 | 0) >> 2] = $2;
     return;
    }
    core__panicking__panic_bounds_check__h0537ade040df571e(1060336 | 0, 0 | 0, 0 | 0);
    abort();
   }
   core__str__slice_error_fail__h65b601301310b052($1 | 0, $2 | 0, 1 | 0, $2 | 0);
   abort();
  }
  core__str__slice_error_fail__h65b601301310b052($1 | 0, $2 | 0, 1 | 0, $2 | 0);
  abort();
 }
 
 function core__num__dec2flt__algorithm__quick_start__h42b2807582e4051c($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $7 = 0, $3 = 0, $4 = 0, $6 = 0, $5 = 0;
  $3 = core__num__bignum__Big32x40__bit_length__h13ff63659f8edff3($0 | 0) | 0;
  $4 = core__num__bignum__Big32x40__bit_length__h13ff63659f8edff3($1 | 0) | 0;
  label$1 : {
   if (HEAPU16[$2 >> 1] | 0) {
    break label$1
   }
   $5 = $3 - $4 | 0;
   $3 = 0;
   $6 = 0;
   $4 = 0;
   label$2 : {
    label$3 : while (1) {
     $7 = $3 & 65535 | 0;
     if (($7 | 0) == (104 | 0)) {
      break label$2
     }
     if (($7 | 0) == (65387 | 0)) {
      break label$2
     }
     label$4 : {
      label$5 : {
       $7 = ((($5 - $6 | 0) + $4 | 0) << 16 | 0) >> 16 | 0;
       if (($7 | 0) >= (23 | 0)) {
        break label$5
       }
       $4 = $4 + 1 | 0;
       $7 = 65535;
       break label$4;
      }
      if (($7 | 0) <= (25 | 0)) {
       break label$2
      }
      $7 = 1;
      $6 = $6 + 1 | 0;
     }
     $3 = $3 + $7 | 0;
     HEAP16[$2 >> 1] = $3;
     continue label$3;
    };
   }
   core__num__bignum__Big32x40__mul_pow2__h9585b2465912363e($0 | 0, ($4 << 16 | 0) >> 16 | 0 | 0) | 0;
   core__num__bignum__Big32x40__mul_pow2__h9585b2465912363e($1 | 0, ($6 << 16 | 0) >> 16 | 0 | 0) | 0;
   return;
  }
  core__panicking__panic__h2d0bc53a963fb996(1049216 | 0);
  abort();
 }
 
 function std__sync__once__Once__call_once___7b_7bclosure_7d_7d__h35251447e289969d($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2 = 0, i64toi32_i32$2 = 0, $3 = 0, $5 = 0, $30 = 0, $4 = 0, $38 = 0, $44 = 0;
  $2 = global$0 - 48 | 0;
  global$0 = $2;
  $3 = HEAP32[$0 >> 2] | 0;
  $0 = HEAP32[$3 >> 2] | 0;
  HEAP32[$3 >> 2] = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $0 = HEAP32[$0 >> 2] | 0;
   i64toi32_i32$1 = ($2 + 32 | 0) + 8 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = 4;
   HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
   std__sync__mutex__Mutex_T___new__hcb1edb2a7158b210(i64toi32_i32$1 + 8 | 0 | 0, i64toi32_i32$1 + 32 | 0 | 0);
   $3 = HEAP32[$0 >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
   $30 = i64toi32_i32$0;
   i64toi32_i32$0 = $0;
   HEAP32[i64toi32_i32$0 >> 2] = $30;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $4 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
   i64toi32_i32$2 = ($2 + 8 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $38 = i64toi32_i32$1;
   i64toi32_i32$1 = $0 + 8 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $38;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $5 = HEAP32[($0 + 16 | 0) >> 2] | 0;
   i64toi32_i32$2 = $2 + 24 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $44 = i64toi32_i32$0;
   i64toi32_i32$0 = $0;
   HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = $44;
   HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$1;
   label$2 : {
    if (!$3) {
     break label$2
    }
    __rust_dealloc($3 | 0, 1 | 0, 1 | 0);
    if (!$5) {
     break label$2
    }
    __rust_dealloc($4 | 0, $5 << 3 | 0 | 0, 4 | 0);
   }
   global$0 = $2 + 48 | 0;
   return;
  }
  core__panicking__panic__h2d0bc53a963fb996(1050104 | 0);
  abort();
 }
 
 function $alloc__vec__Vec_T__20as_20alloc__vec__SpecExtend_T_2cI____from_iter__h8df714fc2f7ae2d5($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3 = 0, $4 = 0, $30 = 0, $40 = 0, $43 = 0, $54 = 0;
  $2 = global$0 - 48 | 0;
  global$0 = $2;
  $3 = $1 + 8 | 0;
  $core__iter__adapters__Cloned_I__20as_20core__iter__traits__iterator__Iterator___try_fold__hfa9c58aa8ffc7641($2 + 32 | 0 | 0, $1 | 0, $1 + 12 | 0 | 0, $3 | 0);
  label$1 : {
   label$2 : {
    if ((HEAP32[($2 + 32 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    i64toi32_i32$2 = $2;
    i64toi32_i32$0 = HEAP32[($2 + 36 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($2 + 40 | 0) >> 2] | 0;
    alloc__raw_vec__RawVec_T_2cA___allocate_in__h585e378cd0d7d35b($2 + 8 | 0 | 0, 1 | 0, 0 | 0);
    $4 = HEAP32[($2 + 12 | 0) >> 2] | 0;
    $30 = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $30;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[($2 + 24 | 0) >> 2] = 1;
    HEAP32[($2 + 20 | 0) >> 2] = $4;
    HEAP32[($2 + 16 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $3;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $40 = i64toi32_i32$1;
    i64toi32_i32$1 = ($2 + 32 | 0) + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $40;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $1;
    i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    $43 = i64toi32_i32$0;
    i64toi32_i32$0 = $2;
    HEAP32[($2 + 32 | 0) >> 2] = $43;
    HEAP32[($2 + 36 | 0) >> 2] = i64toi32_i32$1;
    alloc__vec__Vec_T___extend_desugared__hfdd1a38e9782a848($2 + 16 | 0 | 0, $2 + 32 | 0 | 0);
    HEAP32[($0 + 8 | 0) >> 2] = HEAP32[($2 + 24 | 0) >> 2] | 0;
    i64toi32_i32$2 = $2;
    i64toi32_i32$1 = HEAP32[($2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($2 + 20 | 0) >> 2] | 0;
    $54 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[i64toi32_i32$1 >> 2] = $54;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    break label$1;
   }
   HEAP32[($0 + 8 | 0) >> 2] = 0;
   i64toi32_i32$1 = $0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 4;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
  global$0 = $2 + 48 | 0;
 }
 
 function $core__iter__adapters__Map_I_2cF__20as_20core__iter__traits__iterator__Iterator___fold__h3f5df867cad0eca2($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $2 = 0, $7 = Math_fround(0), $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = Math_fround(0);
  label$1 : {
   $2 = HEAP32[$0 >> 2] | 0;
   $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if (($2 | 0) == ($3 | 0)) {
    break label$1
   }
   $0 = HEAP8[(HEAP32[($0 + 8 | 0) >> 2] | 0) >> 0] | 0;
   $4 = $0 << 2 | 0;
   $5 = (HEAP32[($4 + 1051608 | 0) >> 2] | 0) << 2 | 0;
   $6 = ($0 & 255 | 0 | 2 | 0 | 0) == (3 | 0);
   label$2 : while (1) {
    $0 = $2;
    $8 = Math_fround(Math_fround(HEAPF32[($0 + ((HEAP32[($4 + 1051592 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]) + Math_fround(HEAPF32[($0 + $5 | 0) >> 2]));
    $2 = $0 + 192 | 0;
    label$3 : {
     label$4 : {
      if (!(HEAPU8[($0 + 188 | 0) >> 0] | 0)) {
       break label$4
      }
      label$5 : {
       if ($6) {
        break label$5
       }
       $7 = Math_fround(HEAPF32[($0 + 160 | 0) >> 2]);
       break label$3;
      }
      $7 = Math_fround(HEAPF32[($0 + 164 | 0) >> 2]);
      break label$3;
     }
     $7 = Math_fround(HEAPF32[($0 + 132 | 0) >> 2]);
    }
    $1 = Math_fround($1 + Math_fround($8 + $7));
    if (($3 | 0) != ($2 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return Math_fround($1);
 }
 
 function $core__iter__adapters__Cloned_I__20as_20core__iter__traits__iterator__Iterator___fold__hb8a9376521c159f4($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3 = 0, i64toi32_i32$2 = 0, $4 = 0, $5 = 0, $7 = 0, $7$hi = 0, $6 = 0, $8 = 0, $8$hi = 0, $49 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $4 = HEAP32[($2 + 8 | 0) >> 2] | 0;
  $5 = HEAP32[($2 + 4 | 0) >> 2] | 0;
  label$1 : {
   if (($0 | 0) == ($1 | 0)) {
    break label$1
   }
   $2 = HEAP32[$2 >> 2] | 0;
   label$2 : while (1) {
    i64toi32_i32$2 = $0 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $7 = i64toi32_i32$0;
    $7$hi = i64toi32_i32$1;
    $6 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = $0;
    i64toi32_i32$1 = HEAP32[$0 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $8 = i64toi32_i32$1;
    $8$hi = i64toi32_i32$0;
    $alloc__vec__Vec_T__20as_20core__clone__Clone___clone__ha7ce6132966c4db5($3 | 0, $0 + 20 | 0 | 0);
    HEAP32[($2 + 16 | 0) >> 2] = $6;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$1 = $2 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $7;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$1 = $2;
    HEAP32[$2 >> 2] = $8;
    HEAP32[($2 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($2 + 28 | 0) >> 2] = HEAP32[($3 + 8 | 0) >> 2] | 0;
    i64toi32_i32$2 = $3;
    i64toi32_i32$0 = HEAP32[$3 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($3 + 4 | 0) >> 2] | 0;
    $49 = i64toi32_i32$0;
    i64toi32_i32$0 = $2 + 20 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $49;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $2 = $2 + 32 | 0;
    $4 = $4 + 1 | 0;
    $0 = $0 + 32 | 0;
    if (($0 | 0) != ($1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  HEAP32[$5 >> 2] = $4;
  global$0 = $3 + 16 | 0;
 }
 
 function $core__iter__adapters__chain__Chain_A_2cB__20as_20core__iter__traits__iterator__Iterator___fold__h71012b14e40f3bd5($0, $1, $2) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = $2 | 0;
  var $3 = 0, $5 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[($3 + 4 | 0) >> 2] = $2;
  label$1 : {
   $4 = HEAPU8[($0 + 16 | 0) >> 0] | 0;
   if ($4 >>> 0 > 1 >>> 0) {
    break label$1
   }
   $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $2 = HEAP32[$0 >> 2] | 0;
   HEAP32[($3 + 8 | 0) >> 2] = $3 + 4 | 0;
   if (($2 | 0) == ($5 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1 = Math_fround(core__ops__function__impls___impl_20core__ops__function__FnMut_A__20for_20_mut_20F___call_mut__hdd94f552ffd65647($3 + 8 | 0 | 0, Math_fround($1), $2 | 0));
    $2 = $2 + 4 | 0;
    if (($5 | 0) != ($2 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   if (($4 | 2 | 0 | 0) != (2 | 0)) {
    break label$3
   }
   $5 = HEAP32[($0 + 12 | 0) >> 2] | 0;
   $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   HEAP32[($3 + 12 | 0) >> 2] = $3 + 4 | 0;
   if (($2 | 0) == ($5 | 0)) {
    break label$3
   }
   label$4 : while (1) {
    $1 = Math_fround(core__ops__function__impls___impl_20core__ops__function__FnMut_A__20for_20_mut_20F___call_mut__hdd94f552ffd65647($3 + 12 | 0 | 0, Math_fround($1), $2 | 0));
    $2 = $2 + 4 | 0;
    if (($5 | 0) != ($2 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
  global$0 = $3 + 16 | 0;
  return Math_fround($1);
 }
 
 function core__num__dec2flt__num__compare_with_half_ulp__he9852dcf9bb66aab($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0, $4 = 0, $5 = 0;
  $2 = 255;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (!$1) {
       break label$4
      }
      $3 = $1 + -1 | 0;
      $1 = $3 >>> 5 | 0;
      if ($3 >>> 0 >= 1280 >>> 0) {
       break label$1
      }
      if (!((HEAP32[(($0 + ($1 << 2 | 0) | 0) + 4 | 0) >> 2] | 0) & (1 << ($3 & 31 | 0) | 0) | 0)) {
       break label$4
      }
      $1 = 0;
      label$5 : while (1) {
       if ($1 >>> 0 >= $3 >>> 0) {
        break label$3
       }
       $4 = $1 >>> 5 | 0;
       if ($1 >>> 0 >= 1280 >>> 0) {
        break label$2
       }
       $5 = $1 & 31 | 0;
       $2 = 1;
       $1 = $1 + 1 | 0;
       if (!((HEAP32[(($0 + ($4 << 2 | 0) | 0) + 4 | 0) >> 2] | 0) & (1 << $5 | 0) | 0)) {
        continue label$5
       }
       break label$5;
      };
     }
     return $2 | 0;
    }
    return 0 | 0;
   }
   core__panicking__panic_bounds_check__h0537ade040df571e(1065964 | 0, $4 | 0, 40 | 0);
   abort();
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1065964 | 0, $1 | 0, 40 | 0);
  abort();
 }
 
 function stretch_layout__Node__mark_dirty__h3a05b794bae86814($0) {
  $0 = $0 | 0;
  var $1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $2 = 0, $3 = 0, $4 = 0, $21 = 0, $24 = 0, $48 = 0, $51 = 0;
  $1 = global$0 - 48 | 0;
  global$0 = $1;
  label$1 : {
   label$2 : {
    $2 = HEAP32[$0 >> 2] | 0;
    if (HEAP32[($2 + 8 | 0) >> 2] | 0) {
     break label$2
    }
    $3 = $2 + 8 | 0;
    HEAP32[$3 >> 2] = -1;
    $4 = ($1 + 24 | 0) + 8 | 0;
    i64toi32_i32$2 = $0 + 12 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $21 = i64toi32_i32$0;
    i64toi32_i32$0 = $4;
    HEAP32[i64toi32_i32$0 >> 2] = $21;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    $24 = i64toi32_i32$1;
    i64toi32_i32$1 = $1;
    HEAP32[($1 + 24 | 0) >> 2] = $24;
    HEAP32[($1 + 28 | 0) >> 2] = i64toi32_i32$0;
    stretch__node__Stretch__mark_dirty__ha8a17865b039a2cf($1 | 0, $2 + 16 | 0 | 0, $1 + 24 | 0 | 0);
    if ((HEAP32[$1 >> 2] | 0 | 0) != (2 | 0)) {
     break label$1
    }
    HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1 | 0;
    global$0 = $1 + 48 | 0;
    return;
   }
   core__result__unwrap_failed__h2450ec3de4884319(1048576 | 0, 16 | 0);
   abort();
  }
  HEAP32[(($1 + 24 | 0) + 16 | 0) >> 2] = HEAP32[($1 + 16 | 0) >> 2] | 0;
  i64toi32_i32$2 = $1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $48 = i64toi32_i32$0;
  i64toi32_i32$0 = $4;
  HEAP32[i64toi32_i32$0 >> 2] = $48;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1 + 4 | 0) >> 2] | 0;
  $51 = i64toi32_i32$1;
  i64toi32_i32$1 = $1;
  HEAP32[($1 + 24 | 0) >> 2] = $51;
  HEAP32[($1 + 28 | 0) >> 2] = i64toi32_i32$0;
  core__result__unwrap_failed__h8a62896efab79dcd(1048696 | 0, 43 | 0, $1 + 24 | 0 | 0);
  abort();
 }
 
 function node_new($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $3 = 0, $38 = 0, $44 = 0, $47 = 0;
  $2 = global$0 - 64 | 0;
  global$0 = $2;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    $3 = HEAP32[$0 >> 2] | 0;
    if (($3 | 0) == (-1 | 0)) {
     break label$1
    }
    HEAP32[$0 >> 2] = $3 + 1 | 0;
    HEAP32[($2 + 32 | 0) >> 2] = $1;
    stretch_layout__Node__new__hf871c77bd8368dee($2 | 0, $0 + 4 | 0 | 0, $2 + 32 | 0 | 0);
    HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1 | 0;
    HEAP32[(($2 + 32 | 0) + 24 | 0) >> 2] = HEAP32[($2 + 24 | 0) >> 2] | 0;
    i64toi32_i32$2 = $2 + 16 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $38 = i64toi32_i32$0;
    i64toi32_i32$0 = ($2 + 32 | 0) + 16 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $38;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $44 = i64toi32_i32$1;
    i64toi32_i32$1 = ($2 + 32 | 0) + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $44;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $2;
    i64toi32_i32$0 = HEAP32[$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    $47 = i64toi32_i32$0;
    i64toi32_i32$0 = $2;
    HEAP32[($2 + 32 | 0) >> 2] = $47;
    HEAP32[($2 + 36 | 0) >> 2] = i64toi32_i32$1;
    $0 = $stretch_layout__Node_20as_20wasm_bindgen__convert__traits__IntoWasmAbi___into_abi__hc3a75ef282dd9304($2 + 32 | 0 | 0) | 0;
    global$0 = $2 + 64 | 0;
    return $0 | 0;
   }
   wasm_bindgen____rt__throw_null__h3f3e0f774e705662();
   abort();
  }
  wasm_bindgen____rt__borrow_fail__h1790ad2c17b5cd84();
  abort();
 }
 
 function core__num__bignum__Big32x40__sub__ha94c81ecf8eacd8a($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $6 = 0, $4 = 0, $5 = 0, $7 = 0;
  label$1 : {
   label$2 : {
    $2 = HEAP32[$0 >> 2] | 0;
    $3 = HEAP32[$1 >> 2] | 0;
    $4 = $3 >>> 0 < $2 >>> 0 ? $2 : $3;
    if ($4 >>> 0 > 40 >>> 0) {
     break label$2
    }
    label$3 : {
     if (!$4) {
      break label$3
     }
     $2 = $1 + 4 | 0;
     $1 = $0 + 4 | 0;
     $5 = 0;
     $6 = 1;
     label$4 : while (1) {
      $7 = HEAP32[$1 >> 2] | 0;
      $3 = $7 + ((HEAP32[$2 >> 2] | 0) ^ -1 | 0) | 0;
      $6 = $3 + ($6 & 1 | 0) | 0;
      HEAP32[$1 >> 2] = $6;
      $6 = $3 >>> 0 < $7 >>> 0 | $6 >>> 0 < $3 >>> 0 | 0;
      $2 = $2 + 4 | 0;
      $1 = $1 + 4 | 0;
      $5 = $5 + 1 | 0;
      if ($5 >>> 0 < $4 >>> 0) {
       continue label$4
      }
      break label$4;
     };
     if (!$6) {
      break label$1
     }
    }
    HEAP32[$0 >> 2] = $4;
    return $0 | 0;
   }
   core__slice__slice_index_len_fail__h4544fc57f3d8a7a0($4 | 0, 40 | 0);
   abort();
  }
  core__panicking__panic__h2d0bc53a963fb996(1066024 | 0);
  abort();
 }
 
 function $stretch_layout__Node_20as_20wasm_bindgen__convert__traits__FromWasmAbi___from_abi__h96859e12f99a66f2($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $2 = 0, $15 = 0, $20 = 0, $25 = 0, $28 = 0, $31 = 0, $36 = 0, $41 = 0;
  $2 = global$0 - 32 | 0;
  global$0 = $2;
  label$1 : {
   label$2 : {
    if (!$1) {
     break label$2
    }
    if (HEAP32[$1 >> 2] | 0) {
     break label$1
    }
    HEAP32[$1 >> 2] = 0;
    i64toi32_i32$2 = $1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $15 = i64toi32_i32$0;
    i64toi32_i32$0 = $2 + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $15;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $1 + 16 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $20 = i64toi32_i32$1;
    i64toi32_i32$1 = $2 + 16 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $20;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $1 + 24 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $25 = i64toi32_i32$0;
    i64toi32_i32$0 = $2 + 24 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $25;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $28 = i64toi32_i32$1;
    i64toi32_i32$1 = $2;
    HEAP32[i64toi32_i32$1 >> 2] = $28;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
    $31 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $31;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$2 + 12 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $36 = i64toi32_i32$1;
    i64toi32_i32$1 = $0 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $36;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $2 + 20 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $41 = i64toi32_i32$0;
    i64toi32_i32$0 = $0 + 16 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $41;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[($0 + 24 | 0) >> 2] = HEAP32[($2 + 28 | 0) >> 2] | 0;
    __rust_dealloc($1 | 0, 32 | 0, 4 | 0);
    global$0 = $2 + 32 | 0;
    return;
   }
   wasm_bindgen____rt__throw_null__h3f3e0f774e705662();
   abort();
  }
  wasm_bindgen____rt__borrow_fail__h1790ad2c17b5cd84();
  abort();
 }
 
 function stretch__node__Stretch__compute_layout__h7ee17343a79460e6($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4 = 0, $13 = 0, $16 = 0, $27 = 0, $37 = 0, $45 = 0, $48 = 0;
  $4 = global$0 - 48 | 0;
  global$0 = $4;
  i64toi32_i32$2 = $2 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $13 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4 + 32 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $13;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $16 = i64toi32_i32$1;
  i64toi32_i32$1 = $4;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = $16;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
  stretch__node__Stretch__find_node__h5d72b27b054a57c0(i64toi32_i32$1 + 8 | 0 | 0, $1 | 0, i64toi32_i32$1 + 32 | 0 | 0);
  label$1 : {
   label$2 : {
    if ((HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    i64toi32_i32$2 = $4;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    $27 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $27;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$2 + 20 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $37 = i64toi32_i32$1;
    i64toi32_i32$1 = $0 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $37;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    break label$1;
   }
   $2 = HEAP32[($4 + 12 | 0) >> 2] | 0;
   i64toi32_i32$2 = $3 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $45 = i64toi32_i32$0;
   i64toi32_i32$0 = ($4 + 8 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $45;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $3;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $48 = i64toi32_i32$1;
   i64toi32_i32$1 = $4;
   HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $48;
   HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
   stretch__forest__Forest__compute_layout__h7867d865900c3088($0 | 0, $1 + 104 | 0 | 0, $2 | 0, i64toi32_i32$1 + 8 | 0 | 0);
  }
  global$0 = $4 + 48 | 0;
 }
 
 function stretch__algo___impl_20stretch__forest__Forest___compute_internal__hidden_layout__hb1f8e0b46cf43938($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    if ($4 >>> 0 <= $2 >>> 0) {
     break label$2
    }
    $4 = (HEAP32[$0 >> 2] | 0) + Math_imul($2, 288) | 0;
    HEAP32[($4 + 220 | 0) >> 2] = $3;
    i64toi32_i32$1 = $4 + 232 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $4 + 224 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $4 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    if ($4 >>> 0 <= $2 >>> 0) {
     break label$1
    }
    label$3 : {
     $2 = (HEAP32[$1 >> 2] | 0) + Math_imul($2, 12) | 0;
     $4 = HEAP32[($2 + 8 | 0) >> 2] | 0;
     if (!$4) {
      break label$3
     }
     $2 = HEAP32[$2 >> 2] | 0;
     $3 = $4 << 2 | 0;
     $4 = 0;
     label$4 : while (1) {
      stretch__algo___impl_20stretch__forest__Forest___compute_internal__hidden_layout__hb1f8e0b46cf43938($0 | 0, $1 | 0, HEAP32[$2 >> 2] | 0 | 0, $4 | 0);
      $4 = $4 + 1 | 0;
      $2 = $2 + 4 | 0;
      $3 = $3 + -4 | 0;
      if ($3) {
       continue label$4
      }
      break label$4;
     };
    }
    return;
   }
   core__panicking__panic_bounds_check__h0537ade040df571e(1051720 | 0, $2 | 0, $4 | 0);
   abort();
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1051704 | 0, $2 | 0, $4 | 0);
  abort();
 }
 
 function roundf($0) {
  $0 = Math_fround($0);
  var $4 = Math_fround(0), $2 = 0, $1 = 0, $3 = 0;
  $1 = global$0 - 16 | 0;
  label$1 : {
   $2 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
   $3 = ($2 >>> 23 | 0) & 255 | 0;
   if ($3 >>> 0 > 149 >>> 0) {
    break label$1
   }
   $0 = ($2 | 0) < (0 | 0) ? Math_fround(-$0) : $0;
   label$2 : {
    if ($3 >>> 0 >= 126 >>> 0) {
     break label$2
    }
    HEAPF32[($1 + 12 | 0) >> 2] = Math_fround($0 + Math_fround(8388608.0));
    Math_fround(HEAPF32[($1 + 12 | 0) >> 2]);
    return Math_fround(Math_fround($0 * Math_fround(0.0)));
   }
   label$3 : {
    label$4 : {
     $4 = Math_fround(Math_fround(Math_fround($0 + Math_fround(8388608.0)) + Math_fround(-8388608.0)) - $0);
     if (!($4 > Math_fround(.5))) {
      break label$4
     }
     $0 = Math_fround(Math_fround($0 + $4) + Math_fround(-1.0));
     break label$3;
    }
    $0 = Math_fround($0 + $4);
    if ($4 <= Math_fround(-.5) ^ 1 | 0) {
     break label$3
    }
    $0 = Math_fround($0 + Math_fround(1.0));
   }
   $0 = ($2 | 0) < (0 | 0) ? Math_fround(-$0) : $0;
  }
  return Math_fround($0);
 }
 
 function stretch__algo___impl_20stretch__forest__Forest___compute_internal__calc_baseline__ha566e9e805d56467($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  label$1 : {
   $3 = HEAP32[($0 + 20 | 0) >> 2] | 0;
   if ($3 >>> 0 <= $1 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     label$4 : {
      $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      if (!(HEAP32[(($4 + Math_imul($1, 12) | 0) + 8 | 0) >> 2] | 0)) {
       break label$4
      }
      $2 = HEAP32[$0 >> 2] | 0;
      $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      label$5 : while (1) {
       if ($3 >>> 0 <= $1 >>> 0) {
        break label$3
       }
       $1 = HEAP32[(HEAP32[($4 + Math_imul($1, 12) | 0) >> 2] | 0) >> 2] | 0;
       if ($0 >>> 0 <= $1 >>> 0) {
        break label$2
       }
       if ($3 >>> 0 <= $1 >>> 0) {
        break label$1
       }
       if (HEAP32[(($4 + Math_imul($1, 12) | 0) + 8 | 0) >> 2] | 0) {
        continue label$5
       }
       break label$5;
      };
      $2 = ($2 + Math_imul($1, 288) | 0) + 220 | 0;
     }
     return Math_fround(Math_fround(HEAPF32[($2 + 8 | 0) >> 2]));
    }
    core__panicking__panic_bounds_check__h0537ade040df571e(1051704 | 0, $1 | 0, $3 | 0);
    abort();
   }
   core__panicking__panic_bounds_check__h0537ade040df571e(1051704 | 0, $1 | 0, $0 | 0);
   abort();
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1051704 | 0, $1 | 0, $3 | 0);
  abort();
 }
 
 function layout_child($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $3 = 0, $29 = 0, $35 = 0, $41 = 0, $44 = 0;
  $2 = global$0 - 64 | 0;
  global$0 = $2;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    $3 = HEAP32[$0 >> 2] | 0;
    if (($3 | 0) == (-1 | 0)) {
     break label$1
    }
    HEAP32[$0 >> 2] = $3 + 1 | 0;
    stretch_layout__Layout__child__h3276324f50fb3c61($2 | 0, $0 + 4 | 0 | 0, $1 | 0);
    HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1 | 0;
    i64toi32_i32$2 = $2 + 24 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $29 = i64toi32_i32$0;
    i64toi32_i32$0 = ($2 + 32 | 0) + 24 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $29;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2 + 16 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $35 = i64toi32_i32$1;
    i64toi32_i32$1 = ($2 + 32 | 0) + 16 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $35;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $2 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $41 = i64toi32_i32$0;
    i64toi32_i32$0 = ($2 + 32 | 0) + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $41;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2;
    i64toi32_i32$1 = HEAP32[$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    $44 = i64toi32_i32$1;
    i64toi32_i32$1 = $2;
    HEAP32[($2 + 32 | 0) >> 2] = $44;
    HEAP32[($2 + 36 | 0) >> 2] = i64toi32_i32$0;
    $0 = $stretch_layout__Layout_20as_20wasm_bindgen__convert__traits__IntoWasmAbi___into_abi__ha23bbae265851086($2 + 32 | 0 | 0) | 0;
    global$0 = $2 + 64 | 0;
    return $0 | 0;
   }
   wasm_bindgen____rt__throw_null__h3f3e0f774e705662();
   abort();
  }
  wasm_bindgen____rt__borrow_fail__h1790ad2c17b5cd84();
  abort();
 }
 
 function alloc__vec__Vec_T___extend_desugared__hfdd1a38e9782a848($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $9 = 0, $3 = 0, $4 = 0, $8 = 0, $10 = 0, $5 = 0, $6 = 0, $7 = 0;
  $2 = global$0 - 16 | 0;
  global$0 = $2;
  $3 = $1 + 12 | 0;
  $4 = $1 + 8 | 0;
  $core__iter__adapters__Cloned_I__20as_20core__iter__traits__iterator__Iterator___try_fold__hfa9c58aa8ffc7641($2 | 0, $1 | 0, $3 | 0, $4 | 0);
  label$1 : {
   if ((HEAP32[$2 >> 2] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $5 = $0 + 4 | 0;
   label$2 : while (1) {
    $6 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    $7 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    label$3 : {
     $8 = $0 + 8 | 0;
     $9 = HEAP32[$8 >> 2] | 0;
     if (($9 | 0) != (HEAP32[$5 >> 2] | 0 | 0)) {
      break label$3
     }
     alloc__raw_vec__RawVec_T_2cA___reserve__hfe9b1a6cb252d78f($0 | 0, $9 | 0, 1 | 0);
    }
    $10 = (HEAP32[$0 >> 2] | 0) + ($9 << 3 | 0) | 0;
    HEAP32[($10 + 4 | 0) >> 2] = $6;
    HEAP32[$10 >> 2] = $7;
    HEAP32[$8 >> 2] = $9 + 1 | 0;
    $core__iter__adapters__Cloned_I__20as_20core__iter__traits__iterator__Iterator___try_fold__hfa9c58aa8ffc7641($2 | 0, $1 | 0, $3 | 0, $4 | 0);
    if ((HEAP32[$2 >> 2] | 0 | 0) == (1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  global$0 = $2 + 16 | 0;
 }
 
 function node_computeLayout($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $24 = 0, $30 = 0, $36 = 0, $39 = 0;
  $2 = global$0 - 64 | 0;
  global$0 = $2;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    if (HEAP32[$0 >> 2] | 0) {
     break label$1
    }
    HEAP32[$0 >> 2] = -1;
    HEAP32[($2 + 32 | 0) >> 2] = $1;
    stretch_layout__Node__compute_layout__h482197764c8e34d4($2 | 0, $0 + 4 | 0 | 0, $2 + 32 | 0 | 0);
    HEAP32[$0 >> 2] = 0;
    i64toi32_i32$2 = $2 + 24 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $24 = i64toi32_i32$0;
    i64toi32_i32$0 = ($2 + 32 | 0) + 24 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $24;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2 + 16 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $30 = i64toi32_i32$1;
    i64toi32_i32$1 = ($2 + 32 | 0) + 16 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $30;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $2 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $36 = i64toi32_i32$0;
    i64toi32_i32$0 = ($2 + 32 | 0) + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $36;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2;
    i64toi32_i32$1 = HEAP32[$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    $39 = i64toi32_i32$1;
    i64toi32_i32$1 = $2;
    HEAP32[($2 + 32 | 0) >> 2] = $39;
    HEAP32[($2 + 36 | 0) >> 2] = i64toi32_i32$0;
    $0 = $stretch_layout__Layout_20as_20wasm_bindgen__convert__traits__IntoWasmAbi___into_abi__ha23bbae265851086($2 + 32 | 0 | 0) | 0;
    global$0 = $2 + 64 | 0;
    return $0 | 0;
   }
   wasm_bindgen____rt__throw_null__h3f3e0f774e705662();
   abort();
  }
  wasm_bindgen____rt__borrow_fail__h1790ad2c17b5cd84();
  abort();
 }
 
 function $stretch_layout__Node_20as_20wasm_bindgen__convert__traits__IntoWasmAbi___into_abi__hc3a75ef282dd9304($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $19 = 0, $25 = 0, $28 = 0, $34 = 0, $39 = 0, $43 = 0;
  $1 = global$0 - 32 | 0;
  global$0 = $1;
  $2 = $1 + 24 | 0;
  HEAP32[$2 >> 2] = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $3 = $1 + 16 | 0;
  i64toi32_i32$2 = $0 + 16 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $19 = i64toi32_i32$0;
  i64toi32_i32$0 = $3;
  HEAP32[i64toi32_i32$0 >> 2] = $19;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $4 = $1 + 8 | 0;
  i64toi32_i32$2 = $0 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $25 = i64toi32_i32$1;
  i64toi32_i32$1 = $4;
  HEAP32[i64toi32_i32$1 >> 2] = $25;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $28 = i64toi32_i32$0;
  i64toi32_i32$0 = $1;
  HEAP32[i64toi32_i32$0 >> 2] = $28;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  label$1 : {
   $0 = __rust_alloc(32 | 0, 4 | 0) | 0;
   if (!$0) {
    break label$1
   }
   i64toi32_i32$2 = $1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $34 = i64toi32_i32$1;
   i64toi32_i32$1 = $0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $34;
   HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   i64toi32_i32$2 = $4;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $39 = i64toi32_i32$0;
   i64toi32_i32$0 = $0 + 12 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $39;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $3;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $43 = i64toi32_i32$1;
   i64toi32_i32$1 = $0 + 20 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $43;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0 + 28 | 0) >> 2] = HEAP32[$2 >> 2] | 0;
   global$0 = $1 + 32 | 0;
   return $0 | 0;
  }
  alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83(32 | 0, 4 | 0);
  abort();
 }
 
 function $stretch_layout__Layout_20as_20wasm_bindgen__convert__traits__IntoWasmAbi___into_abi__ha23bbae265851086($0) {
  $0 = $0 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $13 = 0, $19 = 0, $25 = 0, $28 = 0, $34 = 0, $39 = 0, $43 = 0, $47 = 0;
  $1 = global$0 - 32 | 0;
  global$0 = $1;
  $2 = $1 + 24 | 0;
  i64toi32_i32$2 = $0 + 24 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $13 = i64toi32_i32$0;
  i64toi32_i32$0 = $2;
  HEAP32[i64toi32_i32$0 >> 2] = $13;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $3 = $1 + 16 | 0;
  i64toi32_i32$2 = $0 + 16 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $19 = i64toi32_i32$1;
  i64toi32_i32$1 = $3;
  HEAP32[i64toi32_i32$1 >> 2] = $19;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $4 = $1 + 8 | 0;
  i64toi32_i32$2 = $0 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $25 = i64toi32_i32$0;
  i64toi32_i32$0 = $4;
  HEAP32[i64toi32_i32$0 >> 2] = $25;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $28 = i64toi32_i32$1;
  i64toi32_i32$1 = $1;
  HEAP32[i64toi32_i32$1 >> 2] = $28;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   $0 = __rust_alloc(36 | 0, 4 | 0) | 0;
   if (!$0) {
    break label$1
   }
   i64toi32_i32$2 = $1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $34 = i64toi32_i32$0;
   i64toi32_i32$0 = $0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = $34;
   HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[i64toi32_i32$0 >> 2] = 0;
   i64toi32_i32$2 = $4;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $39 = i64toi32_i32$1;
   i64toi32_i32$1 = $0 + 12 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $39;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $3;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $43 = i64toi32_i32$0;
   i64toi32_i32$0 = $0 + 20 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $43;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $47 = i64toi32_i32$1;
   i64toi32_i32$1 = $0 + 28 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $47;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   global$0 = $1 + 32 | 0;
   return $0 | 0;
  }
  alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83(36 | 0, 4 | 0);
  abort();
 }
 
 function alloc__vec__Vec_T___extend_desugared__h8af6e7a1627b85bb($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $5 = 0, $4 = 0;
  $2 = global$0 - 32 | 0;
  global$0 = $2;
  HEAP32[($2 + 28 | 0) >> 2] = $1;
  $_mut_20I_20as_20core__iter__traits__iterator__Iterator___next__hbdeccbe24581e7c4($2 + 16 | 0 | 0, $2 + 28 | 0 | 0);
  label$1 : {
   if ((HEAP32[($2 + 16 | 0) >> 2] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $3 = HEAP32[($2 + 20 | 0) >> 2] | 0;
   $4 = $0 + 4 | 0;
   $5 = $0 + 8 | 0;
   label$2 : while (1) {
    label$3 : {
     $1 = HEAP32[$5 >> 2] | 0;
     if (($1 | 0) != (HEAP32[$4 >> 2] | 0 | 0)) {
      break label$3
     }
     alloc__raw_vec__RawVec_T_2cA___reserve__h04586cd83aef0f94($0 | 0, $1 | 0, 1 | 0);
    }
    HEAP32[((HEAP32[$0 >> 2] | 0) + ($1 << 2 | 0) | 0) >> 2] = $3;
    HEAP32[$5 >> 2] = $1 + 1 | 0;
    $_mut_20I_20as_20core__iter__traits__iterator__Iterator___next__hbdeccbe24581e7c4($2 + 8 | 0 | 0, $2 + 28 | 0 | 0);
    $3 = HEAP32[($2 + 12 | 0) >> 2] | 0;
    if ((HEAP32[($2 + 8 | 0) >> 2] | 0 | 0) == (1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  global$0 = $2 + 32 | 0;
 }
 
 function $alloc__vec__Vec_T__20as_20alloc__vec__SpecExtend_T_2cI____spec_extend__h08bb0c4928940809($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4 = 0, $3 = 0, $31 = 0, $34 = 0;
  $2 = global$0 - 48 | 0;
  global$0 = $2;
  alloc__raw_vec__RawVec_T_2cA___reserve__hba7a32ad1439175e($0 | 0, HEAP32[($0 + 8 | 0) >> 2] | 0 | 0, ((HEAP32[($1 + 12 | 0) >> 2] | 0) - (HEAP32[($1 + 8 | 0) >> 2] | 0) | 0) >> 4 | 0 | 0);
  $3 = HEAP32[$0 >> 2] | 0;
  $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  HEAP32[(($2 + 8 | 0) + 16 | 0) >> 2] = HEAP32[($1 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1 + 12 | 0) >> 2] | 0;
  $31 = i64toi32_i32$0;
  i64toi32_i32$0 = ($2 + 8 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $31;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1 + 4 | 0) >> 2] | 0;
  $34 = i64toi32_i32$1;
  i64toi32_i32$1 = $2;
  HEAP32[($2 + 8 | 0) >> 2] = $34;
  HEAP32[($2 + 12 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(($2 + 32 | 0) + 8 | 0) >> 2] = $4;
  HEAP32[($2 + 36 | 0) >> 2] = $0 + 8 | 0;
  HEAP32[($2 + 32 | 0) >> 2] = $3 + ($4 << 5 | 0) | 0;
  $core__iter__adapters__Map_I_2cF__20as_20core__iter__traits__iterator__Iterator___fold__hebf69c30ff63ca48($2 + 8 | 0 | 0, $2 + 32 | 0 | 0);
  global$0 = $2 + 48 | 0;
 }
 
 function $alloc__vec__Vec_T__20as_20alloc__vec__SpecExtend_T_2cI____from_iter__h18c413c830ba1369($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4 = 0, $3 = 0, $42 = 0;
  $2 = global$0 - 48 | 0;
  global$0 = $2;
  HEAP32[($2 + 28 | 0) >> 2] = $1;
  $_mut_20I_20as_20core__iter__traits__iterator__Iterator___next__hbdeccbe24581e7c4($2 + 16 | 0 | 0, $2 + 28 | 0 | 0);
  label$1 : {
   label$2 : {
    if (!(HEAP32[($2 + 16 | 0) >> 2] | 0)) {
     break label$2
    }
    $1 = HEAP32[($2 + 20 | 0) >> 2] | 0;
    alloc__raw_vec__RawVec_T_2cA___allocate_in__h1e6d477234493b78($2 + 8 | 0 | 0, 1 | 0, 0 | 0);
    $3 = HEAP32[($2 + 12 | 0) >> 2] | 0;
    $4 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    HEAP32[$4 >> 2] = $1;
    HEAP32[($2 + 40 | 0) >> 2] = 1;
    HEAP32[($2 + 36 | 0) >> 2] = $3;
    HEAP32[($2 + 32 | 0) >> 2] = $4;
    alloc__vec__Vec_T___extend_desugared__h8af6e7a1627b85bb($2 + 32 | 0 | 0, HEAP32[($2 + 28 | 0) >> 2] | 0 | 0);
    HEAP32[($0 + 8 | 0) >> 2] = HEAP32[($2 + 40 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($2 + 32 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($2 + 36 | 0) >> 2] | 0;
    $42 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $42;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    break label$1;
   }
   HEAP32[($0 + 8 | 0) >> 2] = 0;
   i64toi32_i32$0 = $0;
   i64toi32_i32$1 = 0;
   HEAP32[i64toi32_i32$0 >> 2] = 4;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  }
  global$0 = $2 + 48 | 0;
 }
 
 function core__fmt__num___impl_20core__fmt__LowerHex_20for_20i8___fmt__h6285e90692b92d9d($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0, $4 = 0;
  $2 = global$0 - 128 | 0;
  global$0 = $2;
  $3 = HEAPU8[$0 >> 0] | 0;
  $0 = 0;
  label$1 : while (1) {
   $4 = $3 & 15 | 0;
   HEAP8[(($2 + $0 | 0) + 127 | 0) >> 0] = $4 >>> 0 < 10 >>> 0 ? $4 | 48 | 0 : $4 + 87 | 0;
   $0 = $0 + -1 | 0;
   $3 = ($3 >>> 4 | 0) & 15 | 0;
   if ($3) {
    continue label$1
   }
   break label$1;
  };
  label$2 : {
   $3 = $0 + 128 | 0;
   if ($3 >>> 0 >= 129 >>> 0) {
    break label$2
   }
   $0 = core__fmt__Formatter__pad_integral__h253f31941eb77fc7($1 | 0, 1 | 0, 1061048 | 0, 2 | 0, ($2 + $0 | 0) + 128 | 0 | 0, 0 - $0 | 0 | 0) | 0;
   global$0 = $2 + 128 | 0;
   return $0 | 0;
  }
  core__slice__slice_index_order_fail__ha75fa70416d3bc2f($3 | 0, 128 | 0);
  abort();
 }
 
 function core__fmt__num___impl_20core__fmt__UpperHex_20for_20i8___fmt__h0d6d3232e6cceb39($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0, $4 = 0;
  $2 = global$0 - 128 | 0;
  global$0 = $2;
  $3 = HEAPU8[$0 >> 0] | 0;
  $0 = 0;
  label$1 : while (1) {
   $4 = $3 & 15 | 0;
   HEAP8[(($2 + $0 | 0) + 127 | 0) >> 0] = $4 >>> 0 < 10 >>> 0 ? $4 | 48 | 0 : $4 + 55 | 0;
   $0 = $0 + -1 | 0;
   $3 = ($3 >>> 4 | 0) & 15 | 0;
   if ($3) {
    continue label$1
   }
   break label$1;
  };
  label$2 : {
   $3 = $0 + 128 | 0;
   if ($3 >>> 0 >= 129 >>> 0) {
    break label$2
   }
   $0 = core__fmt__Formatter__pad_integral__h253f31941eb77fc7($1 | 0, 1 | 0, 1061048 | 0, 2 | 0, ($2 + $0 | 0) + 128 | 0 | 0, 0 - $0 | 0 | 0) | 0;
   global$0 = $2 + 128 | 0;
   return $0 | 0;
  }
  core__slice__slice_index_order_fail__ha75fa70416d3bc2f($3 | 0, 128 | 0);
  abort();
 }
 
 function stretch__forest__Forest__mark_dirty__mark_dirty_impl__hafdb374afea4365e($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  label$1 : {
   label$2 : {
    $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    if ($3 >>> 0 <= $2 >>> 0) {
     break label$2
    }
    $3 = (HEAP32[$0 >> 2] | 0) + Math_imul($2, 288) | 0;
    HEAP8[($3 + 284 | 0) >> 0] = 1;
    HEAP32[($3 + 240 | 0) >> 2] = 2;
    $3 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    if ($3 >>> 0 <= $2 >>> 0) {
     break label$1
    }
    label$3 : {
     $2 = (HEAP32[$1 >> 2] | 0) + Math_imul($2, 12) | 0;
     $3 = HEAP32[($2 + 8 | 0) >> 2] | 0;
     if (!$3) {
      break label$3
     }
     $2 = HEAP32[$2 >> 2] | 0;
     $3 = $3 << 2 | 0;
     label$4 : while (1) {
      stretch__forest__Forest__mark_dirty__mark_dirty_impl__hafdb374afea4365e($0 | 0, $1 | 0, HEAP32[$2 >> 2] | 0 | 0);
      $2 = $2 + 4 | 0;
      $3 = $3 + -4 | 0;
      if ($3) {
       continue label$4
      }
      break label$4;
     };
    }
    return;
   }
   core__panicking__panic_bounds_check__h0537ade040df571e(1051112 | 0, $2 | 0, $3 | 0);
   abort();
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1051096 | 0, $2 | 0, $3 | 0);
  abort();
 }
 
 function stretch__node__Stretch__mark_dirty__ha8a17865b039a2cf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $12 = 0, $15 = 0, $26 = 0, $36 = 0;
  $3 = global$0 - 48 | 0;
  global$0 = $3;
  i64toi32_i32$2 = $2 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3 + 32 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $12;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $15 = i64toi32_i32$1;
  i64toi32_i32$1 = $3;
  HEAP32[($3 + 32 | 0) >> 2] = $15;
  HEAP32[($3 + 36 | 0) >> 2] = i64toi32_i32$0;
  stretch__node__Stretch__find_node__h5d72b27b054a57c0($3 + 8 | 0 | 0, $1 | 0, $3 + 32 | 0 | 0);
  label$1 : {
   label$2 : {
    if ((HEAP32[($3 + 8 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    i64toi32_i32$2 = $3;
    i64toi32_i32$0 = HEAP32[($3 + 12 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($3 + 16 | 0) >> 2] | 0;
    $26 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $26;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = HEAP32[($3 + 28 | 0) >> 2] | 0;
    i64toi32_i32$2 = $3 + 20 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $36 = i64toi32_i32$1;
    i64toi32_i32$1 = $0 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $36;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    break label$1;
   }
   stretch__forest__Forest__mark_dirty__mark_dirty_impl__hafdb374afea4365e($1 + 104 | 0 | 0, $1 + 128 | 0 | 0, HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
   HEAP32[$0 >> 2] = 2;
  }
  global$0 = $3 + 48 | 0;
 }
 
 function core__ops__function__impls___impl_20core__ops__function__FnMut_A__20for_20_mut_20F___call_mut__hdd94f552ffd65647($0, $1, $2) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = $2 | 0;
  var $6 = Math_fround(0), $3 = 0, $4 = 0, $5 = Math_fround(0);
  $2 = HEAP32[$2 >> 2] | 0;
  label$1 : {
   label$2 : {
    $3 = HEAPU8[(HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0) >> 0] | 0;
    if (($3 | 2 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    $0 = $2 + 96 | 0;
    $4 = $2 + 92 | 0;
    break label$1;
   }
   $0 = $2 + 88 | 0;
   $4 = $2 + 84 | 0;
  }
  $5 = Math_fround(Math_fround(HEAPF32[$4 >> 2]) + Math_fround(HEAPF32[$0 >> 2]));
  label$3 : {
   label$4 : {
    label$5 : {
     if (!(HEAPU8[($2 + 188 | 0) >> 0] | 0)) {
      break label$5
     }
     if ((($3 | 2 | 0) & 3 | 0 | 0) != (3 | 0)) {
      break label$4
     }
     $6 = Math_fround(HEAPF32[($2 + 164 | 0) >> 2]);
     break label$3;
    }
    $6 = Math_fround(HEAPF32[($2 + 132 | 0) >> 2]);
    break label$3;
   }
   $6 = Math_fround(HEAPF32[($2 + 160 | 0) >> 2]);
  }
  return Math_fround(Math_fround(Math_fround($5 + $6) + $1));
 }
 
 function core__fmt__num___impl_20core__fmt__LowerHex_20for_20i32___fmt__hc0126a1e228a0495($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0, $4 = 0;
  $2 = global$0 - 128 | 0;
  global$0 = $2;
  $3 = HEAP32[$0 >> 2] | 0;
  $0 = 0;
  label$1 : while (1) {
   $4 = $3 & 15 | 0;
   HEAP8[(($2 + $0 | 0) + 127 | 0) >> 0] = $4 >>> 0 < 10 >>> 0 ? $4 | 48 | 0 : $4 + 87 | 0;
   $0 = $0 + -1 | 0;
   $3 = $3 >>> 4 | 0;
   if ($3) {
    continue label$1
   }
   break label$1;
  };
  label$2 : {
   $3 = $0 + 128 | 0;
   if ($3 >>> 0 >= 129 >>> 0) {
    break label$2
   }
   $0 = core__fmt__Formatter__pad_integral__h253f31941eb77fc7($1 | 0, 1 | 0, 1061048 | 0, 2 | 0, ($2 + $0 | 0) + 128 | 0 | 0, 0 - $0 | 0 | 0) | 0;
   global$0 = $2 + 128 | 0;
   return $0 | 0;
  }
  core__slice__slice_index_order_fail__ha75fa70416d3bc2f($3 | 0, 128 | 0);
  abort();
 }
 
 function core__fmt__num___impl_20core__fmt__UpperHex_20for_20i32___fmt__hde8b8630775a2fae($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0, $4 = 0;
  $2 = global$0 - 128 | 0;
  global$0 = $2;
  $3 = HEAP32[$0 >> 2] | 0;
  $0 = 0;
  label$1 : while (1) {
   $4 = $3 & 15 | 0;
   HEAP8[(($2 + $0 | 0) + 127 | 0) >> 0] = $4 >>> 0 < 10 >>> 0 ? $4 | 48 | 0 : $4 + 55 | 0;
   $0 = $0 + -1 | 0;
   $3 = $3 >>> 4 | 0;
   if ($3) {
    continue label$1
   }
   break label$1;
  };
  label$2 : {
   $3 = $0 + 128 | 0;
   if ($3 >>> 0 >= 129 >>> 0) {
    break label$2
   }
   $0 = core__fmt__Formatter__pad_integral__h253f31941eb77fc7($1 | 0, 1 | 0, 1061048 | 0, 2 | 0, ($2 + $0 | 0) + 128 | 0 | 0, 0 - $0 | 0 | 0) | 0;
   global$0 = $2 + 128 | 0;
   return $0 | 0;
  }
  core__slice__slice_index_order_fail__ha75fa70416d3bc2f($3 | 0, 128 | 0);
  abort();
 }
 
 function core__fmt__builders__DebugTuple__finish__h0e3afe7bbfe02439($0) {
  $0 = $0 | 0;
  var $1 = 0, $3 = 0, $2 = 0;
  $1 = HEAPU8[($0 + 8 | 0) >> 0] | 0;
  label$1 : {
   $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if (!$2) {
    break label$1
   }
   $3 = $1 & 255 | 0;
   $1 = 1;
   label$2 : {
    if ($3) {
     break label$2
    }
    label$3 : {
     if (($2 | 0) != (1 | 0)) {
      break label$3
     }
     if (!(HEAPU8[($0 + 9 | 0) >> 0] | 0)) {
      break label$3
     }
     $3 = HEAP32[$0 >> 2] | 0;
     if ((HEAPU8[$3 >> 0] | 0) & 4 | 0) {
      break label$3
     }
     $1 = 1;
     if (FUNCTION_TABLE[HEAP32[((HEAP32[($3 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[($3 + 24 | 0) >> 2] | 0, 1061296, 1) | 0) {
      break label$2
     }
    }
    $1 = HEAP32[$0 >> 2] | 0;
    $1 = FUNCTION_TABLE[HEAP32[((HEAP32[($1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[($1 + 24 | 0) >> 2] | 0, 1061297, 1) | 0;
   }
   HEAP8[($0 + 8 | 0) >> 0] = $1;
  }
  return ($1 & 255 | 0 | 0) != (0 | 0) | 0;
 }
 
 function stretch__forest__Forest__remove_child_at_index__hff5aa0cd5d9356b3($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $1;
  label$1 : {
   label$2 : {
    $4 = HEAP32[($0 + 20 | 0) >> 2] | 0;
    if ($4 >>> 0 <= $1 >>> 0) {
     break label$2
    }
    $1 = alloc__vec__Vec_T___remove__h3b726461d7416baf((HEAP32[($0 + 12 | 0) >> 2] | 0) + Math_imul($1, 12) | 0 | 0, $2 | 0) | 0;
    $2 = HEAP32[($0 + 32 | 0) >> 2] | 0;
    if ($2 >>> 0 <= $1 >>> 0) {
     break label$1
    }
    $2 = $0 + 24 | 0;
    alloc__vec__Vec_T___retain__hedb1a12e02476210((HEAP32[$2 >> 2] | 0) + Math_imul($1, 12) | 0 | 0, $3 + 12 | 0 | 0);
    stretch__forest__Forest__mark_dirty__mark_dirty_impl__hafdb374afea4365e($0 | 0, $2 | 0, HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
    global$0 = $3 + 16 | 0;
    return $1 | 0;
   }
   core__panicking__panic_bounds_check__h0537ade040df571e(1051112 | 0, $1 | 0, $4 | 0);
   abort();
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1051112 | 0, $1 | 0, $2 | 0);
  abort();
 }
 
 function alloc__vec__Vec_T___reserve__hc0f95e3f359a8226($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  label$1 : {
   $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   if (($2 - $3 | 0) >>> 0 >= $1 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $1 = $3 + $1 | 0;
     if ($1 >>> 0 < $3 >>> 0) {
      break label$3
     }
     $3 = $2 << 1 | 0;
     $1 = $1 >>> 0 < $3 >>> 0 ? $3 : $1;
     if (($1 | 0) < (0 | 0)) {
      break label$3
     }
     label$4 : {
      label$5 : {
       if (!$2) {
        break label$5
       }
       $2 = __rust_realloc(HEAP32[$0 >> 2] | 0 | 0, $2 | 0, 1 | 0, $1 | 0) | 0;
       if (!$2) {
        break label$4
       }
       break label$2;
      }
      $2 = __rust_alloc($1 | 0, 1 | 0) | 0;
      if ($2) {
       break label$2
      }
     }
     alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83($1 | 0, 1 | 0);
     abort();
    }
    alloc__raw_vec__capacity_overflow__he79b434a8a95c170();
    abort();
   }
   HEAP32[$0 >> 2] = $2;
   HEAP32[($0 + 4 | 0) >> 2] = $1;
  }
 }
 
 function $alloc__vec__Vec_T__20as_20core__ops__drop__Drop___drop__he298bea3d7dceb19($0) {
  $0 = $0 | 0;
  var $1 = 0, $4 = 0, $2 = 0, $3 = 0, $5 = 0;
  $1 = global$0 - 16 | 0;
  global$0 = $1;
  $alloc__vec__Vec_T__20as_20core__ops__deref__DerefMut___deref_mut__hdb4acd3d24e51925($1 + 8 | 0 | 0, $0 | 0);
  label$1 : {
   $0 = HEAP32[($1 + 12 | 0) >> 2] | 0;
   if (!$0) {
    break label$1
   }
   $2 = Math_imul($0, 288);
   $0 = (HEAP32[($1 + 8 | 0) >> 2] | 0) + 216 | 0;
   label$2 : while (1) {
    label$3 : {
     $3 = $0 + -4 | 0;
     $4 = HEAP32[$3 >> 2] | 0;
     if (!$4) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0]($4);
     $4 = HEAP32[$0 >> 2] | 0;
     $5 = HEAP32[($4 + 4 | 0) >> 2] | 0;
     if (!$5) {
      break label$3
     }
     __rust_dealloc(HEAP32[$3 >> 2] | 0 | 0, $5 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
    }
    $0 = $0 + 288 | 0;
    $2 = $2 + -288 | 0;
    if ($2) {
     continue label$2
    }
    break label$2;
   };
  }
  global$0 = $1 + 16 | 0;
 }
 
 function std__sync__mutex__Mutex_T___new__hcb1edb2a7158b210($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $3 = 0, $4 = 0, $18 = 0, $25 = 0, $28 = 0, $34 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = global$0 - 32 | 0;
  global$0 = $2;
  label$1 : {
   $3 = __rust_alloc(1 | 0, 1 | 0) | 0;
   if (!$3) {
    break label$1
   }
   (wasm2js_i32$0 = $3, wasm2js_i32$1 = std__sys_common__mutex__Mutex__new__h149e82d354c09c43() | 0), HEAP8[wasm2js_i32$0 >> 0] = wasm2js_i32$1;
   $4 = std__sys_common__poison__Flag__new__h94e7596f33ded494() | 0;
   i64toi32_i32$2 = $1 + 8 | 0;
   i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $18 = i64toi32_i32$0;
   i64toi32_i32$0 = $2 + 24 | 0;
   $12 = $18;
   HEAP8[i64toi32_i32$0 >> 0] = $12;
   HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $12 >>> 8 | 0;
   HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $12 >>> 16 | 0;
   HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $12 >>> 24 | 0;
   HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$1;
   HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
   HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
   HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
   HEAP8[($0 + 4 | 0) >> 0] = $4;
   HEAP32[$0 >> 2] = $3;
   i64toi32_i32$2 = $1;
   i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $25 = i64toi32_i32$1;
   i64toi32_i32$1 = $2;
   $13 = $25;
   HEAP8[(i64toi32_i32$1 + 16 | 0) >> 0] = $13;
   HEAP8[(i64toi32_i32$1 + 17 | 0) >> 0] = $13 >>> 8 | 0;
   HEAP8[(i64toi32_i32$1 + 18 | 0) >> 0] = $13 >>> 16 | 0;
   HEAP8[(i64toi32_i32$1 + 19 | 0) >> 0] = $13 >>> 24 | 0;
   HEAP8[(i64toi32_i32$1 + 20 | 0) >> 0] = i64toi32_i32$0;
   HEAP8[(i64toi32_i32$1 + 21 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
   HEAP8[(i64toi32_i32$1 + 22 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
   HEAP8[(i64toi32_i32$1 + 23 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 13 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 14 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 15 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 16 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 17 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 18 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 19 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 20 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $28 = i64toi32_i32$0;
   i64toi32_i32$0 = $0;
   $14 = $28;
   HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = $14;
   HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = $14 >>> 8 | 0;
   HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = $14 >>> 16 | 0;
   HEAP8[(i64toi32_i32$0 + 8 | 0) >> 0] = $14 >>> 24 | 0;
   HEAP8[(i64toi32_i32$0 + 9 | 0) >> 0] = i64toi32_i32$1;
   HEAP8[(i64toi32_i32$0 + 10 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
   HEAP8[(i64toi32_i32$0 + 11 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
   HEAP8[(i64toi32_i32$0 + 12 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
   i64toi32_i32$2 = (i64toi32_i32$2 + 13 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $34 = i64toi32_i32$1;
   i64toi32_i32$1 = $0 + 13 | 0;
   $15 = $34;
   HEAP8[i64toi32_i32$1 >> 0] = $15;
   HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $15 >>> 8 | 0;
   HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $15 >>> 16 | 0;
   HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $15 >>> 24 | 0;
   HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
   HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
   HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
   HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
   $16 = $2 + 28 | 0;
   $17 = $0 + 20 | 0;
   $19 = HEAPU8[$16 >> 0] | 0 | ((HEAPU8[($16 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($16 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($16 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[$17 >> 0] = $19;
   HEAP8[($17 + 1 | 0) >> 0] = $19 >>> 8 | 0;
   HEAP8[($17 + 2 | 0) >> 0] = $19 >>> 16 | 0;
   HEAP8[($17 + 3 | 0) >> 0] = $19 >>> 24 | 0;
   global$0 = $2 + 32 | 0;
   return;
  }
  alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83(1 | 0, 1 | 0);
  abort();
 }
 
 function $core__num__bignum__Big32x40_20as_20core__cmp__Ord___cmp__h9d6c8e8935c913cf($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  label$1 : {
   $2 = HEAP32[$0 >> 2] | 0;
   $3 = HEAP32[$1 >> 2] | 0;
   $2 = $3 >>> 0 < $2 >>> 0 ? $2 : $3;
   if ($2 >>> 0 >= 41 >>> 0) {
    break label$1
   }
   $2 = $2 << 2 | 0;
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      if (!$2) {
       break label$3
      }
      if (!$2) {
       break label$2
      }
      $3 = $0 + $2 | 0;
      $4 = $1 + $2 | 0;
      $2 = $2 + -4 | 0;
      $3 = HEAP32[$3 >> 2] | 0;
      $4 = HEAP32[$4 >> 2] | 0;
      if (($3 | 0) == ($4 | 0)) {
       continue label$4
      }
      break label$4;
     };
     return ($3 >>> 0 < $4 >>> 0 ? -1 : 1) | 0;
    }
    return ($2 ? -1 : 0) | 0;
   }
   return 1 | 0;
  }
  core__slice__slice_index_len_fail__h4544fc57f3d8a7a0($2 | 0, 40 | 0);
  abort();
 }
 
 function stretch_layout__Layout__child__h3276324f50fb3c61($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3 = 0, $4 = 0, $5 = 0, $5$hi = 0, $33 = 0, $38 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  label$1 : {
   $4 = HEAP32[($1 + 28 | 0) >> 2] | 0;
   if ($4 >>> 0 <= $2 >>> 0) {
    break label$1
   }
   $2 = (HEAP32[($1 + 20 | 0) >> 2] | 0) + ($2 << 5 | 0) | 0;
   i64toi32_i32$0 = HEAP32[$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
   $5 = i64toi32_i32$0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[($2 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($2 + 12 | 0) >> 2] | 0;
   $1 = HEAP32[($2 + 16 | 0) >> 2] | 0;
   $alloc__vec__Vec_T__20as_20core__clone__Clone___clone__ha7ce6132966c4db5($3 | 0, $2 + 20 | 0 | 0);
   HEAP32[($0 + 16 | 0) >> 2] = $1;
   $33 = i64toi32_i32$1;
   i64toi32_i32$1 = $0;
   HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $33;
   HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $5$hi;
   HEAP32[i64toi32_i32$1 >> 2] = $5;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = HEAP32[$3 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($3 + 4 | 0) >> 2] | 0;
   $38 = i64toi32_i32$0;
   i64toi32_i32$0 = $0;
   HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = $38;
   HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = HEAP32[($3 + 8 | 0) >> 2] | 0;
   global$0 = $3 + 16 | 0;
   return;
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1048740 | 0, $2 | 0, $4 | 0);
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___shrink_to_fit__h905c154712432f9f($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  label$1 : {
   label$2 : {
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if ($2 >>> 0 < $1 >>> 0) {
     break label$2
    }
    label$3 : {
     label$4 : {
      label$5 : {
       if (!$1) {
        break label$5
       }
       if (($2 | 0) == ($1 | 0)) {
        break label$3
       }
       $3 = $1 << 2 | 0;
       $2 = __rust_realloc(HEAP32[$0 >> 2] | 0 | 0, $2 << 2 | 0 | 0, 4 | 0, $3 | 0) | 0;
       if (!$2) {
        break label$1
       }
       HEAP32[$0 >> 2] = $2;
       break label$4;
      }
      label$6 : {
       if (!$2) {
        break label$6
       }
       __rust_dealloc(HEAP32[$0 >> 2] | 0 | 0, $2 << 2 | 0 | 0, 4 | 0);
      }
      HEAP32[$0 >> 2] = 4;
      $1 = 0;
     }
     HEAP32[($0 + 4 | 0) >> 2] = $1;
    }
    return;
   }
   core__panicking__panic__h2d0bc53a963fb996(1052080 | 0);
   abort();
  }
  alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83($3 | 0, 4 | 0);
  abort();
 }
 
 function $stretch_layout__Layout_20as_20wasm_bindgen__convert__traits__FromWasmAbi___from_abi__h1f55d298367ce725($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $2 = 0, $19 = 0, $24 = 0, $29 = 0, $32 = 0;
  $2 = global$0 - 48 | 0;
  global$0 = $2;
  label$1 : {
   label$2 : {
    if (!$1) {
     break label$2
    }
    if (HEAP32[$1 >> 2] | 0) {
     break label$1
    }
    HEAP32[$1 >> 2] = 0;
    memcpy($2 + 8 | 0 | 0, $1 | 0, 36 | 0) | 0;
    i64toi32_i32$2 = $2 + 36 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $19 = i64toi32_i32$0;
    i64toi32_i32$0 = $0 + 24 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $19;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2 + 28 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $24 = i64toi32_i32$1;
    i64toi32_i32$1 = $0 + 16 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $24;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $2 + 20 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $29 = i64toi32_i32$0;
    i64toi32_i32$0 = $0 + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $29;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    $32 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[i64toi32_i32$1 >> 2] = $32;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    __rust_dealloc($1 | 0, 36 | 0, 4 | 0);
    global$0 = i64toi32_i32$2 + 48 | 0;
    return;
   }
   wasm_bindgen____rt__throw_null__h3f3e0f774e705662();
   abort();
  }
  wasm_bindgen____rt__borrow_fail__h1790ad2c17b5cd84();
  abort();
 }
 
 function $stretch__node__Stretch_20as_20core__ops__drop__Drop___drop__h77dfb89d33e180ee($0) {
  $0 = $0 | 0;
  var $1 = 0, $4 = 0, $2 = 0, $3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0;
  $1 = global$0 - 16 | 0;
  global$0 = $1;
  std__sync__mutex__Mutex_T___lock__h984bbcb1d75d91fd($1 | 0, $stretch__node__INSTANCE_ALLOCATOR_20as_20core__ops__deref__Deref___deref__h00b3a6ded40dd9a6($1 | 0) | 0 | 0);
  $2 = $1 + 8 | 0;
  $3 = HEAPU8[$2 >> 0] | 0;
  $4 = HEAP32[($1 + 4 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[$1 >> 2] | 0 | 0) == (1 | 0)) {
    break label$1
   }
   i64toi32_i32$2 = $0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
   HEAP32[$1 >> 2] = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
   HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$1;
   $alloc__vec__Vec_T__20as_20alloc__vec__SpecExtend__T_2ccore__slice__Iter_T_____spec_extend__h86215e81f1daaba8($4 + 12 | 0 | 0, $1 | 0, $2 | 0);
   label$2 : {
    if ($3 & 255 | 0) {
     break label$2
    }
    if (!(std__panicking__panicking__hf26bc0dde81b7530() | 0)) {
     break label$2
    }
    HEAP8[($4 + 4 | 0) >> 0] = 1;
   }
   HEAP8[(HEAP32[$4 >> 2] | 0) >> 0] = 0;
   global$0 = $1 + 16 | 0;
   return;
  }
  core__result__unwrap_failed__hffb58bc6d500fd56(1051188 | 0, 43 | 0, $4 | 0, ($3 & 255 | 0 | 0) != (0 | 0) | 0);
  abort();
 }
 
 function core__num__bignum__Big32x40__from_u64__hb47af5bbea157ebc($0, $1, $1$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  var $2 = 0, $3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, $4 = 0, i64toi32_i32$3 = 0, $11 = 0, i64toi32_i32$2 = 0;
  $2 = global$0 - 160 | 0;
  global$0 = $2;
  $3 = 0;
  $4 = memset($2 | 0, 0 | 0, 160 | 0) | 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    if (!($1 | i64toi32_i32$0 | 0)) {
     break label$2
    }
    $3 = 0;
    $2 = $4;
    label$3 : while (1) {
     if ($3 >>> 0 >= 40 >>> 0) {
      break label$1
     }
     i64toi32_i32$0 = $1$hi;
     HEAP32[$2 >> 2] = $1;
     $2 = $2 + 4 | 0;
     $3 = $3 + 1 | 0;
     i64toi32_i32$2 = $1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $11 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $11 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $1 = $11;
     $1$hi = i64toi32_i32$1;
     if (!!($1 | i64toi32_i32$1 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   HEAP32[$0 >> 2] = $3;
   memcpy($0 + 4 | 0 | 0, $4 | 0, 160 | 0) | 0;
   global$0 = $4 + 160 | 0;
   return;
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1065948 | 0, $3 | 0, 40 | 0);
  abort();
 }
 
 function core__num__dec2flt__num__get_bits__h41e84022231dc9df($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $4 = 0, $4$hi = 0, i64toi32_i32$3 = 0, $3 = 0, $13 = 0, $19$hi = 0, $30$hi = 0;
  label$1 : {
   if (($2 - $1 | 0) >>> 0 > 64 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   $4 = 0;
   $4$hi = i64toi32_i32$0;
   label$2 : {
    label$3 : {
     if ($2 >>> 0 <= $1 >>> 0) {
      break label$3
     }
     i64toi32_i32$0 = 0;
     $4 = 0;
     $4$hi = i64toi32_i32$0;
     label$4 : while (1) {
      $2 = $2 + -1 | 0;
      $3 = $2 >>> 5 | 0;
      if ($2 >>> 0 >= 1280 >>> 0) {
       break label$2
      }
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$2 = $4;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 1;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       $13 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $13 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      }
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      $30$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$0 = $13;
      i64toi32_i32$2 = $30$hi;
      i64toi32_i32$3 = ((HEAP32[(($0 + ($3 << 2 | 0) | 0) + 4 | 0) >> 2] | 0) >>> ($2 & 31 | 0) | 0) & 1 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      $4 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
      $4$hi = i64toi32_i32$2;
      if ($2 >>> 0 > $1 >>> 0) {
       continue label$4
      }
      break label$4;
     };
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$0 = $4;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
    return i64toi32_i32$0 | 0;
   }
   core__panicking__panic_bounds_check__h0537ade040df571e(1065964 | 0, $3 | 0, 40 | 0);
   abort();
  }
  core__panicking__panic__h2d0bc53a963fb996(1060084 | 0);
  abort();
 }
 
 function $alloc__vec__Vec_T__20as_20alloc__vec__SpecExtend_T_2cI____spec_extend__hf07ee803e22a6ba7($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $4 = 0, $3 = 0, i64toi32_i32$1 = 0;
  $2 = global$0 - 32 | 0;
  global$0 = $2;
  alloc__raw_vec__RawVec_T_2cA___reserve__h33b8ba1386cb2481($0 | 0, HEAP32[($0 + 8 | 0) >> 2] | 0 | 0, ((HEAP32[($1 + 4 | 0) >> 2] | 0) - (HEAP32[$1 >> 2] | 0) | 0) >>> 2 | 0 | 0);
  $3 = HEAP32[$0 >> 2] | 0;
  $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  HEAP32[($2 + 8 | 0) >> 2] = HEAP32[($1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[($2 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[(($2 + 16 | 0) + 8 | 0) >> 2] = $4;
  HEAP32[($2 + 20 | 0) >> 2] = $0 + 8 | 0;
  HEAP32[($2 + 16 | 0) >> 2] = $3 + ($4 << 4 | 0) | 0;
  $core__iter__adapters__Map_I_2cF__20as_20core__iter__traits__iterator__Iterator___fold__h39f27bb7080210e0($2 | 0, $2 + 16 | 0 | 0);
  global$0 = $2 + 32 | 0;
 }
 
 function core__num__diy_float__Fp__mul__ha783f4c77c52b6c1($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $3$hi = 0, $3 = 0, $5$hi = 0, $5 = 0, $6$hi = 0, $4 = 0, $4$hi = 0, $38 = 0, $6 = 0, $39 = 0, $40 = 0, $41 = 0, $43 = 0, $45 = 0, $15 = 0, $20 = 0, $20$hi = 0, $7 = 0, $7$hi = 0, $28 = 0, $28$hi = 0, $33 = 0, $33$hi = 0, $34 = 0, $34$hi = 0, $41$hi = 0, $42 = 0, $42$hi = 0, $44 = 0, $44$hi = 0, $48$hi = 0, $49$hi = 0, $51 = 0, $51$hi = 0, $54$hi = 0;
  HEAP16[($0 + 8 | 0) >> 1] = ((HEAPU16[($1 + 8 | 0) >> 1] | 0) + (HEAPU16[($2 + 8 | 0) >> 1] | 0) | 0) + 64 | 0;
  $15 = $0;
  i64toi32_i32$2 = $2;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $3 = i64toi32_i32$0;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
  $4 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $4$hi = i64toi32_i32$0;
  $20 = $4;
  $20$hi = i64toi32_i32$0;
  i64toi32_i32$1 = $1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  $5 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$2;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $38 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $38 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6 = $38;
  $6$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $20$hi;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$1 = __wasm_i64_mul($20 | 0, i64toi32_i32$0 | 0, $6 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $7 = i64toi32_i32$1;
  $7$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $39 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $39 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $28 = $39;
  $28$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$0 = $3;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $40 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $40 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $3 = $40;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $6$hi;
  i64toi32_i32$2 = $3$hi;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = __wasm_i64_mul($3 | 0, i64toi32_i32$2 | 0, $6 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $33 = i64toi32_i32$0;
  $33$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $28$hi;
  i64toi32_i32$1 = $28;
  i64toi32_i32$0 = $33$hi;
  i64toi32_i32$3 = $33;
  i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $34 = i64toi32_i32$4;
  $34$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$5 = $5$hi;
  i64toi32_i32$2 = $5;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
  $5 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$2 = __wasm_i64_mul($3 | 0, i64toi32_i32$1 | 0, $5 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $3 = i64toi32_i32$2;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$5 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $41 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   $41 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
  }
  $41$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $34$hi;
  i64toi32_i32$1 = $34;
  i64toi32_i32$5 = $41$hi;
  i64toi32_i32$3 = $41;
  i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $42 = i64toi32_i32$0;
  $42$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $7$hi;
  i64toi32_i32$2 = $7;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
  $44 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $44$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$2 = __wasm_i64_mul($4 | 0, i64toi32_i32$1 | 0, $5 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$4 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $43 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
   $43 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
  }
  $48$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $44$hi;
  i64toi32_i32$1 = $44;
  i64toi32_i32$4 = $48$hi;
  i64toi32_i32$3 = $43;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $49$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $51 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $51$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $49$hi;
  i64toi32_i32$0 = i64toi32_i32$5;
  i64toi32_i32$2 = $51$hi;
  i64toi32_i32$3 = $51;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = -2147483648;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  i64toi32_i32$5 = i64toi32_i32$2;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $45 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
   $45 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
  }
  $54$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $42$hi;
  i64toi32_i32$4 = $42;
  i64toi32_i32$5 = $54$hi;
  i64toi32_i32$3 = $45;
  i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  i64toi32_i32$4 = $15;
  HEAP32[i64toi32_i32$4 >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function hashbrown__raw__RawTable_T___reserve_rehash__h182d01c1eace4354($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  label$1 : {
   label$2 : {
    $4 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    $1 = $4 + $1 | 0;
    if ($1 >>> 0 >= $4 >>> 0) {
     break label$2
    }
    if ($3) {
     break label$1
    }
   }
   $5 = 0;
   label$3 : {
    label$4 : {
     if ($1 >>> 0 < $4 >>> 0) {
      break label$4
     }
     label$5 : {
      $4 = HEAP32[$0 >> 2] | 0;
      if ($4 >>> 0 < 8 >>> 0) {
       break label$5
      }
      $4 = Math_imul(($4 + 1 | 0) >>> 3 | 0, 7);
     }
     if ($1 >>> 0 >= ($4 >>> 1 | 0) >>> 0) {
      break label$3
     }
     hashbrown__raw__RawTable_T___rehash_in_place__hcf96faeff03f0b31($0 | 0, $2 | 0);
     $5 = 2;
    }
    return $5 | 0;
   }
   return (hashbrown__raw__RawTable_T___resize__h45e958d73c3a563c($0 | 0, $1 | 0, $2 | 0, $3 | 0) | 0) & 255 | 0 | 0;
  }
  core__panicking__panic__h2d0bc53a963fb996(1050896 | 0);
  abort();
 }
 
 function hashbrown__raw__RawTable_T___reserve_rehash__hdc1a2044bde0ae8c($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  label$1 : {
   label$2 : {
    $4 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    $1 = $4 + $1 | 0;
    if ($1 >>> 0 >= $4 >>> 0) {
     break label$2
    }
    if ($3) {
     break label$1
    }
   }
   $5 = 0;
   label$3 : {
    label$4 : {
     if ($1 >>> 0 < $4 >>> 0) {
      break label$4
     }
     label$5 : {
      $4 = HEAP32[$0 >> 2] | 0;
      if ($4 >>> 0 < 8 >>> 0) {
       break label$5
      }
      $4 = Math_imul(($4 + 1 | 0) >>> 3 | 0, 7);
     }
     if ($1 >>> 0 >= ($4 >>> 1 | 0) >>> 0) {
      break label$3
     }
     hashbrown__raw__RawTable_T___rehash_in_place__h5648115f49c4a6e8($0 | 0, $2 | 0);
     $5 = 2;
    }
    return $5 | 0;
   }
   return (hashbrown__raw__RawTable_T___resize__hc64b11a3c9bce26e($0 | 0, $1 | 0, $2 | 0, $3 | 0) | 0) & 255 | 0 | 0;
  }
  core__panicking__panic__h2d0bc53a963fb996(1050896 | 0);
  abort();
 }
 
 function core__num__bignum__Big32x40__mul_digits__h7d68f43b76f883f5($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0;
  $3 = global$0 - 160 | 0;
  global$0 = $3;
  $3 = memset($3 | 0, 0 | 0, 160 | 0) | 0;
  label$1 : {
   $4 = HEAP32[$0 >> 2] | 0;
   if ($4 >>> 0 >= 41 >>> 0) {
    break label$1
   }
   $5 = $0 + 4 | 0;
   label$2 : {
    label$3 : {
     if ($4 >>> 0 >= $2 >>> 0) {
      break label$3
     }
     $2 = core__num__bignum__Big32x40__mul_digits__mul_inner__h022b103c0ead7ba4($3 | 0, $5 | 0, $4 | 0, $1 | 0, $2 | 0) | 0;
     break label$2;
    }
    $2 = core__num__bignum__Big32x40__mul_digits__mul_inner__h022b103c0ead7ba4($3 | 0, $1 | 0, $2 | 0, $5 | 0, $4 | 0) | 0;
   }
   memcpy($5 | 0, $3 | 0, 160 | 0) | 0;
   HEAP32[$0 >> 2] = $2;
   global$0 = $3 + 160 | 0;
   return $0 | 0;
  }
  core__slice__slice_index_len_fail__h4544fc57f3d8a7a0($4 | 0, 40 | 0);
  abort();
 }
 
 function stretch__forest__Forest__with_capacity__h3b0e535e60d1d899($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, $2 = 0, i64toi32_i32$1 = 0, $3 = 0, $3$hi = 0, $4 = 0, $4$hi = 0, $5 = 0, $5$hi = 0;
  $2 = global$0 - 32 | 0;
  global$0 = $2;
  alloc__raw_vec__RawVec_T_2cA___allocate_in__h082871a6bf494539($2 + 24 | 0 | 0, $1 | 0, 0 | 0);
  i64toi32_i32$0 = HEAP32[($2 + 24 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2 + 28 | 0) >> 2] | 0;
  $3 = i64toi32_i32$0;
  $3$hi = i64toi32_i32$1;
  alloc__raw_vec__RawVec_T_2cA___allocate_in__he487889725cfc21d($2 + 16 | 0 | 0, $1 | 0, 0 | 0);
  i64toi32_i32$1 = HEAP32[($2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2 + 20 | 0) >> 2] | 0;
  $4 = i64toi32_i32$1;
  $4$hi = i64toi32_i32$0;
  alloc__raw_vec__RawVec_T_2cA___allocate_in__he487889725cfc21d($2 + 8 | 0 | 0, $1 | 0, 0 | 0);
  i64toi32_i32$0 = HEAP32[($2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2 + 12 | 0) >> 2] | 0;
  $5 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  HEAP32[($0 + 32 | 0) >> 2] = 0;
  HEAP32[($0 + 20 | 0) >> 2] = 0;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $0;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = $4;
  HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = 0;
  i64toi32_i32$1 = $3$hi;
  HEAP32[i64toi32_i32$0 >> 2] = $3;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = $5;
  HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $2 + 32 | 0;
 }
 
 function $core__ops__range__Range_Idx__20as_20core__fmt__Debug___fmt__h6b10d5f1af7ade3c($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 32 | 0;
  global$0 = $2;
  label$1 : {
   label$2 : {
    if (core__fmt__num___impl_20core__fmt__Debug_20for_20usize___fmt__h02e757fe1749b44e($0 | 0, $1 | 0) | 0) {
     break label$2
    }
    $3 = HEAP32[($1 + 28 | 0) >> 2] | 0;
    $4 = HEAP32[($1 + 24 | 0) >> 2] | 0;
    HEAP32[($2 + 28 | 0) >> 2] = 0;
    HEAP32[($2 + 24 | 0) >> 2] = 1053644;
    HEAP32[($2 + 12 | 0) >> 2] = 1;
    HEAP32[($2 + 16 | 0) >> 2] = 0;
    HEAP32[($2 + 8 | 0) >> 2] = 1060356;
    if (!(core__fmt__write__h85435378f7fd6609($4 | 0, $3 | 0, $2 + 8 | 0 | 0) | 0)) {
     break label$1
    }
   }
   global$0 = $2 + 32 | 0;
   return 1 | 0;
  }
  $1 = core__fmt__num___impl_20core__fmt__Debug_20for_20usize___fmt__h02e757fe1749b44e($0 + 4 | 0 | 0, $1 | 0) | 0;
  global$0 = $2 + 32 | 0;
  return $1 | 0;
 }
 
 function alloc__raw_vec__RawVec_T_2cA___allocate_in__h2c60f5d3edabcb0a($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $11 = 0, $12 = 0, $4 = 0, $4$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = 0;
     $4 = $1;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 27;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $11 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $11 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     if ($11) {
      break label$3
     }
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$0 = $4;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 5;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $12 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $12 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $3 = $12;
     if (($3 | 0) <= (-1 | 0)) {
      break label$2
     }
     label$4 : {
      label$5 : {
       label$6 : {
        if (!$3) {
         break label$6
        }
        if (!$2) {
         break label$5
        }
        $2 = __rust_alloc_zeroed($3 | 0, 4 | 0) | 0;
        if ($2) {
         break label$4
        }
        break label$1;
       }
       $2 = 4;
       break label$4;
      }
      $2 = __rust_alloc($3 | 0, 4 | 0) | 0;
      if (!$2) {
       break label$1
      }
     }
     HEAP32[($0 + 4 | 0) >> 2] = $1;
     HEAP32[$0 >> 2] = $2;
     return;
    }
    alloc__raw_vec__RawVec_T_2cA___allocate_in___7b_7bclosure_7d_7d__h9ed5f03df2fd77d8();
    abort();
   }
   alloc__raw_vec__RawVec_T_2cA___allocate_in___7b_7bclosure_7d_7d__haec0eac1fec16d9a();
   abort();
  }
  alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83($3 | 0, 4 | 0);
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___allocate_in__h082871a6bf494539($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $3 = 0, i64toi32_i32$3 = 0, $11 = 0, $4 = 0, $4$hi = 0, i64toi32_i32$2 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$1 = __wasm_i64_mul($1 | 0, i64toi32_i32$0 | 0, 288 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $4 = i64toi32_i32$1;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $11 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $11 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     if ($11) {
      break label$3
     }
     i64toi32_i32$1 = $4$hi;
     $3 = $4;
     if (($3 | 0) <= (-1 | 0)) {
      break label$2
     }
     label$4 : {
      label$5 : {
       label$6 : {
        if (!$3) {
         break label$6
        }
        if (!$2) {
         break label$5
        }
        $2 = __rust_alloc_zeroed($3 | 0, 4 | 0) | 0;
        if ($2) {
         break label$4
        }
        break label$1;
       }
       $2 = 4;
       break label$4;
      }
      $2 = __rust_alloc($3 | 0, 4 | 0) | 0;
      if (!$2) {
       break label$1
      }
     }
     HEAP32[($0 + 4 | 0) >> 2] = $1;
     HEAP32[$0 >> 2] = $2;
     return;
    }
    alloc__raw_vec__RawVec_T_2cA___allocate_in___7b_7bclosure_7d_7d__h937b926e7779eecf();
    abort();
   }
   alloc__raw_vec__RawVec_T_2cA___allocate_in___7b_7bclosure_7d_7d__hb88010749a97cfb4();
   abort();
  }
  alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83($3 | 0, 4 | 0);
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___allocate_in__h1e6d477234493b78($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $11 = 0, $12 = 0, $4 = 0, $4$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = 0;
     $4 = $1;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 30;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $11 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $11 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     if ($11) {
      break label$3
     }
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$0 = $4;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 2;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $12 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $12 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $3 = $12;
     if (($3 | 0) <= (-1 | 0)) {
      break label$2
     }
     label$4 : {
      label$5 : {
       label$6 : {
        if (!$3) {
         break label$6
        }
        if (!$2) {
         break label$5
        }
        $2 = __rust_alloc_zeroed($3 | 0, 4 | 0) | 0;
        if ($2) {
         break label$4
        }
        break label$1;
       }
       $2 = 4;
       break label$4;
      }
      $2 = __rust_alloc($3 | 0, 4 | 0) | 0;
      if (!$2) {
       break label$1
      }
     }
     HEAP32[($0 + 4 | 0) >> 2] = $1;
     HEAP32[$0 >> 2] = $2;
     return;
    }
    alloc__raw_vec__RawVec_T_2cA___allocate_in___7b_7bclosure_7d_7d__h1c30bdd8bfcd27b5();
    abort();
   }
   alloc__raw_vec__RawVec_T_2cA___allocate_in___7b_7bclosure_7d_7d__h403cd80cb7561340();
   abort();
  }
  alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83($3 | 0, 4 | 0);
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___allocate_in__h585e378cd0d7d35b($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $11 = 0, $12 = 0, $4 = 0, $4$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = 0;
     $4 = $1;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 29;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $11 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $11 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     if ($11) {
      break label$3
     }
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$0 = $4;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 3;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $12 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $12 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $3 = $12;
     if (($3 | 0) <= (-1 | 0)) {
      break label$2
     }
     label$4 : {
      label$5 : {
       label$6 : {
        if (!$3) {
         break label$6
        }
        if (!$2) {
         break label$5
        }
        $2 = __rust_alloc_zeroed($3 | 0, 4 | 0) | 0;
        if ($2) {
         break label$4
        }
        break label$1;
       }
       $2 = 4;
       break label$4;
      }
      $2 = __rust_alloc($3 | 0, 4 | 0) | 0;
      if (!$2) {
       break label$1
      }
     }
     HEAP32[($0 + 4 | 0) >> 2] = $1;
     HEAP32[$0 >> 2] = $2;
     return;
    }
    alloc__raw_vec__RawVec_T_2cA___allocate_in___7b_7bclosure_7d_7d__hafb32822cebac6a9();
    abort();
   }
   alloc__raw_vec__RawVec_T_2cA___allocate_in___7b_7bclosure_7d_7d__h06ed3ce8315baa7f();
   abort();
  }
  alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83($3 | 0, 4 | 0);
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___allocate_in__he487889725cfc21d($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $3 = 0, i64toi32_i32$3 = 0, $11 = 0, $4 = 0, $4$hi = 0, i64toi32_i32$2 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$1 = __wasm_i64_mul($1 | 0, i64toi32_i32$0 | 0, 12 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $4 = i64toi32_i32$1;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $11 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $11 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     if ($11) {
      break label$3
     }
     i64toi32_i32$1 = $4$hi;
     $3 = $4;
     if (($3 | 0) <= (-1 | 0)) {
      break label$2
     }
     label$4 : {
      label$5 : {
       label$6 : {
        if (!$3) {
         break label$6
        }
        if (!$2) {
         break label$5
        }
        $2 = __rust_alloc_zeroed($3 | 0, 4 | 0) | 0;
        if ($2) {
         break label$4
        }
        break label$1;
       }
       $2 = 4;
       break label$4;
      }
      $2 = __rust_alloc($3 | 0, 4 | 0) | 0;
      if (!$2) {
       break label$1
      }
     }
     HEAP32[($0 + 4 | 0) >> 2] = $1;
     HEAP32[$0 >> 2] = $2;
     return;
    }
    alloc__raw_vec__RawVec_T_2cA___allocate_in___7b_7bclosure_7d_7d__h716670d27c638f08();
    abort();
   }
   alloc__raw_vec__RawVec_T_2cA___allocate_in___7b_7bclosure_7d_7d__hf64a3ba7b139c719();
   abort();
  }
  alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83($3 | 0, 4 | 0);
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___allocate_in__hf6b775b2673f3460($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $3 = 0, i64toi32_i32$3 = 0, $11 = 0, $4 = 0, $4$hi = 0, i64toi32_i32$2 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$1 = __wasm_i64_mul($1 | 0, i64toi32_i32$0 | 0, 192 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $4 = i64toi32_i32$1;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $11 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $11 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     if ($11) {
      break label$3
     }
     i64toi32_i32$1 = $4$hi;
     $3 = $4;
     if (($3 | 0) <= (-1 | 0)) {
      break label$2
     }
     label$4 : {
      label$5 : {
       label$6 : {
        if (!$3) {
         break label$6
        }
        if (!$2) {
         break label$5
        }
        $2 = __rust_alloc_zeroed($3 | 0, 4 | 0) | 0;
        if ($2) {
         break label$4
        }
        break label$1;
       }
       $2 = 4;
       break label$4;
      }
      $2 = __rust_alloc($3 | 0, 4 | 0) | 0;
      if (!$2) {
       break label$1
      }
     }
     HEAP32[($0 + 4 | 0) >> 2] = $1;
     HEAP32[$0 >> 2] = $2;
     return;
    }
    alloc__raw_vec__RawVec_T_2cA___allocate_in___7b_7bclosure_7d_7d__h464d50e6f9006e39();
    abort();
   }
   alloc__raw_vec__RawVec_T_2cA___allocate_in___7b_7bclosure_7d_7d__h6a95bd93e3c52f15();
   abort();
  }
  alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83($3 | 0, 4 | 0);
  abort();
 }
 
 function core__result__unwrap_failed__hffb58bc6d500fd56($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = global$0 - 64 | 0;
  global$0 = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $1;
  HEAP32[($4 + 8 | 0) >> 2] = $0;
  HEAP8[($4 + 20 | 0) >> 0] = $3;
  HEAP32[($4 + 16 | 0) >> 2] = $2;
  HEAP32[($4 + 60 | 0) >> 2] = 15;
  HEAP32[($4 + 44 | 0) >> 2] = 2;
  HEAP32[($4 + 52 | 0) >> 2] = 7;
  HEAP32[($4 + 28 | 0) >> 2] = 2;
  HEAP32[($4 + 32 | 0) >> 2] = 0;
  HEAP32[($4 + 24 | 0) >> 2] = 1050132;
  HEAP32[($4 + 56 | 0) >> 2] = $4 + 16 | 0;
  HEAP32[($4 + 48 | 0) >> 2] = $4 + 8 | 0;
  HEAP32[($4 + 40 | 0) >> 2] = $4 + 48 | 0;
  core__panicking__panic_fmt__h2daf88b2616ca2b2($4 + 24 | 0 | 0, 1050172 | 0);
  abort();
 }
 
 function alloc__vec__Vec_T___retain__h8d0934f5bb5ee14e($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = global$0 - 48 | 0;
  global$0 = $2;
  HEAP32[($2 + 20 | 0) >> 2] = $1;
  $1 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  HEAP32[($0 + 8 | 0) >> 2] = 0;
  HEAP32[($2 + 28 | 0) >> 2] = 0;
  HEAP32[($2 + 32 | 0) >> 2] = 0;
  HEAP32[($2 + 24 | 0) >> 2] = $0;
  HEAP32[($2 + 36 | 0) >> 2] = $1;
  HEAP32[($2 + 40 | 0) >> 2] = $2 + 20 | 0;
  label$1 : while (1) {
   $alloc__vec__DrainFilter_T_2cF__20as_20core__iter__traits__iterator__Iterator___next__hd9d9de247aab59e2($2 + 8 | 0 | 0, $2 + 24 | 0 | 0);
   if ((HEAP32[($2 + 8 | 0) >> 2] | 0 | 0) == (1 | 0)) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[((HEAP32[($2 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] = (HEAP32[($2 + 36 | 0) >> 2] | 0) - (HEAP32[($2 + 32 | 0) >> 2] | 0) | 0;
  global$0 = $2 + 48 | 0;
 }
 
 function alloc__vec__Vec_T___retain__hedb1a12e02476210($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = global$0 - 48 | 0;
  global$0 = $2;
  HEAP32[($2 + 20 | 0) >> 2] = $1;
  $1 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  HEAP32[($0 + 8 | 0) >> 2] = 0;
  HEAP32[($2 + 28 | 0) >> 2] = 0;
  HEAP32[($2 + 32 | 0) >> 2] = 0;
  HEAP32[($2 + 24 | 0) >> 2] = $0;
  HEAP32[($2 + 36 | 0) >> 2] = $1;
  HEAP32[($2 + 40 | 0) >> 2] = $2 + 20 | 0;
  label$1 : while (1) {
   $alloc__vec__DrainFilter_T_2cF__20as_20core__iter__traits__iterator__Iterator___next__h9e77575c80659de1($2 + 8 | 0 | 0, $2 + 24 | 0 | 0);
   if ((HEAP32[($2 + 8 | 0) >> 2] | 0 | 0) == (1 | 0)) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[((HEAP32[($2 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] = (HEAP32[($2 + 36 | 0) >> 2] | 0) - (HEAP32[($2 + 32 | 0) >> 2] | 0) | 0;
  global$0 = $2 + 48 | 0;
 }
 
 function core__result__unwrap_failed__hf393a2f4cae996d3($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = global$0 - 64 | 0;
  global$0 = $2;
  HEAP32[($2 + 12 | 0) >> 2] = 43;
  HEAP32[($2 + 8 | 0) >> 2] = 1052572;
  HEAP8[($2 + 20 | 0) >> 0] = $1;
  HEAP32[($2 + 16 | 0) >> 2] = $0;
  HEAP32[($2 + 60 | 0) >> 2] = 54;
  HEAP32[($2 + 44 | 0) >> 2] = 2;
  HEAP32[($2 + 52 | 0) >> 2] = 52;
  HEAP32[($2 + 28 | 0) >> 2] = 2;
  HEAP32[($2 + 32 | 0) >> 2] = 0;
  HEAP32[($2 + 24 | 0) >> 2] = 1052516;
  HEAP32[($2 + 56 | 0) >> 2] = $2 + 16 | 0;
  HEAP32[($2 + 48 | 0) >> 2] = $2 + 8 | 0;
  HEAP32[($2 + 40 | 0) >> 2] = $2 + 48 | 0;
  core__panicking__panic_fmt__h2daf88b2616ca2b2($2 + 24 | 0 | 0, 1052556 | 0);
  abort();
 }
 
 function core__fmt__builders__DebugStruct__finish__hc40a0d34053a01e6($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = HEAPU8[($0 + 4 | 0) >> 0] | 0;
  label$1 : {
   if (!(HEAPU8[($0 + 5 | 0) >> 0] | 0)) {
    break label$1
   }
   $2 = $1 & 255 | 0;
   $1 = 1;
   label$2 : {
    if ($2) {
     break label$2
    }
    $1 = HEAP32[$0 >> 2] | 0;
    $2 = HEAP32[((HEAP32[($1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
    $3 = HEAP32[($1 + 24 | 0) >> 2] | 0;
    label$3 : {
     if ((HEAPU8[$1 >> 0] | 0) & 4 | 0) {
      break label$3
     }
     $1 = FUNCTION_TABLE[$2]($3, 1061291, 2) | 0;
     break label$2;
    }
    $1 = FUNCTION_TABLE[$2]($3, 1061290, 1) | 0;
   }
   HEAP8[($0 + 4 | 0) >> 0] = $1;
  }
  return ($1 & 255 | 0 | 0) != (0 | 0) | 0;
 }
 
 function stretch_layout__has_key__h3ec688104a7b111a($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  (wasm2js_i32$0 = $3, wasm2js_i32$1 = __wbindgen_string_new($1 | 0, $2 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  js_sys__Reflect__has__h03a390d2704a9908($3 | 0, $0 | 0, $3 + 12 | 0 | 0);
  $0 = (HEAPU8[($3 + 1 | 0) >> 0] | 0 | 0) != (0 | 0);
  $1 = HEAPU8[$3 >> 0] | 0;
  $2 = !$1;
  label$1 : {
   if (!$1) {
    break label$1
   }
   $1 = HEAP32[($3 + 4 | 0) >> 2] | 0;
   if ($1 >>> 0 < 36 >>> 0) {
    break label$1
   }
   __wbindgen_object_drop_ref($1 | 0);
  }
  $0 = $2 & $0 | 0;
  label$2 : {
   $1 = HEAP32[($3 + 12 | 0) >> 2] | 0;
   if ($1 >>> 0 < 36 >>> 0) {
    break label$2
   }
   __wbindgen_object_drop_ref($1 | 0);
  }
  global$0 = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function js_sys__Reflect__has__h03a390d2704a9908($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $1 = __wbg_has_4c6784338d6c97e4(HEAP32[$1 >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0) | 0;
  wasm_bindgen____rt__take_last_exception__h5960da7d828407e4($3 + 8 | 0 | 0);
  label$1 : {
   label$2 : {
    $2 = HEAP32[($3 + 8 | 0) >> 2] | 0;
    if (!$2) {
     break label$2
    }
    $1 = HEAP32[($3 + 12 | 0) >> 2] | 0;
    HEAP8[$0 >> 0] = 1;
    HEAP32[($0 + 4 | 0) >> 2] = $1;
    if (($2 | 0) == (1 | 0)) {
     break label$1
    }
    if ($1 >>> 0 <= 35 >>> 0) {
     break label$1
    }
    __wbindgen_object_drop_ref($1 | 0);
    break label$1;
   }
   HEAP8[$0 >> 0] = 0;
   HEAP8[($0 + 1 | 0) >> 0] = ($1 | 0) != (0 | 0);
  }
  global$0 = $3 + 16 | 0;
 }
 
 function memmove($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  label$1 : {
   label$2 : {
    if ($1 >>> 0 >= $0 >>> 0) {
     break label$2
    }
    if (!$2) {
     break label$1
    }
    $1 = $1 + -1 | 0;
    $3 = $0 + -1 | 0;
    label$3 : while (1) {
     HEAP8[($3 + $2 | 0) >> 0] = HEAPU8[($1 + $2 | 0) >> 0] | 0;
     $2 = $2 + -1 | 0;
     if ($2) {
      continue label$3
     }
     break label$1;
    };
   }
   if (!$2) {
    break label$1
   }
   $3 = $0;
   label$4 : while (1) {
    HEAP8[$3 >> 0] = HEAPU8[$1 >> 0] | 0;
    $1 = $1 + 1 | 0;
    $3 = $3 + 1 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue label$4
    }
    break label$4;
   };
  }
  return $0 | 0;
 }
 
 function __wbg_layout_free($0) {
  $0 = $0 | 0;
  var $1 = 0, $3 = 0, $2 = 0;
  $1 = global$0 - 32 | 0;
  global$0 = $1;
  $stretch_layout__Layout_20as_20wasm_bindgen__convert__traits__FromWasmAbi___from_abi__h1f55d298367ce725($1 | 0, $0 | 0);
  $2 = HEAP32[($1 + 20 | 0) >> 2] | 0;
  label$1 : {
   $0 = HEAP32[($1 + 28 | 0) >> 2] | 0;
   if (!$0) {
    break label$1
   }
   $3 = $0 << 5 | 0;
   $0 = $2;
   label$2 : while (1) {
    core__ptr__real_drop_in_place__h1f9c131b05839678($0 | 0);
    $0 = $0 + 32 | 0;
    $3 = $3 + -32 | 0;
    if ($3) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   $0 = HEAP32[($1 + 24 | 0) >> 2] | 0;
   if (!$0) {
    break label$3
   }
   __rust_dealloc($2 | 0, $0 << 5 | 0 | 0, 4 | 0);
  }
  global$0 = $1 + 32 | 0;
 }
 
 function $stretch__Error_20as_20core__fmt__Debug___fmt__hd5e8c52e4078bfee($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  global$0 = $2;
  $3 = $0 + 4 | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[$0 >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    core__fmt__Formatter__debug_tuple__h9b1f009ef608acf0($2 | 0, $1 | 0, 1051736 | 0, 7 | 0);
    HEAP32[($2 + 12 | 0) >> 2] = $3;
    core__fmt__builders__DebugTuple__field__hb9640642e98eeefe($2 | 0, $2 + 12 | 0 | 0, 1051744 | 0) | 0;
    break label$1;
   }
   core__fmt__Formatter__debug_tuple__h9b1f009ef608acf0($2 | 0, $1 | 0, 1051760 | 0, 11 | 0);
   HEAP32[($2 + 12 | 0) >> 2] = $3;
   core__fmt__builders__DebugTuple__field__hb9640642e98eeefe($2 | 0, $2 + 12 | 0 | 0, 1051772 | 0) | 0;
  }
  $0 = core__fmt__builders__DebugTuple__finish__h0e3afe7bbfe02439($2 | 0) | 0;
  global$0 = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function wasm_bindgen__convert__closures__invoke3_mut__hf8c88d37d8767e93($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $29 = 0, $36 = 0;
  $6 = global$0 - 48 | 0;
  global$0 = $6;
  label$1 : {
   if (!$1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0]($6 + 16 | 0, $1, $3, $4, $5);
   HEAP32[(($6 + 32 | 0) + 8 | 0) >> 2] = HEAP32[(($6 + 16 | 0) + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($6 + 16 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($6 + 20 | 0) >> 2] | 0;
   $29 = i64toi32_i32$0;
   i64toi32_i32$0 = $6;
   HEAP32[($6 + 32 | 0) >> 2] = $29;
   HEAP32[($6 + 36 | 0) >> 2] = i64toi32_i32$1;
   $T_20as_20wasm_bindgen__convert__traits__ReturnWasmAbi___return_abi__hc1898054cbdde0da($6 + 8 | 0 | 0, $6 + 32 | 0 | 0);
   i64toi32_i32$1 = HEAP32[($6 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($6 + 12 | 0) >> 2] | 0;
   $36 = i64toi32_i32$1;
   i64toi32_i32$1 = $0;
   HEAP32[i64toi32_i32$1 >> 2] = $36;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   global$0 = $6 + 48 | 0;
   return;
  }
  wasm_bindgen__throw_str__h68bf8c0365a67f0d(1051972 | 0, 48 | 0);
  abort();
 }
 
 function js_sys__Function__call2__h532ca4f329161b65($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = global$0 - 16 | 0;
  global$0 = $5;
  $1 = __wbg_call_d86117a976521458(HEAP32[$1 >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0, HEAP32[$3 >> 2] | 0 | 0, HEAP32[$4 >> 2] | 0 | 0) | 0;
  wasm_bindgen____rt__take_last_exception__h5960da7d828407e4($5 + 8 | 0 | 0);
  label$1 : {
   label$2 : {
    $3 = HEAP32[($5 + 8 | 0) >> 2] | 0;
    if (!$3) {
     break label$2
    }
    $1 = HEAP32[($5 + 12 | 0) >> 2] | 0;
    $2 = 1;
    if (($3 | 0) == (1 | 0)) {
     break label$1
    }
    if ($1 >>> 0 <= 35 >>> 0) {
     break label$1
    }
    __wbindgen_object_drop_ref($1 | 0);
    break label$1;
   }
   $2 = 0;
  }
  HEAP32[($0 + 4 | 0) >> 2] = $1;
  HEAP32[$0 >> 2] = $2;
  global$0 = $5 + 16 | 0;
 }
 
 function core__num__dec2flt__algorithm__round_by_remainder__h3d86a91325e59e59($0, $1, $2, $2$hi, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = Math_fround($3);
  var $4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  $4 = global$0 - 176 | 0;
  global$0 = $4;
  memcpy($4 + 8 | 0 | 0, $0 | 0, 164 | 0) | 0;
  core__num__bignum__Big32x40__sub__ha94c81ecf8eacd8a($4 + 8 | 0 | 0, $1 | 0) | 0;
  label$1 : {
   if ((($core__num__bignum__Big32x40_20as_20core__cmp__Ord___cmp__h9d6c8e8935c913cf($1 | 0, $4 + 8 | 0 | 0) | 0) & 255 | 0 | 0) == (255 | 0)) {
    break label$1
   }
   label$2 : {
    if ((($core__num__bignum__Big32x40_20as_20core__cmp__Ord___cmp__h9d6c8e8935c913cf($1 | 0, $4 + 8 | 0 | 0) | 0) & 255 | 0 | 0) == (1 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    if (!($2 & 1 | 0 | i64toi32_i32$1 | 0)) {
     break label$1
    }
   }
   $3 = Math_fround(core__num__dec2flt__rawfp__next_float__h96c2fc47f7b351c4(Math_fround($3)));
  }
  global$0 = $4 + 176 | 0;
  return Math_fround($3);
 }
 
 function core__result__unwrap_failed__h2450ec3de4884319($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $21 = 0;
  $2 = global$0 - 64 | 0;
  global$0 = $2;
  HEAP32[($2 + 12 | 0) >> 2] = $1;
  HEAP32[($2 + 8 | 0) >> 2] = $0;
  core__fmt__ArgumentV1__new__h23271b0788a0f47a($2 | 0, $2 + 8 | 0 | 0, 7 | 0);
  HEAP32[($2 + 52 | 0) >> 2] = 8;
  HEAP32[($2 + 36 | 0) >> 2] = 2;
  i64toi32_i32$1 = $2;
  i64toi32_i32$0 = 0;
  HEAP32[($2 + 20 | 0) >> 2] = 2;
  HEAP32[($2 + 24 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($2 + 16 | 0) >> 2] = 1049876;
  i64toi32_i32$0 = HEAP32[$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
  $21 = i64toi32_i32$0;
  i64toi32_i32$0 = $2;
  HEAP32[($2 + 40 | 0) >> 2] = $21;
  HEAP32[($2 + 44 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($2 + 48 | 0) >> 2] = $2 + 56 | 0;
  HEAP32[($2 + 32 | 0) >> 2] = $2 + 40 | 0;
  core__panicking__panic_fmt__h2daf88b2616ca2b2($2 + 16 | 0 | 0, 1049916 | 0);
  abort();
 }
 
 function core__result__unwrap_failed__h617b15fdce22e446($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $21 = 0;
  $2 = global$0 - 64 | 0;
  global$0 = $2;
  HEAP32[($2 + 12 | 0) >> 2] = $1;
  HEAP32[($2 + 8 | 0) >> 2] = $0;
  core__fmt__ArgumentV1__new__h23271b0788a0f47a($2 | 0, $2 + 8 | 0 | 0, 7 | 0);
  HEAP32[($2 + 52 | 0) >> 2] = 9;
  HEAP32[($2 + 36 | 0) >> 2] = 2;
  i64toi32_i32$1 = $2;
  i64toi32_i32$0 = 0;
  HEAP32[($2 + 20 | 0) >> 2] = 2;
  HEAP32[($2 + 24 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($2 + 16 | 0) >> 2] = 1049876;
  i64toi32_i32$0 = HEAP32[$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
  $21 = i64toi32_i32$0;
  i64toi32_i32$0 = $2;
  HEAP32[($2 + 40 | 0) >> 2] = $21;
  HEAP32[($2 + 44 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($2 + 48 | 0) >> 2] = $2 + 56 | 0;
  HEAP32[($2 + 32 | 0) >> 2] = $2 + 40 | 0;
  core__panicking__panic_fmt__h2daf88b2616ca2b2($2 + 16 | 0 | 0, 1049916 | 0);
  abort();
 }
 
 function core__result__unwrap_failed__h8a62896efab79dcd($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $25 = 0;
  $3 = global$0 - 64 | 0;
  global$0 = $3;
  HEAP32[($3 + 20 | 0) >> 2] = $1;
  HEAP32[($3 + 16 | 0) >> 2] = $0;
  core__fmt__ArgumentV1__new__h23271b0788a0f47a($3 + 8 | 0 | 0, $3 + 16 | 0 | 0, 7 | 0);
  HEAP32[($3 + 60 | 0) >> 2] = 10;
  HEAP32[($3 + 44 | 0) >> 2] = 2;
  HEAP32[($3 + 56 | 0) >> 2] = $2;
  i64toi32_i32$1 = $3;
  i64toi32_i32$0 = 0;
  HEAP32[($3 + 28 | 0) >> 2] = 2;
  HEAP32[($3 + 32 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($3 + 24 | 0) >> 2] = 1049876;
  i64toi32_i32$0 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  $25 = i64toi32_i32$0;
  i64toi32_i32$0 = $3;
  HEAP32[($3 + 48 | 0) >> 2] = $25;
  HEAP32[($3 + 52 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($3 + 40 | 0) >> 2] = $3 + 48 | 0;
  core__panicking__panic_fmt__h2daf88b2616ca2b2($3 + 24 | 0 | 0, 1049916 | 0);
  abort();
 }
 
 function alloc__sync__Arc_T___drop_slow__h51a4fa13661dd7d4($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $25 = 0;
  label$1 : {
   $1 = HEAP32[$0 >> 2] | 0;
   $2 = HEAP32[($1 + 16 | 0) >> 2] | 0;
   if (!$2) {
    break label$1
   }
   HEAP8[$2 >> 0] = 0;
   $2 = HEAP32[($1 + 20 | 0) >> 2] | 0;
   if (!$2) {
    break label$1
   }
   __rust_dealloc(HEAP32[($1 + 16 | 0) >> 2] | 0 | 0, $2 | 0, 1 | 0);
  }
  __rust_dealloc(HEAP32[($1 + 28 | 0) >> 2] | 0 | 0, 1 | 0, 1 | 0);
  $1 = HEAP32[$0 >> 2] | 0;
  $25 = $1;
  $1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
  HEAP32[($25 + 4 | 0) >> 2] = $1 + -1 | 0;
  label$2 : {
   if (($1 | 0) != (1 | 0)) {
    break label$2
   }
   __rust_dealloc(HEAP32[$0 >> 2] | 0 | 0, 48 | 0, 8 | 0);
  }
 }
 
 function $core__iter__adapters__Map_I_2cF__20as_20core__iter__traits__iterator__Iterator___fold__h6cf64a9f38892400($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $2 = 0, $6 = 0, $3 = 0, $4 = 0, $5 = 0;
  label$1 : {
   label$2 : {
    $2 = HEAP32[$0 >> 2] | 0;
    $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if (($2 | 0) == ($3 | 0)) {
     break label$2
    }
    $4 = HEAP32[(HEAP32[($0 + 8 | 0) >> 2] | 0) >> 2] | 0;
    $5 = HEAP32[($4 + 8 | 0) >> 2] | 0;
    label$3 : while (1) {
     $0 = HEAP32[$2 >> 2] | 0;
     $6 = HEAP32[$0 >> 2] | 0;
     if ($5 >>> 0 <= $6 >>> 0) {
      break label$1
     }
     $1 = Math_fround($1 + Math_fround(Math_fround(HEAPF32[($0 + 136 | 0) >> 2]) * Math_fround(HEAPF32[(((HEAP32[$4 >> 2] | 0) + Math_imul($6, 288) | 0) + 132 | 0) >> 2])));
     $2 = $2 + 4 | 0;
     if (($3 | 0) != ($2 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   return Math_fround($1);
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1051560 | 0, $6 | 0, $5 | 0);
  abort();
 }
 
 function core__result__unwrap_failed__he4d11f7ba3a5767f($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = global$0 - 64 | 0;
  global$0 = $2;
  HEAP32[($2 + 12 | 0) >> 2] = $1;
  HEAP32[($2 + 8 | 0) >> 2] = $0;
  HEAP32[($2 + 52 | 0) >> 2] = 14;
  HEAP32[($2 + 36 | 0) >> 2] = 2;
  HEAP32[($2 + 44 | 0) >> 2] = 7;
  HEAP32[($2 + 20 | 0) >> 2] = 2;
  HEAP32[($2 + 24 | 0) >> 2] = 0;
  HEAP32[($2 + 16 | 0) >> 2] = 1050132;
  HEAP32[($2 + 48 | 0) >> 2] = $2 + 56 | 0;
  HEAP32[($2 + 40 | 0) >> 2] = $2 + 8 | 0;
  HEAP32[($2 + 32 | 0) >> 2] = $2 + 40 | 0;
  core__panicking__panic_fmt__h2daf88b2616ca2b2($2 + 16 | 0 | 0, 1050172 | 0);
  abort();
 }
 
 function core__result__unwrap_failed__hdc9bb8ca94a20a33() {
  var $0 = 0;
  $0 = global$0 - 64 | 0;
  global$0 = $0;
  HEAP32[($0 + 12 | 0) >> 2] = 16;
  HEAP32[($0 + 8 | 0) >> 2] = 1052256;
  HEAP32[($0 + 52 | 0) >> 2] = 8;
  HEAP32[($0 + 36 | 0) >> 2] = 2;
  HEAP32[($0 + 44 | 0) >> 2] = 52;
  HEAP32[($0 + 20 | 0) >> 2] = 2;
  HEAP32[($0 + 24 | 0) >> 2] = 0;
  HEAP32[($0 + 16 | 0) >> 2] = 1052516;
  HEAP32[($0 + 48 | 0) >> 2] = $0 + 56 | 0;
  HEAP32[($0 + 40 | 0) >> 2] = $0 + 8 | 0;
  HEAP32[($0 + 32 | 0) >> 2] = $0 + 40 | 0;
  core__panicking__panic_fmt__h2daf88b2616ca2b2($0 + 16 | 0 | 0, 1052556 | 0);
  abort();
 }
 
 function core__result__unwrap_failed__hf5e9b5ec58b89940() {
  var $0 = 0;
  $0 = global$0 - 64 | 0;
  global$0 = $0;
  HEAP32[($0 + 12 | 0) >> 2] = 24;
  HEAP32[($0 + 8 | 0) >> 2] = 1052272;
  HEAP32[($0 + 52 | 0) >> 2] = 9;
  HEAP32[($0 + 36 | 0) >> 2] = 2;
  HEAP32[($0 + 44 | 0) >> 2] = 52;
  HEAP32[($0 + 20 | 0) >> 2] = 2;
  HEAP32[($0 + 24 | 0) >> 2] = 0;
  HEAP32[($0 + 16 | 0) >> 2] = 1052516;
  HEAP32[($0 + 48 | 0) >> 2] = $0 + 56 | 0;
  HEAP32[($0 + 40 | 0) >> 2] = $0 + 8 | 0;
  HEAP32[($0 + 32 | 0) >> 2] = $0 + 40 | 0;
  core__panicking__panic_fmt__h2daf88b2616ca2b2($0 + 16 | 0 | 0, 1052556 | 0);
  abort();
 }
 
 function std__panicking__continue_panic_fmt__h1b22eea7f33d6c0a($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, i64toi32_i32$0 = 0, $3 = 0, i64toi32_i32$1 = 0, $4 = 0, $28 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1 = global$0 - 48 | 0;
  global$0 = $1;
  $2 = core__option__Option_T___unwrap__h0ec2f55b57c3d463(core__panic__PanicInfo__location__h26c5e8ad53ff02fa($0 | 0) | 0 | 0) | 0;
  $3 = core__option__Option_T___unwrap__h066c49837ee94964(core__panic__PanicInfo__message__h8ca6efa3eac6fbbd($0 | 0) | 0 | 0) | 0;
  core__panic__Location__file__h20f0051be3f37ec1($1 + 8 | 0 | 0, $2 | 0);
  i64toi32_i32$0 = HEAP32[($1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1 + 12 | 0) >> 2] | 0;
  $4 = core__panic__Location__line__h6404351b986a840b($2 | 0) | 0;
  (wasm2js_i32$0 = $1, wasm2js_i32$1 = core__panic__Location__column__h0e345957b1c2b87f($2 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($1 + 24 | 0) >> 2] = $4;
  $28 = i64toi32_i32$0;
  i64toi32_i32$0 = $1;
  HEAP32[($1 + 16 | 0) >> 2] = $28;
  HEAP32[($1 + 20 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($1 + 36 | 0) >> 2] = 0;
  HEAP32[($1 + 32 | 0) >> 2] = $3;
  std__panicking__rust_panic_with_hook__h6fe9d3817474ba5a($1 + 32 | 0 | 0, 1053308 | 0, core__panic__PanicInfo__message__h8ca6efa3eac6fbbd($0 | 0) | 0 | 0, $1 + 16 | 0 | 0);
  abort();
 }
 
 function $core__iter__adapters__Map_I_2cF__20as_20core__iter__traits__iterator__Iterator___fold__hac64a6a2d6e7e01a($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $2 = 0, $3 = 0, $5 = Math_fround(0), $4 = 0;
  label$1 : {
   $2 = HEAP32[$0 >> 2] | 0;
   $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if (($2 | 0) == ($3 | 0)) {
    break label$1
   }
   $4 = ((HEAPU8[(HEAP32[($0 + 8 | 0) >> 2] | 0) >> 0] | 0 | 2 | 0) & 3 | 0 | 0) == (3 | 0);
   label$2 : while (1) {
    $0 = $2 + 192 | 0;
    label$3 : {
     label$4 : {
      if ($4) {
       break label$4
      }
      $5 = Math_fround(HEAPF32[($2 + 152 | 0) >> 2]);
      break label$3;
     }
     $5 = Math_fround(HEAPF32[($2 + 156 | 0) >> 2]);
    }
    $1 = Math_fround($1 + $5);
    $2 = $0;
    if (($3 | 0) != ($0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return Math_fround($1);
 }
 
 function $core__iter__adapters__Map_I_2cF__20as_20core__iter__traits__iterator__Iterator___fold__h7964a558a506f099($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $2 = 0, $3 = 0, $5 = Math_fround(0), $4 = 0;
  label$1 : {
   $2 = HEAP32[$0 >> 2] | 0;
   $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if (($2 | 0) == ($3 | 0)) {
    break label$1
   }
   $4 = ((HEAPU8[(HEAP32[($0 + 8 | 0) >> 2] | 0) >> 0] | 0 | 2 | 0) & 3 | 0 | 0) == (3 | 0);
   label$2 : while (1) {
    $0 = $2 + 192 | 0;
    label$3 : {
     label$4 : {
      if ($4) {
       break label$4
      }
      $5 = Math_fround(HEAPF32[($2 + 168 | 0) >> 2]);
      break label$3;
     }
     $5 = Math_fround(HEAPF32[($2 + 172 | 0) >> 2]);
    }
    $1 = Math_fround($1 + $5);
    $2 = $0;
    if (($3 | 0) != ($0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return Math_fround($1);
 }
 
 function $core__iter__adapters__Map_I_2cF__20as_20core__iter__traits__iterator__Iterator___fold__h932db59420cb06b6($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $2 = 0, $3 = 0, $5 = Math_fround(0), $4 = 0;
  label$1 : {
   $2 = HEAP32[$0 >> 2] | 0;
   $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if (($2 | 0) == ($3 | 0)) {
    break label$1
   }
   $4 = ((HEAPU8[(HEAP32[($0 + 8 | 0) >> 2] | 0) >> 0] | 0 | 2 | 0) & 3 | 0 | 0) == (3 | 0);
   label$2 : while (1) {
    $0 = $2 + 192 | 0;
    label$3 : {
     label$4 : {
      if ($4) {
       break label$4
      }
      $5 = Math_fround(HEAPF32[($2 + 168 | 0) >> 2]);
      break label$3;
     }
     $5 = Math_fround(HEAPF32[($2 + 172 | 0) >> 2]);
    }
    $1 = Math_fround($1 + $5);
    $2 = $0;
    if (($3 | 0) != ($0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return Math_fround($1);
 }
 
 function js_sys__Reflect__get__hb202a761aaf27873($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $1 = __wbg_get_003e1b80a63de7c5(HEAP32[$1 >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0) | 0;
  wasm_bindgen____rt__take_last_exception__h5960da7d828407e4($3 + 8 | 0 | 0);
  label$1 : {
   label$2 : {
    $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
    if (!$4) {
     break label$2
    }
    $1 = HEAP32[($3 + 12 | 0) >> 2] | 0;
    $2 = 1;
    if (($4 | 0) == (1 | 0)) {
     break label$1
    }
    if ($1 >>> 0 <= 35 >>> 0) {
     break label$1
    }
    __wbindgen_object_drop_ref($1 | 0);
    break label$1;
   }
   $2 = 0;
  }
  HEAP32[($0 + 4 | 0) >> 2] = $1;
  HEAP32[$0 >> 2] = $2;
  global$0 = $3 + 16 | 0;
 }
 
 function core__num__dec2flt__algorithm__power_of_ten__habacea71fff464e2($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, $2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $24 = 0;
  label$1 : {
   label$2 : {
    if ((($1 << 16 | 0) >> 16 | 0 | 0) < (-305 | 0)) {
     break label$2
    }
    $2 = $1 + 305 | 0;
    $1 = ($2 << 16 | 0) >> 16 | 0;
    if (($2 & 65535 | 0) >>> 0 >= 611 >>> 0) {
     break label$1
    }
    HEAP16[($0 + 8 | 0) >> 1] = HEAPU16[(($1 << 1 | 0) + 1058632 | 0) >> 1] | 0;
    i64toi32_i32$2 = ($1 << 3 | 0) + 1053744 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $24 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $24;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   }
   core__panicking__panic__h2d0bc53a963fb996(1053716 | 0);
   abort();
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1059892 | 0, $1 | 0, 611 | 0);
  abort();
 }
 
 function $core__iter__adapters__Map_I_2cF__20as_20core__iter__traits__iterator__Iterator___try_fold___7b_7bclosure_7d_7d__he68c2ecc31764948($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0;
  label$1 : {
   $1 = HEAP32[(HEAP32[(HEAP32[($1 + 8 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0;
   $3 = HEAP32[($1 + 8 | 0) >> 2] | 0;
   $4 = HEAP32[$2 >> 2] | 0;
   if ($3 >>> 0 <= $4 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $1 = (HEAP32[$1 >> 2] | 0) + Math_imul($4, 288) | 0;
     if ((HEAPU8[($1 + 201 | 0) >> 0] | 0 | 0) != (1 | 0)) {
      break label$3
     }
     $2 = 0;
     break label$2;
    }
    $2 = (HEAPU8[($1 + 200 | 0) >> 0] | 0 | 0) == (1 | 0) ? 0 : $2;
   }
   HEAP32[($0 + 4 | 0) >> 2] = $1;
   HEAP32[$0 >> 2] = $2;
   return;
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1051560 | 0, $4 | 0, $3 | 0);
  abort();
 }
 
 function core__slice__slice_index_len_fail__h4544fc57f3d8a7a0($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = global$0 - 48 | 0;
  global$0 = $2;
  HEAP32[($2 + 4 | 0) >> 2] = $1;
  HEAP32[$2 >> 2] = $0;
  HEAP32[($2 + 44 | 0) >> 2] = 75;
  HEAP32[($2 + 28 | 0) >> 2] = 2;
  HEAP32[($2 + 36 | 0) >> 2] = 75;
  HEAP32[($2 + 12 | 0) >> 2] = 2;
  HEAP32[($2 + 16 | 0) >> 2] = 0;
  HEAP32[($2 + 8 | 0) >> 2] = 1060656;
  HEAP32[($2 + 40 | 0) >> 2] = $2 + 4 | 0;
  HEAP32[($2 + 32 | 0) >> 2] = $2;
  HEAP32[($2 + 24 | 0) >> 2] = $2 + 32 | 0;
  core__panicking__panic_fmt__h2daf88b2616ca2b2($2 + 8 | 0 | 0, 1060672 | 0);
  abort();
 }
 
 function core__panicking__panic_bounds_check__h0537ade040df571e($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = global$0 - 48 | 0;
  global$0 = $3;
  HEAP32[($3 + 4 | 0) >> 2] = $2;
  HEAP32[$3 >> 2] = $1;
  HEAP32[($3 + 44 | 0) >> 2] = 75;
  HEAP32[($3 + 28 | 0) >> 2] = 2;
  HEAP32[($3 + 36 | 0) >> 2] = 75;
  HEAP32[($3 + 12 | 0) >> 2] = 2;
  HEAP32[($3 + 16 | 0) >> 2] = 0;
  HEAP32[($3 + 8 | 0) >> 2] = 1060460;
  HEAP32[($3 + 40 | 0) >> 2] = $3;
  HEAP32[($3 + 32 | 0) >> 2] = $3 + 4 | 0;
  HEAP32[($3 + 24 | 0) >> 2] = $3 + 32 | 0;
  core__panicking__panic_fmt__h2daf88b2616ca2b2($3 + 8 | 0 | 0, $0 | 0);
  abort();
 }
 
 function core__slice__slice_index_order_fail__ha75fa70416d3bc2f($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = global$0 - 48 | 0;
  global$0 = $2;
  HEAP32[($2 + 4 | 0) >> 2] = $1;
  HEAP32[$2 >> 2] = $0;
  HEAP32[($2 + 44 | 0) >> 2] = 75;
  HEAP32[($2 + 28 | 0) >> 2] = 2;
  HEAP32[($2 + 36 | 0) >> 2] = 75;
  HEAP32[($2 + 12 | 0) >> 2] = 2;
  HEAP32[($2 + 16 | 0) >> 2] = 0;
  HEAP32[($2 + 8 | 0) >> 2] = 1060724;
  HEAP32[($2 + 40 | 0) >> 2] = $2 + 4 | 0;
  HEAP32[($2 + 32 | 0) >> 2] = $2;
  HEAP32[($2 + 24 | 0) >> 2] = $2 + 32 | 0;
  core__panicking__panic_fmt__h2daf88b2616ca2b2($2 + 8 | 0 | 0, 1060740 | 0);
  abort();
 }
 
 function $core__fmt__Arguments_20as_20core__fmt__Display___fmt__hc018daa18b15c7f0($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $2 = 0, $3 = 0, $17 = 0, $23 = 0, $26 = 0;
  $2 = global$0 - 32 | 0;
  global$0 = $2;
  $3 = HEAP32[($1 + 28 | 0) >> 2] | 0;
  $1 = HEAP32[($1 + 24 | 0) >> 2] | 0;
  i64toi32_i32$2 = $0 + 16 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $17 = i64toi32_i32$0;
  i64toi32_i32$0 = ($2 + 8 | 0) + 16 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $17;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $23 = i64toi32_i32$1;
  i64toi32_i32$1 = ($2 + 8 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $23;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $26 = i64toi32_i32$0;
  i64toi32_i32$0 = $2;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $26;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  $0 = core__fmt__write__h85435378f7fd6609($1 | 0, $3 | 0, i64toi32_i32$0 + 8 | 0 | 0) | 0;
  global$0 = i64toi32_i32$0 + 32 | 0;
  return $0 | 0;
 }
 
 function node_replaceChildAtIndex($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    if (HEAP32[$0 >> 2] | 0) {
     break label$1
    }
    HEAP32[$0 >> 2] = -1;
    if (!$2) {
     break label$2
    }
    $3 = HEAP32[$2 >> 2] | 0;
    if (($3 | 0) == (-1 | 0)) {
     break label$1
    }
    HEAP32[$2 >> 2] = $3 + 1 | 0;
    stretch_layout__Node__replace_child_at_index__h2a6d31954cfde073($0 + 4 | 0 | 0, $1 | 0, $2 + 4 | 0 | 0);
    HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1 | 0;
    HEAP32[$0 >> 2] = 0;
    $T_20as_20wasm_bindgen__convert__traits__ReturnWasmAbi___return_abi__h2e101204225ac678();
    return;
   }
   wasm_bindgen____rt__throw_null__h3f3e0f774e705662();
   abort();
  }
  wasm_bindgen____rt__borrow_fail__h1790ad2c17b5cd84();
  abort();
 }
 
 function $alloc__vec__IntoIter_T__20as_20core__ops__drop__Drop___drop__h9f6fdc6542cf8633($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0, $4 = 0, $3 = 0, $5 = 0;
  $1 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  $2 = (HEAP32[($0 + 12 | 0) >> 2] | 0) - $1 | 0;
  $3 = $0 + 8 | 0;
  label$1 : {
   label$2 : while (1) {
    if (!$2) {
     break label$1
    }
    $4 = $1 + 192 | 0;
    HEAP32[$3 >> 2] = $4;
    $2 = $2 + -192 | 0;
    $5 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    $1 = $4;
    if (($5 | 0) != (2 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if (!$2) {
    break label$3
   }
   __rust_dealloc(HEAP32[$0 >> 2] | 0 | 0, Math_imul($2, 192) | 0, 4 | 0);
  }
 }
 
 function $_T_20as_20core__fmt__Debug___fmt__h2ec535d2865cd60c($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  global$0 = $2;
  $0 = HEAP32[$0 >> 2] | 0;
  $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  $0 = HEAP32[$0 >> 2] | 0;
  core__fmt__Formatter__debug_list__h6c42b170021f5d22($2 | 0, $1 | 0);
  label$1 : {
   if (!$3) {
    break label$1
   }
   label$2 : while (1) {
    HEAP32[($2 + 12 | 0) >> 2] = $0;
    core__fmt__builders__DebugSet__entry__h0d8b4f3e8455206b($2 | 0, $2 + 12 | 0 | 0, 1052240 | 0) | 0;
    $0 = $0 + 1 | 0;
    $3 = $3 + -1 | 0;
    if ($3) {
     continue label$2
    }
    break label$2;
   };
  }
  $0 = core__fmt__builders__DebugList__finish__hd447885d2a726df2($2 | 0) | 0;
  global$0 = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function __rdl_realloc($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ((dlmalloc__dlmalloc__Dlmalloc__malloc_alignment__h676c9a04aa6da017(1066412 | 0) | 0) >>> 0 >= $2 >>> 0) {
       break label$4
      }
      if ((dlmalloc__dlmalloc__Dlmalloc__malloc_alignment__h676c9a04aa6da017(1066412 | 0) | 0) >>> 0 >= $2 >>> 0) {
       break label$3
      }
      $2 = dlmalloc__dlmalloc__Dlmalloc__memalign__he461fff21ac8d1e2(1066412 | 0, $2 | 0, $3 | 0) | 0;
      if (!$2) {
       break label$2
      }
      break label$1;
     }
     return dlmalloc__dlmalloc__Dlmalloc__realloc__h89a3982cb9693a20(1066412 | 0, $0 | 0, $3 | 0) | 0 | 0;
    }
    $2 = dlmalloc__dlmalloc__Dlmalloc__malloc__haa66310b00a7bd6b(1066412 | 0, $3 | 0) | 0;
    if ($2) {
     break label$1
    }
   }
   return 0 | 0;
  }
  $2 = memcpy($2 | 0, $0 | 0, ($1 >>> 0 > $3 >>> 0 ? $3 : $1) | 0) | 0;
  dlmalloc__dlmalloc__Dlmalloc__free__h4acdae787fb6f877(1066412 | 0, $0 | 0);
  return $2 | 0;
 }
 
 function node_addChild($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    if (HEAP32[$0 >> 2] | 0) {
     break label$1
    }
    HEAP32[$0 >> 2] = -1;
    if (!$1) {
     break label$2
    }
    $2 = HEAP32[$1 >> 2] | 0;
    if (($2 | 0) == (-1 | 0)) {
     break label$1
    }
    HEAP32[$1 >> 2] = $2 + 1 | 0;
    stretch_layout__Node__add_child__h24958c907242c3db($0 + 4 | 0 | 0, $1 + 4 | 0 | 0);
    HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + -1 | 0;
    HEAP32[$0 >> 2] = 0;
    $T_20as_20wasm_bindgen__convert__traits__ReturnWasmAbi___return_abi__h2e101204225ac678();
    return;
   }
   wasm_bindgen____rt__throw_null__h3f3e0f774e705662();
   abort();
  }
  wasm_bindgen____rt__borrow_fail__h1790ad2c17b5cd84();
  abort();
 }
 
 function node_removeChild($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    if (HEAP32[$0 >> 2] | 0) {
     break label$1
    }
    HEAP32[$0 >> 2] = -1;
    if (!$1) {
     break label$2
    }
    $2 = HEAP32[$1 >> 2] | 0;
    if (($2 | 0) == (-1 | 0)) {
     break label$1
    }
    HEAP32[$1 >> 2] = $2 + 1 | 0;
    stretch_layout__Node__remove_child__h5ac3490bdd08e8f4($0 + 4 | 0 | 0, $1 + 4 | 0 | 0);
    HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + -1 | 0;
    HEAP32[$0 >> 2] = 0;
    $T_20as_20wasm_bindgen__convert__traits__ReturnWasmAbi___return_abi__h2e101204225ac678();
    return;
   }
   wasm_bindgen____rt__throw_null__h3f3e0f774e705662();
   abort();
  }
  wasm_bindgen____rt__borrow_fail__h1790ad2c17b5cd84();
  abort();
 }
 
 function $alloc__vec__Vec_T__20as_20core__clone__Clone___clone__ha7ce6132966c4db5($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3 = 0, $17 = 0, $31 = 0;
  $2 = global$0 - 32 | 0;
  global$0 = $2;
  $3 = HEAP32[$1 >> 2] | 0;
  $1 = HEAP32[($1 + 8 | 0) >> 2] | 0;
  alloc__raw_vec__RawVec_T_2cA___allocate_in__h2c60f5d3edabcb0a($2 + 8 | 0 | 0, $1 | 0, 0 | 0);
  HEAP32[($2 + 24 | 0) >> 2] = 0;
  i64toi32_i32$0 = HEAP32[($2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2 + 12 | 0) >> 2] | 0;
  $17 = i64toi32_i32$0;
  i64toi32_i32$0 = $2;
  HEAP32[($2 + 16 | 0) >> 2] = $17;
  HEAP32[($2 + 20 | 0) >> 2] = i64toi32_i32$1;
  $alloc__vec__Vec_T__20as_20alloc__vec__SpecExtend_T_2cI____spec_extend__hb33c529efa49e643($2 + 16 | 0 | 0, $3 | 0, $3 + ($1 << 5 | 0) | 0 | 0);
  HEAP32[($0 + 8 | 0) >> 2] = HEAP32[($2 + 24 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2 + 20 | 0) >> 2] | 0;
  $31 = i64toi32_i32$1;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = $31;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $2 + 32 | 0;
 }
 
 function $stretch__node__Node_20as_20core__hash__Hash___hash__h845df738266e7e7f($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = global$0 - 16 | 0;
  global$0 = $2;
  HEAP32[($2 + 12 | 0) >> 2] = HEAP32[$0 >> 2] | 0;
  $std__collections__hash__map__DefaultHasher_20as_20core__hash__Hasher___write__h7303af2f85960aff($1 | 0, $2 + 12 | 0 | 0);
  HEAP32[($2 + 12 | 0) >> 2] = HEAP32[($0 + 4 | 0) >> 2] | 0;
  $std__collections__hash__map__DefaultHasher_20as_20core__hash__Hasher___write__h7303af2f85960aff($1 | 0, $2 + 12 | 0 | 0);
  HEAP32[($2 + 12 | 0) >> 2] = HEAP32[($0 + 8 | 0) >> 2] | 0;
  $std__collections__hash__map__DefaultHasher_20as_20core__hash__Hasher___write__h7303af2f85960aff($1 | 0, $2 + 12 | 0 | 0);
  HEAP32[($2 + 12 | 0) >> 2] = HEAP32[($0 + 12 | 0) >> 2] | 0;
  $std__collections__hash__map__DefaultHasher_20as_20core__hash__Hasher___write__h7303af2f85960aff($1 | 0, $2 + 12 | 0 | 0);
  global$0 = $2 + 16 | 0;
 }
 
 function core__result__unwrap_failed__hae3003d4eb6b7de1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = global$0 - 48 | 0;
  global$0 = $1;
  HEAP32[($1 + 4 | 0) >> 2] = 47;
  HEAP32[$1 >> 2] = 1052923;
  HEAP32[($1 + 44 | 0) >> 2] = 53;
  HEAP32[($1 + 28 | 0) >> 2] = 2;
  HEAP32[($1 + 40 | 0) >> 2] = $0;
  HEAP32[($1 + 36 | 0) >> 2] = 52;
  HEAP32[($1 + 12 | 0) >> 2] = 2;
  HEAP32[($1 + 16 | 0) >> 2] = 0;
  HEAP32[($1 + 8 | 0) >> 2] = 1052516;
  HEAP32[($1 + 32 | 0) >> 2] = $1;
  HEAP32[($1 + 24 | 0) >> 2] = $1 + 32 | 0;
  core__panicking__panic_fmt__h2daf88b2616ca2b2($1 + 8 | 0 | 0, 1052556 | 0);
  abort();
 }
 
 function $_mut_20W_20as_20core__fmt__Write___write_fmt__h5bb17cb408313c18($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $14 = 0, $20 = 0, $23 = 0;
  $2 = global$0 - 32 | 0;
  global$0 = $2;
  HEAP32[($2 + 4 | 0) >> 2] = HEAP32[$0 >> 2] | 0;
  i64toi32_i32$2 = $1 + 16 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $14 = i64toi32_i32$0;
  i64toi32_i32$0 = ($2 + 8 | 0) + 16 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $14;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $20 = i64toi32_i32$1;
  i64toi32_i32$1 = ($2 + 8 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $20;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $23 = i64toi32_i32$0;
  i64toi32_i32$0 = $2;
  HEAP32[($2 + 8 | 0) >> 2] = $23;
  HEAP32[($2 + 12 | 0) >> 2] = i64toi32_i32$1;
  $1 = core__fmt__write__h85435378f7fd6609($2 + 4 | 0 | 0, 1052216 | 0, $2 + 8 | 0 | 0) | 0;
  global$0 = $2 + 32 | 0;
  return $1 | 0;
 }
 
 function $_mut_20W_20as_20core__fmt__Write___write_fmt__h56aff2de7507f7ee($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $14 = 0, $20 = 0, $23 = 0;
  $2 = global$0 - 32 | 0;
  global$0 = $2;
  HEAP32[($2 + 4 | 0) >> 2] = HEAP32[$0 >> 2] | 0;
  i64toi32_i32$2 = $1 + 16 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $14 = i64toi32_i32$0;
  i64toi32_i32$0 = ($2 + 8 | 0) + 16 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $14;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $20 = i64toi32_i32$1;
  i64toi32_i32$1 = ($2 + 8 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $20;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $23 = i64toi32_i32$0;
  i64toi32_i32$0 = $2;
  HEAP32[($2 + 8 | 0) >> 2] = $23;
  HEAP32[($2 + 12 | 0) >> 2] = i64toi32_i32$1;
  $1 = core__fmt__write__h85435378f7fd6609($2 + 4 | 0 | 0, 1061304 | 0, $2 + 8 | 0 | 0) | 0;
  global$0 = $2 + 32 | 0;
  return $1 | 0;
 }
 
 function core__ops__function__FnOnce__call_once_7b_7bvtable_shim_7d_7d__h8e5a033e8e35a861($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $14 = 0, $19 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  $1 = HEAP32[$1 >> 2] | 0;
  i64toi32_i32$2 = $2 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $14 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3 + 16 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $14;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($3 + 12 | 0) >> 2] = $1;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = HEAP32[$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2 + 4 | 0) >> 2] | 0;
  $19 = i64toi32_i32$1;
  i64toi32_i32$1 = $3;
  HEAP32[($3 + 16 | 0) >> 2] = $19;
  HEAP32[($3 + 20 | 0) >> 2] = i64toi32_i32$0;
  stretch_layout__Node__set_measure___7b_7bclosure_7d_7d__h217e1cfe54b26aef($0 | 0, $3 + 12 | 0 | 0, $3 + 16 | 0 | 0);
  label$1 : {
   $2 = HEAP32[($3 + 12 | 0) >> 2] | 0;
   if ($2 >>> 0 < 36 >>> 0) {
    break label$1
   }
   __wbindgen_object_drop_ref($2 | 0);
  }
  global$0 = $3 + 32 | 0;
 }
 
 function $stretch__node__INSTANCE_ALLOCATOR_20as_20core__ops__deref__Deref___deref__h00b3a6ded40dd9a6($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  global$0 = $1;
  HEAP32[($1 + 4 | 0) >> 2] = 1066304;
  label$1 : {
   if ((HEAP32[(0 + 1066328 | 0) >> 2] | 0 | 0) == (3 | 0)) {
    break label$1
   }
   HEAP32[($1 + 8 | 0) >> 2] = $1 + 4 | 0;
   HEAP32[($1 + 12 | 0) >> 2] = $1 + 8 | 0;
   std__sync__once__Once__call_inner__h49bf6a110bd0c1f8(1066328 | 0, 0 | 0, $1 + 12 | 0 | 0, 1050020 | 0);
  }
  label$2 : {
   $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
   if (!(HEAP32[$2 >> 2] | 0)) {
    break label$2
   }
   global$0 = $1 + 16 | 0;
   return $2 | 0;
  }
  lazy_static__lazy__unreachable_unchecked__ha262c168d288a5d3();
  abort();
 }
 
 function core__fmt__Write__write_fmt__ha2ab03f5dc69baa1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $13 = 0, $19 = 0, $22 = 0;
  $2 = global$0 - 32 | 0;
  global$0 = $2;
  HEAP32[($2 + 4 | 0) >> 2] = $0;
  i64toi32_i32$2 = $1 + 16 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $13 = i64toi32_i32$0;
  i64toi32_i32$0 = ($2 + 8 | 0) + 16 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $13;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $19 = i64toi32_i32$1;
  i64toi32_i32$1 = ($2 + 8 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $19;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $22 = i64toi32_i32$0;
  i64toi32_i32$0 = $2;
  HEAP32[($2 + 8 | 0) >> 2] = $22;
  HEAP32[($2 + 12 | 0) >> 2] = i64toi32_i32$1;
  $1 = core__fmt__write__h85435378f7fd6609($2 + 4 | 0 | 0, 1061304 | 0, $2 + 8 | 0 | 0) | 0;
  global$0 = $2 + 32 | 0;
  return $1 | 0;
 }
 
 function $std__panicking__begin_panic__PanicPayload_A__20as_20core__panic__BoxMeUp___box_me_up__ha6d31514980a3011($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = HEAP32[$1 >> 2] | 0;
  HEAP32[$1 >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$2) {
      break label$3
     }
     $3 = HEAP32[($1 + 4 | 0) >> 2] | 0;
     $1 = __rust_alloc(8 | 0, 4 | 0) | 0;
     if (!$1) {
      break label$1
     }
     HEAP32[($1 + 4 | 0) >> 2] = $3;
     HEAP32[$1 >> 2] = $2;
     $2 = 1050368;
     break label$2;
    }
    $1 = 1;
    $2 = 1050384;
   }
   HEAP32[($0 + 4 | 0) >> 2] = $2;
   HEAP32[$0 >> 2] = $1;
   return;
  }
  alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83(8 | 0, 4 | 0);
  abort();
 }
 
 function $core__iter__adapters__Cloned_I__20as_20core__iter__traits__iterator__Iterator___try_fold___7b_7bclosure_7d_7d__h972932b113c9ba33($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0;
  label$1 : {
   $3 = HEAP32[(HEAP32[(HEAP32[$1 >> 2] | 0) >> 2] | 0) >> 2] | 0;
   $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
   $2 = HEAP32[$2 >> 2] | 0;
   if ($4 >>> 0 <= $2 >>> 0) {
    break label$1
   }
   $1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
   $4 = HEAP32[$1 >> 2] | 0;
   HEAP32[($0 + 4 | 0) >> 2] = $4;
   HEAP32[($0 + 8 | 0) >> 2] = $2;
   HEAP32[$0 >> 2] = HEAPU8[(((HEAP32[$3 >> 2] | 0) + Math_imul($2, 288) | 0) + 201 | 0) >> 0] | 0;
   HEAP32[$1 >> 2] = $4 + 1 | 0;
   return;
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1051560 | 0, $2 | 0, $4 | 0);
  abort();
 }
 
 function $std__panicking__begin_panic__PanicPayload_A__20as_20core__panic__BoxMeUp___box_me_up__h220d30503ac86e8b($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = HEAP32[$1 >> 2] | 0;
  HEAP32[$1 >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$2) {
      break label$3
     }
     $3 = HEAP32[($1 + 4 | 0) >> 2] | 0;
     $1 = __rust_alloc(8 | 0, 4 | 0) | 0;
     if (!$1) {
      break label$1
     }
     HEAP32[($1 + 4 | 0) >> 2] = $3;
     HEAP32[$1 >> 2] = $2;
     $2 = 1053364;
     break label$2;
    }
    $1 = 1;
    $2 = 1053380;
   }
   HEAP32[($0 + 4 | 0) >> 2] = $2;
   HEAP32[$0 >> 2] = $1;
   return;
  }
  alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83(8 | 0, 4 | 0);
  abort();
 }
 
 function core__panicking__panic__h2d0bc53a963fb996($0) {
  $0 = $0 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $1 = 0, $2 = 0, $2$hi = 0, $3 = 0, $3$hi = 0, $17 = 0;
  $1 = global$0 - 48 | 0;
  global$0 = $1;
  i64toi32_i32$2 = $0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $2 = i64toi32_i32$0;
  $2$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $3 = i64toi32_i32$1;
  $3$hi = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  HEAP32[($1 + 20 | 0) >> 2] = 0;
  $17 = i64toi32_i32$0;
  i64toi32_i32$0 = $1;
  HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = $17;
  HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = 1053644;
  i64toi32_i32$1 = 0;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = 1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[i64toi32_i32$0 >> 2] = i64toi32_i32$0 + 24 | 0;
  i64toi32_i32$1 = $3$hi;
  HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] = $3;
  HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] = $2;
  HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] = i64toi32_i32$1;
  core__panicking__panic_fmt__h2daf88b2616ca2b2(i64toi32_i32$0 | 0, i64toi32_i32$0 + 32 | 0 | 0);
  abort();
 }
 
 function core__ptr__real_drop_in_place__h1f9c131b05839678($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  label$1 : {
   $1 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   if (!$1) {
    break label$1
   }
   $2 = HEAP32[($0 + 20 | 0) >> 2] | 0;
   $1 = $1 << 5 | 0;
   label$2 : while (1) {
    core__ptr__real_drop_in_place__h1f9c131b05839678($2 | 0);
    $2 = $2 + 32 | 0;
    $1 = $1 + -32 | 0;
    if ($1) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   $2 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   if (!$2) {
    break label$3
   }
   __rust_dealloc(HEAP32[($0 + 20 | 0) >> 2] | 0 | 0, $2 << 5 | 0 | 0, 4 | 0);
  }
 }
 
 function $alloc__vec__Vec_T__20as_20alloc__vec__SpecExtend_T_2cI____spec_extend__hb33c529efa49e643($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $5 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  alloc__raw_vec__RawVec_T_2cA___reserve__hba7a32ad1439175e($0 | 0, HEAP32[($0 + 8 | 0) >> 2] | 0 | 0, ($2 - $1 | 0) >>> 5 | 0 | 0);
  $4 = HEAP32[$0 >> 2] | 0;
  $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  HEAP32[($3 + 8 | 0) >> 2] = $5;
  HEAP32[($3 + 4 | 0) >> 2] = $0 + 8 | 0;
  HEAP32[$3 >> 2] = $4 + ($5 << 5 | 0) | 0;
  $core__iter__adapters__Cloned_I__20as_20core__iter__traits__iterator__Iterator___fold__hb8a9376521c159f4($1 | 0, $2 | 0, $3 | 0);
  global$0 = $3 + 16 | 0;
 }
 
 function $stretch__id__Id_20as_20core__fmt__Debug___fmt__ha6da08d1af5f06a7($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = global$0 - 16 | 0;
  global$0 = $2;
  core__fmt__Formatter__debug_struct__h5df6422ae6e44bef($2 | 0, $1 | 0, 1050584 | 0, 2 | 0);
  HEAP32[($2 + 12 | 0) >> 2] = $0;
  core__fmt__builders__DebugStruct__field__hab3f8a77cf8c4394($2 | 0, 1050586 | 0, 2 | 0, $2 + 12 | 0 | 0, 1050588 | 0) | 0;
  HEAP32[($2 + 12 | 0) >> 2] = $0 + 4 | 0;
  core__fmt__builders__DebugStruct__field__hab3f8a77cf8c4394($2 | 0, 1050604 | 0, 10 | 0, $2 + 12 | 0 | 0, 1050588 | 0) | 0;
  $0 = core__fmt__builders__DebugStruct__finish__hc40a0d34053a01e6($2 | 0) | 0;
  global$0 = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function $stretch__node__Node_20as_20core__fmt__Debug___fmt__h06b00d9928aa004d($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = global$0 - 16 | 0;
  global$0 = $2;
  core__fmt__Formatter__debug_struct__h5df6422ae6e44bef($2 | 0, $1 | 0, 1051336 | 0, 4 | 0);
  HEAP32[($2 + 12 | 0) >> 2] = $0;
  core__fmt__builders__DebugStruct__field__hab3f8a77cf8c4394($2 | 0, 1051340 | 0, 8 | 0, $2 + 12 | 0 | 0, 1051348 | 0) | 0;
  HEAP32[($2 + 12 | 0) >> 2] = $0 + 8 | 0;
  core__fmt__builders__DebugStruct__field__hab3f8a77cf8c4394($2 | 0, 1051364 | 0, 5 | 0, $2 + 12 | 0 | 0, 1051348 | 0) | 0;
  $0 = core__fmt__builders__DebugStruct__finish__hc40a0d34053a01e6($2 | 0) | 0;
  global$0 = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function $T_20as_20wasm_bindgen__convert__traits__ReturnWasmAbi___return_abi__hc1898054cbdde0da($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, i64toi32_i32$1 = 0;
  $2 = global$0 - 16 | 0;
  global$0 = $2;
  $3 = HEAP32[($1 + 8 | 0) >> 2] | 0;
  HEAP32[($2 + 8 | 0) >> 2] = $3;
  i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[($2 + 4 | 0) >> 2] = i64toi32_i32$1;
  label$1 : {
   $1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
   if (($3 | 0) == ($1 | 0)) {
    break label$1
   }
   alloc__raw_vec__RawVec_T_2cA___shrink_to_fit__h905c154712432f9f($2 | 0, $3 | 0);
   $1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
  }
  $3 = HEAP32[$2 >> 2] | 0;
  HEAP32[($0 + 4 | 0) >> 2] = $1;
  HEAP32[$0 >> 2] = $3;
  global$0 = $2 + 16 | 0;
 }
 
 function core__num__dec2flt__num__to_u64__h5d5282c7dcdcfd3f($0) {
  $0 = $0 | 0;
  var $1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((core__num__bignum__Big32x40__bit_length__h13ff63659f8edff3($0 | 0) | 0) >>> 0 > 63 >>> 0) {
      break label$3
     }
     $1 = HEAP32[$0 >> 2] | 0;
     if ($1 >>> 0 >= 41 >>> 0) {
      break label$2
     }
     label$4 : {
      if ($1 >>> 0 >= 2 >>> 0) {
       break label$4
      }
      if (!$1) {
       break label$1
      }
      i64toi32_i32$0 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$0 | 0;
     }
     i64toi32_i32$0 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
     return i64toi32_i32$0 | 0;
    }
    core__panicking__panic__h2d0bc53a963fb996(1059976 | 0);
    abort();
   }
   core__slice__slice_index_len_fail__h4544fc57f3d8a7a0($1 | 0, 40 | 0);
   abort();
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1060032 | 0, 0 | 0, 0 | 0);
  abort();
 }
 
 function $alloc__vec__Vec_T__20as_20core__ops__drop__Drop___drop__h6e997e740088a7d8($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0;
  $1 = global$0 - 16 | 0;
  global$0 = $1;
  $alloc__vec__Vec_T__20as_20core__ops__deref__DerefMut___deref_mut__h7c59fcd9bfa72311($1 + 8 | 0 | 0, $0 | 0);
  label$1 : {
   $2 = HEAP32[($1 + 12 | 0) >> 2] | 0;
   if (!$2) {
    break label$1
   }
   $0 = HEAP32[($1 + 8 | 0) >> 2] | 0;
   $2 = Math_imul($2, 12);
   label$2 : while (1) {
    $alloc__vec__Vec_T__20as_20core__ops__drop__Drop___drop__h4153fb8197ebf089($0 | 0);
    $alloc__raw_vec__RawVec_T_2cA__20as_20core__ops__drop__Drop___drop__h5edcdd299048036e($0 | 0);
    $0 = $0 + 12 | 0;
    $2 = $2 + -12 | 0;
    if ($2) {
     continue label$2
    }
    break label$2;
   };
  }
  global$0 = $1 + 16 | 0;
 }
 
 function alloc__vec__Vec_T___remove__h3b726461d7416baf($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  label$1 : {
   $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   if ($2 >>> 0 <= $1 >>> 0) {
    break label$1
   }
   $3 = (HEAP32[$0 >> 2] | 0) + ($1 << 2 | 0) | 0;
   $4 = HEAP32[$3 >> 2] | 0;
   memmove($3 | 0, $3 + 4 | 0 | 0, ($2 + ($1 ^ -1 | 0) | 0) << 2 | 0 | 0) | 0;
   HEAP32[($0 + 8 | 0) >> 2] = $2 + -1 | 0;
   return $4 | 0;
  }
  core__panicking__panic__h2d0bc53a963fb996(1050664 | 0);
  abort();
 }
 
 function std__panicking__begin_panic_fmt__hb7825530f38bd066($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $20 = 0, $27 = 0;
  $2 = global$0 - 48 | 0;
  global$0 = $2;
  core__panic__Location__internal_constructor__h8fe3cc265367b40f($2 + 32 | 0 | 0, HEAP32[$1 >> 2] | 0 | 0, HEAP32[($1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($1 + 12 | 0) >> 2] | 0 | 0);
  i64toi32_i32$2 = $2 + 40 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $20 = i64toi32_i32$0;
  i64toi32_i32$0 = $2 + 20 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $20;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($2 + 8 | 0) >> 2] = $0;
  HEAP32[($2 + 4 | 0) >> 2] = 1052380;
  HEAP32[$2 >> 2] = 1052380;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = HEAP32[($2 + 32 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2 + 36 | 0) >> 2] | 0;
  $27 = i64toi32_i32$1;
  i64toi32_i32$1 = $2;
  HEAP32[($2 + 12 | 0) >> 2] = $27;
  HEAP32[($2 + 16 | 0) >> 2] = i64toi32_i32$0;
  std__panicking__continue_panic_fmt__h1b22eea7f33d6c0a($2 | 0);
  abort();
 }
 
 function core__option__expect_failed__h4b77ebe6e62ec3a1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = global$0 - 48 | 0;
  global$0 = $2;
  HEAP32[($2 + 12 | 0) >> 2] = $1;
  HEAP32[($2 + 8 | 0) >> 2] = $0;
  HEAP32[($2 + 36 | 0) >> 2] = 1;
  HEAP32[($2 + 44 | 0) >> 2] = 76;
  HEAP32[($2 + 20 | 0) >> 2] = 1;
  HEAP32[($2 + 24 | 0) >> 2] = 0;
  HEAP32[($2 + 16 | 0) >> 2] = 1060564;
  HEAP32[($2 + 40 | 0) >> 2] = $2 + 8 | 0;
  HEAP32[($2 + 32 | 0) >> 2] = $2 + 40 | 0;
  core__panicking__panic_fmt__h2daf88b2616ca2b2($2 + 16 | 0 | 0, 1060572 | 0);
  abort();
 }
 
 function wasm_bindgen__JsValue__as_string__h629c730fd1acd893($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  global$0 = $2;
  HEAP32[($2 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    $1 = __wbindgen_string_get(HEAP32[$1 >> 2] | 0 | 0, $2 + 12 | 0 | 0) | 0;
    if (!$1) {
     break label$2
    }
    $3 = HEAP32[($2 + 12 | 0) >> 2] | 0;
    HEAP32[($0 + 4 | 0) >> 2] = $3;
    HEAP32[$0 >> 2] = $1;
    HEAP32[($0 + 8 | 0) >> 2] = $3;
    break label$1;
   }
   HEAP32[$0 >> 2] = 0;
  }
  global$0 = $2 + 16 | 0;
 }
 
 function $std__ffi__c_str__NulError_20as_20core__fmt__Debug___fmt__hf4efecf81595b660($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = global$0 - 16 | 0;
  global$0 = $2;
  core__fmt__Formatter__debug_tuple__h9b1f009ef608acf0($2 | 0, $1 | 0, 1053396 | 0, 8 | 0);
  HEAP32[($2 + 12 | 0) >> 2] = $0;
  core__fmt__builders__DebugTuple__field__hb9640642e98eeefe($2 | 0, $2 + 12 | 0 | 0, 1052700 | 0) | 0;
  HEAP32[($2 + 12 | 0) >> 2] = $0 + 4 | 0;
  core__fmt__builders__DebugTuple__field__hb9640642e98eeefe($2 | 0, $2 + 12 | 0 | 0, 1053404 | 0) | 0;
  $0 = core__fmt__builders__DebugTuple__finish__h0e3afe7bbfe02439($2 | 0) | 0;
  global$0 = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function node_setMeasure($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = global$0 - 16 | 0;
  global$0 = $2;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    if (HEAP32[$0 >> 2] | 0) {
     break label$1
    }
    HEAP32[$0 >> 2] = -1;
    HEAP32[($2 + 12 | 0) >> 2] = $1;
    stretch_layout__Node__set_measure__h762a5139f9ec7582($0 + 4 | 0 | 0, $2 + 12 | 0 | 0);
    HEAP32[$0 >> 2] = 0;
    $T_20as_20wasm_bindgen__convert__traits__ReturnWasmAbi___return_abi__h2e101204225ac678();
    global$0 = $2 + 16 | 0;
    return;
   }
   wasm_bindgen____rt__throw_null__h3f3e0f774e705662();
   abort();
  }
  wasm_bindgen____rt__borrow_fail__h1790ad2c17b5cd84();
  abort();
 }
 
 function node_setStyle($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = global$0 - 16 | 0;
  global$0 = $2;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    if (HEAP32[$0 >> 2] | 0) {
     break label$1
    }
    HEAP32[$0 >> 2] = -1;
    HEAP32[($2 + 12 | 0) >> 2] = $1;
    stretch_layout__Node__set_style__h6b4c38002d33c7fa($0 + 4 | 0 | 0, $2 + 12 | 0 | 0);
    HEAP32[$0 >> 2] = 0;
    $T_20as_20wasm_bindgen__convert__traits__ReturnWasmAbi___return_abi__h2e101204225ac678();
    global$0 = $2 + 16 | 0;
    return;
   }
   wasm_bindgen____rt__throw_null__h3f3e0f774e705662();
   abort();
  }
  wasm_bindgen____rt__borrow_fail__h1790ad2c17b5cd84();
  abort();
 }
 
 function $alloc__vec__Vec_T__20as_20core__ops__drop__Drop___drop__h07df8a77f3830807($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  label$1 : {
   $1 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   if (!$1) {
    break label$1
   }
   $0 = HEAP32[$0 >> 2] | 0;
   $1 = Math_imul($1, 20);
   label$2 : while (1) {
    label$3 : {
     $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if (!$2) {
      break label$3
     }
     __rust_dealloc(HEAP32[$0 >> 2] | 0 | 0, Math_imul($2, 192) | 0, 4 | 0);
    }
    $0 = $0 + 20 | 0;
    $1 = $1 + -20 | 0;
    if ($1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $alloc__vec__Vec_T__20as_20core__ops__drop__Drop___drop__hd05bdc8a9ab96be2($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  label$1 : {
   $1 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   if (!$1) {
    break label$1
   }
   $0 = HEAP32[$0 >> 2] | 0;
   $1 = Math_imul($1, 12);
   label$2 : while (1) {
    label$3 : {
     $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if (!$2) {
      break label$3
     }
     __rust_dealloc(HEAP32[$0 >> 2] | 0 | 0, Math_imul($2, 20) | 0, 4 | 0);
    }
    $0 = $0 + 12 | 0;
    $1 = $1 + -12 | 0;
    if ($1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $alloc__vec__IntoIter_T__20as_20core__ops__drop__Drop___drop__h89603df875d9228b($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  label$1 : {
   $1 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
   if (($1 | 0) == ($2 | 0)) {
    break label$1
   }
   HEAP32[($0 + 8 | 0) >> 2] = ($1 + ((($2 + -8 | 0) - $1 | 0) & -8 | 0) | 0) + 8 | 0;
  }
  label$2 : {
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if (!$1) {
    break label$2
   }
   __rust_dealloc(HEAP32[$0 >> 2] | 0 | 0, $1 << 3 | 0 | 0, 4 | 0);
  }
 }
 
 function core__fmt__Formatter__pad_integral__write_prefix__h8ff96a3030fbf13b($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($1 | 0) == (1114112 | 0)) {
      break label$3
     }
     $4 = 1;
     if (FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0](HEAP32[($0 + 24 | 0) >> 2] | 0, $1) | 0) {
      break label$2
     }
    }
    if (!$2) {
     break label$1
    }
    $4 = FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[($0 + 24 | 0) >> 2] | 0, $2, $3) | 0;
   }
   return $4 | 0;
  }
  return 0 | 0;
 }
 
 function node_getStyle($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    $1 = HEAP32[$0 >> 2] | 0;
    if (($1 | 0) == (-1 | 0)) {
     break label$1
    }
    HEAP32[$0 >> 2] = $1 + 1 | 0;
    $1 = __wbindgen_object_clone_ref(HEAP32[($0 + 24 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1 | 0;
    return $T_20as_20wasm_bindgen__convert__traits__ReturnWasmAbi___return_abi__h2cd566ebd587e511($1 | 0) | 0 | 0;
   }
   wasm_bindgen____rt__throw_null__h3f3e0f774e705662();
   abort();
  }
  wasm_bindgen____rt__borrow_fail__h1790ad2c17b5cd84();
  abort();
 }
 
 function node_isDirty($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    $1 = HEAP32[$0 >> 2] | 0;
    if (($1 | 0) == (-1 | 0)) {
     break label$1
    }
    HEAP32[$0 >> 2] = $1 + 1 | 0;
    $1 = stretch_layout__Node__is_dirty__h3755578e1850a7bb($0 + 4 | 0 | 0) | 0;
    HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1 | 0;
    return $T_20as_20wasm_bindgen__convert__traits__ReturnWasmAbi___return_abi__habde5efc1123c080($1 | 0) | 0 | 0;
   }
   wasm_bindgen____rt__throw_null__h3f3e0f774e705662();
   abort();
  }
  wasm_bindgen____rt__borrow_fail__h1790ad2c17b5cd84();
  abort();
 }
 
 function memcmp($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0;
  label$1 : {
   label$2 : {
    if (!$2) {
     break label$2
    }
    $3 = 0;
    label$3 : while (1) {
     $4 = HEAPU8[($0 + $3 | 0) >> 0] | 0;
     $5 = HEAPU8[($1 + $3 | 0) >> 0] | 0;
     if (($4 | 0) != ($5 | 0)) {
      break label$1
     }
     $3 = $3 + 1 | 0;
     if ($3 >>> 0 < $2 >>> 0) {
      continue label$3
     }
     break label$3;
    };
    return 0 | 0;
   }
   return 0 | 0;
  }
  return $4 - $5 | 0 | 0;
 }
 
 function allocator_new() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 304 | 0;
  global$0 = $0;
  stretch__node__Stretch__new__hfb100b262210e798($0 + 160 | 0 | 0);
  HEAP32[($0 + 8 | 0) >> 2] = 0;
  memcpy($0 + 16 | 0 | 0, $0 + 160 | 0 | 0, 144 | 0) | 0;
  $1 = $stretch_layout__Allocator_20as_20wasm_bindgen__convert__traits__IntoWasmAbi___into_abi__h37b07a46002ab954(alloc__rc__Rc_T___new__hbbb5b15a481b180a($0 + 8 | 0 | 0) | 0 | 0) | 0;
  global$0 = $0 + 304 | 0;
  return $1 | 0;
 }
 
 function __rdl_alloc_zeroed($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((dlmalloc__dlmalloc__Dlmalloc__malloc_alignment__h676c9a04aa6da017(1066412 | 0) | 0) >>> 0 >= $1 >>> 0) {
      break label$3
     }
     $1 = dlmalloc__dlmalloc__Dlmalloc__memalign__he461fff21ac8d1e2(1066412 | 0, $1 | 0, $0 | 0) | 0;
     if ($1) {
      break label$2
     }
     break label$1;
    }
    $1 = dlmalloc__dlmalloc__Dlmalloc__malloc__haa66310b00a7bd6b(1066412 | 0, $0 | 0) | 0;
    if (!$1) {
     break label$1
    }
   }
   if (!(dlmalloc__dlmalloc__Dlmalloc__calloc_must_clear__h262938980343e91e(1066412 | 0, $1 | 0) | 0)) {
    break label$1
   }
   memset($1 | 0, 0 | 0, $0 | 0) | 0;
  }
  return $1 | 0;
 }
 
 function wasm_bindgen__JsValue__as_f64__h7e1a5be5cc4fe0a8($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0.0, i64toi32_i32$0 = 0;
  $2 = global$0 - 16 | 0;
  global$0 = $2;
  HEAP8[($2 + 15 | 0) >> 0] = 0;
  $3 = +__wbindgen_number_get(HEAP32[$1 >> 2] | 0 | 0, $2 + 15 | 0 | 0);
  $1 = HEAPU8[($2 + 15 | 0) >> 0] | 0;
  HEAPF64[($0 + 8 | 0) >> 3] = $3;
  i64toi32_i32$0 = 0;
  HEAP32[$0 >> 2] = ($1 | 0) != (1 | 0);
  HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $2 + 16 | 0;
 }
 
 function core__ptr__real_drop_in_place__h140ac43c00bb796c($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  label$1 : {
   if (!(HEAP32[$0 >> 2] | 0)) {
    break label$1
   }
   $1 = $0 + 8 | 0;
   FUNCTION_TABLE[HEAP32[(HEAP32[$1 >> 2] | 0) >> 2] | 0](HEAP32[($0 + 4 | 0) >> 2] | 0);
   $1 = HEAP32[$1 >> 2] | 0;
   $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
   if (!$2) {
    break label$1
   }
   __rust_dealloc(HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, $2 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0);
  }
 }
 
 function std__sync__mutex__Mutex_T___lock__h984bbcb1d75d91fd($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   $2 = HEAP32[$1 >> 2] | 0;
   if (HEAPU8[$2 >> 0] | 0) {
    break label$1
   }
   HEAP8[$2 >> 0] = 1;
   (wasm2js_i32$0 = $0 + 8 | 0, wasm2js_i32$1 = std__panicking__panicking__hf26bc0dde81b7530() | 0), HEAP8[wasm2js_i32$0 >> 0] = wasm2js_i32$1;
   HEAP32[($0 + 4 | 0) >> 2] = $1;
   HEAP32[$0 >> 2] = (HEAPU8[($1 + 4 | 0) >> 0] | 0 | 0) != (0 | 0);
   return;
  }
  std__panicking__begin_panic__h10b561c1884f6b9b(1050232 | 0, 32 | 0, 1050216 | 0);
  abort();
 }
 
 function core__panicking__panic_fmt__h2daf88b2616ca2b2($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3 = 0, $3$hi = 0, $12 = 0;
  $2 = global$0 - 32 | 0;
  global$0 = $2;
  i64toi32_i32$2 = $1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $3 = i64toi32_i32$0;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $12 = i64toi32_i32$1;
  i64toi32_i32$1 = $2 + 20 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $12;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$1 = $2;
  HEAP32[($2 + 12 | 0) >> 2] = $3;
  HEAP32[($2 + 16 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($2 + 8 | 0) >> 2] = $0;
  HEAP32[($2 + 4 | 0) >> 2] = 1060392;
  HEAP32[$2 >> 2] = 1053644;
  rust_begin_unwind($2 | 0);
  abort();
 }
 
 function $alloc__vec__Vec_T__20as_20alloc__vec__SpecExtend__T_2ccore__slice__Iter_T_____spec_extend__h86215e81f1daaba8($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $2 = ($2 - $1 | 0) >>> 3 | 0;
  alloc__raw_vec__RawVec_T_2cA___reserve__h07876202a410c73d($0 | 0, HEAP32[($0 + 8 | 0) >> 2] | 0 | 0, $2 | 0);
  $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  HEAP32[($0 + 8 | 0) >> 2] = $3 + $2 | 0;
  core__slice___impl_20_5bT_5d___copy_from_slice__h42e988566def9c96((HEAP32[$0 >> 2] | 0) + ($3 << 3 | 0) | 0 | 0, $2 | 0, $1 | 0, $2 | 0);
 }
 
 function core__f32___impl_20f32___classify__h2cc2893972a149fc($0) {
  $0 = Math_fround($0);
  var $1 = 0, $2 = 0;
  $1 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
  $2 = $1 & 8388607 | 0;
  label$1 : {
   label$2 : {
    $1 = $1 & 2139095040 | 0;
    if (!$1) {
     break label$2
    }
    if (($1 | 0) != (2139095040 | 0)) {
     break label$1
    }
    return !$2 | 0;
   }
   return ($2 ? 3 : 2) | 0;
  }
  return 4 | 0;
 }
 
 function alloc__raw_vec__RawVec_T_2cA___dealloc_buffer__hcfc71f822a24d45c($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  global$0 = $1;
  alloc__raw_vec__RawVec_T_2cA___current_layout__hd7e0f89a9cfe4d01($1 + 8 | 0 | 0, $0 | 0);
  label$1 : {
   $2 = HEAP32[($1 + 12 | 0) >> 2] | 0;
   if (!$2) {
    break label$1
   }
   __rust_dealloc(HEAP32[$0 >> 2] | 0 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0, $2 | 0);
  }
  global$0 = $1 + 16 | 0;
 }
 
 function alloc__raw_vec__RawVec_T_2cA___dealloc_buffer__hd25fde2ffd6d2603($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  global$0 = $1;
  alloc__raw_vec__RawVec_T_2cA___current_layout__h05114737530fc81c($1 + 8 | 0 | 0, $0 | 0);
  label$1 : {
   $2 = HEAP32[($1 + 12 | 0) >> 2] | 0;
   if (!$2) {
    break label$1
   }
   __rust_dealloc(HEAP32[$0 >> 2] | 0 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0, $2 | 0);
  }
  global$0 = $1 + 16 | 0;
 }
 
 function std__thread__local__LocalKey_T___with__h38aea667dce004be($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $8 = 0, $2 = 0, $2$hi = 0, $15 = 0;
  label$1 : {
   $1 = FUNCTION_TABLE[HEAP32[$1 >> 2] | 0]() | 0;
   if (!$1) {
    break label$1
   }
   $8 = $1;
   i64toi32_i32$2 = $1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $2 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   i64toi32_i32$2 = $8;
   HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$4;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
   i64toi32_i32$1 = $1;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
   $15 = i64toi32_i32$5;
   i64toi32_i32$5 = $0;
   HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $15;
   HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   HEAP32[i64toi32_i32$5 >> 2] = $2;
   HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$2;
   return;
  }
  core__result__unwrap_failed__he4d11f7ba3a5767f(1050264 | 0, 57 | 0);
  abort();
 }
 
 function $f32_20as_20core__num__dec2flt__rawfp__RawFloat___unpack__haddc0a4db1e502dc($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $2 = 0, $3 = 0, i64toi32_i32$0 = 0;
  $2 = (wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(0));
  $3 = ($2 >>> 23 | 0) & 255 | 0;
  HEAP16[($0 + 8 | 0) >> 1] = $3 + -150 | 0;
  $2 = $2 & 8388607 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[$0 >> 2] = $3 ? $2 | 8388608 | 0 : $2 << 1 | 0;
  HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function node_removeChildAtIndex($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    if (HEAP32[$0 >> 2] | 0) {
     break label$1
    }
    HEAP32[$0 >> 2] = -1;
    stretch_layout__Node__remove_child_at_index__h2afdb0fdce240969($0 + 4 | 0 | 0, $1 | 0);
    HEAP32[$0 >> 2] = 0;
    $T_20as_20wasm_bindgen__convert__traits__ReturnWasmAbi___return_abi__h2e101204225ac678();
    return;
   }
   wasm_bindgen____rt__throw_null__h3f3e0f774e705662();
   abort();
  }
  wasm_bindgen____rt__borrow_fail__h1790ad2c17b5cd84();
  abort();
 }
 
 function core__num__dec2flt__rawfp__encode_normal__h79788dc1a919ce5b($0, $0$hi, $1) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $11 = 0, $12 = 0, $13 = 0, $7$hi = 0, $9 = 0, $9$hi = 0;
  label$1 : {
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = $1 + 150 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $11 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $11 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   i64toi32_i32$0 = $11;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $12 = i64toi32_i32$1 >> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >> i64toi32_i32$4 | 0;
    $12 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   i64toi32_i32$1 = $12;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 23;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $13 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $13 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = -8388609;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   $9 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   $9$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$0 = $13;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$3 = $9;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $0 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
   $0$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $0;
   i64toi32_i32$0 = 1;
   i64toi32_i32$3 = 0;
   if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$1 = $0$hi;
   return Math_fround(Math_fround($f32_20as_20core__num__dec2flt__rawfp__RawFloat___from_bits__h063701ddf1fd73bc($0 | 0)));
  }
  core__num__dec2flt__rawfp__encode_normal___7b_7bclosure_7d_7d__h2190c468b17785a6();
  abort();
 }
 
 function __wbindgen_malloc($0) {
  $0 = $0 | 0;
  label$1 : {
   if ($0 >>> 0 > -4 >>> 0) {
    break label$1
   }
   label$2 : {
    if (!$0) {
     break label$2
    }
    $0 = __rust_alloc($0 | 0, ($0 >>> 0 < -3 >>> 0) << 2 | 0 | 0) | 0;
    if (!$0) {
     break label$1
    }
    return $0 | 0;
   }
   return 4 | 0;
  }
  wasm_bindgen____rt__malloc_failure__h8b99e1b66c693391();
  abort();
 }
 
 function memcpy($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  label$1 : {
   if (!$2) {
    break label$1
   }
   $3 = $0;
   label$2 : while (1) {
    HEAP8[$3 >> 0] = HEAPU8[$1 >> 0] | 0;
    $3 = $3 + 1 | 0;
    $1 = $1 + 1 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0 | 0;
 }
 
 function $stretch_layout__Allocator_20as_20wasm_bindgen__convert__traits__FromWasmAbi___from_abi__hb6f22a877e0ac8fb($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    if (HEAP32[$0 >> 2] | 0) {
     break label$1
    }
    HEAP32[$0 >> 2] = 0;
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    __rust_dealloc($0 | 0, 8 | 0, 4 | 0);
    return $1 | 0;
   }
   wasm_bindgen____rt__throw_null__h3f3e0f774e705662();
   abort();
  }
  wasm_bindgen____rt__borrow_fail__h1790ad2c17b5cd84();
  abort();
 }
 
 function node_markDirty($0) {
  $0 = $0 | 0;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    if (HEAP32[$0 >> 2] | 0) {
     break label$1
    }
    HEAP32[$0 >> 2] = -1;
    stretch_layout__Node__mark_dirty__h3a05b794bae86814($0 + 4 | 0 | 0);
    HEAP32[$0 >> 2] = 0;
    $T_20as_20wasm_bindgen__convert__traits__ReturnWasmAbi___return_abi__h2e101204225ac678();
    return;
   }
   wasm_bindgen____rt__throw_null__h3f3e0f774e705662();
   abort();
  }
  wasm_bindgen____rt__borrow_fail__h1790ad2c17b5cd84();
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___reserve__hba7a32ad1439175e($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  label$1 : {
   $0 = (alloc__raw_vec__RawVec_T_2cA___reserve_internal__h8d71322955e7b7f1($0 | 0, $1 | 0, $2 | 0, 1 | 0, 1 | 0) | 0) & 255 | 0;
   if (($0 | 0) != (2 | 0)) {
    break label$1
   }
   return;
  }
  label$2 : {
   if ($0 & 1 | 0) {
    break label$2
   }
   alloc__raw_vec__capacity_overflow__he79b434a8a95c170();
   abort();
  }
  core__panicking__panic__h2d0bc53a963fb996(1049304 | 0);
  abort();
 }
 
 function core__num__dec2flt__rawfp__next_float__h96c2fc47f7b351c4($0) {
  $0 = Math_fround($0);
  var $1 = 0;
  label$1 : {
   label$2 : {
    $1 = (core__f32___impl_20f32___classify__h2cc2893972a149fc(Math_fround($0)) | 0) & 255 | 0;
    if (($1 | 0) == (1 | 0)) {
     break label$2
    }
    if (!$1) {
     break label$1
    }
    return Math_fround(Math_fround($f32_20as_20core__num__dec2flt__rawfp__RawFloat___from_bits__h063701ddf1fd73bc(($f32_20as_20core__num__dec2flt__rawfp__RawFloat___to_bits__hbde4fe053412ec46(Math_fround($0)) | 0) + 1 | 0 | 0)));
   }
   return Math_fround(Math_fround(infinity));
  }
  core__panicking__panic__h2d0bc53a963fb996(1049388 | 0);
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___reserve__h04586cd83aef0f94($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  label$1 : {
   $0 = (alloc__raw_vec__RawVec_T_2cA___reserve_internal__h38be8ea75ce775a9($0 | 0, $1 | 0, $2 | 0, 1 | 0, 1 | 0) | 0) & 255 | 0;
   if (($0 | 0) != (2 | 0)) {
    break label$1
   }
   return;
  }
  label$2 : {
   if ($0 & 1 | 0) {
    break label$2
   }
   alloc__raw_vec__capacity_overflow__he79b434a8a95c170();
   abort();
  }
  core__panicking__panic__h2d0bc53a963fb996(1049996 | 0);
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___reserve__h07876202a410c73d($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  label$1 : {
   $0 = (alloc__raw_vec__RawVec_T_2cA___reserve_internal__h34e7ba366acde3b7($0 | 0, $1 | 0, $2 | 0, 1 | 0, 1 | 0) | 0) & 255 | 0;
   if (($0 | 0) != (2 | 0)) {
    break label$1
   }
   return;
  }
  label$2 : {
   if ($0 & 1 | 0) {
    break label$2
   }
   alloc__raw_vec__capacity_overflow__he79b434a8a95c170();
   abort();
  }
  core__panicking__panic__h2d0bc53a963fb996(1049996 | 0);
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___reserve__h33b8ba1386cb2481($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  label$1 : {
   $0 = (alloc__raw_vec__RawVec_T_2cA___reserve_internal__hc24c156880a121cf($0 | 0, $1 | 0, $2 | 0, 1 | 0, 1 | 0) | 0) & 255 | 0;
   if (($0 | 0) != (2 | 0)) {
    break label$1
   }
   return;
  }
  label$2 : {
   if ($0 & 1 | 0) {
    break label$2
   }
   alloc__raw_vec__capacity_overflow__he79b434a8a95c170();
   abort();
  }
  core__panicking__panic__h2d0bc53a963fb996(1049996 | 0);
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___reserve__h42db747f50019838($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  label$1 : {
   $0 = (alloc__raw_vec__RawVec_T_2cA___reserve_internal__hf7d6cad4b7752ba5($0 | 0, $1 | 0, $2 | 0, 1 | 0, 1 | 0) | 0) & 255 | 0;
   if (($0 | 0) != (2 | 0)) {
    break label$1
   }
   return;
  }
  label$2 : {
   if ($0 & 1 | 0) {
    break label$2
   }
   alloc__raw_vec__capacity_overflow__he79b434a8a95c170();
   abort();
  }
  core__panicking__panic__h2d0bc53a963fb996(1049996 | 0);
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___reserve__h47fecbc084037479($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  label$1 : {
   $0 = (alloc__raw_vec__RawVec_T_2cA___reserve_internal__h23e69790bdb54470($0 | 0, $1 | 0, $2 | 0, 1 | 0, 1 | 0) | 0) & 255 | 0;
   if (($0 | 0) != (2 | 0)) {
    break label$1
   }
   return;
  }
  label$2 : {
   if ($0 & 1 | 0) {
    break label$2
   }
   alloc__raw_vec__capacity_overflow__he79b434a8a95c170();
   abort();
  }
  core__panicking__panic__h2d0bc53a963fb996(1049996 | 0);
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___reserve__h557e4ac64630f5df($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  label$1 : {
   $0 = (alloc__raw_vec__RawVec_T_2cA___reserve_internal__ha90229295c720c3a($0 | 0, $1 | 0, $2 | 0, 1 | 0, 1 | 0) | 0) & 255 | 0;
   if (($0 | 0) != (2 | 0)) {
    break label$1
   }
   return;
  }
  label$2 : {
   if ($0 & 1 | 0) {
    break label$2
   }
   alloc__raw_vec__capacity_overflow__he79b434a8a95c170();
   abort();
  }
  core__panicking__panic__h2d0bc53a963fb996(1049996 | 0);
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___reserve__h73864728c23965ff($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  label$1 : {
   $0 = (alloc__raw_vec__RawVec_T_2cA___reserve_internal__h57ea287696751fc9($0 | 0, $1 | 0, $2 | 0, 1 | 0, 1 | 0) | 0) & 255 | 0;
   if (($0 | 0) != (2 | 0)) {
    break label$1
   }
   return;
  }
  label$2 : {
   if ($0 & 1 | 0) {
    break label$2
   }
   alloc__raw_vec__capacity_overflow__he79b434a8a95c170();
   abort();
  }
  core__panicking__panic__h2d0bc53a963fb996(1049996 | 0);
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___reserve__h7ab8fdf54bef539a($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  label$1 : {
   $0 = (alloc__raw_vec__RawVec_T_2cA___reserve_internal__hd2bb2e4f3ce060f5($0 | 0, $1 | 0, $2 | 0, 1 | 0, 1 | 0) | 0) & 255 | 0;
   if (($0 | 0) != (2 | 0)) {
    break label$1
   }
   return;
  }
  label$2 : {
   if ($0 & 1 | 0) {
    break label$2
   }
   alloc__raw_vec__capacity_overflow__he79b434a8a95c170();
   abort();
  }
  core__panicking__panic__h2d0bc53a963fb996(1049996 | 0);
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___reserve__hfa218c9029d6afc5($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  label$1 : {
   $0 = (alloc__raw_vec__RawVec_T_2cA___reserve_internal__hb5d6fb65190ec48a($0 | 0, $1 | 0, $2 | 0, 1 | 0, 1 | 0) | 0) & 255 | 0;
   if (($0 | 0) != (2 | 0)) {
    break label$1
   }
   return;
  }
  label$2 : {
   if ($0 & 1 | 0) {
    break label$2
   }
   alloc__raw_vec__capacity_overflow__he79b434a8a95c170();
   abort();
  }
  core__panicking__panic__h2d0bc53a963fb996(1049996 | 0);
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___reserve__hfe9b1a6cb252d78f($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  label$1 : {
   $0 = (alloc__raw_vec__RawVec_T_2cA___reserve_internal__hd3d9b523fde6f58f($0 | 0, $1 | 0, $2 | 0, 1 | 0, 1 | 0) | 0) & 255 | 0;
   if (($0 | 0) != (2 | 0)) {
    break label$1
   }
   return;
  }
  label$2 : {
   if ($0 & 1 | 0) {
    break label$2
   }
   alloc__raw_vec__capacity_overflow__he79b434a8a95c170();
   abort();
  }
  core__panicking__panic__h2d0bc53a963fb996(1049996 | 0);
  abort();
 }
 
 function core__ptr__real_drop_in_place__hd96d6eb7b4e9ed5f($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  label$1 : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (!$1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0]($1);
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
   if (!$2) {
    break label$1
   }
   __rust_dealloc(HEAP32[$0 >> 2] | 0 | 0, $2 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0);
  }
 }
 
 function core__ptr__real_drop_in_place__hf3551a957a201778($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  label$1 : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (!$1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0]($1);
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
   if (!$2) {
    break label$1
   }
   __rust_dealloc(HEAP32[$0 >> 2] | 0 | 0, $2 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0);
  }
 }
 
 function $_T_20as_20core__fmt__Debug___fmt__h5497d5b9464b9cc4($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = HEAP32[$0 >> 2] | 0;
  label$1 : {
   if (!(core__fmt__Formatter__debug_lower_hex__hdc1f7971328c2d95($1 | 0) | 0)) {
    break label$1
   }
   return core__fmt__num___impl_20core__fmt__LowerHex_20for_20i32___fmt__hc0126a1e228a0495($0 | 0, $1 | 0) | 0 | 0;
  }
  label$2 : {
   if (!(core__fmt__Formatter__debug_upper_hex__h85fb22196d72232b($1 | 0) | 0)) {
    break label$2
   }
   return core__fmt__num___impl_20core__fmt__UpperHex_20for_20i32___fmt__hde8b8630775a2fae($0 | 0, $1 | 0) | 0 | 0;
  }
  return core__fmt__num__imp___impl_20core__fmt__Display_20for_20u32___fmt__h7aa4e3c5490ccb71($0 | 0, $1 | 0) | 0 | 0;
 }
 
 function $_T_20as_20core__fmt__Debug___fmt__h7247086aec5d334f($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = HEAP32[$0 >> 2] | 0;
  label$1 : {
   if (!(core__fmt__Formatter__debug_lower_hex__hdc1f7971328c2d95($1 | 0) | 0)) {
    break label$1
   }
   return core__fmt__num___impl_20core__fmt__LowerHex_20for_20i32___fmt__hc0126a1e228a0495($0 | 0, $1 | 0) | 0 | 0;
  }
  label$2 : {
   if (!(core__fmt__Formatter__debug_upper_hex__h85fb22196d72232b($1 | 0) | 0)) {
    break label$2
   }
   return core__fmt__num___impl_20core__fmt__UpperHex_20for_20i32___fmt__hde8b8630775a2fae($0 | 0, $1 | 0) | 0 | 0;
  }
  return core__fmt__num__imp___impl_20core__fmt__Display_20for_20u32___fmt__h7aa4e3c5490ccb71($0 | 0, $1 | 0) | 0 | 0;
 }
 
 function $_T_20as_20core__fmt__Debug___fmt__h067baa27046e12ea($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = HEAP32[$0 >> 2] | 0;
  label$1 : {
   if (!(core__fmt__Formatter__debug_lower_hex__hdc1f7971328c2d95($1 | 0) | 0)) {
    break label$1
   }
   return core__fmt__num___impl_20core__fmt__LowerHex_20for_20i32___fmt__hc0126a1e228a0495($0 | 0, $1 | 0) | 0 | 0;
  }
  label$2 : {
   if (!(core__fmt__Formatter__debug_upper_hex__h85fb22196d72232b($1 | 0) | 0)) {
    break label$2
   }
   return core__fmt__num___impl_20core__fmt__UpperHex_20for_20i32___fmt__hde8b8630775a2fae($0 | 0, $1 | 0) | 0 | 0;
  }
  return core__fmt__num__imp___impl_20core__fmt__Display_20for_20u32___fmt__h7aa4e3c5490ccb71($0 | 0, $1 | 0) | 0 | 0;
 }
 
 function $_T_20as_20core__fmt__Debug___fmt__haf557208929af496($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = HEAP32[$0 >> 2] | 0;
  label$1 : {
   if (!(core__fmt__Formatter__debug_lower_hex__hdc1f7971328c2d95($1 | 0) | 0)) {
    break label$1
   }
   return core__fmt__num___impl_20core__fmt__LowerHex_20for_20i8___fmt__h6285e90692b92d9d($0 | 0, $1 | 0) | 0 | 0;
  }
  label$2 : {
   if (!(core__fmt__Formatter__debug_upper_hex__h85fb22196d72232b($1 | 0) | 0)) {
    break label$2
   }
   return core__fmt__num___impl_20core__fmt__UpperHex_20for_20i8___fmt__h0d6d3232e6cceb39($0 | 0, $1 | 0) | 0 | 0;
  }
  return core__fmt__num__imp___impl_20core__fmt__Display_20for_20u8___fmt__h26fb732ae7163ee6($0 | 0, $1 | 0) | 0 | 0;
 }
 
 function __wbg_get_layout_height($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    $1 = HEAP32[$0 >> 2] | 0;
    if (($1 | 0) == (-1 | 0)) {
     break label$1
    }
    HEAP32[$0 >> 2] = $1;
    return Math_fround(Math_fround(HEAPF32[($0 + 8 | 0) >> 2]));
   }
   wasm_bindgen____rt__throw_null__h3f3e0f774e705662();
   abort();
  }
  wasm_bindgen____rt__borrow_fail__h1790ad2c17b5cd84();
  abort();
 }
 
 function __wbg_get_layout_x($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    $1 = HEAP32[$0 >> 2] | 0;
    if (($1 | 0) == (-1 | 0)) {
     break label$1
    }
    HEAP32[$0 >> 2] = $1;
    return Math_fround(Math_fround(HEAPF32[($0 + 12 | 0) >> 2]));
   }
   wasm_bindgen____rt__throw_null__h3f3e0f774e705662();
   abort();
  }
  wasm_bindgen____rt__borrow_fail__h1790ad2c17b5cd84();
  abort();
 }
 
 function __wbg_get_layout_y($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    $1 = HEAP32[$0 >> 2] | 0;
    if (($1 | 0) == (-1 | 0)) {
     break label$1
    }
    HEAP32[$0 >> 2] = $1;
    return Math_fround(Math_fround(HEAPF32[($0 + 16 | 0) >> 2]));
   }
   wasm_bindgen____rt__throw_null__h3f3e0f774e705662();
   abort();
  }
  wasm_bindgen____rt__borrow_fail__h1790ad2c17b5cd84();
  abort();
 }
 
 function __wbg_get_layout_childCount($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    $1 = HEAP32[$0 >> 2] | 0;
    if (($1 | 0) == (-1 | 0)) {
     break label$1
    }
    HEAP32[$0 >> 2] = $1;
    return HEAP32[($0 + 20 | 0) >> 2] | 0 | 0;
   }
   wasm_bindgen____rt__throw_null__h3f3e0f774e705662();
   abort();
  }
  wasm_bindgen____rt__borrow_fail__h1790ad2c17b5cd84();
  abort();
 }
 
 function __wbg_node_free($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = global$0 - 32 | 0;
  global$0 = $1;
  $stretch_layout__Node_20as_20wasm_bindgen__convert__traits__FromWasmAbi___from_abi__h96859e12f99a66f2($1 | 0, $0 | 0);
  $alloc__rc__Rc_T__20as_20core__ops__drop__Drop___drop__h4f602f53ef47b86a($1 | 0);
  label$1 : {
   $0 = HEAP32[($1 + 20 | 0) >> 2] | 0;
   if ($0 >>> 0 < 36 >>> 0) {
    break label$1
   }
   __wbindgen_object_drop_ref($0 | 0);
  }
  global$0 = $1 + 32 | 0;
 }
 
 function __wbg_get_node_childCount($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    $1 = HEAP32[$0 >> 2] | 0;
    if (($1 | 0) == (-1 | 0)) {
     break label$1
    }
    HEAP32[$0 >> 2] = $1;
    return HEAP32[($0 + 28 | 0) >> 2] | 0 | 0;
   }
   wasm_bindgen____rt__throw_null__h3f3e0f774e705662();
   abort();
  }
  wasm_bindgen____rt__borrow_fail__h1790ad2c17b5cd84();
  abort();
 }
 
 function alloc__rc__Rc_T___new__hbbb5b15a481b180a($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   $1 = __rust_alloc(160 | 0, 8 | 0) | 0;
   if (!$1) {
    break label$1
   }
   HEAP32[$1 >> 2] = 1;
   HEAP32[($1 + 4 | 0) >> 2] = 1;
   memcpy($1 + 8 | 0 | 0, $0 | 0, 152 | 0) | 0;
   return $1 | 0;
  }
  alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83(160 | 0, 8 | 0);
  abort();
 }
 
 function std__sync__condvar__Condvar__verify__h4afacbcb46c33d4f($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  HEAP32[($0 + 4 | 0) >> 2] = $2 ? $2 : $1;
  label$1 : {
   label$2 : {
    if (!$2) {
     break label$2
    }
    if (($2 | 0) != ($1 | 0)) {
     break label$1
    }
   }
   return;
  }
  std__panicking__begin_panic__haa7e8f73e4c17ace(1053060 | 0, 54 | 0, 1053044 | 0);
  abort();
 }
 
 function $std__thread__local__AccessError_20as_20core__fmt__Debug___fmt__h18a95f5b7790d1ed($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = global$0 - 16 | 0;
  global$0 = $2;
  core__fmt__Formatter__debug_struct__h5df6422ae6e44bef($2 + 8 | 0 | 0, $1 | 0, 1052716 | 0, 11 | 0);
  $1 = core__fmt__builders__DebugStruct__finish__hc40a0d34053a01e6($2 + 8 | 0 | 0) | 0;
  global$0 = $2 + 16 | 0;
  return $1 | 0;
 }
 
 function std__panicking__panicking__hf26bc0dde81b7530() {
  var $0 = 0, i64toi32_i32$1 = 0;
  $0 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[(0 + 1066864 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    $0 = HEAP32[(0 + 1066868 | 0) >> 2] | 0;
    break label$1;
   }
   i64toi32_i32$1 = 0;
   HEAP32[(i64toi32_i32$1 + 1066864 | 0) >> 2] = 1;
   HEAP32[(i64toi32_i32$1 + 1066868 | 0) >> 2] = 0;
  }
  HEAP32[(0 + 1066868 | 0) >> 2] = $0;
  return ($0 | 0) != (0 | 0) | 0;
 }
 
 function core__fmt__Formatter__debug_tuple__h9b1f009ef608acf0($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[((HEAP32[($1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[($1 + 24 | 0) >> 2] | 0, $2, $3) | 0), HEAP8[(wasm2js_i32$0 + 8 | 0) >> 0] = wasm2js_i32$1;
  HEAP32[$0 >> 2] = $1;
  HEAP8[($0 + 9 | 0) >> 0] = !$3;
  HEAP32[($0 + 4 | 0) >> 2] = 0;
 }
 
 function __wbg_get_layout_width($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    $1 = HEAP32[$0 >> 2] | 0;
    if (($1 | 0) == (-1 | 0)) {
     break label$1
    }
    HEAP32[$0 >> 2] = $1;
    return Math_fround(Math_fround(HEAPF32[($0 + 4 | 0) >> 2]));
   }
   wasm_bindgen____rt__throw_null__h3f3e0f774e705662();
   abort();
  }
  wasm_bindgen____rt__borrow_fail__h1790ad2c17b5cd84();
  abort();
 }
 
 function core__slice___impl_20core__cmp__PartialEq__5bB_5d__20for_20_5bA_5d___eq__hd7ee0fb818c13258($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = 0;
  label$1 : {
   label$2 : {
    if (($1 | 0) != ($3 | 0)) {
     break label$2
    }
    if (($0 | 0) == ($2 | 0)) {
     break label$1
    }
    $4 = !(memcmp($0 | 0, $2 | 0, $1 | 0) | 0);
   }
   return $4 | 0;
  }
  return 1 | 0;
 }
 
 function $_mut_20W_20as_20core__fmt__Write___write_str__hbf7de4ae56983baf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $0 = HEAP32[$0 >> 2] | 0;
  alloc__vec__Vec_T___reserve__hc0f95e3f359a8226($0 | 0, $2 | 0);
  $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  HEAP32[($0 + 8 | 0) >> 2] = $3 + $2 | 0;
  memcpy($3 + (HEAP32[$0 >> 2] | 0) | 0 | 0, $1 | 0, $2 | 0) | 0;
  return 0 | 0;
 }
 
 function core__fmt__Formatter__debug_struct__h5df6422ae6e44bef($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $2 = FUNCTION_TABLE[HEAP32[((HEAP32[($1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[($1 + 24 | 0) >> 2] | 0, $2, $3) | 0;
  HEAP8[($0 + 5 | 0) >> 0] = 0;
  HEAP8[($0 + 4 | 0) >> 0] = $2;
  HEAP32[$0 >> 2] = $1;
 }
 
 function core__fmt__Formatter__debug_list__h6c42b170021f5d22($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = FUNCTION_TABLE[HEAP32[((HEAP32[($1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[($1 + 24 | 0) >> 2] | 0, 1061299, 1) | 0;
  HEAP8[($0 + 5 | 0) >> 0] = 0;
  HEAP8[($0 + 4 | 0) >> 0] = $2;
  HEAP32[$0 >> 2] = $1;
 }
 
 function memset($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  label$1 : {
   if (!$2) {
    break label$1
   }
   $3 = $0;
   label$2 : while (1) {
    HEAP8[$3 >> 0] = $1;
    $3 = $3 + 1 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0 | 0;
 }
 
 function $stretch_layout__Allocator_20as_20wasm_bindgen__convert__traits__IntoWasmAbi___into_abi__h37b07a46002ab954($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   $1 = __rust_alloc(8 | 0, 4 | 0) | 0;
   if (!$1) {
    break label$1
   }
   HEAP32[($1 + 4 | 0) >> 2] = $0;
   HEAP32[$1 >> 2] = 0;
   return $1 | 0;
  }
  alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83(8 | 0, 4 | 0);
  abort();
 }
 
 function std__panicking__begin_panic__h10b561c1884f6b9b($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $1;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  std__panicking__rust_panic_with_hook__h6fe9d3817474ba5a($3 + 8 | 0 | 0, 1050348 | 0, 0 | 0, $2 | 0);
  abort();
 }
 
 function std__panicking__begin_panic__haa7e8f73e4c17ace($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $1;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  std__panicking__rust_panic_with_hook__h6fe9d3817474ba5a($3 + 8 | 0 | 0, 1053344 | 0, 0 | 0, $2 | 0);
  abort();
 }
 
 function core__fmt__builders__DebugList__finish__hd447885d2a726df2($0) {
  $0 = $0 | 0;
  label$1 : {
   if (!(HEAPU8[($0 + 4 | 0) >> 0] | 0)) {
    break label$1
   }
   return 1 | 0;
  }
  $0 = HEAP32[$0 >> 2] | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[($0 + 24 | 0) >> 2] | 0, 1061300, 1) | 0 | 0;
 }
 
 function core__ops__function__FnOnce__call_once_7b_7bvtable_shim_7d_7d__hb7c71f2c12c9b4fc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = global$0 - 16 | 0;
  global$0 = $2;
  HEAP32[($2 + 12 | 0) >> 2] = HEAP32[$0 >> 2] | 0;
  std__sync__once__Once__call_once___7b_7bclosure_7d_7d__h35251447e289969d($2 + 12 | 0 | 0, $1 | 0);
  global$0 = $2 + 16 | 0;
 }
 
 function core__num__dec2flt__bound_intermediate_digits__h2886e07128e9448a($0, $1, $1$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $4$hi = 0, $7 = 0, $7$hi = 0, $8 = 0, $8$hi = 0, $9 = 0, $9$hi = 0, $11 = 0, $11$hi = 0, $14 = 0, $14$hi = 0;
  i64toi32_i32$2 = $0 + 20 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = 0;
  $4 = i64toi32_i32$0;
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $0 + 12 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = 0;
  $7 = i64toi32_i32$1;
  $7$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$3 = $7;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $8 = i64toi32_i32$4;
  $8$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $1$hi;
  $9 = $1;
  $9$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$0 = 17;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$3 = $1;
  i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
  i64toi32_i32$4 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
  $11 = i64toi32_i32$1;
  $11$hi = i64toi32_i32$4;
  i64toi32_i32$4 = i64toi32_i32$2;
  i64toi32_i32$5 = i64toi32_i32$3;
  i64toi32_i32$0 = -1;
  i64toi32_i32$3 = -1;
  if ((i64toi32_i32$4 | 0) > (i64toi32_i32$0 | 0)) {
   $21 = 1
  } else {
   if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$0 | 0)) {
    if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$3 >>> 0) {
     $22 = 0
    } else {
     $22 = 1
    }
    $23 = $22;
   } else {
    $23 = 0
   }
   $21 = $23;
  }
  i64toi32_i32$2 = $21;
  i64toi32_i32$5 = $9$hi;
  i64toi32_i32$4 = $11$hi;
  i64toi32_i32$0 = i64toi32_i32$2 ? $9 : $11;
  i64toi32_i32$3 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$4;
  $14 = i64toi32_i32$0;
  $14$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $8$hi;
  i64toi32_i32$2 = $8;
  i64toi32_i32$0 = $14$hi;
  i64toi32_i32$5 = $14;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
  i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$4 | 0;
 }
 
 function __wbg_allocator_free($0) {
  $0 = $0 | 0;
  var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1 = global$0 - 16 | 0;
  global$0 = $1;
  (wasm2js_i32$0 = $1, wasm2js_i32$1 = $stretch_layout__Allocator_20as_20wasm_bindgen__convert__traits__FromWasmAbi___from_abi__hb6f22a877e0ac8fb($0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  $alloc__rc__Rc_T__20as_20core__ops__drop__Drop___drop__h4f602f53ef47b86a($1 + 12 | 0 | 0);
  global$0 = $1 + 16 | 0;
 }
 
 function wasm_bindgen__convert__closures__invoke4_mut__hc81eb72865ab4c30($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   return FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0]($0, $2, $3, $4, $5) | 0 | 0;
  }
  wasm_bindgen__throw_str__h68bf8c0365a67f0d(1051972 | 0, 48 | 0);
  abort();
 }
 
 function wasm_bindgen____rt__take_last_exception__h5960da7d828407e4($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, $1 = 0, $2 = 0;
  $1 = HEAP32[(0 + 1066352 | 0) >> 2] | 0;
  $2 = HEAP32[(0 + 1066356 | 0) >> 2] | 0;
  i64toi32_i32$1 = 0;
  HEAP32[(i64toi32_i32$1 + 1066352 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 1066356 | 0) >> 2] = 0;
  HEAP32[($0 + 4 | 0) >> 2] = $2;
  HEAP32[$0 >> 2] = ($1 | 0) == (1 | 0);
 }
 
 function __wbindgen_realloc($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  label$1 : {
   if ($1 >>> 0 > -4 >>> 0) {
    break label$1
   }
   $1 = __rust_realloc($0 | 0, $1 | 0, 4 | 0, $2 | 0) | 0;
   if (!$1) {
    break label$1
   }
   return $1 | 0;
  }
  wasm_bindgen____rt__malloc_failure__h8b99e1b66c693391();
  abort();
 }
 
 function core__ptr__real_drop_in_place__h9607bab7a262d57f($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if (!$1) {
    break label$1
   }
   $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   if (!$0) {
    break label$1
   }
   __rust_dealloc($1 | 0, $0 | 0, 1 | 0);
  }
 }
 
 function rust_panic($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = global$0 - 16 | 0;
  global$0 = $2;
  HEAP32[($2 + 12 | 0) >> 2] = $1;
  HEAP32[($2 + 8 | 0) >> 2] = $0;
  __rust_start_panic($2 + 8 | 0 | 0) | 0;
  abort();
 }
 
 function $f32_20as_20core__num__dec2flt__rawfp__RawFloat___short_fast_pow10__h2cbe7cd7345f7d25($0) {
  $0 = $0 | 0;
  label$1 : {
   if ($0 >>> 0 > 10 >>> 0) {
    break label$1
   }
   return Math_fround(Math_fround(HEAPF32[(($0 << 2 | 0) + 1060140 | 0) >> 2]));
  }
  core__panicking__panic_bounds_check__h0537ade040df571e(1060224 | 0, $0 | 0, 11 | 0);
  abort();
 }
 
 function wasm_bindgen__convert__closures__invoke3_mut__h0292682fbe5dc41c($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = $3 | 0;
  $4 = $4 | 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0]($0, $2, $3, $4);
   return;
  }
  wasm_bindgen__throw_str__h68bf8c0365a67f0d(1051972 | 0, 48 | 0);
  abort();
 }
 
 function wasm_bindgen__convert__closures__invoke3_mut__h0396848a953c5867($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0]($0, $2, $3, $4);
   return;
  }
  wasm_bindgen__throw_str__h68bf8c0365a67f0d(1051972 | 0, 48 | 0);
  abort();
 }
 
 function wasm_bindgen__convert__closures__invoke3_mut__h275cc9cfc6ce7d93($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0]($0, $2, $3, $4);
   return;
  }
  wasm_bindgen__throw_str__h68bf8c0365a67f0d(1051972 | 0, 48 | 0);
  abort();
 }
 
 function wasm_bindgen__convert__closures__invoke3_mut__h298e6d31cbf27966($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0]($0, $2, $3, $4);
   return;
  }
  wasm_bindgen__throw_str__h68bf8c0365a67f0d(1051972 | 0, 48 | 0);
  abort();
 }
 
 function wasm_bindgen__convert__closures__invoke3_mut__h2ec2cc86d20a42c3($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0]($0, $2, $3, $4);
   return;
  }
  wasm_bindgen__throw_str__h68bf8c0365a67f0d(1051972 | 0, 48 | 0);
  abort();
 }
 
 function wasm_bindgen__convert__closures__invoke3_mut__h5467fa067dfc1f31($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0]($0, $2, $3, $4);
   return;
  }
  wasm_bindgen__throw_str__h68bf8c0365a67f0d(1051972 | 0, 48 | 0);
  abort();
 }
 
 function wasm_bindgen__convert__closures__invoke3_mut__h61ec86bed10f2427($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0]($0, $2, $3, $4);
   return;
  }
  wasm_bindgen__throw_str__h68bf8c0365a67f0d(1051972 | 0, 48 | 0);
  abort();
 }
 
 function wasm_bindgen__convert__closures__invoke3_mut__h73f64ef77d2c50dd($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   return FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0]($0, $2, $3, $4) | 0 | 0;
  }
  wasm_bindgen__throw_str__h68bf8c0365a67f0d(1051972 | 0, 48 | 0);
  abort();
 }
 
 function wasm_bindgen__convert__closures__invoke3_mut__h7cb4ddd9eab01bb2($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0]($0, $2, $3, $4);
   return;
  }
  wasm_bindgen__throw_str__h68bf8c0365a67f0d(1051972 | 0, 48 | 0);
  abort();
 }
 
 function wasm_bindgen__convert__closures__invoke3_mut__h9ddcdc506a2a48bb($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   return FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0]($0, $2, $3, $4) | 0 | 0;
  }
  wasm_bindgen__throw_str__h68bf8c0365a67f0d(1051972 | 0, 48 | 0);
  abort();
 }
 
 function wasm_bindgen__convert__closures__invoke3_mut__he318bc4d52b27969($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0]($0, $2, $3, $4);
   return;
  }
  wasm_bindgen__throw_str__h68bf8c0365a67f0d(1051972 | 0, 48 | 0);
  abort();
 }
 
 function wasm_bindgen__convert__closures__invoke3_mut__he6024989ac980a4d($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = $4 | 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0]($0, $2, $3, $4);
   return;
  }
  wasm_bindgen__throw_str__h68bf8c0365a67f0d(1051972 | 0, 48 | 0);
  abort();
 }
 
 function wasm_bindgen__convert__closures__invoke3_mut__he9f5ad844f49f7f0($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0]($0, $2, $3, $4);
   return;
  }
  wasm_bindgen__throw_str__h68bf8c0365a67f0d(1051972 | 0, 48 | 0);
  abort();
 }
 
 function std__collections__hash__map__RandomState__new__KEYS____getit__hace98a9e78dbc0fb() {
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 1066376 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 1066380 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (1 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 0;
   HEAP32[(i64toi32_i32$1 + 1066392 | 0) >> 2] = 2;
   HEAP32[(i64toi32_i32$1 + 1066396 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 0;
   HEAP32[(i64toi32_i32$1 + 1066384 | 0) >> 2] = 1;
   HEAP32[(i64toi32_i32$1 + 1066388 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 0;
   HEAP32[(i64toi32_i32$1 + 1066376 | 0) >> 2] = 1;
   HEAP32[(i64toi32_i32$1 + 1066380 | 0) >> 2] = i64toi32_i32$2;
  }
  return 1066384 | 0;
 }
 
 function $core__num__bignum__Big32x40_20as_20core__cmp__PartialEq___eq__h59a6aa076884368c($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  label$1 : {
   if (($0 | 0) == ($1 | 0)) {
    break label$1
   }
   return !(memcmp($0 + 4 | 0 | 0, $1 + 4 | 0 | 0, 160 | 0) | 0) | 0;
  }
  return 1 | 0;
 }
 
 function wasm_bindgen__convert__closures__invoke2_mut__h39a44678f402648e($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0]($0, $2, $3);
   return;
  }
  wasm_bindgen__throw_str__h68bf8c0365a67f0d(1051972 | 0, 48 | 0);
  abort();
 }
 
 function wasm_bindgen__convert__closures__invoke2_mut__he1db798f43a4f49a($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0]($0, $2, $3);
   return;
  }
  wasm_bindgen__throw_str__h68bf8c0365a67f0d(1051972 | 0, 48 | 0);
  abort();
 }
 
 function core__fmt__num__imp___impl_20core__fmt__Display_20for_20i16___fmt__h5e51fde45daf1962($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, $3$hi = 0, $17 = 0, $3 = 0, $18 = 0, $19 = 0, $20 = 0, $2 = 0, $2$hi = 0, $6 = 0, $6$hi = 0, $10$hi = 0, $12 = 0, $12$hi = 0;
  i64toi32_i32$2 = $0;
  i64toi32_i32$0 = HEAP16[i64toi32_i32$2 >> 1] | 0;
  i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
  $2 = i64toi32_i32$0;
  $2$hi = i64toi32_i32$1;
  $6 = i64toi32_i32$0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   $17 = i64toi32_i32$1 >> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$1 >> i64toi32_i32$4 | 0;
   $17 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $3 = $17;
  $3$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$1 = $6;
  i64toi32_i32$2 = $3$hi;
  i64toi32_i32$3 = $3;
  i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $10$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$5 = $10$hi;
  i64toi32_i32$0 = i64toi32_i32$4;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$3 = $3;
  i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
  $12 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$5 = $2;
  i64toi32_i32$0 = -1;
  i64toi32_i32$3 = -1;
  if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
   $18 = 1
  } else {
   if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
    if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$3 >>> 0) {
     $19 = 0
    } else {
     $19 = 1
    }
    $20 = $19;
   } else {
    $20 = 0
   }
   $18 = $20;
  }
  i64toi32_i32$5 = $12$hi;
  return core__fmt__num__imp__fmt_u64__h529ebc247831d1ee($12 | 0, i64toi32_i32$5 | 0, $18 | 0, $1 | 0) | 0 | 0;
 }
 
 function alloc__raw_vec__RawVec_T_2cA___current_layout__h05114737530fc81c($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
  HEAP32[$0 >> 2] = Math_imul($1, 288);
  HEAP32[($0 + 4 | 0) >> 2] = (($1 | 0) != (0 | 0)) << 2 | 0;
 }
 
 function alloc__raw_vec__RawVec_T_2cA___current_layout__hd7e0f89a9cfe4d01($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
  HEAP32[$0 >> 2] = Math_imul($1, 12);
  HEAP32[($0 + 4 | 0) >> 2] = (($1 | 0) != (0 | 0)) << 2 | 0;
 }
 
 function $std__panicking__begin_panic__PanicPayload_A__20as_20core__panic__BoxMeUp___get__h0a516cf5f4a51557($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = HEAP32[$1 >> 2] | 0;
  HEAP32[($0 + 4 | 0) >> 2] = $2 ? 1050368 : 1050384;
  HEAP32[$0 >> 2] = $2 ? $1 : 1050368;
 }
 
 function wasm_bindgen__convert__closures__invoke1_mut__h5fd464b913d2cb1b($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   return FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0]($0, $2) | 0 | 0;
  }
  wasm_bindgen__throw_str__h68bf8c0365a67f0d(1051972 | 0, 48 | 0);
  abort();
 }
 
 function wasm_bindgen__anyref__HEAP_SLAB____getit__hb7faca09688634b3() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   if (HEAP32[(0 + 1066332 | 0) >> 2] | 0) {
    break label$1
   }
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 1066344 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 1066348 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 1066336 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 1066340 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(0 + 1066332 | 0) >> 2] = 4;
  }
  return 1066332 | 0;
 }
 
 function __rdl_alloc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  label$1 : {
   if ((dlmalloc__dlmalloc__Dlmalloc__malloc_alignment__h676c9a04aa6da017(1066412 | 0) | 0) >>> 0 >= $1 >>> 0) {
    break label$1
   }
   return dlmalloc__dlmalloc__Dlmalloc__memalign__he461fff21ac8d1e2(1066412 | 0, $1 | 0, $0 | 0) | 0 | 0;
  }
  return dlmalloc__dlmalloc__Dlmalloc__malloc__haa66310b00a7bd6b(1066412 | 0, $0 | 0) | 0 | 0;
 }
 
 function $std__panicking__begin_panic__PanicPayload_A__20as_20core__panic__BoxMeUp___get__h9a801acfcc17125f($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = HEAP32[$1 >> 2] | 0;
  HEAP32[($0 + 4 | 0) >> 2] = $2 ? 1053364 : 1053380;
  HEAP32[$0 >> 2] = $2 ? $1 : 1052380;
 }
 
 function core__str__traits___impl_20core__slice__SliceIndex_str__20for_20core__ops__range__Range_usize____index___7b_7bclosure_7d_7d__hc5b52f0064ab9328($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = HEAP32[$0 >> 2] | 0;
  core__str__slice_error_fail__h65b601301310b052(HEAP32[$1 >> 2] | 0 | 0, HEAP32[($1 + 4 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($0 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0);
  abort();
 }
 
 function $alloc__raw_vec__RawVec_T_2cA__20as_20core__ops__drop__Drop___drop__h28a9fdb08e8b7be5($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if (!$1) {
    break label$1
   }
   __rust_dealloc(HEAP32[$0 >> 2] | 0 | 0, $1 << 3 | 0 | 0, 4 | 0);
  }
 }
 
 function $alloc__raw_vec__RawVec_T_2cA__20as_20core__ops__drop__Drop___drop__h499bd611a2c02584($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if (!$1) {
    break label$1
   }
   __rust_dealloc(HEAP32[$0 >> 2] | 0 | 0, $1 << 4 | 0 | 0, 4 | 0);
  }
 }
 
 function $alloc__raw_vec__RawVec_T_2cA__20as_20core__ops__drop__Drop___drop__h5edcdd299048036e($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if (!$1) {
    break label$1
   }
   __rust_dealloc(HEAP32[$0 >> 2] | 0 | 0, $1 << 2 | 0 | 0, 4 | 0);
  }
 }
 
 function core__num__bignum__Big32x40__from_small__h597a0b75ac140389($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[($0 + 4 | 0) >> 2] = $1;
  HEAP32[$0 >> 2] = 1;
  memset($0 + 8 | 0 | 0, 0 | 0, 156 | 0) | 0;
 }
 
 function $core__num__bignum__Big32x40_20as_20core__clone__Clone___clone__h6d9ab1cb70598592($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
  memcpy($0 + 4 | 0 | 0, $1 + 4 | 0 | 0, 160 | 0) | 0;
 }
 
 function core__num__dec2flt__rawfp__encode_subnormal__h6cdda8501f4182df($0, $0$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$1 = 0;
   if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & $0 >>> 0 > 8388607 >>> 0 | 0) | 0) {
    break label$1
   }
   return Math_fround(Math_fround($f32_20as_20core__num__dec2flt__rawfp__RawFloat___from_bits__h063701ddf1fd73bc($0 | 0)));
  }
  core__panicking__panic__h2d0bc53a963fb996(1049844 | 0);
  abort();
 }
 
 function alloc__string___impl_20core__convert__From_alloc__string__String__20for_20alloc__vec__Vec_u8____from__hc4f5d128a3241ca2($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4 = 0;
  i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
  $4 = i64toi32_i32$0;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $4;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = HEAP32[($1 + 8 | 0) >> 2] | 0;
 }
 
 function core__panic__Location__internal_constructor__h8fe3cc265367b40f($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  HEAP32[($0 + 12 | 0) >> 2] = $4;
  HEAP32[($0 + 8 | 0) >> 2] = $3;
  HEAP32[($0 + 4 | 0) >> 2] = $2;
  HEAP32[$0 >> 2] = $1;
 }
 
 function $alloc__raw_vec__RawVec_T_2cA__20as_20core__ops__drop__Drop___drop__h53f3d3b9bd11375e($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if (!$1) {
    break label$1
   }
   __rust_dealloc(HEAP32[$0 >> 2] | 0 | 0, $1 | 0, 1 | 0);
  }
 }
 
 function core__ptr__real_drop_in_place__h01c937f386cfaf38($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if (!$1) {
    break label$1
   }
   __rust_dealloc(HEAP32[$0 >> 2] | 0 | 0, $1 | 0, 1 | 0);
  }
 }
 
 function fminf($0, $1) {
  $0 = Math_fround($0);
  $1 = Math_fround($1);
  return Math_fround($1 != $1 ? $0 : $0 < $1 ? $0 : $1);
 }
 
 function fmaxf($0, $1) {
  $0 = Math_fround($0);
  $1 = Math_fround($1);
  return Math_fround($0 != $0 ? $1 : $0 < $1 ? $1 : $0);
 }
 
 function rust_oom($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = HEAP32[(0 + 1066360 | 0) >> 2] | 0;
  FUNCTION_TABLE[$2 ? $2 : 56]($0, $1);
  abort();
 }
 
 function $core__cell__BorrowError_20as_20core__fmt__Debug___fmt__h93a0698d28d7fdbe($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[($1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[($1 + 24 | 0) >> 2] | 0, 1060367, 11) | 0 | 0;
 }
 
 function $core__cell__BorrowMutError_20as_20core__fmt__Debug___fmt__h048798b77d59bbb7($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[($1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[($1 + 24 | 0) >> 2] | 0, 1060378, 14) | 0 | 0;
 }
 
 function core__ptr__real_drop_in_place__h2d71aab7a2e116e4($0) {
  $0 = $0 | 0;
  label$1 : {
   if (!(HEAP32[$0 >> 2] | 0)) {
    break label$1
   }
   $alloc__vec__Vec_T__20as_20core__ops__drop__Drop___drop__he16a4be602db4786($0 | 0);
   $alloc__raw_vec__RawVec_T_2cA__20as_20core__ops__drop__Drop___drop__h53f3d3b9bd11375e($0 | 0);
  }
 }
 
 function core__ptr__real_drop_in_place__ha80f016764af4bc9($0) {
  $0 = $0 | 0;
  label$1 : {
   $0 = HEAP32[$0 >> 2] | 0;
   if ($0 >>> 0 < 36 >>> 0) {
    break label$1
   }
   __wbindgen_object_drop_ref($0 | 0);
  }
 }
 
 function core__str__traits___impl_20core__slice__SliceIndex_str__20for_20core__ops__range__RangeTo_usize____index___7b_7bclosure_7d_7d__h28b5504032a55eb9($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  core__str__slice_error_fail__h65b601301310b052(HEAP32[$0 >> 2] | 0 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[$1 >> 2] | 0 | 0);
  abort();
 }
 
 function core__option__Option_T___unwrap__h066c49837ee94964($0) {
  $0 = $0 | 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   return $0 | 0;
  }
  core__panicking__panic__h2d0bc53a963fb996(1052488 | 0);
  abort();
 }
 
 function core__option__Option_T___unwrap__h0ec2f55b57c3d463($0) {
  $0 = $0 | 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   return $0 | 0;
  }
  core__panicking__panic__h2d0bc53a963fb996(1052488 | 0);
  abort();
 }
 
 function __rust_realloc($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  return __rdl_realloc($0 | 0, $1 | 0, $2 | 0, $3 | 0) | 0 | 0;
 }
 
 function $alloc__vec__Vec_T__20as_20core__ops__deref__DerefMut___deref_mut__h7c59fcd9bfa72311($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($1 + 8 | 0) >> 2] | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
 }
 
 function $alloc__vec__Vec_T__20as_20core__ops__deref__DerefMut___deref_mut__hdb4acd3d24e51925($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($1 + 8 | 0) >> 2] | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
 }
 
 function $_T_20as_20core__fmt__Debug___fmt__h74a63acb10b62cb8($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = HEAP32[$0 >> 2] | 0;
  return $dyn_20core__any__Any_core__marker__Sync_core__marker__Send_20as_20core__fmt__Debug___fmt__h61b233b33e824e98(HEAP32[$0 >> 2] | 0 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, $1 | 0) | 0 | 0;
 }
 
 function $alloc__vec__Vec_T__20as_20core__ops__deref__Deref___deref__h98c8c687a0fd30bc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($1 + 8 | 0) >> 2] | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
 }
 
 function dlmalloc__dlmalloc__Dlmalloc__calloc_must_clear__h262938980343e91e($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return ((HEAPU8[($1 + -4 | 0) >> 0] | 0) & 3 | 0 | 0) != (0 | 0) | 0;
 }
 
 function __rust_alloc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return __rdl_alloc($0 | 0, $1 | 0) | 0 | 0;
 }
 
 function __rust_alloc_zeroed($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return __rdl_alloc_zeroed($0 | 0, $1 | 0) | 0 | 0;
 }
 
 function $_T_20as_20core__fmt__Display___fmt__hc7448b2e1e522f2a($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return $str_20as_20core__fmt__Display___fmt__h577afea2e317d7b6(HEAP32[$0 >> 2] | 0 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, $1 | 0) | 0 | 0;
 }
 
 function core__fmt__ArgumentV1__new__h23271b0788a0f47a($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  HEAP32[($0 + 4 | 0) >> 2] = $2;
  HEAP32[$0 >> 2] = $1;
 }
 
 function __wbindgen_exn_store($0) {
  $0 = $0 | 0;
  HEAP32[(0 + 1066356 | 0) >> 2] = $0;
  HEAP32[(0 + 1066352 | 0) >> 2] = 1;
 }
 
 function $_T_20as_20core__fmt__Display___fmt__h6f6ec460577a7b0d($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return $str_20as_20core__fmt__Display___fmt__h577afea2e317d7b6(HEAP32[$0 >> 2] | 0 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, $1 | 0) | 0 | 0;
 }
 
 function core__num__dec2flt__rawfp__Unpacked__new__h5fa9d5bfbc21692b($0, $1, $1$hi, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0;
  HEAP16[($0 + 8 | 0) >> 1] = $2;
  i64toi32_i32$0 = $1$hi;
  HEAP32[$0 >> 2] = $1;
  HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $_T_20as_20core__fmt__Display___fmt__hed71d2a217ac485c($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return core__fmt__Formatter__pad__h68a31bee2c5b56a5($1 | 0, HEAP32[$0 >> 2] | 0 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) | 0 | 0;
 }
 
 function core__fmt__Formatter__debug_lower_hex__hdc1f7971328c2d95($0) {
  $0 = $0 | 0;
  return ((HEAPU8[$0 >> 0] | 0) & 16 | 0) >>> 4 | 0 | 0;
 }
 
 function core__fmt__Formatter__debug_upper_hex__h85fb22196d72232b($0) {
  $0 = $0 | 0;
  return ((HEAPU8[$0 >> 0] | 0) & 32 | 0) >>> 5 | 0 | 0;
 }
 
 function __rust_dealloc($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  __rdl_dealloc($0 | 0, $1 | 0, $2 | 0);
  return;
 }
 
 function std__sys__wasm__condvar__Condvar__wait__h21f4272fb05ba554($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std__panicking__begin_panic__haa7e8f73e4c17ace(1053468 | 0, 29 | 0, 1053452 | 0);
  abort();
 }
 
 function core__fmt__num__imp___impl_20core__fmt__Display_20for_20u32___fmt__h7aa4e3c5490ccb71($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$1 = 0;
  i64toi32_i32$1 = 0;
  return core__fmt__num__imp__fmt_u64__h529ebc247831d1ee(HEAP32[$0 >> 2] | 0 | 0, i64toi32_i32$1 | 0, 1 | 0, $1 | 0) | 0 | 0;
 }
 
 function core__fmt__num__imp___impl_20core__fmt__Display_20for_20u8___fmt__h26fb732ae7163ee6($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$1 = 0;
  i64toi32_i32$1 = 0;
  return core__fmt__num__imp__fmt_u64__h529ebc247831d1ee(HEAPU8[$0 >> 0] | 0 | 0, i64toi32_i32$1 | 0, 1 | 0, $1 | 0) | 0 | 0;
 }
 
 function core__fmt__builders__DebugSet__entry__h0d8b4f3e8455206b($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  core__fmt__builders__DebugInner__entry__h37ef1f566aaa9690($0 | 0, $1 | 0, $2 | 0);
  return $0 | 0;
 }
 
 function $_mut_20W_20as_20core__fmt__Write___write_str__hb811685833686aff($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return $core__fmt__builders__PadAdapter_20as_20core__fmt__Write___write_str__h09f53eef721a952f(HEAP32[$0 >> 2] | 0 | 0, $1 | 0, $2 | 0) | 0 | 0;
 }
 
 function core__fmt__ArgumentV1__show_usize__h3b2e94afd2a6425d($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$1 = 0;
  i64toi32_i32$1 = 0;
  return core__fmt__num__imp__fmt_u64__h529ebc247831d1ee(HEAP32[$0 >> 2] | 0 | 0, i64toi32_i32$1 | 0, 1 | 0, $1 | 0) | 0 | 0;
 }
 
 function $std__sys_common__poison__PoisonError_T__20as_20core__fmt__Debug___fmt__hdd600044fc8b430e($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return $str_20as_20core__fmt__Debug___fmt__hc8f3c3cee2cdcf2f(1050321 | 0, 25 | 0, $1 | 0) | 0 | 0;
 }
 
 function $_T_20as_20core__fmt__Debug___fmt__h73b32a34ceee0e44($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return $stretch__id__Id_20as_20core__fmt__Debug___fmt__ha6da08d1af5f06a7(HEAP32[$0 >> 2] | 0 | 0, $1 | 0) | 0 | 0;
 }
 
 function $_T_20as_20core__fmt__Debug___fmt__h217c939fc0f2e7c0($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return $stretch__node__Node_20as_20core__fmt__Debug___fmt__h06b00d9928aa004d(HEAP32[$0 >> 2] | 0 | 0, $1 | 0) | 0 | 0;
 }
 
 function wasm_bindgen____rt__throw_null__h3f3e0f774e705662() {
  wasm_bindgen__throw_str__h68bf8c0365a67f0d(1052108 | 0, 27 | 0);
  abort();
 }
 
 function wasm_bindgen____rt__borrow_fail__h1790ad2c17b5cd84() {
  wasm_bindgen__throw_str__h68bf8c0365a67f0d(1052135 | 0, 79 | 0);
  abort();
 }
 
 function wasm_bindgen__throw_str__h68bf8c0365a67f0d($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  __wbindgen_throw($0 | 0, $1 | 0);
  abort();
 }
 
 function $std__sys_common__poison__PoisonError_T__20as_20core__fmt__Debug___fmt__ha5791ce006169b27($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return $str_20as_20core__fmt__Debug___fmt__hc8f3c3cee2cdcf2f(1053280 | 0, 25 | 0, $1 | 0) | 0 | 0;
 }
 
 function std__sys_common__condvar__Condvar__wait__h21d1cd2c1460ca72($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  std__sys__wasm__condvar__Condvar__wait__h21f4272fb05ba554($2 | 0, $2 | 0);
  abort();
 }
 
 function alloc__alloc__handle_alloc_error__h3b845f7dbeb70a83($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  rust_oom($0 | 0, $1 | 0);
  abort();
 }
 
 function $dyn_20core__any__Any_core__marker__Sync_core__marker__Send_20as_20core__fmt__Debug___fmt__h61b233b33e824e98($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return core__fmt__Formatter__pad__h68a31bee2c5b56a5($2 | 0, 1060364 | 0, 3 | 0) | 0 | 0;
 }
 
 function core__panic__Location__file__h20f0051be3f37ec1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $4 = 0;
  i64toi32_i32$2 = $1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $4 = i64toi32_i32$0;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $4;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function $_mut_20W_20as_20core__fmt__Write___write_char__ha13f0d6f25252451($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return core__fmt__Write__write_char__h3c3cb45a8d017382(HEAP32[$0 >> 2] | 0 | 0, $1 | 0) | 0 | 0;
 }
 
 function $str_20as_20core__fmt__Display___fmt__h577afea2e317d7b6($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return core__fmt__Formatter__pad__h68a31bee2c5b56a5($2 | 0, $0 | 0, $1 | 0) | 0 | 0;
 }
 
 function core__num__dec2flt__rawfp__encode_normal___7b_7bclosure_7d_7d__h2190c468b17785a6() {
  core__panicking__panic__h2d0bc53a963fb996(1049780 | 0);
  abort();
 }
 
 function core__alloc__size_align__h98e296708101f83f($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = 20;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 4;
 }
 
 function core__alloc__size_align__hcaa321022272ec68($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = 20;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 4;
 }
 
 function stretch__node__Stretch__new__hfb100b262210e798($0) {
  $0 = $0 | 0;
  stretch__node__Stretch__with_capacity__hb885f11683370977($0 | 0, 16 | 0);
 }
 
 function core__mem__uninitialized__hbd54e3011e5d66f3() {
  core__panicking__panic__h2d0bc53a963fb996(1051948 | 0);
  abort();
 }
 
 function __rdl_dealloc($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  dlmalloc__dlmalloc__Dlmalloc__free__h4acdae787fb6f877(1066412 | 0, $0 | 0);
 }
 
 function rust_begin_unwind($0) {
  $0 = $0 | 0;
  std__panicking__continue_panic_fmt__h1b22eea7f33d6c0a($0 | 0);
  abort();
 }
 
 function alloc__raw_vec__capacity_overflow__he79b434a8a95c170() {
  core__panicking__panic__h2d0bc53a963fb996(1053616 | 0);
  abort();
 }
 
 function core__panic__PanicInfo__location__h26c5e8ad53ff02fa($0) {
  $0 = $0 | 0;
  return $0 + 12 | 0 | 0;
 }
 
 function alloc__raw_vec__RawVec_T_2cA___allocate_in___7b_7bclosure_7d_7d__h9ed5f03df2fd77d8() {
  alloc__raw_vec__capacity_overflow__he79b434a8a95c170();
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___allocate_in___7b_7bclosure_7d_7d__haec0eac1fec16d9a() {
  alloc__raw_vec__capacity_overflow__he79b434a8a95c170();
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___allocate_in___7b_7bclosure_7d_7d__h937b926e7779eecf() {
  alloc__raw_vec__capacity_overflow__he79b434a8a95c170();
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___allocate_in___7b_7bclosure_7d_7d__hb88010749a97cfb4() {
  alloc__raw_vec__capacity_overflow__he79b434a8a95c170();
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___allocate_in___7b_7bclosure_7d_7d__h1c30bdd8bfcd27b5() {
  alloc__raw_vec__capacity_overflow__he79b434a8a95c170();
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___allocate_in___7b_7bclosure_7d_7d__h403cd80cb7561340() {
  alloc__raw_vec__capacity_overflow__he79b434a8a95c170();
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___allocate_in___7b_7bclosure_7d_7d__hafb32822cebac6a9() {
  alloc__raw_vec__capacity_overflow__he79b434a8a95c170();
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___allocate_in___7b_7bclosure_7d_7d__h06ed3ce8315baa7f() {
  alloc__raw_vec__capacity_overflow__he79b434a8a95c170();
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___allocate_in___7b_7bclosure_7d_7d__h716670d27c638f08() {
  alloc__raw_vec__capacity_overflow__he79b434a8a95c170();
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___allocate_in___7b_7bclosure_7d_7d__hf64a3ba7b139c719() {
  alloc__raw_vec__capacity_overflow__he79b434a8a95c170();
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___allocate_in___7b_7bclosure_7d_7d__h464d50e6f9006e39() {
  alloc__raw_vec__capacity_overflow__he79b434a8a95c170();
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___allocate_in___7b_7bclosure_7d_7d__h6a95bd93e3c52f15() {
  alloc__raw_vec__capacity_overflow__he79b434a8a95c170();
  abort();
 }
 
 function alloc__raw_vec__RawVec_T_2cA___ptr__h1142426806da72e9($0) {
  $0 = $0 | 0;
  return HEAP32[$0 >> 2] | 0 | 0;
 }
 
 function lazy_static__lazy__unreachable_unchecked__ha262c168d288a5d3() {
  core__mem__uninitialized__hbd54e3011e5d66f3();
  abort();
 }
 
 function wasm_bindgen____rt__malloc_failure__h8b99e1b66c693391() {
  std__process__abort__h1a199afa58de2c83();
  abort();
 }
 
 function $f32_20as_20core__num__dec2flt__rawfp__RawFloat___from_int__h7099f68af288fb2c($0, $0$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $0$hi;
  return Math_fround(Math_fround(+($0 >>> 0) + 4294967296.0 * +(i64toi32_i32$0 >>> 0)));
 }
 
 function $f32_20as_20core__num__dec2flt__rawfp__RawFloat___to_bits__hbde4fe053412ec46($0) {
  $0 = Math_fround($0);
  return (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0)) | 0;
 }
 
 function $f32_20as_20core__num__dec2flt__rawfp__RawFloat___from_bits__h063701ddf1fd73bc($0) {
  $0 = $0 | 0;
  return Math_fround((wasm2js_scratch_store_i32(0, $0), wasm2js_scratch_load_f32()));
 }
 
 function core__panic__PanicInfo__message__h8ca6efa3eac6fbbd($0) {
  $0 = $0 | 0;
  return HEAP32[($0 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function core__panic__Location__line__h6404351b986a840b($0) {
  $0 = $0 | 0;
  return HEAP32[($0 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function core__panic__Location__column__h0e345957b1c2b87f($0) {
  $0 = $0 | 0;
  return HEAP32[($0 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $stretch__style__AlignItems_20as_20core__default__Default___default__he2f0bc159b19a283() {
  return 4 | 0;
 }
 
 function $stretch__style__AlignSelf_20as_20core__default__Default___default__h4896f43e9af3044e() {
  return 0 | 0;
 }
 
 function $stretch__style__AlignContent_20as_20core__default__Default___default__h4732b9843d132f16() {
  return 3 | 0;
 }
 
 function $stretch__style__Direction_20as_20core__default__Default___default__he78f21adc995056d() {
  return 0 | 0;
 }
 
 function $stretch__style__Display_20as_20core__default__Default___default__h7bdc528855d7621f() {
  return 0 | 0;
 }
 
 function $stretch__style__FlexDirection_20as_20core__default__Default___default__ha5d1535c14035cc7() {
  return 0 | 0;
 }
 
 function $stretch__style__JustifyContent_20as_20core__default__Default___default__h5dd5a7fdab33739e() {
  return 0 | 0;
 }
 
 function $stretch__style__Overflow_20as_20core__default__Default___default__h96b82101d867228f() {
  return 0 | 0;
 }
 
 function $stretch__style__PositionType_20as_20core__default__Default___default__h9964112a2b906cf4() {
  return 0 | 0;
 }
 
 function $stretch__style__FlexWrap_20as_20core__default__Default___default__h838c357d89358ee1() {
  return 0 | 0;
 }
 
 function $T_20as_20core__any__Any___type_id__h3396fc80ff4cf45f($0) {
  $0 = $0 | 0;
  i64toi32_i32$HIGH_BITS = 1757840133;
  return -801715452 | 0;
 }
 
 function $T_20as_20core__any__Any___type_id__hda1f0529a3d7c370($0) {
  $0 = $0 | 0;
  i64toi32_i32$HIGH_BITS = 286299353;
  return 1890621284 | 0;
 }
 
 function $T_20as_20core__convert__From_T____from__hc75af0282ff5d0c6($0) {
  $0 = $0 | 0;
  return $0 | 0;
 }
 
 function $T_20as_20core__convert__Into_U____into__h82cecd98d3867363($0) {
  $0 = $0 | 0;
  return $0 | 0;
 }
 
 function $T_20as_20wasm_bindgen__convert__traits__ReturnWasmAbi___return_abi__h2cd566ebd587e511($0) {
  $0 = $0 | 0;
  return $0 | 0;
 }
 
 function $T_20as_20wasm_bindgen__convert__traits__ReturnWasmAbi___return_abi__habde5efc1123c080($0) {
  $0 = $0 | 0;
  return $0 | 0;
 }
 
 function $T_20as_20core__any__Any___type_id__h37f4c977fa5f134b($0) {
  $0 = $0 | 0;
  i64toi32_i32$HIGH_BITS = 286299353;
  return 1890621284 | 0;
 }
 
 function $T_20as_20core__any__Any___type_id__h5a5e59c100317b95($0) {
  $0 = $0 | 0;
  i64toi32_i32$HIGH_BITS = -456898414;
  return 616890957 | 0;
 }
 
 function $T_20as_20core__any__Any___type_id__h6fe3f59eb2ccfbad($0) {
  $0 = $0 | 0;
  i64toi32_i32$HIGH_BITS = -221651336;
  return -1700508087 | 0;
 }
 
 function $T_20as_20core__any__Any___type_id__hba1ac603d0652626($0) {
  $0 = $0 | 0;
  i64toi32_i32$HIGH_BITS = 1757840133;
  return -801715452 | 0;
 }
 
 function std__process__abort__h1a199afa58de2c83() {
  abort();
 }
 
 function std__sys_common__mutex__Mutex__new__h149e82d354c09c43() {
  return 0 | 0;
 }
 
 function std__sys_common__poison__Flag__new__h94e7596f33ded494() {
  return 0 | 0;
 }
 
 function __rust_start_panic($0) {
  $0 = $0 | 0;
  abort();
 }
 
 function dlmalloc__dlmalloc__Dlmalloc__malloc_alignment__h676c9a04aa6da017($0) {
  $0 = $0 | 0;
  return 8 | 0;
 }
 
 function core__num__dec2flt__pfe_empty__h086deb8fdff83edd() {
  return 0 | 0;
 }
 
 function core__num__dec2flt__pfe_invalid__h9f0729b42d956f16() {
  return 1 | 0;
 }
 
 function $T_20as_20core__any__Any___type_id__he07eec883ff8c072($0) {
  $0 = $0 | 0;
  i64toi32_i32$HIGH_BITS = -456898414;
  return 616890957 | 0;
 }
 
 function core__ptr__real_drop_in_place__he209f2a42eb71450($0) {
  $0 = $0 | 0;
 }
 
 function core__ptr__real_drop_in_place__h791dc228e39c18f3($0) {
  $0 = $0 | 0;
 }
 
 function $T_20as_20core__convert__From_T____from__h197a9b5075e87dfb() {
  
 }
 
 function core__ptr__real_drop_in_place__h0230bbbc23f73fdb($0) {
  $0 = $0 | 0;
 }
 
 function core__ptr__real_drop_in_place__h0a6375c9c859627f($0) {
  $0 = $0 | 0;
 }
 
 function core__ptr__real_drop_in_place__h0bb3d2ce853363ea($0) {
  $0 = $0 | 0;
 }
 
 function $T_20as_20core__convert__From_T____from__h3208874747cb8368() {
  
 }
 
 function core__ptr__real_drop_in_place__h83dd96c9c2748522($0) {
  $0 = $0 | 0;
 }
 
 function $alloc__vec__Vec_T__20as_20core__ops__drop__Drop___drop__h4153fb8197ebf089($0) {
  $0 = $0 | 0;
 }
 
 function $alloc__vec__Vec_T__20as_20core__ops__drop__Drop___drop__ha7479f748bca561f($0) {
  $0 = $0 | 0;
 }
 
 function core__ptr__real_drop_in_place__h6cfd80040be04970($0) {
  $0 = $0 | 0;
 }
 
 function core__ptr__real_drop_in_place__h3ecde8d59c6b71f3($0) {
  $0 = $0 | 0;
 }
 
 function core__ptr__real_drop_in_place__h72b59f3c7add01cf($0) {
  $0 = $0 | 0;
 }
 
 function $T_20as_20wasm_bindgen__convert__traits__ReturnWasmAbi___return_abi__h2e101204225ac678() {
  
 }
 
 function $alloc__vec__Vec_T__20as_20core__ops__drop__Drop___drop__he16a4be602db4786($0) {
  $0 = $0 | 0;
 }
 
 function core__ptr__real_drop_in_place__h036e4541867e9477($0) {
  $0 = $0 | 0;
 }
 
 function core__ptr__real_drop_in_place__h12631544dff728ba($0) {
  $0 = $0 | 0;
 }
 
 function $std__sys_common__thread_local__Key_20as_20core__ops__drop__Drop___drop__h844ecc215ebb4494($0) {
  $0 = $0 | 0;
 }
 
 function std__alloc__default_alloc_error_hook__h90fd00710b001a16($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
 }
 
 function core__ptr__real_drop_in_place__h18dc9daea1e66b84($0) {
  $0 = $0 | 0;
 }
 
 function core__ptr__real_drop_in_place__h1f25fba0474631ff($0) {
  $0 = $0 | 0;
 }
 
 function $core__ffi__VaListImpl_20as_20core__ops__drop__Drop___drop__hbb6297408fe27841($0) {
  $0 = $0 | 0;
 }
 
 function legalfunc$wasm2js_scratch_store_i64($0, $0$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8 = 0, $2 = 0, i64toi32_i32$2 = 0;
  i64toi32_i32$0 = $0$hi;
  $2 = $0;
  i64toi32_i32$2 = $0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $8 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $8 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  legalimport$wasm2js_scratch_store_i64($2 | 0, $8 | 0);
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21 = 0, $22 = 0, var$6 = 0, $24 = 0, $17 = 0, $18 = 0, $23 = 0, $29 = 0, $45 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17 = Math_imul(var$4, var$5);
  $18 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23 = $17 + Math_imul($18, $21) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29 = $23 + Math_imul($22, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45 = $29 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, var$8$hi = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, var$7$hi = 0, $49 = 0, $63$hi = 0, $65 = 0, $65$hi = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140 = 0, $140$hi = 0, $142$hi = 0, $144 = 0, $144$hi = 0, $151 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $37 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $37 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $37;
             if (var$2) {
              block : {
               i64toi32_i32$1 = var$1$hi;
               var$3 = var$1;
               if (!var$3) {
                break label$11
               }
               i64toi32_i32$1 = var$1$hi;
               i64toi32_i32$0 = var$1;
               i64toi32_i32$2 = 0;
               i64toi32_i32$3 = 32;
               i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
               if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $38 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               } else {
                i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                $38 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
               }
               var$4 = $38;
               if (!var$4) {
                break label$9
               }
               var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
               if (var$2 >>> 0 <= 31 >>> 0) {
                break label$8
               }
               break label$2;
              }
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = var$1$hi;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             legalfunc$wasm2js_scratch_store_i64(var$0 - Math_imul(var$2, var$3) | 0 | 0, i64toi32_i32$1 | 0);
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $39 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $39 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $39;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $40 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $40 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $40;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            legalfunc$wasm2js_scratch_store_i64(i64toi32_i32$3 | i64toi32_i32$0 | 0 | 0, i64toi32_i32$1 | 0);
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $41 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $41 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        legalfunc$wasm2js_scratch_store_i64($41 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      legalfunc$wasm2js_scratch_store_i64(var$4 & var$0 | 0 | 0, i64toi32_i32$2 | 0);
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $42 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $42 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $42;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $43 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $43 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $43;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $44 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $44 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $44;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      block3 : {
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$1 = var$1;
       i64toi32_i32$3 = -1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       var$8 = i64toi32_i32$4;
       var$8$hi = i64toi32_i32$5;
       label$15 : while (1) {
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$2 = var$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         $45 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
         $45 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        }
        $140 = $45;
        $140$hi = i64toi32_i32$1;
        i64toi32_i32$1 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = 0;
         $46 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
         $46 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
        }
        $142$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $140$hi;
        i64toi32_i32$1 = $140;
        i64toi32_i32$5 = $142$hi;
        i64toi32_i32$0 = $46;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
        var$5$hi = i64toi32_i32$5;
        $144 = var$5;
        $144$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$2 = var$8;
        i64toi32_i32$1 = var$5$hi;
        i64toi32_i32$0 = var$5;
        i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$5 = i64toi32_i32$3;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
         $47 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
         $47 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
        }
        var$6 = $47;
        var$6$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$1$hi;
        i64toi32_i32$2 = var$6$hi;
        i64toi32_i32$4 = var$6;
        i64toi32_i32$5 = var$1$hi;
        i64toi32_i32$0 = var$1;
        i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
        $151 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
        $151$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $144$hi;
        i64toi32_i32$2 = $144;
        i64toi32_i32$4 = $151$hi;
        i64toi32_i32$0 = $151;
        i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
        var$5 = i64toi32_i32$1;
        var$5$hi = i64toi32_i32$3;
        i64toi32_i32$3 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
         $48 = 0;
        } else {
         i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $48 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        }
        $154$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$7$hi;
        i64toi32_i32$2 = $154$hi;
        i64toi32_i32$3 = $48;
        i64toi32_i32$5 = var$7$hi;
        i64toi32_i32$0 = var$7;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
        var$0$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$6$hi;
        i64toi32_i32$2 = var$6;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
        var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
        var$6$hi = i64toi32_i32$3;
        var$7 = var$6;
        var$7$hi = i64toi32_i32$3;
        var$2 = var$2 + -1 | 0;
        if (var$2) {
         continue label$15
        }
        break label$15;
       };
       break label$13;
      }
     }
    }
    i64toi32_i32$3 = var$5$hi;
    legalfunc$wasm2js_scratch_store_i64(var$5 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $49 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $49 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $49;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   legalfunc$wasm2js_scratch_store_i64(var$0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_rotl_i32(var$0, var$1) {
  var$0 = var$0 | 0;
  var$1 = var$1 | 0;
  var var$2 = 0;
  var$2 = var$1 & 31 | 0;
  var$1 = (0 - var$1 | 0) & 31 | 0;
  return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
 }
 
 function __wasm_rotl_i64(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, var$2$hi = 0, var$2 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $6$hi = 0, $8$hi = 0, $10 = 0, $10$hi = 0, $15$hi = 0, $17$hi = 0, $19$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$2 = var$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  var$2 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  var$2$hi = i64toi32_i32$1;
  i64toi32_i32$1 = -1;
  i64toi32_i32$0 = -1;
  i64toi32_i32$2 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $19 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $19 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6$hi = i64toi32_i32$2;
  i64toi32_i32$2 = var$0$hi;
  i64toi32_i32$2 = $6$hi;
  i64toi32_i32$1 = $19;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $8$hi = i64toi32_i32$0;
  i64toi32_i32$0 = var$2$hi;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $10 = $20;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = var$1$hi;
  i64toi32_i32$3 = var$1;
  i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
  i64toi32_i32$5 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
  var$1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  var$1$hi = i64toi32_i32$0;
  i64toi32_i32$0 = -1;
  i64toi32_i32$5 = -1;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$3 = var$1;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
   $21 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
   $21 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
  }
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$1 = $15$hi;
  i64toi32_i32$0 = $21;
  i64toi32_i32$5 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
  $17$hi = i64toi32_i32$5;
  i64toi32_i32$5 = var$1$hi;
  i64toi32_i32$5 = $17$hi;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$3 = var$1;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $22 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
   $22 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
  }
  $19$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $10$hi;
  i64toi32_i32$5 = $10;
  i64toi32_i32$1 = $19$hi;
  i64toi32_i32$3 = $22;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$5 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$5 | 0;
 }
 
 var FUNCTION_TABLE = [null, core__ptr__real_drop_in_place__ha80f016764af4bc9, stretch_layout__Node__set_measure___7b_7bclosure_7d_7d__h217e1cfe54b26aef, core__ops__function__FnOnce__call_once_7b_7bvtable_shim_7d_7d__h8e5a033e8e35a861, core__ptr__real_drop_in_place__he209f2a42eb71450, $T_20as_20core__any__Any___type_id__hda1f0529a3d7c370, core__fmt__num__imp___impl_20core__fmt__Display_20for_20i16___fmt__h5e51fde45daf1962, $_T_20as_20core__fmt__Display___fmt__hc7448b2e1e522f2a, $core__cell__BorrowMutError_20as_20core__fmt__Debug___fmt__h048798b77d59bbb7, $core__cell__BorrowError_20as_20core__fmt__Debug___fmt__h93a0698d28d7fdbe, $stretch__Error_20as_20core__fmt__Debug___fmt__hd5e8c52e4078bfee, core__ptr__real_drop_in_place__h791dc228e39c18f3, std__sync__once__Once__call_once___7b_7bclosure_7d_7d__h35251447e289969d, core__ops__function__FnOnce__call_once_7b_7bvtable_shim_7d_7d__hb7c71f2c12c9b4fc, $std__thread__local__AccessError_20as_20core__fmt__Debug___fmt__h18a95f5b7790d1ed, $std__sys_common__poison__PoisonError_T__20as_20core__fmt__Debug___fmt__hdd600044fc8b430e, core__ptr__real_drop_in_place__h0230bbbc23f73fdb, $std__panicking__begin_panic__PanicPayload_A__20as_20core__panic__BoxMeUp___box_me_up__ha6d31514980a3011, $std__panicking__begin_panic__PanicPayload_A__20as_20core__panic__BoxMeUp___get__h0a516cf5f4a51557, core__ptr__real_drop_in_place__h0bb3d2ce853363ea, core__ptr__real_drop_in_place__h0a6375c9c859627f, $T_20as_20core__any__Any___type_id__h3396fc80ff4cf45f, $core__fmt__Arguments_20as_20core__fmt__Display___fmt__hc018daa18b15c7f0, $_T_20as_20core__fmt__Debug___fmt__h7247086aec5d334f, core__ptr__real_drop_in_place__h83dd96c9c2748522, $_T_20as_20core__fmt__Debug___fmt__h5497d5b9464b9cc4, std__collections__hash__map__RandomState__new__KEYS____getit__hace98a9e78dbc0fb, core__ptr__real_drop_in_place__h6cfd80040be04970, $_T_20as_20core__fmt__Debug___fmt__h73b32a34ceee0e44, core__ptr__real_drop_in_place__h72b59f3c7add01cf, $_T_20as_20core__fmt__Debug___fmt__h74a63acb10b62cb8, core__ptr__real_drop_in_place__h3ecde8d59c6b71f3, $_T_20as_20core__fmt__Debug___fmt__h217c939fc0f2e7c0, wasm_bindgen__convert__closures__invoke1_mut__h5fd464b913d2cb1b, wasm_bindgen__convert__closures__invoke2_mut__he1db798f43a4f49a, wasm_bindgen__convert__closures__invoke2_mut__h39a44678f402648e, wasm_bindgen__convert__closures__invoke3_mut__h9ddcdc506a2a48bb, wasm_bindgen__convert__closures__invoke3_mut__hf8c88d37d8767e93, wasm_bindgen__convert__closures__invoke3_mut__h0396848a953c5867, wasm_bindgen__convert__closures__invoke3_mut__h5467fa067dfc1f31, wasm_bindgen__convert__closures__invoke3_mut__h275cc9cfc6ce7d93, wasm_bindgen__convert__closures__invoke3_mut__he6024989ac980a4d, wasm_bindgen__convert__closures__invoke3_mut__h2ec2cc86d20a42c3, wasm_bindgen__convert__closures__invoke3_mut__h0292682fbe5dc41c, wasm_bindgen__convert__closures__invoke3_mut__h73f64ef77d2c50dd, wasm_bindgen__convert__closures__invoke3_mut__h298e6d31cbf27966, wasm_bindgen__convert__closures__invoke3_mut__he9f5ad844f49f7f0, wasm_bindgen__convert__closures__invoke3_mut__h61ec86bed10f2427, wasm_bindgen__convert__closures__invoke3_mut__h7cb4ddd9eab01bb2, wasm_bindgen__convert__closures__invoke3_mut__he318bc4d52b27969, wasm_bindgen__convert__closures__invoke4_mut__hc81eb72865ab4c30, wasm_bindgen__anyref__HEAP_SLAB____getit__hb7faca09688634b3, $_T_20as_20core__fmt__Display___fmt__h6f6ec460577a7b0d, $std__ffi__c_str__NulError_20as_20core__fmt__Debug___fmt__hf4efecf81595b660, $std__sys_common__poison__PoisonError_T__20as_20core__fmt__Debug___fmt__ha5791ce006169b27, $_T_20as_20core__fmt__Debug___fmt__h067baa27046e12ea, std__alloc__default_alloc_error_hook__h90fd00710b001a16, $std__sys_common__thread_local__Key_20as_20core__ops__drop__Drop___drop__h844ecc215ebb4494, $_mut_20W_20as_20core__fmt__Write___write_str__hbf7de4ae56983baf, $_mut_20W_20as_20core__fmt__Write___write_char__h1c21fdd05686cba7, $_mut_20W_20as_20core__fmt__Write___write_fmt__h5bb17cb408313c18, $_T_20as_20core__fmt__Debug___fmt__haf557208929af496, core__ptr__real_drop_in_place__h036e4541867e9477, $T_20as_20core__any__Any___type_id__h5a5e59c100317b95, core__ptr__real_drop_in_place__h9607bab7a262d57f, $std__panicking__continue_panic_fmt__PanicPayload_20as_20core__panic__BoxMeUp___box_me_up__h8011f8530b5a8041, $std__panicking__continue_panic_fmt__PanicPayload_20as_20core__panic__BoxMeUp___get__h10b76064b0aa5d4d, core__ptr__real_drop_in_place__h01c937f386cfaf38, $T_20as_20core__any__Any___type_id__h6fe3f59eb2ccfbad, core__ptr__real_drop_in_place__h12631544dff728ba, $std__panicking__begin_panic__PanicPayload_A__20as_20core__panic__BoxMeUp___box_me_up__h220d30503ac86e8b, $std__panicking__begin_panic__PanicPayload_A__20as_20core__panic__BoxMeUp___get__h9a801acfcc17125f, $T_20as_20core__any__Any___type_id__h37f4c977fa5f134b, $T_20as_20core__any__Any___type_id__hba1ac603d0652626, $_T_20as_20core__fmt__Debug___fmt__h2ec535d2865cd60c, core__fmt__num__imp___impl_20core__fmt__Display_20for_20u32___fmt__h7aa4e3c5490ccb71, $_T_20as_20core__fmt__Display___fmt__hed71d2a217ac485c, $core__ops__range__Range_Idx__20as_20core__fmt__Debug___fmt__h6b10d5f1af7ade3c, $char_20as_20core__fmt__Debug___fmt__h8724f2c9877f6e71, core__fmt__ArgumentV1__show_usize__h3b2e94afd2a6425d, core__ptr__real_drop_in_place__h1f25fba0474631ff, $T_20as_20core__any__Any___type_id__he07eec883ff8c072, core__ptr__real_drop_in_place__h18dc9daea1e66b84, $core__fmt__builders__PadAdapter_20as_20core__fmt__Write___write_str__h09f53eef721a952f, core__fmt__Write__write_char__h3c3cb45a8d017382, core__fmt__Write__write_fmt__ha2ab03f5dc69baa1, $core__ffi__VaListImpl_20as_20core__ops__drop__Drop___drop__hbb6297408fe27841, $_mut_20W_20as_20core__fmt__Write___write_str__hb811685833686aff, $_mut_20W_20as_20core__fmt__Write___write_char__ha13f0d6f25252451, $_mut_20W_20as_20core__fmt__Write___write_fmt__h56aff2de7507f7ee];
 function __wasm_memory_grow(pagesToAdd) {
  pagesToAdd = pagesToAdd | 0;
  var oldPages = __wasm_memory_size() | 0;
  var newPages = oldPages + pagesToAdd | 0;
  if ((oldPages < newPages) && (newPages < 65536)) {
   var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
   var newHEAP8 = new global.Int8Array(newBuffer);
   newHEAP8.set(HEAP8);
   HEAP8 = newHEAP8;
   HEAP8 = new global.Int8Array(newBuffer);
   HEAP16 = new global.Int16Array(newBuffer);
   HEAP32 = new global.Int32Array(newBuffer);
   HEAPU8 = new global.Uint8Array(newBuffer);
   HEAPU16 = new global.Uint16Array(newBuffer);
   HEAPU32 = new global.Uint32Array(newBuffer);
   HEAPF32 = new global.Float32Array(newBuffer);
   HEAPF64 = new global.Float64Array(newBuffer);
   buffer = newBuffer;
  }
  return oldPages;
 }
 
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 return {
  "memory": Object.create(Object.prototype, {
   "grow": {
    "value": __wasm_memory_grow
   }, 
   "buffer": {
    "get": function () {
     return buffer;
    }
    
   }
  }), 
  "__wbg_layout_free": __wbg_layout_free, 
  "__wbg_get_layout_width": __wbg_get_layout_width, 
  "__wbg_get_layout_height": __wbg_get_layout_height, 
  "__wbg_get_layout_x": __wbg_get_layout_x, 
  "__wbg_get_layout_y": __wbg_get_layout_y, 
  "__wbg_get_layout_childCount": __wbg_get_layout_childCount, 
  "layout_child": layout_child, 
  "__wbg_allocator_free": __wbg_allocator_free, 
  "allocator_new": allocator_new, 
  "__wbg_node_free": __wbg_node_free, 
  "__wbg_get_node_childCount": __wbg_get_node_childCount, 
  "node_new": node_new, 
  "node_setMeasure": node_setMeasure, 
  "node_addChild": node_addChild, 
  "node_removeChild": node_removeChild, 
  "node_replaceChildAtIndex": node_replaceChildAtIndex, 
  "node_removeChildAtIndex": node_removeChildAtIndex, 
  "node_getStyle": node_getStyle, 
  "node_setStyle": node_setStyle, 
  "node_markDirty": node_markDirty, 
  "node_isDirty": node_isDirty, 
  "node_computeLayout": node_computeLayout, 
  "__wbindgen_exn_store": __wbindgen_exn_store, 
  "__wbindgen_malloc": __wbindgen_malloc, 
  "__wbindgen_realloc": __wbindgen_realloc
 };
}

var memasmFunc = new ArrayBuffer(1114112);
var assignasmFunc = (
    function(mem) {
      var _mem = new Uint8Array(mem);
      return function(offset, s) {
        var bytes;
        if (typeof Buffer === 'undefined') {
          bytes = atob(s);
          for (var i = 0; i < bytes.length; i++)
            _mem[offset + i] = bytes.charCodeAt(i);
        } else {
          bytes = Buffer.from(s, 'base64');
          for (var i = 0; i < bytes.length; i++)
            _mem[offset + i] = bytes[i];
        }
      }
    }
  )(memasmFunc);
assignasmFunc(1048576, "");
assignasmFunc
assignasmFunc(1066880, "AQAAAAAAAAA=");
var retasmFunc = asmFunc({Math,Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,NaN,Infinity}, {abort:function() { throw new Error('abort'); },__wbindgen_object_drop_ref,__wbindgen_string_new,__wbindgen_object_clone_ref,__wbindgen_number_new,__wbg_call_d86117a976521458,__wbg_get_003e1b80a63de7c5,__wbg_has_4c6784338d6c97e4,__wbindgen_number_get,__wbindgen_string_get,__wbindgen_throw},memasmFunc);
export var memory = retasmFunc.memory;
export var __wbg_layout_free = retasmFunc.__wbg_layout_free;
export var __wbg_get_layout_width = retasmFunc.__wbg_get_layout_width;
export var __wbg_get_layout_height = retasmFunc.__wbg_get_layout_height;
export var __wbg_get_layout_x = retasmFunc.__wbg_get_layout_x;
export var __wbg_get_layout_y = retasmFunc.__wbg_get_layout_y;
export var __wbg_get_layout_childCount = retasmFunc.__wbg_get_layout_childCount;
export var layout_child = retasmFunc.layout_child;
export var __wbg_allocator_free = retasmFunc.__wbg_allocator_free;
export var allocator_new = retasmFunc.allocator_new;
export var __wbg_node_free = retasmFunc.__wbg_node_free;
export var __wbg_get_node_childCount = retasmFunc.__wbg_get_node_childCount;
export var node_new = retasmFunc.node_new;
export var node_setMeasure = retasmFunc.node_setMeasure;
export var node_addChild = retasmFunc.node_addChild;
export var node_removeChild = retasmFunc.node_removeChild;
export var node_replaceChildAtIndex = retasmFunc.node_replaceChildAtIndex;
export var node_removeChildAtIndex = retasmFunc.node_removeChildAtIndex;
export var node_getStyle = retasmFunc.node_getStyle;
export var node_setStyle = retasmFunc.node_setStyle;
export var node_markDirty = retasmFunc.node_markDirty;
export var node_isDirty = retasmFunc.node_isDirty;
export var node_computeLayout = retasmFunc.node_computeLayout;
export var __wbindgen_exn_store = retasmFunc.__wbindgen_exn_store;
export var __wbindgen_malloc = retasmFunc.__wbindgen_malloc;
export var __wbindgen_realloc = retasmFunc.__wbindgen_realloc;